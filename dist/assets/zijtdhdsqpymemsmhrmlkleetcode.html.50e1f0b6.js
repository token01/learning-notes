import{_ as B}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as h,c as i,a as e,d as E,b as r,f as t,r as n}from"./app.164de6c4.js";const l={},d=e("p",null,"球友们好，今天给大家分享一份牛客上的优质面经，收录在《Java 面试指南》的优质面经模块下，包括一面+二面+三面+HR 面，同时，把答案贴出来供大家参考，目标是大厂的球友们注意了，知道重心在哪里。",-1),A=e("h2",{id:"一面-1h",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一面-1h","aria-hidden":"true"},"#"),E(),e("a",{href:"#%E4%B8%80%E9%9D%A2%EF%BD%9C1h"}),E("一面｜1h")],-1),o=t("<li>自我介绍</li><li>select、poll、epoll？</li><li>epoll的两种触发模式？</li><li>TCP三次握手过程，有什么状态，状态机如何变化？</li><li>TCP握手的目的有哪些？</li><li>什么是 TIME_WAIT 状态，为什么需要 TIME_WAIT 状态？时间是多久，为什么？</li><li>TCP 和 UDP 的区别？</li><li>TCP 拥塞控制？慢启动的时候窗口在什么情况下会增长？为什么会呈指数增长？</li><li>Linux 中一个进程的虚拟内存分布长什么样？内核空间+用户空间（6 种不同的内存段）。</li><li>为什么要用虚拟内存？</li><li>虚拟地址映射为物理地址的过程？</li><li>进程和线程的区别？哪些资源是线程共享的，哪些是线程独占的？</li><li>使用线程有哪些好处？</li><li>使用线程有哪些坏处？</li><li>进程有哪些同步的机制？</li><li>协程的实现原理？无栈协程和有栈协程？独立栈和共享栈？</li><li>什么是稳定排序？</li><li>聊项目，难点，怎么解决？</li>",18),s={href:"https://leetcode.cn/problems/rotate-array/",target:"_blank",rel:"noopener noreferrer"},c=t('<p><strong>思路：三次reverse，reverse 前 k 位，reverse 后 n - k 位，reverse 整个数组</strong></p><p><strong>小插曲：</strong> 一开始使用的是库中的 reverse 函数，写完后面试官要求自己实现这个 reverse。由于当时时间不多了又加上紧张，写完后答案一直有错，也没找到错在哪。面试结束之后，没有马上退出会议，想把这个错找出来。结果过了两分钟，面试官又回来了，说是下一个面试的还没到，就回来看看我。然后在他眼下把代码改对了。也算是有惊无险吧。</p><h2 id="二面-1h" tabindex="-1"><a class="header-anchor" href="#二面-1h" aria-hidden="true">#</a> <a href="#%E4%BA%8C%E9%9D%A2%EF%BD%9C1h"></a>二面｜1h</h2><ol><li>自我介绍</li><li>进程有哪些状态？</li><li>进程的调度算法？</li><li>进程间的通信方式？</li><li>进程上下文切换做了哪些事？流程是怎么样的？</li><li>进程在哪些场景会进行上下文切换？</li><li>上下文切换为什么资源消耗会比较高？消耗在什么地方？</li></ol><p><strong>虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</strong></p><ol start="8"><li>上面哪个资源的切换效率更低？</li><li>为什么虚拟内存的切换效率更低？</li></ol><p><strong>因为切换后 TLB 无法被命中</strong></p><ol start="10"><li>常见的排序算法？</li><li>堆排序原理？</li><li>归并排序原理？</li><li>LRU缓存？为什么要链表？为什么要用哈希表？为什么要用双向链表？既然哈希表中已经存了 key，为什么链表中还要存 key 和 val 呢，只存 val 不就行吗？</li><li>linux 命令，如何查看主机 CPU 核数？如何查看内存还剩多少？</li><li>如何查看哪个进程正在监听 80 端口？</li><li>netstat -n 是什么意思？-a 是什么意思？-p 是什么意思？</li><li>TCP 为什么要三次握手和四次挥手？</li><li>为什么 TCP 第二次握手的 SYN 和 ACK 要合并成一次？</li><li>SYN Flood 的原理？有哪些防范的方法？</li></ol><p><strong>上面三个问题问了十多分钟。看起来简单，但面试官会顺着你的思路一直往下问，问得特别深，差点给问崩了。</strong></p><p><strong>下面问了几个 C++ 的问题。字节不是用 go 吗？</strong></p>',10),p={start:"20"},F=e("li",null,"智能指针有哪些？主要解决什么问题？",-1),C=e("li",null,"指针和引用的区别？为什么要引入引用？好处有哪些？",-1),_=e("li",null,"重写和重载的区别？",-1),f={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-gong-gong-zu-xian-by-pedan-00fs/",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"三面-1h",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#三面-1h","aria-hidden":"true"},"#"),E(),e("a",{href:"#%E4%B8%89%E9%9D%A2%EF%BD%9C1h"}),E("三面｜1h")],-1),u=e("ol",null,[e("li",null,"自我介绍"),e("li",null,"聊项目"),e("li",null,"问了一会儿八股，具体问题忘了。"),e("li",null,"如果让你设计一个视频网站，所有用户都可以上传自己的视频，也可以观看别人的视频。你作为后端要怎么设计？用户目录怎么设计？")],-1),m=e("blockquote",null,[e("p",null,"这个问题聊了20分钟。因为没做过相关的东西，感觉答得一般。刚开始答了很多个方面，感觉面试官都不太满意。但是面试官会一直引导你回答。最后反问的时候面试官也说这个问题没有固定的答案，这个问题涉及的方面非常多，从接入到怎么去存储以及怎么去实现一些具体的逻辑功能，这些方面很难一下子就能想出一个很全面方案。问这个问题主要还是想看看我的一个思考的过程。")],-1),g={start:"5"},D={href:"https://leetcode.cn/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fan-zhuan-lian-biao-by-irf3/",target:"_blank",rel:"noopener noreferrer"},x=t('<h2 id="hr-面-12min" tabindex="-1"><a class="header-anchor" href="#hr-面-12min" aria-hidden="true">#</a> <a href="#hr-%E9%9D%A2%EF%BD%9C12min"></a>HR 面｜12min</h2><ol><li>自我介绍</li><li>家在哪？</li><li>为什么选择这个专业？</li><li>有没有校外实习的经历？</li><li>研究生期间的成绩？</li><li>参加过什么计算机相关的比赛？在团队中担任什么角色？</li><li>为什么选择我们这个部门？</li><li>对我们的部门有没有什么了解？</li></ol><p>大概说了一下，然后 HR 给我介绍了一下这个部门。</p><ol start="9"><li>想去什么城市？</li><li>有没有考公的想法？</li><li>职业规划是怎么样的？</li><li>有没有在面其他的公司？BAT 都有投吗？</li><li>能不能提前来实习？</li><li>反问：后续流程是什么？</li></ol><blockquote><p>内部讨论后，过几天会给答复。如果没过就等其他的部门来捞，过了的话会先发意向书，十月份左右谈薪资。有可能还有加面的情况（忘记问这个加面是好还是不好了，网上有的说会刷人，有的说是看看你能不能拿更高的等级）。</p></blockquote><hr><p>以下是某网友针对这些问题的个人解答，二哥做了简单的整理和归纳，有问题可以交流。</p><h2 id="一面-1h-1" tabindex="-1"><a class="header-anchor" href="#一面-1h-1" aria-hidden="true">#</a> <a href="#%E4%B8%80%E9%9D%A2%EF%BD%9C1h"></a>一面｜1h</h2><h3 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> <a href="#1-%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D"></a>1. 自我介绍</h3><h3 id="_2-select、poll、epoll" tabindex="-1"><a class="header-anchor" href="#_2-select、poll、epoll" aria-hidden="true">#</a> <a href="#2-select%E3%80%81poll%E3%80%81epoll%EF%BC%9F"></a>2. select、poll、epoll？</h3><p>这三个都是多路复用方面的技术，而多路复用指的是多个 socket 复用同一个线程。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-84907012-bae0-49bd-ae24-1ffe842012f0.png" alt="" loading="lazy"></p><h3 id="_3-epoll的两种触发模式" tabindex="-1"><a class="header-anchor" href="#_3-epoll的两种触发模式" aria-hidden="true">#</a> <a href="#3-epoll%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%BC%8F%EF%BC%9F"></a>3. epoll的两种触发模式？</h3><ul><li>level 模式：该模式就是只要还有没有处理的事件就会一直通知</li><li>edge 模式：该模式是当状态发生变化时才会通知</li></ul><h3 id="_4-tcp三次握手过程-有什么状态-状态机如何变化" tabindex="-1"><a class="header-anchor" href="#_4-tcp三次握手过程-有什么状态-状态机如何变化" aria-hidden="true">#</a> <a href="#4-tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B%EF%BC%8C%E6%9C%89%E4%BB%80%E4%B9%88%E7%8A%B6%E6%80%81%EF%BC%8C%E7%8A%B6%E6%80%81%E6%9C%BA%E5%A6%82%E4%BD%95%E5%8F%98%E5%8C%96%EF%BC%9F"></a>4. TCP三次握手过程，有什么状态，状态机如何变化？</h3><p>客户端主动向服务端握手：</p><p>一开始客户端为 <strong>CLOSED</strong> 状态，服务端为 <strong>LISTEN</strong> 状态</p><p>首先客户端发送 SYN 报文，将 seq 置为 x，此时客户端状态转为 <strong>SYN_SENT</strong></p><p>服务端收到后 SYN 抱文后返回 SYN+ACK 报文，将 seq 置为 y，ack 置为 x+1，此时服务器状态转为 <strong>SYN_RCVD</strong></p><p>客户端收到 SYN+ACK报文，此时客户端已经知道双方的收发都没有问题，但为了让服务端知道故返回 ACK 报文，将 ack 置为 y+1，此时客户端状态为 <strong>ESTABLISHED，并可以发送数据</strong></p><p>服务端收到 ACK报文，此时服务端已经知道双方的收发都没有问题，此时服务端状态为 <strong>ESTABLISHED</strong></p><p>至此连接建立成功</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-f48e28b4-654d-4dc2-8bd3-91f30719f717.png" alt="" loading="lazy"></p><h3 id="_5-tcp握手的目的有哪些" tabindex="-1"><a class="header-anchor" href="#_5-tcp握手的目的有哪些" aria-hidden="true">#</a> <a href="#5-tcp%E6%8F%A1%E6%89%8B%E7%9A%84%E7%9B%AE%E7%9A%84%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"></a>5. TCP握手的目的有哪些？</h3><p>确认双方的收发能力都没有问题，初始化序列号，确认窗口大小即 MSS 等信息</p><h3 id="_6-什么是-time-wait-状态-为什么需要-time-wait-状态-时间是多久-为什么" tabindex="-1"><a class="header-anchor" href="#_6-什么是-time-wait-状态-为什么需要-time-wait-状态-时间是多久-为什么" aria-hidden="true">#</a> <a href="#6-%E4%BB%80%E4%B9%88%E6%98%AF-timewait-%E7%8A%B6%E6%80%81%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-timewait-%E7%8A%B6%E6%80%81%EF%BC%9F%E6%97%B6%E9%97%B4%E6%98%AF%E5%A4%9A%E4%B9%85%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F"></a>6. 什么是 TIME_WAIT 状态，为什么需要 TIME_WAIT 状态？时间是多久，为什么？</h3><p>四次挥手客户端接受到服务端 FIN 报文后返回 ACK 报文的状态</p><p>可以防止 ACK 报文丢失，服务器没有收到会重复发 FIN 报文</p><p>而 TIME_WAIT 的长度为 2*MSL 这样 ACK 丢失了，FIN 再次发送，在这时间里客户端还能收到 FIN 报文</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-c0540557-35c3-4980-9c38-8c96551a8da6.png" alt="" loading="lazy"></p><h3 id="_7-tcp-和-udp-的区别" tabindex="-1"><a class="header-anchor" href="#_7-tcp-和-udp-的区别" aria-hidden="true">#</a> <a href="#7-tcp-%E5%92%8C-udp-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"></a>7. TCP 和 UDP 的区别？</h3><table><thead><tr><th>---</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接</td><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>数据流方式</td><td>字节流</td><td>报文流</td></tr><tr><td>速度</td><td>慢</td><td>快</td></tr></tbody></table><h3 id="_8-tcp-拥塞控制-慢启动的时候窗口在什么情况下会增长-为什么会呈指数增长" tabindex="-1"><a class="header-anchor" href="#_8-tcp-拥塞控制-慢启动的时候窗口在什么情况下会增长-为什么会呈指数增长" aria-hidden="true">#</a> <a href="#8-tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%EF%BC%9F%E6%85%A2%E5%90%AF%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E7%AA%97%E5%8F%A3%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%A2%9E%E9%95%BF%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%91%88%E6%8C%87%E6%95%B0%E5%A2%9E%E9%95%BF%EF%BC%9F"></a>8. TCP 拥塞控制？慢启动的时候窗口在什么情况下会增长？为什么会呈指数增长？</h3><p>TCP 拥塞控制由三部分组成</p><ol><li>慢启动：每次收到一个 ACK 报文将拥塞窗口（cwnd）加上一个 MSS，从 1 开始成指数级增长</li><li>拥塞避免：当 cwnd ≥ 慢启动阈值（sstresh）时，窗口按线性增长，当收到三个连续的冗余 ACK 后，进入快重启</li><li>快重启：sstresh=cwnd, cwnd = sstresh + 3*MSS（三次冗余的）并发送丢失的报文，每次收到冗余的就指数级增长直到收到新的 ACK，进入拥塞避免或者超时进入慢重启</li></ol><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-c2ad06f3-b550-4700-9103-55e6d946d853.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-9e70c922-09ac-48b5-8678-8a0cd0b55d44.png" alt="" loading="lazy"></p><h3 id="_9-linux-中一个进程的虚拟内存分布长什么样-内核空间-用户空间-6-种不同的内存段-。" tabindex="-1"><a class="header-anchor" href="#_9-linux-中一个进程的虚拟内存分布长什么样-内核空间-用户空间-6-种不同的内存段-。" aria-hidden="true">#</a> <a href="#9-linux-%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7%EF%BC%9F%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%EF%BC%886-%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E5%86%85%E5%AD%98%E6%AE%B5%EF%BC%89%E3%80%82"></a>9. Linux 中一个进程的虚拟内存分布长什么样？内核空间+用户空间（6 种不同的内存段）。</h3><p>.init：程序初始化的引导</p><p>.text：已编译的机器代码</p><p>.rodata：只读数据，存放字符串字面量，全局常量，虚函数表（C++）以及 switch 跳转表之类</p><p>.data：存放已经初始化的全局和静态变量</p><p>.bss：存放未初始化或初始化为 0 的全局和静态变量，仅仅是占位符，不占空间，名称可以理解为 Better Save Space（实际起源并不是这个）</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-b6b468ed-a143-41bf-aeb9-7b4d55308453.png" alt="" loading="lazy"></p><h3 id="_10-为什么要用虚拟内存" tabindex="-1"><a class="header-anchor" href="#_10-为什么要用虚拟内存" aria-hidden="true">#</a> <a href="#10-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%EF%BC%9F"></a>10. 为什么要用虚拟内存？</h3><ol><li>将主存当作辅存的高速缓存，经常活动的东西放在主存中，就像 GTA5 几十 GB 大的东西都放主存中是放不下的，因此可以高效利用主存</li><li>每个进程地址空间都一样，方便管理</li><li>避免进程破坏其他进程的地址空间</li></ol><p>ps：思考虚拟内存和交换空间的区别？</p><h3 id="_11-虚拟地址映射为物理地址的过程" tabindex="-1"><a class="header-anchor" href="#_11-虚拟地址映射为物理地址的过程" aria-hidden="true">#</a> <a href="#11-%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E4%B8%BA%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%9F"></a>11. 虚拟地址映射为物理地址的过程？</h3><p>❶ 直接映射</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-f7e931bf-d038-49fe-8497-43936550cd10.png" alt="" loading="lazy"></p><p>❷ 使用页表缓存映射</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-38e23102-f050-47dd-b40d-b85b8379274e.png" alt="" loading="lazy"></p><p>❸ 使用 TLB 映射</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-dde7d435-4ccc-47f5-9911-a2d4b283626e.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-05dfe319-0e50-4301-b773-388add1a8173.png" alt="" loading="lazy"></p><h3 id="_12-进程和线程的区别-哪些资源是线程共享的-哪些是线程独占的" tabindex="-1"><a class="header-anchor" href="#_12-进程和线程的区别-哪些资源是线程共享的-哪些是线程独占的" aria-hidden="true">#</a> <a href="#12-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E7%9A%84%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%8B%AC%E5%8D%A0%E7%9A%84%EF%BC%9F"></a>12. 进程和线程的区别？哪些资源是线程共享的，哪些是线程独占的？</h3>',56),k=e("thead",null,[e("tr",null,[e("th",null,"名称"),e("th",null,"进程"),e("th",null,"线程")])],-1),y=e("tr",null,[e("td",null,"资源分配的最小单位"),e("td",null,"系统调度的最小单位"),e("td")],-1),v=e("tr",null,[e("td",null,"切换开销"),e("td",null,"大"),e("td",null,"小")],-1),w=e("td",null,"通信",-1),T={href:"https://imageslr.com/2020/02/26/ipc.html",target:"_blank",rel:"noopener noreferrer"},j=e("td",null,"共享内存",-1),S=t('<p>线程共享全局变量，独占局部变量</p><h3 id="_13-使用线程有哪些好处" tabindex="-1"><a class="header-anchor" href="#_13-使用线程有哪些好处" aria-hidden="true">#</a> <a href="#13-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E5%A4%84%EF%BC%9F"></a>13. 使用线程有哪些好处？</h3><p>上下文切换代价小，通信方便</p><h3 id="_14-使用线程有哪些坏处" tabindex="-1"><a class="header-anchor" href="#_14-使用线程有哪些坏处" aria-hidden="true">#</a> <a href="#14-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9D%8F%E5%A4%84%EF%BC%9F"></a>14. 使用线程有哪些坏处？</h3><p>资源同步麻烦，容易出错</p><h3 id="_15-进程有哪些同步的机制" tabindex="-1"><a class="header-anchor" href="#_15-进程有哪些同步的机制" aria-hidden="true">#</a> <a href="#15-%E8%BF%9B%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%90%8C%E6%AD%A5%E7%9A%84%E6%9C%BA%E5%88%B6%EF%BC%9F"></a>15. 进程有哪些同步的机制？</h3><p>临界区、互斥、信号量、事件</p><h3 id="_16-协程的实现原理-无栈协程和有栈协程-独立栈和共享栈" tabindex="-1"><a class="header-anchor" href="#_16-协程的实现原理-无栈协程和有栈协程-独立栈和共享栈" aria-hidden="true">#</a> <a href="#16-%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F%E6%97%A0%E6%A0%88%E5%8D%8F%E7%A8%8B%E5%92%8C%E6%9C%89%E6%A0%88%E5%8D%8F%E7%A8%8B%EF%BC%9F%E7%8B%AC%E7%AB%8B%E6%A0%88%E5%92%8C%E5%85%B1%E4%BA%AB%E6%A0%88%EF%BC%9F"></a>16. 协程的实现原理？无栈协程和有栈协程？独立栈和共享栈？</h3><p>协程本质是一个用户态的线程，通过跳转来实现</p><p><strong>有栈协程把局部变量放在新开的空间上，无栈协程直接使用系统栈使得CPU cache局部性更好，同时也使得无栈协程的中断和函数返回几乎没有区别</strong></p><p>通过独立栈实现的协程库中的每一个<strong>协程都有自己独立的栈空间，协程栈大小固定且互不干扰</strong></p><p>通过共享栈实现的协程库中的<strong>每一个协程在运行时都使用一个公共的栈空间，当协程挂起时将自己的数据从共享栈拷贝到自己的独立栈，协程运行时又将数据从独立栈拷贝到共享栈运行</strong></p><h3 id="_17-什么是稳定排序" tabindex="-1"><a class="header-anchor" href="#_17-什么是稳定排序" aria-hidden="true">#</a> <a href="#17-%E4%BB%80%E4%B9%88%E6%98%AF%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%EF%BC%9F"></a>17. 什么是稳定排序？</h3><p>利用关键词排序后，关键词相同的元素之间的相互顺序不变的排序算法</p><h3 id="_18-聊项目-难点-怎么解决" tabindex="-1"><a class="header-anchor" href="#_18-聊项目-难点-怎么解决" aria-hidden="true">#</a> <a href="#18-%E8%81%8A%E9%A1%B9%E7%9B%AE%EF%BC%8C%E9%9A%BE%E7%82%B9%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F"></a>18. 聊项目，难点，怎么解决？</h3><h3 id="_19-手撕-数组循环右移。将一个长度为-n-的数组-循环右移-k-位-要求时间复杂度为-o-n-空间复杂度为-o-1-。" tabindex="-1"><a class="header-anchor" href="#_19-手撕-数组循环右移。将一个长度为-n-的数组-循环右移-k-位-要求时间复杂度为-o-n-空间复杂度为-o-1-。" aria-hidden="true">#</a> <a href="#19-%E6%89%8B%E6%92%95%EF%BC%9A%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E3%80%82%E5%B0%86%E4%B8%80%E4%B8%AA%E9%95%BF%E5%BA%A6%E4%B8%BA-n-%E7%9A%84%E6%95%B0%E7%BB%84%EF%BC%8C%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB-k-%E4%BD%8D%EF%BC%8C%E8%A6%81%E6%B1%82%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-on-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-o1-%E3%80%82"></a>19. 手撕：数组循环右移。将一个长度为 n 的数组，循环右移 k 位，要求时间复杂度为 O(n) 空间复杂度为 O(1) 。</h3><p>思路：三次reverse，reverse 后 k 位，reverse 前 n - k 位，reverse 整个数组</p><p>小插曲： 一开始使用的是 库中的 reverse 函数，写完后面试官要求自己实现这个 reverse。由于当时时间不多了又加上紧张，写完后答案一直有错，也没找到错在哪。面试结束之后，没有马上退出会议，想把这个错找出来。结果过了两分钟，面试官又回来了，说是下一个面试的还没到，就回来看看我。然后在他眼下把代码改对了。也算是有惊无险吧。</p><p>ps: LZ 这里写反了，已订正</p><h2 id="二面-1h-1" tabindex="-1"><a class="header-anchor" href="#二面-1h-1" aria-hidden="true">#</a> <a href="#%E4%BA%8C%E9%9D%A2%EF%BD%9C1h"></a>二面｜1h</h2><h3 id="_1-自我介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍-1" aria-hidden="true">#</a> <a href="#1-%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D-2"></a>1. 自我介绍</h3><h3 id="_2-进程有哪些状态" tabindex="-1"><a class="header-anchor" href="#_2-进程有哪些状态" aria-hidden="true">#</a> <a href="#2-%E8%BF%9B%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E7%8A%B6%E6%80%81%EF%BC%9F"></a>2. 进程有哪些状态？</h3><p>就绪（Ready）：程序等待执行</p><p>运行（Running）：程序正在执行</p><p>堵塞（Blocked）：进程执行了某些操作需要等待其运行，如：IO 操作</p><p>还有两种特殊的状态</p><p>初始（Initial）：进程在创建时的状态</p><p>最终（Final）：退出但没有清理，使得其他进程可以得取返回值</p><h3 id="_3-进程的调度算法" tabindex="-1"><a class="header-anchor" href="#_3-进程的调度算法" aria-hidden="true">#</a> <a href="#3-%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%9F"></a>3. 进程的调度算法？</h3><p>最短任务优先（SJF）</p><p>先来先出（FIFO）</p><p>高响应比优先（HRRN）</p><p>最短完成时间优先（STCF）</p><p>轮转（RR）</p><p>多级反馈队列（MLFQ）</p><h3 id="_4-进程间的通信方式" tabindex="-1"><a class="header-anchor" href="#_4-进程间的通信方式" aria-hidden="true">#</a> <a href="#4-%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F"></a>4. 进程间的通信方式？</h3><p>管道，信号量，共享内存，消息队列，套接字通信</p><h3 id="_5-进程上下文切换做了哪些事-流程是怎么样的" tabindex="-1"><a class="header-anchor" href="#_5-进程上下文切换做了哪些事-流程是怎么样的" aria-hidden="true">#</a> <a href="#5-%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BA%8B%EF%BC%9F%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F"></a>5. 进程上下文切换做了哪些事？流程是怎么样的？</h3><p>保存虚拟内存，栈，寄存器，程序计数器等</p><h3 id="_6-进程在哪些场景会进行上下文切换" tabindex="-1"><a class="header-anchor" href="#_6-进程在哪些场景会进行上下文切换" aria-hidden="true">#</a> <a href="#6-%E8%BF%9B%E7%A8%8B%E5%9C%A8%E5%93%AA%E4%BA%9B%E5%9C%BA%E6%99%AF%E4%BC%9A%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%EF%BC%9F"></a>6. 进程在哪些场景会进行上下文切换？</h3><p>时间片到了，IO 堵塞</p><h3 id="_7-上下文切换为什么资源消耗会比较高-消耗在什么地方" tabindex="-1"><a class="header-anchor" href="#_7-上下文切换为什么资源消耗会比较高-消耗在什么地方" aria-hidden="true">#</a> <a href="#7-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B5%84%E6%BA%90%E6%B6%88%E8%80%97%E4%BC%9A%E6%AF%94%E8%BE%83%E9%AB%98%EF%BC%9F%E6%B6%88%E8%80%97%E5%9C%A8%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%EF%BC%9F"></a>7. 上下文切换为什么资源消耗会比较高？消耗在什么地方？</h3><p>虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。</p><h3 id="_8-上面哪个资源的切换效率更低" tabindex="-1"><a class="header-anchor" href="#_8-上面哪个资源的切换效率更低" aria-hidden="true">#</a> <a href="#8-%E4%B8%8A%E9%9D%A2%E5%93%AA%E4%B8%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%87%E6%8D%A2%E6%95%88%E7%8E%87%E6%9B%B4%E4%BD%8E%EF%BC%9F"></a>8. 上面哪个资源的切换效率更低？</h3><p>虚拟内存</p><h3 id="_9-为什么虚拟内存的切换效率更低" tabindex="-1"><a class="header-anchor" href="#_9-为什么虚拟内存的切换效率更低" aria-hidden="true">#</a> <a href="#9-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E5%88%87%E6%8D%A2%E6%95%88%E7%8E%87%E6%9B%B4%E4%BD%8E%EF%BC%9F"></a>9. 为什么虚拟内存的切换效率更低？</h3><p>因为切换后 TLB 无法被命中</p><h3 id="_10-常见的排序算法" tabindex="-1"><a class="header-anchor" href="#_10-常见的排序算法" aria-hidden="true">#</a> <a href="#10-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%9F"></a>10. 常见的排序算法？</h3>',48),z={href:"https://leetcode.cn/circle/discuss/eBo9UB/",target:"_blank",rel:"noopener noreferrer"},I=t('<h3 id="_11-堆排序原理" tabindex="-1"><a class="header-anchor" href="#_11-堆排序原理" aria-hidden="true">#</a> <a href="#11-%E5%A0%86%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86%EF%BC%9F"></a>11. 堆排序原理？</h3><p>将数组看成一个完全二叉树，先进行初始化，使得子节点都比跟节点小，每次取堆顶（0）放在最后，同时将数组大小减 1</p><h3 id="_12-归并排序原理" tabindex="-1"><a class="header-anchor" href="#_12-归并排序原理" aria-hidden="true">#</a> <a href="#12-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86%EF%BC%9F"></a>12. 归并排序原理？</h3><p>使用分治算法，将排序好的两边用归并的思想合并到 tmp 数组中，最后原地修改原数组</p><h3 id="_13-lru缓存-为什么要链表-为什么要用哈希表-为什么要用双向链表-既然哈希表中已经存了-key-为什么链表中还要存-key-和-val-呢-只存-val-不就行吗" tabindex="-1"><a class="header-anchor" href="#_13-lru缓存-为什么要链表-为什么要用哈希表-为什么要用双向链表-既然哈希表中已经存了-key-为什么链表中还要存-key-和-val-呢-只存-val-不就行吗" aria-hidden="true">#</a> <a href="#13-lru%E7%BC%93%E5%AD%98%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%93%BE%E8%A1%A8%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%9F%E6%97%A2%E7%84%B6%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E5%B7%B2%E7%BB%8F%E5%AD%98%E4%BA%86-key%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E9%93%BE%E8%A1%A8%E4%B8%AD%E8%BF%98%E8%A6%81%E5%AD%98-key-%E5%92%8C-val-%E5%91%A2%EF%BC%8C%E5%8F%AA%E5%AD%98-val-%E4%B8%8D%E5%B0%B1%E8%A1%8C%E5%90%97%EF%BC%9F"></a>13. LRU缓存？为什么要链表？为什么要用哈希表？为什么要用双向链表？既然哈希表中已经存了 key，为什么链表中还要存 key 和 val 呢，只存 val 不就行吗？</h3><p>链表插入时间复杂度为 O ( 1 ) ，哈希表查找复杂度为 O ( 1 ) ，双向链表删除复杂度为 O ( 1 ) ，要删除节点时没有 key 就无法删除哈希表中的值</p><h3 id="_14-linux-命令-如何查看主机-cpu-核数-如何查看内存还剩多少" tabindex="-1"><a class="header-anchor" href="#_14-linux-命令-如何查看主机-cpu-核数-如何查看内存还剩多少" aria-hidden="true">#</a> <a href="#14-linux-%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA-cpu-%E6%A0%B8%E6%95%B0%EF%BC%9F%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E8%BF%98%E5%89%A9%E5%A4%9A%E5%B0%91%EF%BC%9F"></a>14. linux 命令，如何查看主机 CPU 核数？如何查看内存还剩多少？</h3><p>cat /proc/cpuinfo</p><p>cat /proc/meminfo</p><h3 id="_15-如何查看哪个进程正在监听-80-端口" tabindex="-1"><a class="header-anchor" href="#_15-如何查看哪个进程正在监听-80-端口" aria-hidden="true">#</a> <a href="#15-%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E6%AD%A3%E5%9C%A8%E7%9B%91%E5%90%AC-80-%E7%AB%AF%E5%8F%A3%EF%BC%9F"></a>15. 如何查看哪个进程正在监听 80 端口？</h3><p>lsof -i:80</p><p>netstat -tunlp | grep 80</p><h3 id="_16-netstat-n-是什么意思-a-是什么意思-p-是什么意思" tabindex="-1"><a class="header-anchor" href="#_16-netstat-n-是什么意思-a-是什么意思-p-是什么意思" aria-hidden="true">#</a> <a href="#16-netstat-n-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9Fa-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9Fp-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F"></a>16. netstat -n 是什么意思？-a 是什么意思？-p 是什么意思？</h3><ul><li>a (all)显示所有选项，默认不显示LISTEN相关</li><li>p 显示建立相关链接的程序名</li><li>n 拒绝显示别名，能显示数字的全部转化成数字。</li></ul><h3 id="_17-tcp-为什么要三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#_17-tcp-为什么要三次握手和四次挥手" aria-hidden="true">#</a> <a href="#17-tcp-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F"></a>17. TCP 为什么要三次握手和四次挥手？</h3><p>三次握手是为了确认双方的收发能力都没有问题，四次挥手是确保数据都发送完了才结束</p><h3 id="_18-为什么-tcp-第二次握手的-syn-和-ack-要合并成一次" tabindex="-1"><a class="header-anchor" href="#_18-为什么-tcp-第二次握手的-syn-和-ack-要合并成一次" aria-hidden="true">#</a> <a href="#18-%E4%B8%BA%E4%BB%80%E4%B9%88-tcp-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84-syn-%E5%92%8C-ack-%E8%A6%81%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E6%AC%A1%EF%BC%9F"></a>18. 为什么 TCP 第二次握手的 SYN 和 ACK 要合并成一次？</h3><p>分开两次发送，浪费资源</p><h3 id="_19-syn-flood-的原理-有哪些防范的方法" tabindex="-1"><a class="header-anchor" href="#_19-syn-flood-的原理-有哪些防范的方法" aria-hidden="true">#</a> <a href="#19-syn-flood-%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E9%98%B2%E8%8C%83%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9F"></a>19. SYN Flood 的原理？有哪些防范的方法？</h3><p>客户端发送三次握手的第一个 SYN 报文后收到服务器的报文却不回应，从而导致服务器的半开资源浪费直到超时释放</p><p>可以使用 SYN Cookie，即通过将源目地址及 IP 地址和端口号哈希为序列号，将返回的 ACK-1 得到原来的序列号判断是否正确，直到连接建立才分配资源</p><p>上面三个问题问了十多分钟。看起来简单，但面试官会顺着你的思路一直往下问，问得特别深，差点给问崩了。</p><p>下面问了几个 C++ 的问题。字节不是用 go 吗？</p><h3 id="_1-智能指针有哪些-主要解决什么问题" tabindex="-1"><a class="header-anchor" href="#_1-智能指针有哪些-主要解决什么问题" aria-hidden="true">#</a> <a href="#1-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E4%B8%BB%E8%A6%81%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F"></a>1. 智能指针有哪些？主要解决什么问题？</h3><p>shared_ptr：解决资源忘记释放的内存泄漏问题，及悬空指针问题</p><p>unique_ptr：对象对其有唯一所有权</p><p>weak_ptr：和 shared_ptr 搭配，不会增加引用计数，用于避免循环引用（比如 a 对象持有 b 对象，b 对象持有 a 对象），这样必然会导致内存泄露</p><p>auto_ptr：时代的眼泪</p><h3 id="_2-指针和引用的区别-为什么要引入引用-好处有哪些" tabindex="-1"><a class="header-anchor" href="#_2-指针和引用的区别-为什么要引入引用-好处有哪些" aria-hidden="true">#</a> <a href="#2-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%95%E5%85%A5%E5%BC%95%E7%94%A8%EF%BC%9F%E5%A5%BD%E5%A4%84%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"></a>2. 指针和引用的区别？为什么要引入引用？好处有哪些？</h3><p>引用即指针常量，指向后不能修改指向的是哪个对象，想较于指针用法更简单，不需要担心内存泄漏，也更安全不会有野指针哪些乱七八糟的问题</p><h3 id="_3-重写和重载的区别" tabindex="-1"><a class="header-anchor" href="#_3-重写和重载的区别" aria-hidden="true">#</a> <a href="#3-%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"></a>3. 重写和重载的区别？</h3><p>重写是动态多态中，子类重写父类的方法，</p><p>重载是静态多态中，同名函数通过不同的形参列表调用不同的实现</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/leetcode-zijtdhdsqpymemsmhrmlkleetcode-06e11ad0-9b3d-4134-a4db-5e90c5c959ae.png" alt="" loading="lazy"></p>',34),P={id:"_4-手撕-https-leetcode-cn-problems-lowest-common-ancestor-of-a-binary-tree-solution-er-cha-shu-de-gong-gong-zu-xian-by-pedan-00fs-最后只剩十分钟-要求十分钟之内写出来-。",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#_4-手撕-https-leetcode-cn-problems-lowest-common-ancestor-of-a-binary-tree-solution-er-cha-shu-de-gong-gong-zu-xian-by-pedan-00fs-最后只剩十分钟-要求十分钟之内写出来-。","aria-hidden":"true"},"#",-1),q=e("a",{href:"#4-%E6%89%8B%E6%92%95%EF%BC%9Ahttps//leetcodecn/problems/lowestcommonancestorofabinarytree/solution/erchashudegonggongzuxianbypedan00fs/%EF%BC%88%E6%9C%80%E5%90%8E%E5%8F%AA%E5%89%A9%E5%8D%81%E5%88%86%E9%92%9F%EF%BC%8C%E8%A6%81%E6%B1%82%E5%8D%81%E5%88%86%E9%92%9F%E4%B9%8B%E5%86%85%E5%86%99%E5%87%BA%E6%9D%A5%EF%BC%89%E3%80%82"},null,-1),L={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-gong-gong-zu-xian-by-pedan-00fs/%EF%BC%88%E6%9C%80%E5%90%8E%E5%8F%AA%E5%89%A9%E5%8D%81%E5%88%86%E9%92%9F%EF%BC%8C%E8%A6%81%E6%B1%82%E5%8D%81%E5%88%86%E9%92%9F%E4%B9%8B%E5%86%85%E5%86%99%E5%87%BA%E6%9D%A5%EF%BC%89%E3%80%82",target:"_blank",rel:"noopener noreferrer"},M=t('<h2 id="三面-1h-1" tabindex="-1"><a class="header-anchor" href="#三面-1h-1" aria-hidden="true">#</a> <a href="#%E4%B8%89%E9%9D%A2%EF%BD%9C1h"></a>三面｜1h</h2><p>忘记录音了，凭回忆写个大概</p><h3 id="_1-自我介绍-2" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍-2" aria-hidden="true">#</a> <a href="#1-%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D-3"></a>1. 自我介绍</h3><h3 id="_2-聊项目" tabindex="-1"><a class="header-anchor" href="#_2-聊项目" aria-hidden="true">#</a> <a href="#2-%E8%81%8A%E9%A1%B9%E7%9B%AE"></a>2. 聊项目</h3><h3 id="_3-问了一会儿八股-具体问题忘了。" tabindex="-1"><a class="header-anchor" href="#_3-问了一会儿八股-具体问题忘了。" aria-hidden="true">#</a> <a href="#3-%E9%97%AE%E4%BA%86%E4%B8%80%E4%BC%9A%E5%84%BF%E5%85%AB%E8%82%A1%EF%BC%8C%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98%E5%BF%98%E4%BA%86%E3%80%82"></a>3. 问了一会儿八股，具体问题忘了。</h3><h3 id="_4-如果你设计一个视频网站-所有用户都可以上传自己的视频-也可以观看别人的视频。你作为后端要怎么设计-用户目录怎么设计" tabindex="-1"><a class="header-anchor" href="#_4-如果你设计一个视频网站-所有用户都可以上传自己的视频-也可以观看别人的视频。你作为后端要怎么设计-用户目录怎么设计" aria-hidden="true">#</a> <a href="#4-%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%8C%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E9%83%BD%E5%8F%AF%E4%BB%A5%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A7%86%E9%A2%91%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%A7%82%E7%9C%8B%E5%88%AB%E4%BA%BA%E7%9A%84%E8%A7%86%E9%A2%91%E3%80%82%E4%BD%A0%E4%BD%9C%E4%B8%BA%E5%90%8E%E7%AB%AF%E8%A6%81%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F%E7%94%A8%E6%88%B7%E7%9B%AE%E5%BD%95%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F"></a>4. 如果你设计一个视频网站，所有用户都可以上传自己的视频，也可以观看别人的视频。你作为后端要怎么设计？用户目录怎么设计？</h3><p>这个问题聊了20分钟。因为没做过相关的东西，感觉答得一般。刚开始答了很多个方面，感觉面试官都不太满意。但是面试官会一直引导你回答。最后反问的时候面试官也说这个问题没有固定的答案，这个问题涉及的方面非常多，从接入到怎么去存储以及怎么去实现一些具体的逻辑功能，这些方面很难一下子就能想出一个很全面方案。问这个问题主要还是想看看我的一个思考的过程。</p>',7),R={href:"https://leetcode.cn/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fan-zhuan-lian-biao-by-irf3/",target:"_blank",rel:"noopener noreferrer"},K=t('<h2 id="hr-面-12min-1" tabindex="-1"><a class="header-anchor" href="#hr-面-12min-1" aria-hidden="true">#</a> <a href="#hr-%E9%9D%A2%EF%BD%9C12min"></a>HR 面｜12min</h2><h3 id="_1-自我介绍-3" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍-3" aria-hidden="true">#</a> <a href="#1-%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D-4"></a>1. 自我介绍</h3><h3 id="_2-家在哪" tabindex="-1"><a class="header-anchor" href="#_2-家在哪" aria-hidden="true">#</a> <a href="#2-%E5%AE%B6%E5%9C%A8%E5%93%AA%EF%BC%9F"></a>2. 家在哪？</h3><h3 id="_3-为什么选择这个专业" tabindex="-1"><a class="header-anchor" href="#_3-为什么选择这个专业" aria-hidden="true">#</a> <a href="#3-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E8%BF%99%E4%B8%AA%E4%B8%93%E4%B8%9A%EF%BC%9F"></a>3. 为什么选择这个专业？</h3><h3 id="_4-有没有校外实习的经历" tabindex="-1"><a class="header-anchor" href="#_4-有没有校外实习的经历" aria-hidden="true">#</a> <a href="#4-%E6%9C%89%E6%B2%A1%E6%9C%89%E6%A0%A1%E5%A4%96%E5%AE%9E%E4%B9%A0%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%9F"></a>4. 有没有校外实习的经历？</h3><h3 id="_5-研究生期间的成绩" tabindex="-1"><a class="header-anchor" href="#_5-研究生期间的成绩" aria-hidden="true">#</a> <a href="#5-%E7%A0%94%E7%A9%B6%E7%94%9F%E6%9C%9F%E9%97%B4%E7%9A%84%E6%88%90%E7%BB%A9%EF%BC%9F"></a>5. 研究生期间的成绩？</h3><h3 id="_6-参加过什么计算机相关的比赛-在团队中担任什么角色" tabindex="-1"><a class="header-anchor" href="#_6-参加过什么计算机相关的比赛-在团队中担任什么角色" aria-hidden="true">#</a> <a href="#6-%E5%8F%82%E5%8A%A0%E8%BF%87%E4%BB%80%E4%B9%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E6%AF%94%E8%B5%9B%EF%BC%9F%E5%9C%A8%E5%9B%A2%E9%98%9F%E4%B8%AD%E6%8B%85%E4%BB%BB%E4%BB%80%E4%B9%88%E8%A7%92%E8%89%B2%EF%BC%9F"></a>6. 参加过什么计算机相关的比赛？在团队中担任什么角色？</h3><h3 id="_7-为什么选择我们这个部门" tabindex="-1"><a class="header-anchor" href="#_7-为什么选择我们这个部门" aria-hidden="true">#</a> <a href="#7-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E6%88%91%E4%BB%AC%E8%BF%99%E4%B8%AA%E9%83%A8%E9%97%A8%EF%BC%9F"></a>7. 为什么选择我们这个部门？</h3><h3 id="_8-对我们的部门有没有什么了解" tabindex="-1"><a class="header-anchor" href="#_8-对我们的部门有没有什么了解" aria-hidden="true">#</a> <a href="#8-%E5%AF%B9%E6%88%91%E4%BB%AC%E7%9A%84%E9%83%A8%E9%97%A8%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E4%BA%86%E8%A7%A3%EF%BC%9F"></a>8. 对我们的部门有没有什么了解？</h3><p>大概说了一下，然后 HR 给我介绍了一下这个部门。</p><h3 id="_9-想去什么城市" tabindex="-1"><a class="header-anchor" href="#_9-想去什么城市" aria-hidden="true">#</a> <a href="#9-%E6%83%B3%E5%8E%BB%E4%BB%80%E4%B9%88%E5%9F%8E%E5%B8%82%EF%BC%9F"></a>9. 想去什么城市？</h3><h3 id="_10-有没有考公的想法" tabindex="-1"><a class="header-anchor" href="#_10-有没有考公的想法" aria-hidden="true">#</a> <a href="#10-%E6%9C%89%E6%B2%A1%E6%9C%89%E8%80%83%E5%85%AC%E7%9A%84%E6%83%B3%E6%B3%95%EF%BC%9F"></a>10. 有没有考公的想法？</h3><h3 id="_11-职业规划是怎么样的" tabindex="-1"><a class="header-anchor" href="#_11-职业规划是怎么样的" aria-hidden="true">#</a> <a href="#11-%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84%EF%BC%9F"></a>11. 职业规划是怎么样的？</h3><h3 id="_12-有没有在面其他的公司-bat-都有投吗" tabindex="-1"><a class="header-anchor" href="#_12-有没有在面其他的公司-bat-都有投吗" aria-hidden="true">#</a> <a href="#12-%E6%9C%89%E6%B2%A1%E6%9C%89%E5%9C%A8%E9%9D%A2%E5%85%B6%E4%BB%96%E7%9A%84%E5%85%AC%E5%8F%B8%EF%BC%9Fbat-%E9%83%BD%E6%9C%89%E6%8A%95%E5%90%97%EF%BC%9F"></a>12. 有没有在面其他的公司？BAT 都有投吗？</h3><h3 id="_13-能不能提前来实习" tabindex="-1"><a class="header-anchor" href="#_13-能不能提前来实习" aria-hidden="true">#</a> <a href="#13-%E8%83%BD%E4%B8%8D%E8%83%BD%E6%8F%90%E5%89%8D%E6%9D%A5%E5%AE%9E%E4%B9%A0%EF%BC%9F"></a>13. 能不能提前来实习？</h3><h3 id="_14-反问-后续流程是什么" tabindex="-1"><a class="header-anchor" href="#_14-反问-后续流程是什么" aria-hidden="true">#</a> <a href="#14-%E5%8F%8D%E9%97%AE%EF%BC%9A%E5%90%8E%E7%BB%AD%E6%B5%81%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"></a>14. 反问：后续流程是什么？</h3><p>内部讨论后，过几天会给答复。如果没过就等其他的部门来捞，过了的话会先发意向书，十月份左右谈薪资。有可能还有加面的情况（忘记问这个加面是好还是不好了，网上有的说会刷人，有的说是看看你能不能拿更高的等级）。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> <a href="#%E5%8F%82%E8%80%83"></a>参考</h2>',18),Y={href:"https://www.eet-china.com/mp/a44399.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://xiaolincoding.com/os/3_memory/vmem.html#%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.junhaow.com/studynotes/csapp/07_CSAPP%20:%20CSE351%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%20Virtual%20Memory%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},H={href:"https://imageslr.com/2020/07/07/process-thread.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.cnblogs.com/memewry/archive/2012/08/22/2651696.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.cnblogs.com/xiaolincoding/p/13631224.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.cnblogs.com/lfri/p/12597297.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.cnblogs.com/linguoguo/p/15873318.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.cn/circle/discuss/MDq50z/view/dgDwBC/",target:"_blank",rel:"noopener noreferrer"};function Z(X,$){const a=n("ExternalLinkIcon");return h(),i("div",null,[d,A,e("ol",null,[o,e("li",null,[E("手撕："),e("a",s,[E("189.数组循环右移"),r(a)]),E("。将一个长度为 n 的数组，循环右移 k 位，要求时间复杂度为 O(n) 空间复杂度为 O(1) 。")])]),c,e("ol",p,[F,C,_,e("li",null,[E("手撕："),e("a",f,[E("236.二叉树的最近公共祖先"),r(a)]),E("（最后只剩十分钟，要求十分钟之内写出来）。")])]),b,u,m,e("ol",g,[e("li",null,[E("手撕："),e("a",D,[E("234.回文链表"),r(a)])])]),x,e("table",null,[k,e("tbody",null,[y,v,e("tr",null,[w,e("td",null,[E("IPC["),e("a",T,[E("https://imageslr.com/2020/02/26/ipc.html"),r(a)]),E("]")]),j])])]),S,e("p",null,[e("a",z,[E("参考大神解答"),r(a)])]),I,e("h3",P,[N,E(),q,E("4. 手撕："),e("a",L,[E("https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-gong-gong-zu-xian-by-pedan-00fs/（最后只剩十分钟，要求十分钟之内写出来）。"),r(a)])]),M,e("ol",null,[e("li",null,[E("手撕："),e("a",R,[E("https://leetcode.cn/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fan-zhuan-lian-biao-by-irf3/"),r(a)])])]),K,e("p",null,[e("a",Y,[E("淘宝二面，面试官居然把TCP三次握手问的这么详细-面包板社区"),r(a)])]),e("p",null,[e("a",O,[E("4.1 为什么要有虚拟内存？"),r(a)])]),e("p",null,[e("a",U,[E("CSAPP / CSE 351 学习笔记（虚拟内存 Virtual Memory)"),r(a)])]),e("p",null,[e("a",H,[E("📔【操作系统】进程与线程"),r(a)])]),e("p",null,[e("a",V,[E("进程/线程同步的方式和机制，进程间通信 - Icnblog_Wan - 博客园"),r(a)])]),e("p",null,[e("a",W,[E("大厂面试爱问的「调度算法」，20 张图一举拿下"),r(a)])]),e("p",null,[e("a",G,[E("进程切换和线程切换？"),r(a)])]),e("p",null,[e("a",J,[E("进程切换原理"),r(a)])]),e("blockquote",null,[e("p",null,[E("参考链接："),e("a",Q,[E("https://leetcode.cn/circle/discuss/MDq50z/view/dgDwBC/"),r(a)]),E("，整理：沉默王二")])])])}const ae=B(l,[["render",Z],["__file","zijtdhdsqpymemsmhrmlkleetcode.html.vue"]]);export{ae as default};
