<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://bytecodes.tech/rss.xml" rel="self" type="application/rss+xml"/>
    <title>凤凰涅槃进阶之路</title>
    <link>https://bytecodes.tech/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Tue, 17 Jan 2023 07:01:40 GMT</pubDate>
    <lastBuildDate>Tue, 17 Jan 2023 07:01:40 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>go</category>
    <item>
      <title>如何为开源项目做贡献——入门指南</title>
      <link>https://bytecodes.tech/self/good-article/how-to-contribute-to-open-source-projects-beginners-guide.html</link>
      <guid>https://bytecodes.tech/self/good-article/how-to-contribute-to-open-source-projects-beginners-guide.html</guid>
      <source url="https://bytecodes.tech/rss.xml">如何为开源项目做贡献——入门指南</source>
      <pubDate>Tue, 17 Jan 2023 06:20:28 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="如何为开源项目做贡献——入门指南" tabindex="-1"> 如何为开源项目做贡献——入门指南</h1>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/202301171419124.png" alt="image.png"></p>
<p>如果你是一名开发者，你可能会遇到“开源”这个词。如果你曾想知道它的全部内容以及如何为其做贡献，那么你来对地方了。</p>
<p>并为开源世界做出了我的第一个贡献。 由于对我来说是第一次，我从一些对初学者友好的项目开始，然后慢慢提高。</p>
<p>而现在，如果你是新手，你可能想知道开源到底是什么？ 如何开始？ 你应该期待什么？ 在本文中，我们将涵盖所有这些内容甚至更多。</p>
<p>为开源贡献力量，得到的回报就是能够学习到很多、受教很多、且能够锻炼任何你能够想到的经验。</p>
<p>为什么会有人为开源做贡献？这可能是很多人都不明白的地方，这里不妨列出一些！</p>
<h3 id="巩固现有技能" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E5%B7%A9%E5%9B%BA%E7%8E%B0%E6%9C%89%E6%8A%80%E8%83%BD" target="_blank" rel="noopener noreferrer"></a>巩固现有技能</h3>
<p>无论是撰写代码、设计用户界面、图形设计、撰写文档、亦或是组织活动，只要你想做，你总能在开源项目中找到自己的位置。</p>
<h3 id="遇见那些和你志趣相投之人" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E9%81%87%E8%A7%81%E9%82%A3%E4%BA%9B%E5%92%8C%E4%BD%A0%E5%BF%97%E8%B6%A3%E7%9B%B8%E6%8A%95%E4%B9%8B%E4%BA%BA" target="_blank" rel="noopener noreferrer"></a>遇见那些和你志趣相投之人</h3>
<p>开源项目一般都会有一个和谐、热心的社区，以让大家团结一致。实际上，开源界经常发生这样的情形，很多人的深厚友谊都是通过共同参与开源所建立起来的，至于具体的方式，可能是在一次技术研讨会上相谈甚欢，也可能是一直在聊天室中探讨问题。</p>
<h3 id="寻找导师-并且尝试帮助他人" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E5%AF%BB%E6%89%BE%E5%AF%BC%E5%B8%88%E5%B9%B6%E4%B8%94%E5%B0%9D%E8%AF%95%E5%B8%AE%E5%8A%A9%E4%BB%96%E4%BA%BA" target="_blank" rel="noopener noreferrer"></a>寻找导师，并且尝试帮助他人</h3>
<p>和他人共同在一个共享的项目下工作，这意味着需要向他人解释清楚自己是如何做的，同理，也需要向他人求助，询问别人是如何做的。相互学习和彼此教学可以让每位参与者都能满载而归。</p>
<h3 id="在公众间建立你的声誉-职业口碑" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E5%9C%A8%E5%85%AC%E4%BC%97%E9%97%B4%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E5%A3%B0%E8%AA%89%E8%81%8C%E4%B8%9A%E5%8F%A3%E7%A2%91" target="_blank" rel="noopener noreferrer"></a>在公众间建立你的声誉（职业口碑）</h3>
<p>根据开源的定义，你在开源下所有的工作都是公开的，这也就意味着开源项目是一个很好展示你实力的地方。</p>
<h3 id="学习领导和管理的艺术" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E5%AD%A6%E4%B9%A0%E9%A2%86%E5%AF%BC%E5%92%8C%E7%AE%A1%E7%90%86%E7%9A%84%E8%89%BA%E6%9C%AF" target="_blank" rel="noopener noreferrer"></a>学习领导和管理的艺术</h3>
<p>开源为实践领导力和管理技能提供了很好的机会，比如解决冲突、组织团队、工作的优先级排列。</p>
<h3 id="鼓励作出改变-哪怕改变是很微小的" tabindex="-1"> <a href="https://opensource.guide/zh-hans/how-to-contribute/#%E9%BC%93%E5%8A%B1%E4%BD%9C%E5%87%BA%E6%94%B9%E5%8F%98%E5%93%AA%E6%80%95%E6%94%B9%E5%8F%98%E6%98%AF%E5%BE%88%E5%BE%AE%E5%B0%8F%E7%9A%84" target="_blank" rel="noopener noreferrer"></a>鼓励作出改变，哪怕改变是很微小的</h3>
<p>在开源的世界里，作出贡献的不一定非得是花了很长时间拥有大量经验的人。你是否遇到过浏览某些网站发现有拼写错误，希望有人能修改它？其实，在开源的项目中，你只需要做就可以了。没有那么多的顾忌，开源让人们在很舒服的状态做事，而这才是这个世界应有的体验。</p>
<h2 id="什么是开源" tabindex="-1"> 什么是开源？</h2>
<p>开源是指在许可证的许可下向公众提供可以查看、使用、修改和分发的源代码。</p>
<p>无论是个人、公司、小型企业、非营利组织还是政府机构，开源代码通常符合企业或个人的最大利益。</p>
<p>为开源项目做出贡献是一种学习、教授、分享和积累经验的有益方式。 你应该为开源项目做出贡献的原因有很多，例如：</p>
<ul>
<li>改进你每天使用的软件</li>
<li>如果需要，可以找一位导师</li>
<li>学习新技能</li>
<li>分享你的技能</li>
<li>更深入地了解你正在使用的软件</li>
<li>建立声誉并帮助你发展你的事业</li>
<li>另外，它本身很有趣，会让你感觉很棒</li>
</ul>
<p><em>你为开源项目做贡献的原因是什么？ 回复这篇文章或通过 <a href="https://twitter.com/larymak1" target="_blank" rel="noopener noreferrer">larymak 1</a> 告诉我。</em></p>
<h2 id="如何为开源做贡献" tabindex="-1"> 如何为开源做贡献</h2>
<p>为开源项目做贡献并不一定意味着你必须为代码库做贡献。 你可以通过多种不同方式为开源做贡献，例如：</p>
<ul>
<li>你可以在项目文档中添加描述以详细说明某一点</li>
<li>你可以针对特定的项目提供指南</li>
<li>你可以添加示例来展示代码的工作原理</li>
<li>你可以为项目编写教程</li>
<li>你可以为项目添加翻译</li>
<li>你可以回答有关项目的问题（比如在 Stack Overflow 或 Reddit 上）</li>
<li>你可以对其他贡献者提供建议</li>
<li>你可以修复错误并正确地安排项目的工作文件夹</li>
</ul>
<p>所有包括但不限于这些方式都可以为开源项目做贡献。</p>
<h2 id="为开源项目做贡献之前需要了解的内容" tabindex="-1"> 为开源项目做贡献之前需要了解的内容</h2>
<p>每个开源社区都是不同的。 每个社区都有不同的人，有着不同的角色和奖励。 他们每个人都有自己的职责和预期贡献。</p>
<h3 id="一个典型的开源项目会有这些人" tabindex="-1"> 一个典型的开源项目会有这些人：</h3>
<ul>
<li><strong>作者</strong> - 创建项目的人。 他们有权为其他成员分配角色以帮助维护项目。</li>
<li><strong>所有者</strong> - 所有者拥有项目的管理所有权（<em>可以与作者为同一人</em>）</li>
<li><strong>维护者</strong> - 这些人负责推动项目的愿景和目标。他们通常是对项目方向负责并致力于改进项目的人</li>
<li><strong>贡献者</strong> - 贡献者以一种或多种方式加入到项目中。他们遵循相同的代码审查流程，遵守相同的代码风格要求等等。</li>
<li><strong>社区成员/用户</strong> - 这些有价值的社区成员可以提供相关功能、错误报告等反馈。</li>
</ul>
<h3 id="所有开源项目都应该具备的重要元素" tabindex="-1"> 所有开源项目都应该具备的重要元素</h3>
<p>每个开源项目都应该有以下指南和信息：</p>
<ul>
<li><a href="https://choosealicense.com/" target="_blank" rel="noopener noreferrer">License</a> - 如果一个项目没有开源许可证，那它就不是开源的。许可证有助于保护开源贡献者和用户。没有这种保护，企业和精明的开发者通常不会接触该项目。如果你想知道如何获得开源许可证，请单击 <a href="https://choosealicense.com/" target="_blank" rel="noopener noreferrer">此处</a> 以了解更多信息。</li>
<li>README - 这是一本说明如何开始项目的手册。一个好的 README 应该包含潜在的贡献者想要了解的有关项目的所有不同内容。你可以阅读更多关于如何编写一个好的 README 文件 <a href="https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/" target="_blank" rel="noopener noreferrer">点击这里</a>。</li>
<li>How to Contribute - 这些指南帮助人们做出贡献并展示需要什么类型的贡献者（<em>这个文件不是必须的</em>）</li>
<li><a href="https://opensource.guide/code-of-conduct/" target="_blank" rel="noopener noreferrer">CODE_OF_CONDUCT</a> - 这是一份文件，用于确定你对贡献者和参与者的行为方式的期望。采纳并遵守行为准则有助于为你的社区创造一个积极的环境。</li>
</ul>
<p>要创建一个开源项目，你需要创建一个环境，可以让人们分享他们的挑战并进行深入讨论。这个可以通过以下工具实现：</p>
<ul>
<li>Issue Tracker（问题追踪器） - 人们在这里讨论与项目相关的问题</li>
<li>Pull Requests（拉取请求） - 这是人们审查正在进行更改的地方</li>
<li>Synchronous Chat Channel（同步聊天频道） - 这是专门供人们分享他们的想法并进行对话的地方（如 Slack、Discord 等）</li>
</ul>
<h2 id="如何找到你想要贡献的开源项目" tabindex="-1"> 如何找到你想要贡献的开源项目？</h2>
<p>既然知道了开源项目如何运作，那么是时候找到一个可贡献的开源项目了。</p>
<p>贡献在各个层面都有效——不要过分思考你将如何去做，而是想想你已经使用过的一些项目，如何对它们进行改进提高。</p>
<blockquote>
<p>研究表明，大约 30% 的贡献是文档、错别字修复甚至是翻译。</p>
</blockquote>
<p>如果你是第一次贡献（每个人在某个时候都是这样），这儿有一些网址可以让你开始拥抱开源世界：</p>
<ul>
<li><a href="https://github.com/larymak/Python-project-Scripts" target="_blank" rel="noopener noreferrer">Python Project Scripts</a></li>
<li><a href="https://opensourcefriday.com/" target="_blank" rel="noopener noreferrer">Open Source Friday</a></li>
<li><a href="https://habitica.com/static/front" target="_blank" rel="noopener noreferrer">Hebatica</a></li>
<li><a href="https://pinaxproject.com/" target="_blank" rel="noopener noreferrer">Pinax</a></li>
<li><a href="https://www.firsttimersonly.com/" target="_blank" rel="noopener noreferrer">First Timers Only</a></li>
<li><a href="https://www.codetriage.com/" target="_blank" rel="noopener noreferrer">Code Triage</a></li>
<li><a href="https://24pullrequests.com/" target="_blank" rel="noopener noreferrer">24 Pull Requests</a></li>
<li><a href="https://contributor.ninja/" target="_blank" rel="noopener noreferrer">Contributor Ninja</a></li>
<li><a href="https://github.com/firstcontributions/first-contributions" target="_blank" rel="noopener noreferrer">First Contribution</a></li>
</ul>
<p><em>在开源软件的世界中，问题会很快得到报告和修复。 所以，如果你想解决一个问题，一定要尽快解决它。</em></p>
<h3 id="如何选择开源项目" tabindex="-1"> 如何选择开源项目？</h3>
<p>找到你想要贡献的项目后，让它符合以下标准，以确保它是一个不错的选择：</p>
<p>首先，你需要检查：</p>
<ul>
<li>它有许可文件吗？</li>
<li>最新提交是什么时候完成的？ 是最近的吗？ （也就是说，项目是否在积极维护/工作？）</li>
<li>它有多少贡献？</li>
<li>人们多久提交一次？</li>
</ul>
<p>如果你看到最近有很多活动，那很好，这意味着它有一个活跃的社区来维护它。</p>
<p>其次，你应该继续检查以下内容：</p>
<ul>
<li>有多少未解决的问题？</li>
<li>维护者需要多长时间才能做出回应？ 回应及时吗？</li>
<li>是否对某个问题进行了积极的讨论？</li>
<li>问题是否会定期关闭？</li>
<li>有多少开放的拉取请求？</li>
<li>最新的拉取请求最近多久合并？ 是最近吗？</li>
<li>是否首先审查拉取请求？ （他们应该是）</li>
<li>维护者是否感谢人们的贡献？</li>
</ul>
<p>如果上述所有条件都满足你的需求，那就去做吧，开始为这些项目做贡献。</p>
<h2 id="在进行开源项目之前需要考虑什么" tabindex="-1"> 在进行开源项目之前需要考虑什么？</h2>
<p>所以你迫不及待地要开始致力于自己的第一个开源项目了。让我们来了解一些可能会帮助你选择项目的方法。</p>
<h3 id="项目使用什么编程语言" tabindex="-1"> 项目使用什么编程语言？</h3>
<p>任何应用程序背后最基本的技术都是它使用的编程语言。GitHub 上一些最流行的语言包括但不限于JavaScript、Python、Java、Ruby 和 PHP。</p>
<p>你的能力和兴趣也许会契合众多项目，所以选择一个你感觉舒服的项目即可。</p>
<h3 id="项目类型" tabindex="-1"> 项目类型</h3>
<p>在你确定了你想要使用的语言后，你需要选择你喜欢的项目类型。只需概览一圈并选择一个你感兴趣的主题的项目即可。</p>
<p>项目一旦确定，你一定想要有一番作为。你将通过提交拉取请求来做到这一点。现在让我们来详细说说这个。</p>
<h2 id="如何提交拉取请求-pull-request" tabindex="-1"> 如何提交拉取请求（Pull Request）？</h2>
<p>如果你处于这个阶段，已经找到了一个项目，你就可以继续了。让我们来谈谈如何实际提交拉取请求。</p>
<p>首先，什么是拉取请求？ 这是你在 GitHub 中请求更新的方式，也是你将代码合并到另一个分支之前让某人检查你的代码的方式。</p>
<h3 id="提交-pr-的步骤" tabindex="-1"> 提交 PR 的步骤</h3>
<ul>
<li>Fork 存储库<br>
在右上角，你将看到“fork”一词。 单击它，将在你的帐户中创建同一个项目的副本。 URL 将更改为：</li>
</ul>
<div><pre><code>https://github.com/&lt;YourUserName>/projectname
</code></pre><div aria-hidden="true"><div></div></div></div><ul>
<li>将其 Clone 到你的本地<br>
在你的电脑上，如果安装了 Git，请打开 CMD 并运行此命令。 如果你还没有 Git，请参阅 <a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">此处</a>，它将向你展示如何开始使用 Git。 然后继续执行以下步骤：</li>
</ul>
<div><pre><code>git clone https://github.com/&lt;YourUserName>/&lt;projectname>
</code></pre><div aria-hidden="true"><div></div></div></div><p>这会在你的本地电脑上创建项目的副本。现在你已经克隆了存储库，我们需要做两件事：</p>
<p>首先，你需要创建一个分支。切换到你电脑上的存储库目录（如果你还没切换的话）：你可以通过以下方式执行此操作：</p>
<div><pre><code>cd project folder name
</code></pre><div aria-hidden="true"><div></div></div></div><p>使用 git checkout 命令创建一个分支：</p>
<div><pre><code>git checkout -b your-new-branch-name
</code></pre><div aria-hidden="true"><div></div></div></div><p>比如：</p>
<div><pre><code>git checkout -b lary-mak-blog
</code></pre><div aria-hidden="true"><div></div></div></div><p>接下来，你需要进行必要的更改并提交这些更改。 在进行更改和添加新文件之后，将这些更改添加到你创建的分支中了。</p>
<p>要查看你做的所有更改，请运行 <code>git status</code> 命令：</p>
<div><pre><code>git status
</code></pre><div aria-hidden="true"><div></div></div></div><p>这会显示你最近做的所有更改。现在添加它们，使用 <code>git add *</code> 命令：</p>
<div><pre><code>git add *
</code></pre><div aria-hidden="true"><div></div></div></div><p>现在使用 <code>git commit</code> 命令提交这些更改：</p>
<div><pre><code>git commit -m "&lt;initial commit> "
</code></pre><div aria-hidden="true"><div></div></div></div><ul>
<li>将更改推送到 GitHub<br>
你可以使用 `git push 命令轻松完成此操作：</li>
</ul>
<div><pre><code>git push origin &lt;add-your-branch-name>
</code></pre><div aria-hidden="true"><div></div></div></div><p>用你之前创建的分支的名称替换 <code>&lt;add-your-branch-name&gt;</code>。</p>
<ul>
<li>提交你的更改以供审核<br>
如果你转到 GitHub 上的存储库并刷新页面，你将看到“Compare and pull request”按钮。 单击该按钮。</li>
</ul>
<p>很快，维护者会将你的所有更改合并到该项目的主分支中（除非他们需要你的更改）。 合并更改后，你将收到一封通知电子邮件。</p>
<p>对其他存储库的拉取请求类似于“Push”。 但是，它允许做一些事情：</p>
<p>首先，它允许你为其他存储库做贡献，而无需管理权限来对存储库进行更改。</p>
<p>其次，它允许其他人查看你的更改并提出更正、添加、编辑等建议。</p>
<p>第三，它让管理员可以控制添加到他们项目存储库中的内容。</p>
<h3 id="在完成第一个拉取请求后-下一步做什么" tabindex="-1"> 在完成第一个拉取请求后，下一步做什么？</h3>
<p>恭喜你！ 刚刚完成了作为开源贡献者经常遇到的标准工作流程！fork -&gt; clone -&gt; edit -&gt; pull request</p>
<p>现在，你可以继续寻找其他项目并做出更多的贡献。 并且一定要留意<a href="https://www.digitalocean.com/" target="_blank" rel="noopener noreferrer">Digital Ocean</a>举办的开源月，这样你就可以参加<a href="https://hacktoberfest.digitalocean.com/" target="_blank" rel="noopener noreferrer">Hacktoberfest</a>并有机会赢取一些很有意思的东西。</p>
<h2 id="为开源做贡献的好处" tabindex="-1"> 为开源做贡献的好处</h2>
<p>既然你已经了解了如何为开源做出贡献，那么做贡献有好处有什么呢？</p>
<ul>
<li>为开源项目做贡献的人比仅仅使用该技术的人更深入地了解该技术</li>
<li>你可以根据在现实世界中有效和无效的经验，专注于添加和利用对企业有益的功能</li>
<li>它可以建立你的士气和声誉。 为开源项目做贡献的人得到其他社区成员的见解和经验</li>
<li>对开源的贡献可以清晰地了解一个项目的未来</li>
<li>如果你使用 GitHub ，你在该平台上做的很大一部分事情都是公开的。利用这一点来发挥你的优势，在贡献和与其他贡献者交流时，始终做到最好。因为你永远不知道谁在看着你，你的下一个雇主可能就在那里😊</li>
</ul>
<h3 id="为什么你应该为开源做贡献" tabindex="-1"> 为什么你应该为开源做贡献？</h3>
<p>作为一名开发者，以下我认为你应该为开源做出贡献的原因：</p>
<ul>
<li>它可以帮助你编写更清晰的代码</li>
<li>它可以帮助社区和同行了解你。这种认可可以为你的职业生涯带来很多机会</li>
<li>它可以帮助你了解有关项目的更多信息</li>
<li>它提高了你的编码技能</li>
</ul>
]]></content:encoded>
      <enclosure url="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/202301171419124.png" type="image/png"/>
    </item>
    <item>
      <title>我在所有 Mac 上安装的 7 个 Mac 工具</title>
      <link>https://bytecodes.tech/self/good-article/mac-tool.html</link>
      <guid>https://bytecodes.tech/self/good-article/mac-tool.html</guid>
      <source url="https://bytecodes.tech/rss.xml">我在所有 Mac 上安装的 7 个 Mac 工具</source>
      <pubDate>Thu, 12 Jan 2023 04:08:43 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="我在所有-mac-上安装的-7-个-mac-工具" tabindex="-1"> 我在所有 Mac 上安装的 7 个 Mac 工具</h1>
<p>事不宜迟，这是我在所有 Mac 上使用的 7mac 工具。每当我购买新 Mac 时，我都会设置这七个工具，以便我可以在更舒适的氛围中开始工作，它们可以帮助我提高工作效率。</p>
<h1 id="_1-iterm2" tabindex="-1"> 1. iTerm2</h1>
<p>有什么比iTerm更好的呢？iTerm2.我使用iTerm而不是内置的mac终端。当我使用Mac终端然后切换到iTerm时，我找不到一些功能。再也没有回头。拆分窗格并使用快捷方式将 iTerm 置于前台。它具有良好的搜索功能。</p>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_f-9Rn44AyKZ2jU9-z0Zn9w.png" alt=""></p>
<h1 id="_2-cleanshot" tabindex="-1"> 2. CleanShot</h1>
<p>我经常不得不发送某些内容不起作用的屏幕截图或在屏幕上记录某些内容。虽然 Mac 上预先构建的录制应用程序已经发展，但我使用 CleanShot 是因为它具有模糊内容并上传到他们的云等功能集。通过文本将视频作为链接发送比尝试发送视频剪辑（尤其是向非iMessage用户发送）更容易</p>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_Kp0nIOYx6AxZmevA8vbMTA.png" alt="1_Kp0nIOYx6AxZmevA8vbMTA.png">
是的，这是用CleanShot拍摄的。</p>
<h1 id="_3-fig" tabindex="-1"> 3.Fig</h1>
<p>无花果是我武器库中的新成员，我喜欢使用它的每一刻。还有改进的余地，但它有一个非常强大的功能集，我喜欢，有时我会忘记某些命令的开关。有了无花果，一切都只是一个空间。</p>
<p>P.S — 我主要使用无花果来建议命令行开关。例如，如果您键入 git，然后按空格键，它将弹出一个 git 命令列表，您可以通过制表符、空格键或箭头键访问。它可以自动识别特定的package.json文件，并生成npm/yarn类型的命令建议。</p>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_FVWi2hrLbqGNM9aPKCok3g.png" alt="1_FVWi2hrLbqGNM9aPKCok3g.png"></p>
<p>我使用CleanShot编辑功能删除了我的电子邮件。</p>
<h1 id="_4-monitor-control" tabindex="-1"> 4.Monitor Control</h1>
<p>与图相同，这也是我工具箱中最近添加的内容。我以前听说过显示器控制，但自从我以前每天在不使用显示器的情况下驾驶我的 Mac 以来就没有使用它。当我将Mac插入办公室显示器时，我并不真正关心控制它。但是几个月前我用MateView 4k升级了我的本地设置，当我在盖子关闭的情况下使用笔记本电脑时，我使用MateView扬声器。并且控制MateView的声音输出需要使用触摸条输入来完成;我是一个懒惰的人，不喜欢如此复杂的任务，所以我开始使用监视器控制。</p>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_9bTT76MDVBmXb9oRl9ipog.png" alt="1_9bTT76MDVBmXb9oRl9ipog.png"></p>
<p>真的很方便，我可以看一眼当前的电池电量并拖延充电，直到它因自然情况而死亡。这是不可避免的，因为宇宙最终的热寂。</p>
<h1 id="_5-airbuddy" tabindex="-1"> 5. AirBuddy</h1>
<p>我没有那么多支持蓝牙的设备，所以我会在这里添加更长的文本来弥补这一点。
<img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_KbYlt4u1mBLfjtnu_JiTOQ.png" alt="1_KbYlt4u1mBLfjtnu_JiTOQ.png"></p>
<h1 id="_6-bartender" tabindex="-1"> 6.Bartender</h1>
<p>我认为调酒师应用程序不需要为许多 mac 用户进行任何介绍。它可以帮助我减少菜单栏上的图标混乱，并且可以固定和隐藏我不经常使用的图标。此外，我使用快捷方式来激活 CleanShotX 等应用程序，因此隐藏图标有助于我保持干净的菜单栏。</p>
<p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_6hpa5wD-gZr6UfqiyzZVcw.png" alt="1_6hpa5wD-gZr6UfqiyzZVcw.png"></p>
<p>事实上，您可以控制菜单栏</p>
<h1 id="_7-pasteapp" tabindex="-1"> 7.  PasteApp</h1>
<p>我是一个狂热的 PasteApp 用户，我认为如果不安装 PasteApp，我就无法成功使用 Mac，它使我免于多年来所做的许多糟糕的事情。它可以保存您的剪贴板历史记录，并在您通过首选快捷方式激活它时提供可搜索的用户界面。尝试一下，你会爱上它的。
<img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_NsF8IkCaeaTnjH520PvRtw.png" alt="1_NsF8IkCaeaTnjH520PvRtw.png"></p>
<p>我现在的剪贴板上有一些私人的东西，所以这是CleanshotX拍摄的他们网站的截图。</p>
<p>我在这里展示的一些应用程序是付费的，我通过我的 SetApps 订阅使用它们。我已经计算了一下，如果我要购买大部分必备应用程序，它大约相当于两年的 Setapp 订阅。而且我经常安装一些东西只是为了使用它一次，然后卸载它，直到我再次需要它。</p>
<p>我很想看到更多我使用的应用程序，比如捆绑到 Setapp 中的熊掌记，但生活中并不是所有事情都那么容易，不是吗？</p>
<h2 id="帖子中描述的应用程序" tabindex="-1"> 帖子中描述的应用程序</h2>
<ol>
<li>iTerm — 终端应用程序 — <a href="https://iterm2.com/" target="_blank" rel="noopener noreferrer">https://iterm2.com/</a>（免费）</li>
<li>CleanShotX - 类固醇截图 - <a href="https://cleanshot.com/" target="_blank" rel="noopener noreferrer">https://cleanshot.com/</a>（$ 8 / mo - 或使用<a href="https://go.setapp.com/invite/ncv0xvtz" target="_blank" rel="noopener noreferrer">Setapp</a>获取)</li>
<li>图 — 终端工具 — <a href="https://fig.io/" target="_blank" rel="noopener noreferrer">https://fig.io/</a>（免费供个人使用）</li>
<li>显示器控制 — 使用键盘快捷键控制显示器 — <a href="https://github.com/MonitorControl/MonitorControl" target="_blank" rel="noopener noreferrer">https://github.com/MonitorControl/MonitorControl</a>（免费）</li>
<li>AirBuddy - 更好的蓝牙设备可见性 - <a href="https://v2.airbuddy.app/" target="_blank" rel="noopener noreferrer">https://v2.airbuddy.app/</a>（9.99美元） - 或使用<a href="https://go.setapp.com/invite/ncv0xvtz" target="_blank" rel="noopener noreferrer">Setapp</a>获取)</li>
<li>调酒师 - 干净的菜单栏 - <a href="https://www.macbartender.com/" target="_blank" rel="noopener noreferrer">https://www.macbartender.com/</a>（16美元） - 或使用<a href="https://go.setapp.com/invite/ncv0xvtz" target="_blank" rel="noopener noreferrer">Setapp</a>购买)</li>
<li>PasteApp - 类固醇的剪贴板 - <a href="https://pasteapp.io/" target="_blank" rel="noopener noreferrer">https://pasteapp.io/</a>（$ 1.99 / mo - 或使用Setapp获取）</li>
</ol>
]]></content:encoded>
      <enclosure url="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/1_f-9Rn44AyKZ2jU9-z0Zn9w.png" type="image/png"/>
    </item>
    <item>
      <title>让小白3个月从零养成Machine Learning / AI 达人</title>
      <link>https://bytecodes.tech/self/good-article/month-machine-learning.html</link>
      <guid>https://bytecodes.tech/self/good-article/month-machine-learning.html</guid>
      <source url="https://bytecodes.tech/rss.xml">让小白3个月从零养成Machine Learning / AI 达人</source>
      <pubDate>Wed, 11 Jan 2023 07:15:28 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="让小白3个月从零养成machine-learning-ai-达人" tabindex="-1"> 让小白3个月从零养成Machine Learning / AI 达人</h1>
<p>本文的目的单纯想加速从零开始转换AI领域的时间. 希望按表操课的人可以以最高效率， 在三个月内具备以下AI技能.</p>
<ul>
<li>了解Machine Learning 基本算法</li>
<li>会用Matlab / Octave / python建构Machine Learning</li>
<li>熟悉Anaconda、jupyter等功能及环境介面</li>
<li>了解Deep Learning Framework（ 如Tensorflow、keras、PyTorch 等）</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aac6bbcf8dd44139a6bd835c39b7ece2~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="建议菜单序" tabindex="-1"> 建议菜单序</h2>
<ol>
<li>网络课程（视频课程）
<ul>
<li>1-a. <a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener noreferrer">Coursera的Machine Learning</a>（=CS229a， less math， run @ matlab/octave）</li>
<li>1-b. <a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener noreferrer">Coursera的Deep Learning specialization</a>（=CS230， less math， run @ python/tensorflow）</li>
<li>1-c. <a href="https://www.youtube.com/playlist?list=PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU" target="_blank" rel="noopener noreferrer">Stanford的CS229</a> （Machine Learning， more math， run @ matlab/octave）</li>
<li>1-d. <a href="https://www.youtube.com/playlist?list=PLC1qU-LWwrF64f4QKQT-Vg5Wr4qEE1Zxk" target="_blank" rel="noopener noreferrer">Stanford的CS231n</a> (Convolutional Neural Networks for Visual Recognition)</li>
</ul>
</li>
<li>开发工具（工具/环境）</li>
<li>应用实战（Kaggle）ermaid</li>
</ol>
<h2 id="网络课程课程菜单" tabindex="-1"> 网络课程课程菜单</h2>
<h3 id="_1-a-coursera的machine-learning-大约需要3周左右完成" tabindex="-1"> 1.a Coursera的Machine Learning （大约需要3周左右完成）</h3>
<p>其实这就是Stanford的229a， 建议直接到Coursera参加课程， 作为0基础者的入门是非常浅显易懂的， Coding部分只用了matlat/octave， 对没有python经验的新人来说， 真的是进入Machine Learning的方便之门， 这也是最花时间的部分，完成这个阶段算是对Machine Learning有基本的了解， 从Linear、Non-linear、Logistic 一直到 Nueral Network、Recommend system等等， 也有能力自己写一些小程序练习， 完成此课程后对这个<a href="https://playground.tensorflow.org/" target="_blank" rel="noopener noreferrer">playground</a>的小接口大概可以有些感觉</p>
<h3 id="_1-b-coursera-的deep-learning-specialization-course-1-5" tabindex="-1"> 1.b Coursera 的Deep Learning Specialization （Course 1 ~ 5）</h3>
<p>Course.1 <a href="https://www.coursera.org/learn/neural-networks-deep-learning?specialization=deep-learning" target="_blank" rel="noopener noreferrer">Neural Networks and Deep Learning</a> （大约可以4天左右完成）</p>
<ul>
<li>内容都是跟cs229a基本一样， 相当于用jupyter python复习一次<br>
Course.2 <a href="https://www.coursera.org/learn/deep-neural-network?specialization=deep-learning" target="_blank" rel="noopener noreferrer">Improving Deep Neural Networks</a> （大约可以7天左右完成）</li>
<li>主要介绍各种提高准确度或提高效率的求解优化技巧<br>
Course.3 <a href="https://www.coursera.org/learn/machine-learning-projects?specialization=deep-learning" target="_blank" rel="noopener noreferrer">Structuring Machine Learning Projects</a> （大约可以1–2天左右完成）<br>
Course.4 <a href="https://www.coursera.org/learn/convolutional-neural-networks?specialization=deep-learning" target="_blank" rel="noopener noreferrer">Convolutional Neural Networks</a> （大约可以6-7天左右完成）<br>
Course.5 <a href="https://www.coursera.org/learn/nlp-sequence-models" target="_blank" rel="noopener noreferrer">Recurrent Neural Network</a> （大约可以6– 7天左右完成）<br>
以上课程在Coursera上都只有7天免费， 但是网络上还是其他地方可以找到完整视频， 所以建议先到这些地方看完再决定要不要花钱买证书啰， 如Andrew说明， 虽然有些内容是重叠的， 但是说明的方式不太一样， 另外CS3230主要是走jupyter ipython的， 个人觉得这个考量不错， 根据课程设计及需求， 并搭配业界主流工具来选择课程上的coding环境.<br>
的作法是在免费平台看完， 然后登入Coursera全力做quiz &amp; assignment，这样你可以在7天内完成课程喔， 已经把空白的assignment整理好， 只要下载（<a href="https://github.com/doing-great-events/Coursera-Deep-Learning-Specialization.git" target="_blank" rel="noopener noreferrer">下载链接</a> ）后放到jupyter文件夹即可， 所以完全可以依课程进度在单机作业， 完成每个课程后再去coursera冲assignment/quize提交， 这样可以确保每一门课的完成时间（<a href="https://medium.com/@patient_shadows_eagle_388/%E6%88%91%E6%8A%8Aai%E8%AA%AA%E7%99%BD%E4%BA%86-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E6%90%9E%E5%AE%9Aanoconda-jupyter-76c81a4687b?source=friends_link&amp;sk=6bf6dedbc4e3248c0e1bb18dadf39a4d" target="_blank" rel="noopener noreferrer">jupyter安装看这边</a>）.<br>
完成这个阶段算是对Deep Learning有一定了解了， 可以说出ML/DL差异的个人看法、熟悉jupyter能写点python、知道tensor flow/keras等等frameworks.</li>
</ul>
<h3 id="_1-c-stanford的cs229" tabindex="-1"> 1.c Stanford的CS229</h3>
<p>Youtube可以找到完整课程， 229 &amp; 229a的差别在于CS229 比较着重数学推导说明， CS229a着重在实用知识， 就手应用技巧， 数学说明较少<br>
Andrew Ng个人建议是， 因为229是挑战性较高的课程， 如果你担心你还没准备好， 可以先考虑229a， 个人建议是看229a就好， 因为Andrew会提醒你这部分的数学推导跳过啰， 如果你有兴趣的话你会尝试自己推导验证. 所以看完229a你会知道你对229有没有兴趣， 如果你对数学有特殊爱好当然也可以直接看229， 看完就真的不用看229a了.<br>
个人认为最大的帮助是， 最短时间内你确实踏实的修了一门algorithm的概念课程， 这类帮助在平常几乎是看不出来（或者说需要有点能力，才能辨别出来）， 但是在很多小细节的思维逻辑及讨论过程就能看出水平的差异， 在很多领域都有类似的状况， 就像很多机构工程师连应力都不会算一样， 但还是可以混得下去的.</p>
<h3 id="_1-d-stanford的cs231n" tabindex="-1"> 1.d Stanford的CS231n</h3>
<p>一般来说是因为算法特性的关系，<br>
CNN特别适合用在影像AI （2D/3D data）， RNN特别适合用在音频AI（1D sequence data）， 231n是专门讲CNN的课程， 尤其因为飞飞的关系， 在强国被奉为大陆影像AI第一人， 所以她的课程光是大陆人的流量就爆冲了.</p>
<p>上述课程的难易度一般来说是<br>
coursera Machine Learning &lt; cousera Deep Learning &lt; CS231 &lt; CS229<br>
ps. 虽然很多课程是重复的， 不过有些东西还是可以花点时间看一下， 例如YouTube上的cs230 autumn 2018 L8， Andrew分享了一些他怎么读 paper的方式， 以及他个人看过这么多Stanford学生的求学/求职模式后， 他觉得各种模式的优缺比较. 听听看Standford名师课堂上对Stanford学生的建议与分享， 觉得也是不错的.<br>
另外1.25x播放是非常不错的方式， 可以很大程度帮助各位提高效率并节省很多时间， 到第二个月才发现这个方式， 个人建议是如果能快的时候可以尽量快， 该慢的时候要步步踏实， 例如在做assignment的时候， 除了完成作业， 会把他们的code看懂（因为很久没有写程序啦）， 卡关的时候切忌不要上网找答案， 像在第一次assignment的时候， 卡在simutaneously update就卡了1个小时多才发现问题， 再回头对比程序及教材或数学式时， 会对数学式或Andrew再三强调的simutaneously update很有感觉.</p>
<h2 id="_2-开发工具-工具-环境" tabindex="-1"> 2. 开发工具（工具/环境）</h2>
<p>如果依上述菜单进行的话， 你会依以下流程习惯这些工作环境 ：<br>
Octave/Matlab（cs229a） -&gt; <a href="https://medium.com/@patient_shadows_eagle_388/%E6%88%91%E6%8A%8Aai%E8%AA%AA%E7%99%BD%E4%BA%86-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E6%90%9E%E5%AE%9Aanoconda-jupyter-76c81a4687b?source=friends_link&amp;sk=6bf6dedbc4e3248c0e1bb18dadf39a4d" target="_blank" rel="noopener noreferrer">jupyter python</a>（cs230 / cs231n） -&gt; <a href="https://medium.com/@patient_shadows_eagle_388/%E6%88%91%E6%8A%8Aai%E8%AA%AA%E7%99%BD%E4%BA%86-tensorflow%E6%98%AF%E4%BB%80%E9%BA%BC-%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E8%A3%9D%E6%9C%80%E5%A5%BD-68e30826e975?source=friends_link&amp;sk=f065a2311b6839ba2a4d19b606e40f86" target="_blank" rel="noopener noreferrer">tensor flow</a>（cs230） -&gt; Google Colab<br>
使用python时， 千万不要单独安装python以及各种package， 建议要务必利用<a href="https://medium.com/@patient_shadows_eagle_388/%E6%88%91%E6%8A%8Aai%E8%AA%AA%E7%99%BD%E4%BA%86-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E6%90%9E%E5%AE%9Aanoconda-jupyter-76c81a4687b?source=friends_link&amp;sk=6bf6dedbc4e3248c0e1bb18dadf39a4d" target="_blank" rel="noopener noreferrer">Anaconda</a>作为python版本及众多package的管理界面. 可以节省大量时间而且省心省力好上手.<br>
另外建议要熟悉一下github界面， 因为cs230的assignment， 当时是在GitHub上东拼西凑整理出来， 未来要做项目免不了team work模式， 所以GitHub的界面使用还是有必要了解一下的， 只是为了协助各位最短时间吃完以上菜单， 所以直接把<a href="https://github.com/doing-great-events/Coursera-Deep-Learning-Specialization.git" target="_blank" rel="noopener noreferrer">cs230 assignment的空白卷</a> 也一并整理出来让大家效率更高.<br>
完成这个阶段， 原则上你已经是具备AI的一切技能了， 差的只是提升实战经验了.</p>
<h2 id="_3-应用实战-kaggle" tabindex="-1"> 3. 应用实战（<a href="https://www.kaggle.com/" target="_blank" rel="noopener noreferrer">Kaggle</a>）</h2>
<p>大概在完成1b. Course 2开始接触Kaggle， 觉得这个切入的时机点不错， 因为这个阶段已经算对ML/DL有一定认识， 只是coding技能尚未纯熟， 问题思考角度与经验尚待补强， 这时候进到Kaggle最大的好处是， 它有很多很多很多的题目， 所以绝对足够练习. 另外Kaggle也有一些免费课程， 这边的课程觉得就不用上了， 直接透过Competetion题目实作学习比较快. 一般来说Knowledge类的题目都是不错的练习题， Kaggle也会告诉你Titanic是它们建议的第一题， 再来House Prices、Digital Recognition等等， 第一次感受完后， 可以看看其他人的思考过程分享文（<a href="https://github.com/doing-great-events/Kaggle/blob/main/Titanic_competition/Titanic_Top2.5%25.ipynb" target="_blank" rel="noopener noreferrer">的结果Top 2.5%， code在GitHub这边</a>）.<br>
Titanic的分享文很多， 英文不错的话建议看这两篇<br>
- <a href="https://www.kaggle.com/themlphdstudent/titanic-survive-prediction-tutorial-for-beginners" target="_blank" rel="noopener noreferrer">Titanic Survive Prediction Tutorial for Beginners</a><br>
- <a href="https://www.kaggle.com/soham1024/titanic-data-science-eda-with-meme-solution" target="_blank" rel="noopener noreferrer">Titanic Data Science EDA with meme+Solution</a><br>
中文建议这篇<br>
-<a href="https://medium.com/@yulongtsai/https-medium-com-yulongtsai-titanic-top3-8e64741cc11f" target="_blank" rel="noopener noreferrer">泰坦尼克号生存预测（Top 3%）</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/377a184940d74b8f83de4371c8bd9ce8~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p>搞了3天 总算达成自定义目标 （rank TOP 3% up &amp; score 0.8 up）， 非常适合新手练习的题目</p>
<p>Deep CNN Task ： 上完Coursera Deep Learning专项课程后， 应该有能力作一些稍微复杂的模型， 个人练习了重现facenet模型（Facenet = MTCNN + ResNET embedding+ Triplet classifier）， 下图为在<a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Fdoing-great-events%2FMTCNN_inside_jupyter%2Fblob%2Fmain%2FMTCNN_inside_jupyter%2Fjypyter_MTCNN_upload.ipynb%3Ffbclid%3DIwAR1QcipPXUyOLj4nmu5RSMI46uB5Jqtd3PP-tS_SK12w4MYdWxB_n5EUkg0&amp;h=AT0B5vxVeWJriwH-cm4RZRPdNZaVEFDNRbUgh1-Tzv4nYL4tcCZXeI3UcREaIvMC5y9e8TMZvhtolG6sM_pCBSVJErXzV9LYXf03couIiQ5gimzmLbKJYi6NCN8b_zJu3BJB&amp;__tn__=R%5D-R&amp;c%5B0%5D=AT2vjRjltRa9vUA4v8RiH0joNP2WJMb_TmN4nvK_2gXwHypDosibS3fSSsYlob06isUq9rjW_P9PvBIeDaU0ZJUjAxtQb9_U8kEiyim4fyp3cT4GFfbVKyMVA6KldkfDB19RdcxDNVwSKJFdTDiMkjrPCg" target="_blank" rel="noopener noreferrer">jupyter重现MTCNN的结果</a>.</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/992f3feb024540d388dc5dc8d2285491~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48fd9878fc164c59b886c2db1245d706~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p>左边为MTCNN 3阶段产出， 右边为即时影像脸部侦测</p>
<p>Deep CNN Task ： 重现<a href="https://github.com/doing-great-events/FACENET_inside_jupyter" target="_blank" rel="noopener noreferrer">Facenet 即时人脸辨识</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a2c0b80a1844f8e8877a761d67f3359~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<p>Other Resources<br>
<a href="https://developers.google.com/machine-learning/" target="_blank" rel="noopener noreferrer">Machine Learning Crash Course</a> ： Google 提供的ML在线教育资源<br>
<a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">https://leetcode.com/</a> ： 写程序必须谨记“高效”， 彻底改变你对写程序的认知</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aac6bbcf8dd44139a6bd835c39b7ece2~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>go语言-基础知识</title>
      <link>https://bytecodes.tech/language/go/01.base/</link>
      <guid>https://bytecodes.tech/language/go/01.base/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-基础知识</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>go语言-web</title>
      <link>https://bytecodes.tech/language/go/02.web/</link>
      <guid>https://bytecodes.tech/language/go/02.web/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-web</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>go语言-orm</title>
      <link>https://bytecodes.tech/language/go/03.orm/</link>
      <guid>https://bytecodes.tech/language/go/03.orm/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-orm</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>01.go日常开发代码片段</title>
      <link>https://bytecodes.tech/language/go/04.skills/01.go%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/01.go%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html</guid>
      <source url="https://bytecodes.tech/rss.xml">01.go日常开发代码片段</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_01-go日常开发代码片段" tabindex="-1"> 01.go日常开发代码片段</h1>
<h2 id="获取终端输入" tabindex="-1"> 获取终端输入</h2>
<p>一般情况下，我们使用fmt包的scan方法来获取终端输入内容，但是这可能会有一个问题，如果输入内容有空格或者换行，就不适用了，因此，可以通过bufio来实现获取输入的功能。</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"bufio"</span>
 <span>"fmt"</span>
 <span>"os"</span>
<span>)</span>

<span>func</span> <span>input1</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> s <span>string</span>
 fmt<span>.</span><span>Print</span><span>(</span><span>"请输入内容："</span><span>)</span>
 fmt<span>.</span><span>Scanln</span><span>(</span><span>&amp;</span>s<span>)</span>
 fmt<span>.</span><span>Printf</span><span>(</span><span>"输入的内容为：%s\n"</span><span>,</span> s<span>)</span>
<span>}</span>

<span>func</span> <span>input2</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> s <span>string</span>
 reader <span>:=</span> bufio<span>.</span><span>NewReader</span><span>(</span>os<span>.</span>Stdin<span>)</span>
 s<span>,</span> <span>_</span> <span>=</span> reader<span>.</span><span>ReadString</span><span>(</span><span>'\n'</span><span>)</span> <span>//指定获取输入时的分隔标识</span>
 fmt<span>.</span><span>Printf</span><span>(</span><span>"输入的内容为:%s\n"</span><span>,</span> s<span>)</span>

<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>//问题在于，当用户输入内容为  a b c时，程序获取到的只有a，亦即空格即被截断</span>
 <span>// input1()</span>
 <span>input2</span><span>(</span><span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="生成一个随机数" tabindex="-1"> 生成一个随机数</h2>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"fmt"</span>
 <span>"math/rand"</span>
 <span>"time"</span>
<span>)</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>// 设置一个时间种子</span>
 rand<span>.</span><span>Seed</span><span>(</span>time<span>.</span><span>Now</span><span>(</span><span>)</span><span>.</span><span>UnixNano</span><span>(</span><span>)</span><span>)</span>
 <span>// 表示随机返回一个0到100之间的数字</span>
 s <span>:=</span> rand<span>.</span><span>Intn</span><span>(</span><span>100</span><span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span>s<span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="获取主机ip" tabindex="-1"> 获取主机IP</h2>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"fmt"</span>
 <span>"net"</span>
 <span>"strings"</span>
<span>)</span>

<span>func</span> <span>GetOutboundIP</span><span>(</span><span>)</span> <span>(</span>ip <span>string</span><span>,</span> err <span>error</span><span>)</span> <span>{</span>
 conn<span>,</span> err <span>:=</span> net<span>.</span><span>Dial</span><span>(</span><span>"udp"</span><span>,</span> <span>"8.8.8.8:80"</span><span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  <span>return</span>
 <span>}</span>
 <span>defer</span> conn<span>.</span><span>Close</span><span>(</span><span>)</span>
 localAddr <span>:=</span> conn<span>.</span><span>LocalAddr</span><span>(</span><span>)</span><span>.</span><span>(</span><span>*</span>net<span>.</span>UDPAddr<span>)</span>
 <span>//fmt.Println(localAddr.String())</span>
 ip <span>=</span> strings<span>.</span><span>Split</span><span>(</span>localAddr<span>.</span>IP<span>.</span><span>String</span><span>(</span><span>)</span><span>,</span> <span>":"</span><span>)</span><span>[</span><span>0</span><span>]</span>
 <span>return</span>
<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 ip<span>,</span> err <span>:=</span> <span>GetOutboundIP</span><span>(</span><span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Println</span><span>(</span>err<span>)</span>
 <span>}</span>
 fmt<span>.</span><span>Println</span><span>(</span>ip<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>执行效果如下：</p>
<div><pre><code><span>[</span>root@ops<span>-</span>eryajf<span>-</span>test<span>-</span><span>1</span> test<span>]</span>$<span>go</span> run main<span>.</span><span>go</span>
<span>10.3</span><span>.0</span><span>.41</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h2 id="如何获取一周前-一天前的时间" tabindex="-1"> 如何获取一周前,一天前的时间</h2>
<p>获取一天前或者一周前应该是日常当中经常遇到的场景，这里说一下go当中的实现方式：</p>
<div><pre><code><span>package</span> main
<span>import</span> <span>(</span>
  <span>"fmt"</span>
  <span>"time"</span>
<span>)</span>
<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
<span>//Add方法和Sub方法是相反的，获取t0和t1的时间距离d是使用Sub</span>
<span>//将t0加d获取t1就是使用Add方法</span>
  k <span>:=</span> time<span>.</span><span>Now</span><span>(</span><span>)</span>
  <span>//一天之前</span>
  d<span>,</span> <span>_</span> <span>:=</span> time<span>.</span><span>ParseDuration</span><span>(</span><span>"-24h"</span><span>)</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d<span>)</span><span>)</span>
  <span>//一周之前</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d <span>*</span> <span>7</span><span>)</span><span>)</span>
  <span>//一月之前</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d <span>*</span> <span>30</span><span>)</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上边例子比较有意义的是一周之前，一天之前或者一月之前的算法，更多用如下方式：</p>
<div><pre><code>t <span>:=</span> time<span>.</span><span>Now</span><span>(</span><span>)</span>
<span>// 计算前一天, 当前时间加上0年，0月，-1天</span>
t1 <span>:=</span> t<span>.</span><span>AddDate</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>-</span><span>1</span><span>)</span>
 
<span>// 计算上一个月时间,当前时间加上0年，-1月，0天</span>
t1 <span>:=</span> t<span>.</span><span>AddDate</span><span>(</span><span>0</span><span>,</span><span>-</span><span>1</span><span>,</span><span>0</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="如何判断一个字符串是否在切片列表里" tabindex="-1"> 如何判断一个字符串是否在切片列表里</h2>
<p>有时候我们会通过遍历拿到数据，但是这些数据当中的部分内容是我们特别关心的，这个时候就出现了一个场景：遍历的时候如何判断字符串是否在自己关心的列表当中？</p>
<div><pre><code><span>func</span> <span>Find</span><span>(</span>slice <span>[</span><span>]</span><span>string</span><span>,</span> val <span>string</span><span>)</span> <span>(</span><span>int</span><span>,</span> <span>bool</span><span>)</span> <span>{</span>
    <span>for</span> i<span>,</span> item <span>:=</span> <span>range</span> slice <span>{</span>
        <span>if</span> item <span>==</span> val <span>{</span>
            <span>return</span> i<span>,</span> <span>true</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>-</span><span>1</span><span>,</span> <span>false</span>
<span>}</span>
 
<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
　　dataList <span>:=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"test1"</span><span>,</span> <span>"test2"</span><span>}</span>
　　
　　dataStr <span>:=</span> <span>"test1"</span>　　
　　<span>// 传入切片 和 要查找的字符串</span>
　　<span>_</span><span>,</span> flag <span>:=</span> <span>Find</span><span>(</span>dataList<span>,</span> dataStr<span>)</span>
　　<span>if</span> flag <span>{</span>
　　　　fmt<span>.</span><span>Println</span><span>(</span><span>"存在 -> "</span><span>,</span> dataStr<span>)</span>
　　<span>}</span> <span>else</span> <span>{</span>
　　　　fmt<span>.</span><span>Println</span><span>(</span><span>"不存在 -> "</span><span>,</span> dataStr<span>)</span>
　　<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个时候我们就可以借助于上边的这个小工具来快速过滤或者判断对应的字符串是否是自己想要的了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>02.golang交叉编译</title>
      <link>https://bytecodes.tech/language/go/04.skills/02.golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/02.golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</guid>
      <source url="https://bytecodes.tech/rss.xml">02.golang交叉编译</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_02-golang交叉编译" tabindex="-1"> 02.golang交叉编译</h1>
<p>Golang支持交叉编译程序，交叉编译的意思就是在Mac电脑上可以编译出能在Windows上，Linux上运行的程序，同理其他环境也可以。</p>
<p>方法也特别简单，这里做一下记录。</p>
<h2 id="_1-mac电脑上编译" tabindex="-1"> 1，Mac电脑上编译</h2>
<p><code>Linux</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>linux GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><code>Windows</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>windows GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_2-linux环境编译" tabindex="-1"> 2，Linux环境编译</h2>
<p><code>Mac</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>darwin GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><code>Windows</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>windows GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_3-windows电脑上编译" tabindex="-1"> 3，Windows电脑上编译</h2>
<p><code>Mac</code></p>
<div><pre><code>SET CGO_ENABLED<span>=</span><span>0</span>
SET GOOS<span>=</span>darwin
SET GOARCH<span>=</span>amd64
<span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p><code>Linux</code></p>
<div><pre><code>SET CGO_ENABLED<span>=</span><span>0</span>
SET GOOS<span>=</span>linux
SET GOARCH<span>=</span>amd64
<span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>03.两个切片内容相减的几种方法</title>
      <link>https://bytecodes.tech/language/go/04.skills/03.%E4%B8%A4%E4%B8%AA%E5%88%87%E7%89%87%E5%86%85%E5%AE%B9%E7%9B%B8%E5%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/03.%E4%B8%A4%E4%B8%AA%E5%88%87%E7%89%87%E5%86%85%E5%AE%B9%E7%9B%B8%E5%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95.html</guid>
      <source url="https://bytecodes.tech/rss.xml">03.两个切片内容相减的几种方法</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_03-两个切片内容相减的几种方法" tabindex="-1"> 03.两个切片内容相减的几种方法</h1>
<ul>
<li>
<p>问题</p>
<div><pre><code>已知： 
 <span>var</span> a <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
 <span>var</span> b <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>var</span> b <span>[</span><span>]</span><span>string</span>

预期：
 c <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ul>
<h2 id="_1-运维的思路" tabindex="-1"> 1，运维的思路</h2>
<h3 id="方法一" tabindex="-1"> 方法一</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>,</span> <span>"33"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
  a                  <span>[</span><span>]</span><span>string</span> <span>// 期望：22,33,44</span>
 <span>)</span>

 fmt<span>.</span><span>Println</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span>

 <span>// 循环老的</span>
 <span>for</span> <span>_</span><span>,</span> instance <span>:=</span> <span>range</span> weightInstanceList <span>{</span>
  <span>// 传入待删除IP切片 老的IP 进行判断 是否相等 相等表示待删除 反之加入更新jenkinsFile列表</span>
  isOk <span>:=</span> <span>IsContain</span><span>(</span>RelateInstance<span>,</span> instance<span>)</span>
  <span>if</span> <span>!</span>isOk <span>{</span>
   a <span>=</span> <span>append</span><span>(</span>a<span>,</span> instance<span>)</span>
  <span>}</span>

 <span>}</span>

 fmt<span>.</span><span>Println</span><span>(</span><span>"最后结果："</span><span>,</span> a<span>)</span> <span>// a=["11","11","11"]</span>

<span>}</span>

<span>func</span> <span>IsContain</span><span>(</span>items <span>[</span><span>]</span><span>string</span><span>,</span> item <span>string</span><span>)</span> <span>bool</span> <span>{</span>
 <span>for</span> <span>_</span><span>,</span> eachItem <span>:=</span> <span>range</span> items <span>{</span>
  <span>if</span> eachItem <span>==</span> item <span>{</span>
   <span>return</span> <span>true</span>
  <span>}</span>
 <span>}</span>
 <span>return</span> <span>false</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="方法二" tabindex="-1"> 方法二</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span>weightInstanceList<span>[</span><span>1</span><span>:</span><span>]</span><span>)</span>
 <span>for</span> <span>_</span><span>,</span> instance <span>:=</span> <span>range</span> weightInstanceList <span>{</span>
  <span>for</span> <span>_</span><span>,</span> item <span>:=</span> <span>range</span> RelateInstance <span>{</span>
   <span>if</span> instance <span>==</span> item <span>{</span>
    weightInstanceList <span>=</span> <span>RemoveParam</span><span>(</span>weightInstanceList<span>,</span> instance<span>)</span>
   <span>}</span>

  <span>}</span>
 <span>}</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>"最后结果："</span><span>,</span> weightInstanceList<span>)</span> <span>// a=["11","11","11"]</span>
<span>}</span>

<span>func</span> <span>RemoveParam</span><span>(</span>sli <span>[</span><span>]</span><span>string</span><span>,</span> n <span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>len</span><span>(</span>sli<span>)</span><span>;</span> i<span>++</span> <span>{</span>
  <span>if</span> sli<span>[</span>i<span>]</span> <span>==</span> n <span>{</span>
   <span>if</span> i <span>==</span> <span>0</span> <span>{</span>
    sli <span>=</span> sli<span>[</span><span>1</span><span>:</span><span>]</span>
   <span>}</span> <span>else</span> <span>if</span> i <span>==</span> <span>len</span><span>(</span>sli<span>)</span><span>-</span><span>1</span> <span>{</span>
    sli <span>=</span> sli<span>[</span><span>:</span>i<span>]</span>
   <span>}</span> <span>else</span> <span>{</span>
    sli <span>=</span> <span>append</span><span>(</span>sli<span>[</span><span>:</span>i<span>]</span><span>,</span> sli<span>[</span>i<span>+</span><span>1</span><span>:</span><span>]</span><span>...</span><span>)</span>
   <span>}</span>
   i<span>--</span> <span>// 如果索引i被去掉后，原来索引i+1的会移动到索引i</span>
  <span>}</span>
 <span>}</span>
 <span>return</span> sli
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_2开发的思路" tabindex="-1"> 2开发的思路</h2>
<h3 id="方法一-1" tabindex="-1"> 方法一</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>diff</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span><span>)</span>
<span>}</span>
<span>func</span> <span>diff</span><span>(</span>a<span>,</span> b <span>[</span><span>]</span><span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>var</span> <span>(</span>
  r <span>[</span><span>]</span><span>string</span>
  m <span>=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>struct</span><span>{</span><span>}</span><span>,</span> <span>len</span><span>(</span>a<span>)</span><span>)</span>
 <span>)</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> b <span>{</span>
  m<span>[</span>v<span>]</span> <span>=</span> <span>struct</span><span>{</span><span>}</span><span>{</span><span>}</span>
 <span>}</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> a <span>{</span>
  <span>if</span> <span>_</span><span>,</span> ok <span>:=</span> m<span>[</span>v<span>]</span><span>;</span> <span>!</span>ok <span>{</span>
   r <span>=</span> <span>append</span><span>(</span>r<span>,</span> v<span>)</span>
  <span>}</span>
 <span>}</span>

 <span>return</span> r
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="方法二-1" tabindex="-1"> 方法二</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>diff</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span><span>)</span>
<span>}</span>
<span>func</span> <span>diff</span><span>(</span>a<span>,</span> b <span>[</span><span>]</span><span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>var</span> <span>(</span>
  r <span>[</span><span>]</span><span>string</span>
  m <span>=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>struct</span><span>{</span><span>}</span><span>,</span> <span>len</span><span>(</span>a<span>)</span><span>)</span>
 <span>)</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> a <span>{</span>
  m<span>[</span>v<span>]</span> <span>=</span> <span>struct</span><span>{</span><span>}</span><span>{</span><span>}</span>
 <span>}</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> b <span>{</span>
  <span>delete</span><span>(</span>m<span>,</span> v<span>)</span>
 <span>}</span>

 <span>for</span> k<span>,</span> <span>_</span> <span>:=</span> <span>range</span> m <span>{</span>
  r <span>=</span> <span>append</span><span>(</span>r<span>,</span> k<span>)</span>
 <span>}</span>

 <span>return</span> r
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看出，运维处理该问题时思路会困在当前类型中予以实现，不如开发对数据结构以及特性掌握的牢固，运用起来也就不够灵活了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>04.golang以结构体中某个字段进行排序</title>
      <link>https://bytecodes.tech/language/go/04.skills/04.golang%E4%BB%A5%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/04.golang%E4%BB%A5%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://bytecodes.tech/rss.xml">04.golang以结构体中某个字段进行排序</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_04-golang以结构体中某个字段进行排序" tabindex="-1"> 04.golang以结构体中某个字段进行排序</h1>
<p>我写了一个脚本获取项目在harbor中的tag列表，经过一些curl测试之后，很快就完成了这个脚本的编写。</p>
<p>接下来需要做一些优化方面的考量。</p>
<p>首先一个问题是，返回的结果的顺序好像是随机的，这不是我想要的，通常，当我利用此脚本查项目可用的tag时，我的诉求可能更倾向于获取它最新push的tag，于是，就有了一个在内存中对列表排序的需求。</p>
<p>经过一番搜索，发现官方提供的sort包，直接使用能够对简单的列表进行排序，如果是结构体中的某个字段，则可以用如下方式定义方法：</p>
<div><pre><code><span>// Tags harbor项目tag的对象</span>
<span>type</span> Tags <span>struct</span> <span>{</span>
 Digest        <span>string</span>    <span>`json:"digest"`</span>
 Name          <span>string</span>    <span>`json:"name"`</span>
 Size          <span>int</span>       <span>`json:"size"`</span>
 Architecture  <span>string</span>    <span>`json:"architecture"`</span>
 Os            <span>string</span>    <span>`json:"os"`</span>
 OsVersion     <span>string</span>    <span>`json:"os.version"`</span>
 DockerVersion <span>string</span>    <span>`json:"docker_version"`</span>
 Author        <span>string</span>    <span>`json:"author"`</span>
 Created       time<span>.</span>Time <span>`json:"created"`</span>
 Config        <span>struct</span> <span>{</span>
  Labels <span>interface</span><span>{</span><span>}</span> <span>`json:"labels"`</span>
 <span>}</span> <span>`json:"config"`</span>
 Signature <span>interface</span><span>{</span><span>}</span>   <span>`json:"signature"`</span>
 Labels    <span>[</span><span>]</span><span>interface</span><span>{</span><span>}</span> <span>`json:"labels"`</span>
 PushTime  time<span>.</span>Time     <span>`json:"push_time"`</span>
 PullTime  time<span>.</span>Time     <span>`json:"pull_time"`</span>
<span>}</span>

<span>// 基于时间字段进行排序功能</span>
<span>type</span> tags <span>[</span><span>]</span>Tags

<span>func</span> <span>(</span>s tags<span>)</span> <span>Len</span><span>(</span><span>)</span> <span>int</span> <span>{</span>
 <span>return</span> <span>len</span><span>(</span>s<span>)</span>
<span>}</span>
<span>func</span> <span>(</span>s tags<span>)</span> <span>Swap</span><span>(</span>i<span>,</span> j <span>int</span><span>)</span> <span>{</span>
 s<span>[</span>i<span>]</span><span>,</span> s<span>[</span>j<span>]</span> <span>=</span> s<span>[</span>j<span>]</span><span>,</span> s<span>[</span>i<span>]</span>
<span>}</span>

<span>type</span> ByTime <span>struct</span> <span>{</span>
 tags
<span>}</span>

<span>func</span> <span>(</span>b ByTime<span>)</span> <span>Less</span><span>(</span>i<span>,</span> j <span>int</span><span>)</span> <span>bool</span> <span>{</span>
 <span>return</span> b<span>.</span>tags<span>[</span>i<span>]</span><span>.</span>Created<span>.</span><span>Before</span><span>(</span>b<span>.</span>tags<span>[</span>j<span>]</span><span>.</span>Created<span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在结果返回的地方，直接调用此方法即可实现按时间排序：</p>
<div><pre><code>sort<span>.</span><span>Sort</span><span>(</span>ByTime<span>{</span>data<span>}</span><span>)</span> <span>// 基于创建时间字段进行排序</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>网上的文章，如果字段是int类型时的排序方式：<a href="https://segmentfault.com/a/1190000008062661" target="_blank" rel="noopener noreferrer">golang对自定义类型排序</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>