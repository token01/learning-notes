<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://bytecodes.tech/rss.xml" rel="self" type="application/rss+xml"/>
    <title>凤凰涅槃进阶之路</title>
    <link>https://bytecodes.tech/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Sat, 07 Jan 2023 08:28:08 GMT</pubDate>
    <lastBuildDate>Sat, 07 Jan 2023 08:28:08 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>go</category>
    <item>
      <title>go语言-基础知识</title>
      <link>https://bytecodes.tech/language/go/01.base/</link>
      <guid>https://bytecodes.tech/language/go/01.base/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-基础知识</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>go语言-web</title>
      <link>https://bytecodes.tech/language/go/02.web/</link>
      <guid>https://bytecodes.tech/language/go/02.web/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-web</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>go语言-orm</title>
      <link>https://bytecodes.tech/language/go/03.orm/</link>
      <guid>https://bytecodes.tech/language/go/03.orm/</guid>
      <source url="https://bytecodes.tech/rss.xml">go语言-orm</source>
      <category>go</category>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="目录" tabindex="-1"> 目录</h1>
<p>TODO</p>
]]></content:encoded>
    </item>
    <item>
      <title>01.go日常开发代码片段</title>
      <link>https://bytecodes.tech/language/go/04.skills/01.go%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/01.go%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html</guid>
      <source url="https://bytecodes.tech/rss.xml">01.go日常开发代码片段</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_01-go日常开发代码片段" tabindex="-1"> 01.go日常开发代码片段</h1>
<h2 id="获取终端输入" tabindex="-1"> 获取终端输入</h2>
<p>一般情况下，我们使用fmt包的scan方法来获取终端输入内容，但是这可能会有一个问题，如果输入内容有空格或者换行，就不适用了，因此，可以通过bufio来实现获取输入的功能。</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"bufio"</span>
 <span>"fmt"</span>
 <span>"os"</span>
<span>)</span>

<span>func</span> <span>input1</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> s <span>string</span>
 fmt<span>.</span><span>Print</span><span>(</span><span>"请输入内容："</span><span>)</span>
 fmt<span>.</span><span>Scanln</span><span>(</span><span>&amp;</span>s<span>)</span>
 fmt<span>.</span><span>Printf</span><span>(</span><span>"输入的内容为：%s\n"</span><span>,</span> s<span>)</span>
<span>}</span>

<span>func</span> <span>input2</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> s <span>string</span>
 reader <span>:=</span> bufio<span>.</span><span>NewReader</span><span>(</span>os<span>.</span>Stdin<span>)</span>
 s<span>,</span> <span>_</span> <span>=</span> reader<span>.</span><span>ReadString</span><span>(</span><span>'\n'</span><span>)</span> <span>//指定获取输入时的分隔标识</span>
 fmt<span>.</span><span>Printf</span><span>(</span><span>"输入的内容为:%s\n"</span><span>,</span> s<span>)</span>

<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>//问题在于，当用户输入内容为  a b c时，程序获取到的只有a，亦即空格即被截断</span>
 <span>// input1()</span>
 <span>input2</span><span>(</span><span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="生成一个随机数" tabindex="-1"> 生成一个随机数</h2>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"fmt"</span>
 <span>"math/rand"</span>
 <span>"time"</span>
<span>)</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>// 设置一个时间种子</span>
 rand<span>.</span><span>Seed</span><span>(</span>time<span>.</span><span>Now</span><span>(</span><span>)</span><span>.</span><span>UnixNano</span><span>(</span><span>)</span><span>)</span>
 <span>// 表示随机返回一个0到100之间的数字</span>
 s <span>:=</span> rand<span>.</span><span>Intn</span><span>(</span><span>100</span><span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span>s<span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="获取主机ip" tabindex="-1"> 获取主机IP</h2>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
 <span>"fmt"</span>
 <span>"net"</span>
 <span>"strings"</span>
<span>)</span>

<span>func</span> <span>GetOutboundIP</span><span>(</span><span>)</span> <span>(</span>ip <span>string</span><span>,</span> err <span>error</span><span>)</span> <span>{</span>
 conn<span>,</span> err <span>:=</span> net<span>.</span><span>Dial</span><span>(</span><span>"udp"</span><span>,</span> <span>"8.8.8.8:80"</span><span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  <span>return</span>
 <span>}</span>
 <span>defer</span> conn<span>.</span><span>Close</span><span>(</span><span>)</span>
 localAddr <span>:=</span> conn<span>.</span><span>LocalAddr</span><span>(</span><span>)</span><span>.</span><span>(</span><span>*</span>net<span>.</span>UDPAddr<span>)</span>
 <span>//fmt.Println(localAddr.String())</span>
 ip <span>=</span> strings<span>.</span><span>Split</span><span>(</span>localAddr<span>.</span>IP<span>.</span><span>String</span><span>(</span><span>)</span><span>,</span> <span>":"</span><span>)</span><span>[</span><span>0</span><span>]</span>
 <span>return</span>
<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 ip<span>,</span> err <span>:=</span> <span>GetOutboundIP</span><span>(</span><span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Println</span><span>(</span>err<span>)</span>
 <span>}</span>
 fmt<span>.</span><span>Println</span><span>(</span>ip<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>执行效果如下：</p>
<div><pre><code><span>[</span>root@ops<span>-</span>eryajf<span>-</span>test<span>-</span><span>1</span> test<span>]</span>$<span>go</span> run main<span>.</span><span>go</span>
<span>10.3</span><span>.0</span><span>.41</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h2 id="如何获取一周前-一天前的时间" tabindex="-1"> 如何获取一周前,一天前的时间</h2>
<p>获取一天前或者一周前应该是日常当中经常遇到的场景，这里说一下go当中的实现方式：</p>
<div><pre><code><span>package</span> main
<span>import</span> <span>(</span>
  <span>"fmt"</span>
  <span>"time"</span>
<span>)</span>
<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
<span>//Add方法和Sub方法是相反的，获取t0和t1的时间距离d是使用Sub</span>
<span>//将t0加d获取t1就是使用Add方法</span>
  k <span>:=</span> time<span>.</span><span>Now</span><span>(</span><span>)</span>
  <span>//一天之前</span>
  d<span>,</span> <span>_</span> <span>:=</span> time<span>.</span><span>ParseDuration</span><span>(</span><span>"-24h"</span><span>)</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d<span>)</span><span>)</span>
  <span>//一周之前</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d <span>*</span> <span>7</span><span>)</span><span>)</span>
  <span>//一月之前</span>
  fmt<span>.</span><span>Println</span><span>(</span>k<span>.</span><span>Add</span><span>(</span>d <span>*</span> <span>30</span><span>)</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>上边例子比较有意义的是一周之前，一天之前或者一月之前的算法，更多用如下方式：</p>
<div><pre><code>t <span>:=</span> time<span>.</span><span>Now</span><span>(</span><span>)</span>
<span>// 计算前一天, 当前时间加上0年，0月，-1天</span>
t1 <span>:=</span> t<span>.</span><span>AddDate</span><span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>-</span><span>1</span><span>)</span>
 
<span>// 计算上一个月时间,当前时间加上0年，-1月，0天</span>
t1 <span>:=</span> t<span>.</span><span>AddDate</span><span>(</span><span>0</span><span>,</span><span>-</span><span>1</span><span>,</span><span>0</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="如何判断一个字符串是否在切片列表里" tabindex="-1"> 如何判断一个字符串是否在切片列表里</h2>
<p>有时候我们会通过遍历拿到数据，但是这些数据当中的部分内容是我们特别关心的，这个时候就出现了一个场景：遍历的时候如何判断字符串是否在自己关心的列表当中？</p>
<div><pre><code><span>func</span> <span>Find</span><span>(</span>slice <span>[</span><span>]</span><span>string</span><span>,</span> val <span>string</span><span>)</span> <span>(</span><span>int</span><span>,</span> <span>bool</span><span>)</span> <span>{</span>
    <span>for</span> i<span>,</span> item <span>:=</span> <span>range</span> slice <span>{</span>
        <span>if</span> item <span>==</span> val <span>{</span>
            <span>return</span> i<span>,</span> <span>true</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>-</span><span>1</span><span>,</span> <span>false</span>
<span>}</span>
 
<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
　　dataList <span>:=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"test1"</span><span>,</span> <span>"test2"</span><span>}</span>
　　
　　dataStr <span>:=</span> <span>"test1"</span>　　
　　<span>// 传入切片 和 要查找的字符串</span>
　　<span>_</span><span>,</span> flag <span>:=</span> <span>Find</span><span>(</span>dataList<span>,</span> dataStr<span>)</span>
　　<span>if</span> flag <span>{</span>
　　　　fmt<span>.</span><span>Println</span><span>(</span><span>"存在 -> "</span><span>,</span> dataStr<span>)</span>
　　<span>}</span> <span>else</span> <span>{</span>
　　　　fmt<span>.</span><span>Println</span><span>(</span><span>"不存在 -> "</span><span>,</span> dataStr<span>)</span>
　　<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个时候我们就可以借助于上边的这个小工具来快速过滤或者判断对应的字符串是否是自己想要的了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>02.golang交叉编译</title>
      <link>https://bytecodes.tech/language/go/04.skills/02.golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/02.golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91.html</guid>
      <source url="https://bytecodes.tech/rss.xml">02.golang交叉编译</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_02-golang交叉编译" tabindex="-1"> 02.golang交叉编译</h1>
<p>Golang支持交叉编译程序，交叉编译的意思就是在Mac电脑上可以编译出能在Windows上，Linux上运行的程序，同理其他环境也可以。</p>
<p>方法也特别简单，这里做一下记录。</p>
<h2 id="_1-mac电脑上编译" tabindex="-1"> 1，Mac电脑上编译</h2>
<p><code>Linux</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>linux GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><code>Windows</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>windows GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_2-linux环境编译" tabindex="-1"> 2，Linux环境编译</h2>
<p><code>Mac</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>darwin GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><code>Windows</code></p>
<div><pre><code>CGO_ENABLED<span>=</span><span>0</span> GOOS<span>=</span>windows GOARCH<span>=</span>amd64 <span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_3-windows电脑上编译" tabindex="-1"> 3，Windows电脑上编译</h2>
<p><code>Mac</code></p>
<div><pre><code>SET CGO_ENABLED<span>=</span><span>0</span>
SET GOOS<span>=</span>darwin
SET GOARCH<span>=</span>amd64
<span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p><code>Linux</code></p>
<div><pre><code>SET CGO_ENABLED<span>=</span><span>0</span>
SET GOOS<span>=</span>linux
SET GOARCH<span>=</span>amd64
<span>go</span> build main<span>.</span><span>go</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>03.两个切片内容相减的几种方法</title>
      <link>https://bytecodes.tech/language/go/04.skills/03.%E4%B8%A4%E4%B8%AA%E5%88%87%E7%89%87%E5%86%85%E5%AE%B9%E7%9B%B8%E5%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/03.%E4%B8%A4%E4%B8%AA%E5%88%87%E7%89%87%E5%86%85%E5%AE%B9%E7%9B%B8%E5%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95.html</guid>
      <source url="https://bytecodes.tech/rss.xml">03.两个切片内容相减的几种方法</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_03-两个切片内容相减的几种方法" tabindex="-1"> 03.两个切片内容相减的几种方法</h1>
<ul>
<li>
<p>问题</p>
<div><pre><code>已知： 
 <span>var</span> a <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
 <span>var</span> b <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>var</span> b <span>[</span><span>]</span><span>string</span>

预期：
 c <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
</ul>
<h2 id="_1-运维的思路" tabindex="-1"> 1，运维的思路</h2>
<h3 id="方法一" tabindex="-1"> 方法一</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>,</span> <span>"33"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
  a                  <span>[</span><span>]</span><span>string</span> <span>// 期望：22,33,44</span>
 <span>)</span>

 fmt<span>.</span><span>Println</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span>

 <span>// 循环老的</span>
 <span>for</span> <span>_</span><span>,</span> instance <span>:=</span> <span>range</span> weightInstanceList <span>{</span>
  <span>// 传入待删除IP切片 老的IP 进行判断 是否相等 相等表示待删除 反之加入更新jenkinsFile列表</span>
  isOk <span>:=</span> <span>IsContain</span><span>(</span>RelateInstance<span>,</span> instance<span>)</span>
  <span>if</span> <span>!</span>isOk <span>{</span>
   a <span>=</span> <span>append</span><span>(</span>a<span>,</span> instance<span>)</span>
  <span>}</span>

 <span>}</span>

 fmt<span>.</span><span>Println</span><span>(</span><span>"最后结果："</span><span>,</span> a<span>)</span> <span>// a=["11","11","11"]</span>

<span>}</span>

<span>func</span> <span>IsContain</span><span>(</span>items <span>[</span><span>]</span><span>string</span><span>,</span> item <span>string</span><span>)</span> <span>bool</span> <span>{</span>
 <span>for</span> <span>_</span><span>,</span> eachItem <span>:=</span> <span>range</span> items <span>{</span>
  <span>if</span> eachItem <span>==</span> item <span>{</span>
   <span>return</span> <span>true</span>
  <span>}</span>
 <span>}</span>
 <span>return</span> <span>false</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="方法二" tabindex="-1"> 方法二</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span>weightInstanceList<span>[</span><span>1</span><span>:</span><span>]</span><span>)</span>
 <span>for</span> <span>_</span><span>,</span> instance <span>:=</span> <span>range</span> weightInstanceList <span>{</span>
  <span>for</span> <span>_</span><span>,</span> item <span>:=</span> <span>range</span> RelateInstance <span>{</span>
   <span>if</span> instance <span>==</span> item <span>{</span>
    weightInstanceList <span>=</span> <span>RemoveParam</span><span>(</span>weightInstanceList<span>,</span> instance<span>)</span>
   <span>}</span>

  <span>}</span>
 <span>}</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>"最后结果："</span><span>,</span> weightInstanceList<span>)</span> <span>// a=["11","11","11"]</span>
<span>}</span>

<span>func</span> <span>RemoveParam</span><span>(</span>sli <span>[</span><span>]</span><span>string</span><span>,</span> n <span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>len</span><span>(</span>sli<span>)</span><span>;</span> i<span>++</span> <span>{</span>
  <span>if</span> sli<span>[</span>i<span>]</span> <span>==</span> n <span>{</span>
   <span>if</span> i <span>==</span> <span>0</span> <span>{</span>
    sli <span>=</span> sli<span>[</span><span>1</span><span>:</span><span>]</span>
   <span>}</span> <span>else</span> <span>if</span> i <span>==</span> <span>len</span><span>(</span>sli<span>)</span><span>-</span><span>1</span> <span>{</span>
    sli <span>=</span> sli<span>[</span><span>:</span>i<span>]</span>
   <span>}</span> <span>else</span> <span>{</span>
    sli <span>=</span> <span>append</span><span>(</span>sli<span>[</span><span>:</span>i<span>]</span><span>,</span> sli<span>[</span>i<span>+</span><span>1</span><span>:</span><span>]</span><span>...</span><span>)</span>
   <span>}</span>
   i<span>--</span> <span>// 如果索引i被去掉后，原来索引i+1的会移动到索引i</span>
  <span>}</span>
 <span>}</span>
 <span>return</span> sli
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_2开发的思路" tabindex="-1"> 2开发的思路</h2>
<h3 id="方法一-1" tabindex="-1"> 方法一</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>diff</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span><span>)</span>
<span>}</span>
<span>func</span> <span>diff</span><span>(</span>a<span>,</span> b <span>[</span><span>]</span><span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>var</span> <span>(</span>
  r <span>[</span><span>]</span><span>string</span>
  m <span>=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>struct</span><span>{</span><span>}</span><span>,</span> <span>len</span><span>(</span>a<span>)</span><span>)</span>
 <span>)</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> b <span>{</span>
  m<span>[</span>v<span>]</span> <span>=</span> <span>struct</span><span>{</span><span>}</span><span>{</span><span>}</span>
 <span>}</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> a <span>{</span>
  <span>if</span> <span>_</span><span>,</span> ok <span>:=</span> m<span>[</span>v<span>]</span><span>;</span> <span>!</span>ok <span>{</span>
   r <span>=</span> <span>append</span><span>(</span>r<span>,</span> v<span>)</span>
  <span>}</span>
 <span>}</span>

 <span>return</span> r
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="方法二-1" tabindex="-1"> 方法二</h3>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> <span>(</span>
  weightInstanceList <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"33"</span><span>,</span> <span>"22"</span><span>,</span> <span>"44"</span><span>}</span>
  RelateInstance     <span>[</span><span>]</span><span>string</span> <span>=</span> <span>[</span><span>]</span><span>string</span><span>{</span><span>"11"</span><span>,</span> <span>"22"</span><span>}</span>
 <span>)</span>
 fmt<span>.</span><span>Println</span><span>(</span><span>diff</span><span>(</span>weightInstanceList<span>,</span> RelateInstance<span>)</span><span>)</span>
<span>}</span>
<span>func</span> <span>diff</span><span>(</span>a<span>,</span> b <span>[</span><span>]</span><span>string</span><span>)</span> <span>[</span><span>]</span><span>string</span> <span>{</span>
 <span>var</span> <span>(</span>
  r <span>[</span><span>]</span><span>string</span>
  m <span>=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>struct</span><span>{</span><span>}</span><span>,</span> <span>len</span><span>(</span>a<span>)</span><span>)</span>
 <span>)</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> a <span>{</span>
  m<span>[</span>v<span>]</span> <span>=</span> <span>struct</span><span>{</span><span>}</span><span>{</span><span>}</span>
 <span>}</span>

 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> b <span>{</span>
  <span>delete</span><span>(</span>m<span>,</span> v<span>)</span>
 <span>}</span>

 <span>for</span> k<span>,</span> <span>_</span> <span>:=</span> <span>range</span> m <span>{</span>
  r <span>=</span> <span>append</span><span>(</span>r<span>,</span> k<span>)</span>
 <span>}</span>

 <span>return</span> r
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看出，运维处理该问题时思路会困在当前类型中予以实现，不如开发对数据结构以及特性掌握的牢固，运用起来也就不够灵活了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>04.golang以结构体中某个字段进行排序</title>
      <link>https://bytecodes.tech/language/go/04.skills/04.golang%E4%BB%A5%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/04.golang%E4%BB%A5%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://bytecodes.tech/rss.xml">04.golang以结构体中某个字段进行排序</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_04-golang以结构体中某个字段进行排序" tabindex="-1"> 04.golang以结构体中某个字段进行排序</h1>
<p>我写了一个脚本获取项目在harbor中的tag列表，经过一些curl测试之后，很快就完成了这个脚本的编写。</p>
<p>接下来需要做一些优化方面的考量。</p>
<p>首先一个问题是，返回的结果的顺序好像是随机的，这不是我想要的，通常，当我利用此脚本查项目可用的tag时，我的诉求可能更倾向于获取它最新push的tag，于是，就有了一个在内存中对列表排序的需求。</p>
<p>经过一番搜索，发现官方提供的sort包，直接使用能够对简单的列表进行排序，如果是结构体中的某个字段，则可以用如下方式定义方法：</p>
<div><pre><code><span>// Tags harbor项目tag的对象</span>
<span>type</span> Tags <span>struct</span> <span>{</span>
 Digest        <span>string</span>    <span>`json:"digest"`</span>
 Name          <span>string</span>    <span>`json:"name"`</span>
 Size          <span>int</span>       <span>`json:"size"`</span>
 Architecture  <span>string</span>    <span>`json:"architecture"`</span>
 Os            <span>string</span>    <span>`json:"os"`</span>
 OsVersion     <span>string</span>    <span>`json:"os.version"`</span>
 DockerVersion <span>string</span>    <span>`json:"docker_version"`</span>
 Author        <span>string</span>    <span>`json:"author"`</span>
 Created       time<span>.</span>Time <span>`json:"created"`</span>
 Config        <span>struct</span> <span>{</span>
  Labels <span>interface</span><span>{</span><span>}</span> <span>`json:"labels"`</span>
 <span>}</span> <span>`json:"config"`</span>
 Signature <span>interface</span><span>{</span><span>}</span>   <span>`json:"signature"`</span>
 Labels    <span>[</span><span>]</span><span>interface</span><span>{</span><span>}</span> <span>`json:"labels"`</span>
 PushTime  time<span>.</span>Time     <span>`json:"push_time"`</span>
 PullTime  time<span>.</span>Time     <span>`json:"pull_time"`</span>
<span>}</span>

<span>// 基于时间字段进行排序功能</span>
<span>type</span> tags <span>[</span><span>]</span>Tags

<span>func</span> <span>(</span>s tags<span>)</span> <span>Len</span><span>(</span><span>)</span> <span>int</span> <span>{</span>
 <span>return</span> <span>len</span><span>(</span>s<span>)</span>
<span>}</span>
<span>func</span> <span>(</span>s tags<span>)</span> <span>Swap</span><span>(</span>i<span>,</span> j <span>int</span><span>)</span> <span>{</span>
 s<span>[</span>i<span>]</span><span>,</span> s<span>[</span>j<span>]</span> <span>=</span> s<span>[</span>j<span>]</span><span>,</span> s<span>[</span>i<span>]</span>
<span>}</span>

<span>type</span> ByTime <span>struct</span> <span>{</span>
 tags
<span>}</span>

<span>func</span> <span>(</span>b ByTime<span>)</span> <span>Less</span><span>(</span>i<span>,</span> j <span>int</span><span>)</span> <span>bool</span> <span>{</span>
 <span>return</span> b<span>.</span>tags<span>[</span>i<span>]</span><span>.</span>Created<span>.</span><span>Before</span><span>(</span>b<span>.</span>tags<span>[</span>j<span>]</span><span>.</span>Created<span>)</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在结果返回的地方，直接调用此方法即可实现按时间排序：</p>
<div><pre><code>sort<span>.</span><span>Sort</span><span>(</span>ByTime<span>{</span>data<span>}</span><span>)</span> <span>// 基于创建时间字段进行排序</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>网上的文章，如果字段是int类型时的排序方式：<a href="https://segmentfault.com/a/1190000008062661" target="_blank" rel="noopener noreferrer">golang对自定义类型排序</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>05.vscode开发golang报黄提示composite literal uses unkeyed fields</title>
      <link>https://bytecodes.tech/language/go/04.skills/05.vscode%E5%BC%80%E5%8F%91golang%E6%8A%A5%E9%BB%84%E6%8F%90%E7%A4%BAcomposite%20literal%20uses%20unkeyed%20fields.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/05.vscode%E5%BC%80%E5%8F%91golang%E6%8A%A5%E9%BB%84%E6%8F%90%E7%A4%BAcomposite%20literal%20uses%20unkeyed%20fields.html</guid>
      <source url="https://bytecodes.tech/rss.xml">05.vscode开发golang报黄提示composite literal uses unkeyed fields</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_05-vscode开发golang报黄提示composite-literal-uses-unkeyed-fields" tabindex="-1"> 05.vscode开发golang报黄提示composite literal uses unkeyed fields</h1>
<p>Golang 中使用 Mongo 时经常会写</p>
<p>:::
<code>bson.D{{&quot;key&quot;, &quot;value&quot;}}</code> 这种内容，然后 VS Code 中就会得到大量PROBLEMS，并且老有波浪线的提示，有两种方式能够解决，一种是将结构体补全，一种是禁用掉这种检测。</p>
<h2 id="补全结构体" tabindex="-1"> 补全结构体</h2>
<p>补全结构体就是将如上的bson写成如下方式就不会报了：</p>
<div><pre><code>bson<span>.</span>D<span>{</span><span>{</span>Key<span>:</span> <span>"key"</span><span>,</span> Value<span>:</span> <span>"value"</span><span>}</span><span>}</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>:::</p>
<p>这种写法固然可以，不过当嵌套多的时候，写起来会比较费劲儿，因此这里推荐第二种方式。</p>
<h2 id="关闭检测" tabindex="-1"> 关闭检测</h2>
<p>通过命令行打开<code>setting.json</code>：</p>
<p><img src="http://t.eryajf.net/imgs/2022/01/d6fa4a9f2f285f91.png" alt="imags"></p>
<p>然后添加如下内容：</p>
<div><pre><code> <span>"gopls"</span><span>:</span> <span>{</span>
        <span>"analyses"</span><span>:</span> <span>{</span> <span>"composites"</span><span>:</span> <span>false</span> <span>}</span> <span>// 关闭MongoDB的composites分析</span>
    <span>}</span><span>,</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>然后再回来看检测就不会有这个提示了。</p>
<ul>
<li>参考：
<ul>
<li><a href="https://blog.51cto.com/u_15310543/4753519" target="_blank" rel="noopener noreferrer">https://blog.51cto.com/u_15310543/4753519</a></li>
<li><a href="https://stackoverflow.com/questions/54548441/composite-literal-uses-unkeyed-fields" target="_blank" rel="noopener noreferrer">Composite literal uses unkeyed fields</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="http://t.eryajf.net/imgs/2022/01/d6fa4a9f2f285f91.png" type="image/png"/>
    </item>
    <item>
      <title>06.golang使用$in或$nin查询MongoDB是否在数组内的数据</title>
      <link>https://bytecodes.tech/language/go/04.skills/06.golang%E4%BD%BF%E7%94%A8$in%E6%88%96$nin%E6%9F%A5%E8%AF%A2MongoDB%E6%98%AF%E5%90%A6%E5%9C%A8%E6%95%B0%E7%BB%84%E5%86%85%E7%9A%84%E6%95%B0%E6%8D%AE.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/06.golang%E4%BD%BF%E7%94%A8$in%E6%88%96$nin%E6%9F%A5%E8%AF%A2MongoDB%E6%98%AF%E5%90%A6%E5%9C%A8%E6%95%B0%E7%BB%84%E5%86%85%E7%9A%84%E6%95%B0%E6%8D%AE.html</guid>
      <source url="https://bytecodes.tech/rss.xml">06.golang使用$in或$nin查询MongoDB是否在数组内的数据</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_06-golang使用-in或-nin查询mongodb是否在数组内的数据" tabindex="-1"> 06.golang使用$in或$nin查询MongoDB是否在数组内的数据</h1>
<h2 id="前言" tabindex="-1"> 前言</h2>
<p>开发cmdb系统的时候，有一个场景是A对象数据关联B对象的数据，此时有一个接口需要透出已经在(或者不在)A对象某条数据关联列表的B对象的数据。</p>
<p>因为两边都是一个列表对象，如果单纯使用代码的思路来解决，大概会是下边这样：</p>
<ol>
<li>首先查询A对象这条数，能够拿到关联的B对象的数据ID。</li>
<li>然后查询B对象对应的所有数据，遍历这数据，判断是否已经在A绑定的列表中。</li>
</ol>
<p>这个思路虽然能够解题，但是不够优雅，后来看到MongoDB有一个<code>$in</code>和<code>$nin</code>的方法，能够很方便的满足这个需求。</p>
<ul>
<li><code>$in</code>:相当于关系型数据库中的<code>in()</code>查询，但<code>$in</code>操作符指定查询对象是一个数组。</li>
<li><code>$nin</code>:与<code>$in</code>一样，只不过是取反的意思。</li>
</ul>
<h2 id="实践" tabindex="-1"> 实践</h2>
<h3 id="原始语句" tabindex="-1"> 原始语句</h3>
<p>首先准备三条B对象的数据：</p>
<div><pre><code>db<span>.</span>users<span>.</span><span>insert</span><span>(</span><span>[</span>{<span>"name"</span>:<span>"aaa"</span><span>,</span><span>"age"</span>:<span>20</span>}<span>,</span>{<span>"name"</span>:<span>"bbb"</span><span>,</span><span>"age"</span>:<span>2</span>}<span>,</span>{<span>"name"</span>:<span>"ccc"</span><span>,</span><span>"age"</span>:<span>30</span>}<span>]</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>插入之后三条数据如下：</p>
<div><pre><code><span>/* 1 */</span>
<span>{</span>
    <span>"_id"</span> <span>:</span> ObjectId(<span>"6219c18d6e5030b4a6caa42b"</span>)<span>,</span>
    <span>"name"</span> <span>:</span> <span>"aaa"</span><span>,</span>
    <span>"age"</span> <span>:</span> <span>20.0</span>
<span>}</span>

<span>/* 2 */</span>
<span>{</span>
    <span>"_id"</span> <span>:</span> ObjectId(<span>"6219c18d6e5030b4a6caa42c"</span>)<span>,</span>
    <span>"name"</span> <span>:</span> <span>"bbb"</span><span>,</span>
    <span>"age"</span> <span>:</span> <span>2.0</span>
<span>}</span>

<span>/* 3 */</span>
<span>{</span>
    <span>"_id"</span> <span>:</span> ObjectId(<span>"6219c2016e5030b4a6caa42d"</span>)<span>,</span>
    <span>"name"</span> <span>:</span> <span>"ccc"</span><span>,</span>
    <span>"age"</span> <span>:</span> <span>30.0</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后插入一条A对象的数据：</p>
<div><pre><code>db<span>.</span>groups<span>.</span><span>insert</span><span>(</span><span>[</span>{<span>"name"</span>:<span>"ops"</span><span>,</span><span>"nick_name"</span>:<span>"运维"</span><span>,</span><span>"users"</span>:<span>[</span><span>]</span>}<span>]</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>输入插入之后如下：</p>
<div><pre><code><span>/* 1 */</span>
<span>{</span>
    <span>"_id"</span> <span>:</span> ObjectId(<span>"6219c27c6e5030b4a6caa42e"</span>)<span>,</span>
    <span>"name"</span> <span>:</span> <span>"ops"</span><span>,</span>
    <span>"nick_name"</span> <span>:</span> <span>"运维"</span><span>,</span>
    <span>"users"</span> <span>:</span> <span>[</span><span>]</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个时候我们可以看到在ops组里的用户为空，那么在我们将用户往组里添加的时候，需要获取到不在这个组内的用户，可以使用如下语句：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'users'</span><span>)</span><span>.</span>find<span>(</span>{<span>"_id"</span>: {<span>"$nin"</span>: <span>[</span><span>]</span>}}<span>)</span>

<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42b"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"aaa"</span><span>,</span>
    <span>"age"</span> : <span>20.0</span>
}

<span>/* 2 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42c"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"bbb"</span><span>,</span>
    <span>"age"</span> : <span>2.0</span>
}

<span>/* 3 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c2016e5030b4a6caa42d"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"ccc"</span><span>,</span>
    <span>"age"</span> : <span>30.0</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>同理如果直接将$nin改掉，则可以看到获取到的数据为空：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'users'</span><span>)</span><span>.</span>find<span>(</span>{<span>"_id"</span>: {<span>"$in"</span>: <span>[</span><span>]</span>}}<span>)</span>
Fetched <span>0</span> record<span>(</span>s<span>)</span> <span>in</span> <span>3</span>ms
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="golang代码" tabindex="-1"> golang代码</h3>
<p>接着我们将如上的查询转换成golang代码，这里仅展示主要查询的思路代码：</p>
<div><pre><code><span>type</span> Group <span>struct</span> <span>{</span>
 Name     <span>string</span>   <span>`json:"name" bson:"name"`</span>
 NickName <span>string</span>   <span>`json:"nick_name" bson:"nick_name"`</span>
 Users    <span>[</span><span>]</span><span>string</span> <span>`json:"users" bson:"users"`</span>
<span>}</span>

<span>type</span> User <span>struct</span> <span>{</span>
 Name <span>string</span> <span>`json:"name" bson:"name"`</span>
 Age  <span>int</span>    <span>`json:"age" bson:"age"`</span>
<span>}</span>

<span>func</span> <span>FindTest</span><span>(</span><span>)</span> <span>{</span>
 <span>var</span> group Group
 table <span>:=</span> DB<span>.</span><span>Collection</span><span>(</span><span>"groups"</span><span>)</span>
 res <span>:=</span> table<span>.</span><span>FindOne</span><span>(</span>ctx<span>,</span> bson<span>.</span>M<span>{</span><span>"name"</span><span>:</span> <span>"ops"</span><span>}</span><span>)</span>
 <span>if</span> err <span>:=</span> res<span>.</span><span>Err</span><span>(</span><span>)</span><span>;</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Printf</span><span>(</span><span>"find data failed: %v\n"</span><span>,</span> err<span>)</span>
 <span>}</span>
 <span>if</span> err <span>:=</span> res<span>.</span><span>Decode</span><span>(</span><span>&amp;</span>group<span>)</span><span>;</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Printf</span><span>(</span><span>"decode data failed: %v\n"</span><span>,</span> err<span>)</span>
 <span>}</span>

 <span>var</span> alreadyLinks <span>[</span><span>]</span>primitive<span>.</span>ObjectID
 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> group<span>.</span>Users <span>{</span>
  objid<span>,</span> err <span>:=</span> primitive<span>.</span><span>ObjectIDFromHex</span><span>(</span>v<span>)</span>
  <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
   fmt<span>.</span><span>Printf</span><span>(</span><span>"%v\n"</span><span>,</span> err<span>)</span>
  <span>}</span>
  alreadyLinks <span>=</span> <span>append</span><span>(</span>alreadyLinks<span>,</span> objid<span>)</span>
 <span>}</span>

 filter <span>:=</span> bson<span>.</span>D<span>{</span><span>}</span>
 filter <span>=</span> <span>append</span><span>(</span>filter<span>,</span> bson<span>.</span>E<span>{</span>Key<span>:</span> <span>"_id"</span><span>,</span> Value<span>:</span> bson<span>.</span>M<span>{</span><span>"$in"</span><span>:</span> alreadyLinks<span>}</span><span>}</span><span>)</span>
 users<span>,</span> err <span>:=</span> <span>ListUser</span><span>(</span>filter<span>,</span> options<span>.</span>FindOptions<span>{</span><span>}</span><span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Printf</span><span>(</span><span>"get data failed: %v\n"</span><span>,</span> err<span>)</span>
 <span>}</span>
 <span>for</span> <span>_</span><span>,</span> v <span>:=</span> <span>range</span> users <span>{</span>
  fmt<span>.</span><span>Printf</span><span>(</span><span>"用户名: %v 年龄: %v\n"</span><span>,</span> v<span>.</span>Name<span>,</span> v<span>.</span>Age<span>)</span>
 <span>}</span>
<span>}</span>

<span>// ListUser 获取用户列表</span>
<span>func</span> <span>ListUser</span><span>(</span>filter bson<span>.</span>D<span>,</span> options options<span>.</span>FindOptions<span>)</span> <span>(</span><span>[</span><span>]</span><span>*</span>User<span>,</span> <span>error</span><span>)</span> <span>{</span>
 table <span>:=</span> DB<span>.</span><span>Collection</span><span>(</span><span>"users"</span><span>)</span>
 cus<span>,</span> err <span>:=</span> table<span>.</span><span>Find</span><span>(</span>ctx<span>,</span> filter<span>,</span> <span>&amp;</span>options<span>)</span>
 <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
  fmt<span>.</span><span>Printf</span><span>(</span><span>"find data failed: %v\n"</span><span>,</span> err<span>)</span>
 <span>}</span>
 <span>defer</span> <span>func</span><span>(</span>cus <span>*</span>mongo<span>.</span>Cursor<span>,</span> ctx context<span>.</span>Context<span>)</span> <span>{</span>
  err <span>:=</span> cus<span>.</span><span>Close</span><span>(</span>ctx<span>)</span>
  <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
   <span>return</span>
  <span>}</span>
 <span>}</span><span>(</span>cus<span>,</span> ctx<span>)</span>

 list <span>:=</span> <span>make</span><span>(</span><span>[</span><span>]</span><span>*</span>User<span>,</span> <span>0</span><span>)</span>
 <span>for</span> cus<span>.</span><span>Next</span><span>(</span>ctx<span>)</span> <span>{</span>
  user <span>:=</span> <span>new</span><span>(</span>User<span>)</span>
  err <span>:=</span> cus<span>.</span><span>Decode</span><span>(</span><span>&amp;</span>user<span>)</span>
  <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
   fmt<span>.</span><span>Printf</span><span>(</span><span>"decode data failed: %v\n"</span><span>,</span> err<span>)</span>
  <span>}</span>
  list <span>=</span> <span>append</span><span>(</span>list<span>,</span> user<span>)</span>
 <span>}</span>

 <span>return</span> list<span>,</span> <span>nil</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时运行代码，会报一个错误：<code>find data failed: (BadValue) $nin needs an array</code>。</p>
<p>当我们使用这个方法的时候，MongoDB要求数组里边至少有一个值，如果没有值，则可以塞一个空的值进去用于聚合，因此加入下边的判断代码：</p>
<div><pre><code> <span>//如果数组为空,则需要为其填充一个空的ID,否则会报错  $nin needs an array</span>
 <span>if</span> <span>len</span><span>(</span>alreadyLinks<span>)</span> <span>==</span> <span>0</span> <span>{</span> 
  alreadyLinks <span>=</span> <span>append</span><span>(</span>alreadyLinks<span>,</span> primitive<span>.</span>NilObjectID<span>)</span>
 <span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>此时再次运行，可以得到如下结果：</p>
<div><pre><code>$ go run main.go
用户名：aaa 年龄：20
用户名：bbb 年龄：2
用户名：ccc 年龄：30
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>可以看到跟我们用sql查询的结果是一致的。</p>
<h3 id="再验证" tabindex="-1"> 再验证</h3>
<p>此时我们将aaa用户的ID塞进ops组内，数据如下：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'groups'</span><span>)</span><span>.</span>find<span>(</span>{}<span>)</span>
<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c2c46e5030b4a6caa42f"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"ops"</span><span>,</span>
    <span>"nick_name"</span> : <span>"运维"</span><span>,</span>
    <span>"users"</span> : <span>[</span> 
        <span>"6219c18d6e5030b4a6caa42b"</span>
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后查询已经在组内的用户：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'users'</span><span>)</span><span>.</span>find<span>(</span>{<span>"_id"</span>: {<span>"$in"</span>: <span>[</span>ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42b"</span><span>)</span><span>]</span>}}<span>)</span>

<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42b"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"aaa"</span><span>,</span>
    <span>"age"</span> : <span>20.0</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>查询不在组内的用户：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'users'</span><span>)</span><span>.</span>find<span>(</span>{<span>"_id"</span>: {<span>"$nin"</span>: <span>[</span>ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42b"</span><span>)</span><span>]</span>}}<span>)</span>

<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c18d6e5030b4a6caa42c"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"bbb"</span><span>,</span>
    <span>"age"</span> : <span>2.0</span>
}

<span>/* 2 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"6219c2016e5030b4a6caa42d"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"ccc"</span><span>,</span>
    <span>"age"</span> : <span>30.0</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时运行我们的代码，可以看到相同的想要的结果：</p>
<div><pre><code>$ go run main.go
用户名: bbb 年龄: <span>2</span>
用户名: ccc 年龄: <span>30</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>这个例子就是结合MongoDB提供的方法，来解决实际场景中的问题的，能够更加优雅地解决问题，也能节约一定的资源开销。</p>
]]></content:encoded>
    </item>
    <item>
      <title>07.golang使用$push和$addToSet往数组添加字段的异同</title>
      <link>https://bytecodes.tech/language/go/04.skills/07.golang%E4%BD%BF%E7%94%A8$push%E5%92%8C$addToSet%E5%BE%80%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E7%9A%84%E5%BC%82%E5%90%8C.html</link>
      <guid>https://bytecodes.tech/language/go/04.skills/07.golang%E4%BD%BF%E7%94%A8$push%E5%92%8C$addToSet%E5%BE%80%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E7%9A%84%E5%BC%82%E5%90%8C.html</guid>
      <source url="https://bytecodes.tech/rss.xml">07.golang使用$push和$addToSet往数组添加字段的异同</source>
      <pubDate>Fri, 06 Jan 2023 14:36:39 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="_07-golang使用-push和-addtoset往数组添加字段的异同" tabindex="-1"> 07.golang使用$push和$addToSet往数组添加字段的异同</h1>
<h2 id="前言结论" tabindex="-1"> 前言结论</h2>
<p>在面对MongoDB的集合字段交互时，我们可能会接触到<code>$push</code>与<code>$addToSet</code>两个方法，两个方法看似功能差不多，实际使用场景中也有一些不同，这里先说结论。</p>
<ul>
<li>相同
<ul>
<li>都是提供了往数组添加元素的功能。</li>
</ul>
</li>
<li>差异
<ul>
<li>无论数组对象是什么样，相同的值，多次添加时，<code>$addToSet</code>会自动去重，而<code>$push</code>不会。</li>
<li>无论数组对象是什么样，<code>$addToSet</code>一次只能添加一个元素，而<code>$push</code>可以结合<code>$each</code>实现一次添加多个元素。</li>
</ul>
</li>
</ul>
<p>进入验证之前，先放一张美女图提神醒脑一波：</p>
<h2 id="实验验证" tabindex="-1"> 实验验证</h2>
<h3 id="准备数据" tabindex="-1"> 准备数据</h3>
<p>首先我们可以看以下一组操作，体现两者都能够添加元素到数组内，准备测试数据如下，后边每次重新测试，都会重置准备的数据，不再赘述。</p>
<div><pre><code>$ db<span>.</span>datas<span>.</span><span>insert</span><span>(</span>
    <span>[</span>
        {<span>"name"</span>:<span>"aa"</span>}<span>,</span>
        {<span>"name"</span>:<span>"bb"</span>}<span>,</span>
        {<span>"name"</span>:<span>"cc"</span>}<span>,</span>
        {<span>"name"</span>:<span>"dd"</span>}
    <span>]</span>
<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>看一眼数据：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'datas'</span><span>)</span><span>.</span>find<span>(</span>{}<span>)</span>
<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b04709d75257165271fc5"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"aa"</span>
}

<span>/* 2 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b04709d75257165271fc6"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"bb"</span>
}

<span>/* 3 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b04709d75257165271fc7"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"cc"</span>
}

<span>/* 4 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b04709d75257165271fc8"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"dd"</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="添加单条数据" tabindex="-1"> 添加单条数据</h3>
<p>执行如下一波操作添加字段到一个列表：</p>
<div><pre><code><span>// 添加单个元素到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"aa"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: <span>"11"</span> } }
<span>)</span>
<span>// 添加单个元素到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"aa"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: <span>"11"</span> } }
<span>)</span>
<span>// 添加一个对象到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"bb"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: {<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"bb-1"</span>} } }
<span>)</span>
<span>// 添加一个对象到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"bb"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: {<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"bb-1"</span>} } }
<span>)</span>

<span>// 添加单个元素到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"cc"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: <span>"22"</span> } }
<span>)</span>
<span>// 添加单个元素到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"cc"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: <span>"22"</span> } }
<span>)</span>
<span>// 添加一个对象到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"dd"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: {<span>"name"</span>:<span>"dd-2"</span><span>,</span><span>"age"</span>:<span>"dd-2"</span>} } }
<span>)</span>
<span>// 添加一个对象到列表</span>
db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"dd"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: {<span>"name"</span>:<span>"dd-2"</span><span>,</span><span>"age"</span>:<span>"dd-2"</span>} } }
<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>注意：</code>如上命令之所以执行两次，是为了结合结果看出其中差异。</p>
<p>此时再次查库可看到结果如下：</p>
<div><pre><code>$ db<span>.</span>getCollection<span>(</span><span>'datas'</span><span>)</span><span>.</span>find<span>(</span>{}<span>)</span>
<span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b08129d75257165271fcd"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"aa"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        <span>"11"</span>
    <span>]</span>
}

<span>/* 2 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b08129d75257165271fce"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"bb"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        {
            <span>"name"</span> : <span>"bb-1"</span><span>,</span>
            <span>"age"</span> : <span>"bb-1"</span>
        }
    <span>]</span>
}

<span>/* 3 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b08129d75257165271fcf"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"cc"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        <span>"22"</span><span>,</span> 
        <span>"22"</span>
    <span>]</span>
}

<span>/* 4 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b08129d75257165271fd0"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"dd"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        {
            <span>"name"</span> : <span>"dd-2"</span><span>,</span>
            <span>"age"</span> : <span>"dd-2"</span>
        }<span>,</span> 
        {
            <span>"name"</span> : <span>"dd-2"</span><span>,</span>
            <span>"age"</span> : <span>"dd-2"</span>
        }
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看到两个指令都支持简单和复杂对象的交互，只不过使用<code>$addToSet</code>添加时，如果列表已存在该值，则不会重复添加。</p>
<h3 id="添加多条数据" tabindex="-1"> 添加多条数据</h3>
<p>添加的多个元素为简单字符串：</p>
<div><pre><code>$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { name: <span>"aa"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: { $each: <span>[</span> <span>"90"</span><span>,</span> <span>"92"</span><span>,</span> <span>"85"</span> <span>]</span> } } }
<span>)</span>
$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { name: <span>"aa"</span> }<span>,</span>
   { $push: { <span>"label_list"</span>: { $each: <span>[</span> <span>"90"</span><span>,</span> <span>"92"</span><span>,</span> <span>"85"</span> <span>]</span> } } }
<span>)</span>

$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { name: <span>"bb"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: { $each: <span>[</span> <span>"90"</span><span>,</span> <span>"92"</span><span>,</span> <span>"85"</span> <span>]</span> } } }
<span>)</span>
$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { name: <span>"bb"</span> }<span>,</span>
   { $addToSet: { <span>"label_list"</span>: { $each: <span>[</span> <span>"90"</span><span>,</span> <span>"92"</span><span>,</span> <span>"85"</span> <span>]</span> } } }
<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>其中<code>$push</code>多次添加会重复添加：</p>
<div><pre><code><span>/* 1 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b13239d75257165271fdd"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"aa"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        <span>"90"</span><span>,</span> 
        <span>"92"</span><span>,</span> 
        <span>"85"</span><span>,</span> 
        <span>"90"</span><span>,</span> 
        <span>"92"</span><span>,</span> 
        <span>"85"</span>
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>再看<code>$addToSet</code>的效果，会自动去重：</p>
<div><pre><code><span>/* 2 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b13239d75257165271fde"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"bb"</span><span>,</span>
    <span>"label_list"</span> : <span>[</span> 
        <span>"90"</span><span>,</span> 
        <span>"92"</span><span>,</span> 
        <span>"85"</span>
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>添加的多个元素为复杂对象：</p>
<div><pre><code>$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"cc"</span> }<span>,</span>
   { $push: { <span>"link_model"</span>:{
        $each: <span>[</span>{<span>"name"</span>:<span>"aa-1"</span><span>,</span><span>"age"</span>:<span>"3"</span>}<span>,</span>{<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"4"</span>}<span>]</span><span>,</span>
  <span>"$position"</span>:<span>0</span><span>,</span>
     } } }
<span>)</span>
$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"cc"</span> }<span>,</span>
   { $push: { <span>"link_model"</span>:{
        $each: <span>[</span>{<span>"name"</span>:<span>"aa-1"</span><span>,</span><span>"age"</span>:<span>"3"</span>}<span>,</span>{<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"4"</span>}<span>]</span><span>,</span>
  <span>"$position"</span>:<span>0</span><span>,</span>
     } } }
<span>)</span>

$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"dd"</span> }<span>,</span>
   { $addToSet: { <span>"link_models"</span>:{
        $each: <span>[</span>{<span>"name"</span>:<span>"aa-1"</span><span>,</span><span>"age"</span>:<span>"3"</span>}<span>,</span>{<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"4"</span>}<span>]</span><span>,</span>
     } } }
<span>)</span>
$ db<span>.</span>datas<span>.</span><span>update</span><span>(</span>
   { <span>"name"</span> : <span>"dd"</span> }<span>,</span>
   { $addToSet: { <span>"link_models"</span>:{
        $each: <span>[</span>{<span>"name"</span>:<span>"aa-1"</span><span>,</span><span>"age"</span>:<span>"3"</span>}<span>,</span>{<span>"name"</span>:<span>"bb-1"</span><span>,</span><span>"age"</span>:<span>"4"</span>}<span>]</span><span>,</span>
     } } }
<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后查看通过<code>$push</code>添加的这条数据，没有自动查重：</p>
<div><pre><code><span>/* 3 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b13239d75257165271fdf"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"cc"</span><span>,</span>
    <span>"link_model"</span> : <span>[</span> 
        {
            <span>"name"</span> : <span>"aa-1"</span><span>,</span>
            <span>"age"</span> : <span>"3"</span>
        }<span>,</span> 
        {
            <span>"name"</span> : <span>"bb-1"</span><span>,</span>
            <span>"age"</span> : <span>"4"</span>
        }<span>,</span> 
        {
            <span>"name"</span> : <span>"aa-1"</span><span>,</span>
            <span>"age"</span> : <span>"3"</span>
        }<span>,</span> 
        {
            <span>"name"</span> : <span>"bb-1"</span><span>,</span>
            <span>"age"</span> : <span>"4"</span>
        }
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>再看使用<code>$addToSet</code>，则可以自动去重：</p>
<div><pre><code><span>/* 4 */</span>
{
    <span>"_id"</span> : ObjectId<span>(</span><span>"622b13239d75257165271fe0"</span><span>)</span><span>,</span>
    <span>"name"</span> : <span>"dd"</span><span>,</span>
    <span>"link_models"</span> : <span>[</span> 
        {
            <span>"name"</span> : <span>"aa-1"</span><span>,</span>
            <span>"age"</span> : <span>"3"</span>
        }<span>,</span> 
        {
            <span>"name"</span> : <span>"bb-1"</span><span>,</span>
            <span>"age"</span> : <span>"4"</span>
        }
    <span>]</span>
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>