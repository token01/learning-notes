import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as d,a as e,b as a,d as p,e as l,r as t}from"./app.11a9ee6c.js";const n={},i=l('<blockquote><p>浅谈hyperledger fabric源码|Order节点概述</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn15th0ollj31c00u0qcl.jpg" alt="bcc633a6c26528720cf16ed170f6a141" loading="lazy"></p><h2 id="前言及源码目录" tabindex="-1"><a class="header-anchor" href="#前言及源码目录" aria-hidden="true">#</a> 前言及源码目录</h2><p><code>Orderer</code>排序节点这块内容主要包括了节点启动流程、<code>Broadcast</code>广播交易服务、<code>Orderer</code>共识排序服务以及<code>Deliver</code>区块分发服务。其相关源码目录文件如下：</p><blockquote><p>/orderer</p><p>|-common</p><p>​ |-blockcutter:交易切割打包模块 ✨✨✨✨✨✨</p><p>​ |-bootstrap:引导启动模块，生成创世块 ✨✨✨✨✨✨</p><p>​ |-broadcast:交易广播服务模块 ✨✨✨✨✨✨</p><p>​ |-localconfig:本地配置模块</p><p>​ |-metadata：获取元数据模块</p><p>​ |-msgprocessor:消息处理器模块</p><p>​ |-multichannel：多管道注册管理器模块</p><p>​ |-performance：性能测量模块</p><p>​ |-server：Order排序服务器模块 ✨✨✨✨✨✨</p><p>|-consensus</p><p>​ |-kafka:kafka共识组件模块 ✨✨✨✨✨✨</p><p>​ |-solo:solo共识组件模块</p><p>​ |-consensus.go:定义共识组件相关接口</p><p>|-main.go:orderer主程序</p></blockquote><blockquote><p>/common</p><p>|-deliver:定义Deliver服务器及处理器接口 ✨✨✨✨✨✨</p></blockquote><blockquote><p>/core</p><p>|-deliverservice</p><p>​ |-blocksprovider:区块提供者模块 ✨✨✨✨✨✨</p><p>​ |-client.go:提供broadcastClient客户端 ✨✨✨✨✨✨</p><p>​ |-deliveryClient：Deliver服务客户端 ✨✨✨✨✨✨</p><p>​ |-requester.go:请求区块数据 ✨✨✨✨✨✨</p></blockquote><blockquote><p>/protos</p><p>|-orderer:protobuf消息定义模块</p></blockquote><h2 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能" aria-hidden="true">#</a> 主要功能</h2><p><code>Orderer</code>排序节点在<code>Hyperledger Fabric</code>系统架构中处于核心角色地位，管理着系统通道与所有应用通道，负责通道创建、通道配置更新等操作，并处理客户端提交的交易消息请求，对交易进行排序并按规则打包成新区块，提交账本并维护通道账本数据，为全网节点提供<code>Broadcast</code>交易广播服务、<code>Orderer</code>共识排序服务、<code>Deliver</code>区块分发服务等。通常，Hyperledger Fabric启动时需要先启动Orderer排序节点，创建系统通道提供正常服务后，再启动其他角色的<code>Peer</code>节点进入正常工作状态。其服务模块关系与架构示如图：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn16qf76aaj31ev0u0top.jpg" alt="image-20210126163847049" loading="lazy"></p><p><code>Orderer</code>节点启动后基于创世区块初始化系统通道，创建<code>Orderer</code>排序服务器，封装了<code>Broadcast</code>服务处理句柄、<code>Deliver</code>服务处理句柄与多通道注册管理器对象，并提供<code>Broadcast</code>()交易广播服务接口与 <code>Deliver</code>()区块分发服务接口。</p><p>其中，<code>Orderer</code>排序服务器基于<code>Broadcast</code>()接口接收交易广播服务请求，调用<code>Broadcast</code>服务处理句柄的<code>Handle</code>()方法进行处理，建立消息处理循环，接收与处理客户端提交的普通交易消息、配置交易消息等请求消息，经过滤后发送至通道绑定的共识组件链对象（<code>Solo</code>类型、<code>Kafka</code>类型等）进行排序。接着，再将排序后的交易添加到本地待处理的缓存交易消息列表，并按照交易出块规则构造新区块，提交到<code>Orderer</code>节点指定通道账本的区块数据文件中，同时负责创建新的应用通道、更新通道配置等通道管理工作。目前，<code>Orderer</code>排序服务器负责接收与处理两类交易消息，具体如下。</p><ul><li><p>配置交易消息（ConfigMsg）：通道头部类型是<code>CONFIG_UPDATE</code>的通道配置交易消息，含有最新的通道配置信息，经过通道消息处理器过滤后，转换为通道头部类型为 <code>ORDERER_TRANSACTION</code>或<code>CONFIG</code>的配置交易消息（<code>Envelope</code>类型），分别用于创建新的应用通道或更新通道配置，同时，将通道配置交易消息单独打包成新区块，并提交到系统通道账本与应用通道账本。</p></li><li><p>普通交易消息（NormalMsg）：通道头部类型是<code>ENDORSER_TRANSACTION</code>等的标准交易消息（经过<code>Endorser</code>背书的交易消息或其他非配置交易消息），含有改变世界状态的模拟执行结果读写集，经过<code>Endorser</code>节点签名背书后打包发送到<code>Orderer</code>节点请求处</p><p>理，经过通道消息处理器过滤后，将合法交易提交到共识组件链对象进行排序，再按照交易出块规则（出块时间周期、打包最大交易数量、区块字节数限制等）生成新区块，并提交到通道账本。</p></li></ul><p>同时，<code>Orderer</code>排序服务器提供<code>Deliver</code>()区块分发服务接口，将接收的服务请求交由Deliver服务处理句柄的<code>Handle</code>()方法处理，建立消息处理循环，负责接收与处理客户端提交的区块请求消息，封装了指定区块请求范围的区块搜索信息（SeekInfo类型）。接着，Deliver服务处理句柄循环从本地账本获取区块数据，依次发送给请求节点（如<code>Leader</code>主节点）。如果账本中还未生成指定区块，则Deliver服务处理句柄默认一直阻塞等待，直到该区块创建完成并提交账本后再回复给请求节点。</p><p>另外，<code>Orderer</code>排序服务器还提供了多通道注册管理器<code>Registrar</code>对象，负责管理系统通道与所有应用通道，封装了所有通道的链支持对象字典、共识组件字典、区块账本工厂对象等组件，维护所有通道上的通道配置、区块账本对象、共识组件等核心资源，创建通道上的共识组件链对象提供<code>Orderer</code>共识排序服务，负责对交易消息排序，切割打包构造新区块并提交账本，同时负责创建新的应用通道与更新通道配置，其相当于<code>Orderer</code>节点上的“资源管理器”。</p><p>实际上，<code>Orderer</code>排序服务器上的通道共识组件链对象利用<code>Golang</code>通道（<code>Solo</code>共识组件）或<code>Kafka</code>集群（<code>Kafka</code>共识组件）作为共识排序后端，对经过通道消息处理器过滤的合法交易消息进行排序，对交易顺序等达成一致性观点。同时，在新通道创建时或启动恢复现有通道时，启动通道绑定的链支持对象以及共识组件链对象，构建交易消息处理循环，接收共识组件已经完成排序的交易消息，并添加到本地待处理的缓存交易消息列表中，包括配置交易消息、普通交易消息等，采用相互独立的消息处理流程分别处理 。</p><p>注意，目前<code>Orderer</code>节点账本只包括区块数据文件与区块索引数据库，负责保存区块数据即公有数据（包含公共数据与隐私数据哈希值），不存在状态数据库、历史数据库、隐私数据库等。不同于<code>Peer</code>节点，<code>Orderer</code>节点在提交区块到本地账本前不需要验证交易背书策略与执行<code>MVCC</code>检查，也不保存任何隐私数据（明文），只负责存储所有通道账本上的区块数据。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',19),s={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function h(u,g){const o=t("ExternalLinkIcon");return r(),d("div",null,[i,e("blockquote",null,[e("p",null,[e("a",s,[a("https://github.com/blockchainGuide/"),p(o)])])])])}const f=c(n,[["render",h],["__file","1.hyperledger_overview_fabric_source_Order_node.html.vue"]]);export{f as default};
