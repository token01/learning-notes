import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a,b as n,d as t,e,r as c}from"./app.14f4e25b.js";const i="/assets/file_struct.3781b306.png",u={},r=e(`<h1 id="java-开发实战-5-分钟搞定-liquibase-数据库版本控制" tabindex="-1"><a class="header-anchor" href="#java-开发实战-5-分钟搞定-liquibase-数据库版本控制" aria-hidden="true">#</a> [Java 开发实战] 5 分钟搞定 liquibase 数据库版本控制</h1><p>Java 生态下的数据库版本控制工具有 Flyaway 和 Liquibase，两者具备相似的功能，但基本概念不太一样，本文不对两者进行比较，主要介绍使用 Liquibase 进行数据库版本控制。</p><p>本文涉及的工具有 maven、mysql。</p><h2 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h2><p>在 pom 文件中引入必要的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.liquibase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>liquibase-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 spring-boot-starter-jdbc 中含有 spring-boot-starter、spring-boot-autoconfigure 依赖，我们只需要引入这一个依赖即可。</p><p>spring boot 框架整合了许多第三方库，这其中包括 Liquibase，在 autoconfigure 模块中包含 Liquibase 的可选依赖和 LiquibaseAutoConfiguration 类，下面是这个类上的部分注解代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SpringLiquibase</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseChange</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.liquibase&quot;</span><span class="token punctuation">,</span>
    name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;enabled&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HibernateJpaAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiquibaseAutoConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到该自动配置在 DataSourceAutoConfiguration 配置之后执行，因此必须引用 spring-boot-starter-jdbc 依赖，这是较容易被忽略的一点。</p><h2 id="修改-spring-配置" tabindex="-1"><a class="header-anchor" href="#修改-spring-配置" aria-hidden="true">#</a> 修改 Spring 配置</h2><p>引入以上依赖后 Liquibase 默认就启用了，我们可以在 Spring 配置文件中添加相关的配置，数据库的相关配置请读者朋友根据机器运行环境进行修改。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.url</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:mysql://localhost/db?createDatabaseIfNotExist=true&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span>
<span class="token key attr-name">spring.datasource.username</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>

<span class="token key attr-name">spring.liquibase.change-log</span> <span class="token punctuation">=</span> <span class="token value attr-value">classpath:liquibase/master.xml</span>
<span class="token key attr-name">spring.liquibase.contexts</span> <span class="token punctuation">=</span> <span class="token value attr-value">dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：datasource 的 url 中包含 <strong>createDatabaseIfNotExist=true</strong> 配置，这将使数据库在不存在时自动创建。</p><p>在配置中只简单指定了 change-log 和 contexts 两个属性，更多的属性可查看 <strong>LiquibaseProperties</strong> 类，其中包含部分属性的默认值，若使用默认值，以上两个属性都不需要配置，默认的 changeLog 地址为：classpath:/db/changelog/db.changelog-master.yaml 。</p><h2 id="编写-liquibase-配置代码" tabindex="-1"><a class="header-anchor" href="#编写-liquibase-配置代码" aria-hidden="true">#</a> 编写 Liquibase 配置代码</h2><p>首先看下文件的组织：</p><p><img src="`+i+`" alt="文件结构" loading="lazy"></p><p>这是官方推荐的方式，使用发布版本号来组织数据库变更记录。</p><hr><p>master.xml 中的代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseChangeLog</span>
        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.liquibase.org/xml/ns/dbchangelog<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>liquibase/changelog/db.changelog-1.0.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseChangeLog</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有更新时新增 include 标签和对应的文件即可。</p><hr><p>db.changelog-1.0.xml 中的代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseChangeLog</span>
        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.liquibase.org/xml/ns/dbchangelog<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changeSet</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_type_dict<span class="token punctuation">&quot;</span></span> <span class="token attr-name">author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lcomplete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlFile</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>liquibase/changelog/1.0/create_type_dict.sql<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changeSet</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseChangeLog</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个变更对应一个 changeSet，在这里意味着一个变更对应一个 sql，若在一个 sql 中编写多个变更，不利于回滚，可能导致数据库进入未预期的状态。</p><p>changeSet 中包含 author 和 id 两个必写的属性，这两个属性组成了变更的唯一标志，注意 id 并不是用来控制执行顺序的。</p>`,28),d={href:"https://docs.liquibase.com/concepts/basic/changeset.html%E3%80%82",target:"_blank",rel:"noopener noreferrer"},k=e(`<hr><p>create_type_dict.sql 中的代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> type_dict
<span class="token punctuation">(</span>
    id          <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    category    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;分类&#39;</span><span class="token punctuation">,</span>
    type_key    <span class="token keyword">int</span>          <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;类型key&#39;</span><span class="token punctuation">,</span>
    type_value  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;类型值&#39;</span><span class="token punctuation">,</span>
    is_enable   <span class="token keyword">bit</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否启用&#39;</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">datetime</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_general_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 sql 中包含一个示例建表语句，注意：不需要判断表是否存在，若这次变更执行过，Liquibase 会在自动创建的表 databasechangelog（默认表名、可配置） 中记录下来，下次不再执行。</p><hr><p>在上面的配置中，使用 sql 来创建数据表，Liquibase 还支持使用 xml、json、yaml 来定义表，在大多数场景下使用 sql 就足够了，因此这里不介绍其他的用法。</p><h2 id="完结撒花" tabindex="-1"><a class="header-anchor" href="#完结撒花" aria-hidden="true">#</a> 完结撒花</h2><p>编写完成以上的配置代码，添加 Spring Boot 应用程序启动类运行程序即可自动更新数据库。</p><p>是不是很简单？当然在实际的项目过程中，还需要考虑 Liquibase 配置在流水线中如何运行，Liquibase 的代码仓库如何组织等问题，这些就留给读者朋友自己思考吧（其实是笔者比较懒，先不写了）。</p>`,9),g={href:"https://docs.liquibase.com/concepts/home.html",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=c("ExternalLinkIcon");return o(),l("div",null,[r,a("p",null,[n("changeSet 还包含一些属性，比如 Contexts ，可以控制 changeSet 是否需要在当前环境（上文演示了在 Spring 配置中如何设置）中执行，使用这个属性可以在测试环境增加一些需要额外执行的变更，比如填充数据。 更多属性可以查看："),a("a",d,[n("https://docs.liquibase.com/concepts/basic/changeset.html。"),t(s)])]),k,a("p",null,[n("关于 Liquibase 的更多概念可以查看官方文档："),a("a",g,[n("https://docs.liquibase.com/concepts/home.html"),t(s)]),n(" 。")])])}const y=p(u,[["render",m],["__file","liquibase.html.vue"]]);export{y as default};
