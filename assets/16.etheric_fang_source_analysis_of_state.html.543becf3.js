import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e,r as i}from"./app.11a9ee6c.js";const l={},u=e(`<blockquote><p>浅谈以太坊源码分析之state</p></blockquote><h2 id="源码目录" tabindex="-1"><a class="header-anchor" href="#源码目录" aria-hidden="true">#</a> 源码目录</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>｜-database.go 底层的存储设计
｜-dump.go  用来dumpstateDB数据
｜-iterator.go，用来遍历Trie
｜-journal.go，用来记录状态的改变
｜-state_object.go 通过state object操作账户值，并将修改后的storage trie写入数据库
｜-statedb.go，以太坊整个的状态
｜-sync.go，用来和downloader结合起来同步state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><h3 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机" aria-hidden="true">#</a> 状态机</h3><p>以太坊的本质就是一个<strong>基于交易的状态机(transaction-based state machine)</strong>。在计算机科学中，一个 <em>状态机</em> 是指可以读取一系列的输入，然后根据这些输入，会转换成一个新的状态出来的东西。</p><p>我们从**创世纪状态(genesis state)**开始，在网络中还没有任何交易的时候产生状态。当第一个区块执行第一个交易时候开始产生状态，直到执行完N个交易，第一个区块的最终状态产生，第二个区块的第一笔交易执行后将会改变第一个区块链的最终状态，以此类推，从而产生最终的区块状态。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmkmt3uuo1j31g20hatb4.jpg" alt="image-20210112090020770" loading="lazy"></p><h3 id="以太坊状态数据库" tabindex="-1"><a class="header-anchor" href="#以太坊状态数据库" aria-hidden="true">#</a> 以太坊状态数据库</h3><p>区块的状态数据并非保存在链上，而是将这些状态维护在默克尔压缩前缀树中，在区块链上仅记录对应的<code>Trie Root</code> 值。使用<code>LevelDB</code>维护树的持久化内容，而这个用来维护映射的数据库叫做 <code>StateDB</code>。</p><p>首先我们用一张图来大致了解一下<code>StateDB</code>：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gml0k9uv54j31c60g840z.jpg" alt="image-20210112165612767" loading="lazy"></p><p>可以看到图中一共有两种状态，一个是世界状态<code>Trie</code>,一个是<code>storage Trie</code>,两者都是MPT树，世界状态包含了一个个的账户状态，账户状态通过以账户地址为键，维护在表示世界状态的树中，而每个账户状态中存储这账户存储树的<code>Root</code>。账户状态存储一下信息：</p><ol><li><strong>nonce</strong>: 表示此账户发出的交易数量</li><li><strong>balance</strong>: 账户余额</li><li><strong>storageRoot</strong>: 账户存储树的Root根，用来存储合约信息</li><li><strong>codeHash</strong>: 账户的 EVM 代码哈希值，当这个地址接收到一个消息调用时，这些代码会被执行; 它和其它字段不同，创建后不可更改。如果 codeHash 为空，则说明该账户是一个简单的外部账户，只存在 <code>nonce</code> 和 <code>balance</code>。</li></ol>`,14),r=n("code",null,"statedb.go、state_object.go、database.go",-1),d={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},k=e(`<h3 id="关键的数据结构" tabindex="-1"><a class="header-anchor" href="#关键的数据结构" aria-hidden="true">#</a> 关键的数据结构</h3><p><strong>Account</strong></p><p>Account存储的是账户状态信息。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Account <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Nonce    <span class="token builtin">uint64</span>      <span class="token comment">//账户发出的交易数量</span>
	Balance  <span class="token operator">*</span>big<span class="token punctuation">.</span>Int    <span class="token comment">// 账户的余额</span>
	Root     common<span class="token punctuation">.</span>Hash <span class="token comment">//账户存储树的Root根，用来存储合约信息</span>
	CodeHash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>      <span class="token comment">// 账户的 EVM 代码哈希值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StateObject</strong></p><p>表示一个状态对象，可以从中获取到账户状态信息。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> stateObject <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	address  common<span class="token punctuation">.</span>Address
	addrHash common<span class="token punctuation">.</span>Hash <span class="token comment">// 账户地址哈希</span>
	data     Account
	db       <span class="token operator">*</span>StateDB <span class="token comment">// 所属的StateDB</span>
	dbErr <span class="token builtin">error</span> <span class="token comment">//VM不处理db层的错误，先记录下来，最后返回，只能保存1个错误，保存的第一个错误</span>
	
  <span class="token comment">// Write caches.</span>
	trie Trie <span class="token comment">// storage trie, 使用trie组织stateObj的数据</span>
	code Code <span class="token comment">// 合约字节码，在加载代码时设置</span>

	<span class="token comment">//将原始条目的存储高速缓存存储到dedup重写中，为每个事务重置</span>
	originStorage Storage 

	<span class="token comment">//在整个块的末尾需要刷新到磁盘的存储条目</span>
	pendingStorage Storage 

	<span class="token comment">//在当前事务执行中已修改的存储条目</span>
	dirtyStorage Storage 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StateDB</strong></p><p>用来存储状态对象。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StateDB <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  db   Database
	trie Trie <span class="token comment">// 当前所有账户组成的MPT树</span>

	<span class="token comment">// 这几个相关账户状态修改</span>
	stateObjects        <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token operator">*</span>stateObject <span class="token comment">// 存储缓存的账户状态信息</span>
	stateObjectsPending <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// 状态对象已经完成但是还没有写入到Trie中</span>
	stateObjectsDirty   <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// 在当前执行中修改的状态对象 ，用于后续commit </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>三者之间的关系：</p><p>StateDB-&gt;Trie-&gt;Account-&gt;stateObject</p><p><strong>从StateDB中取出Trie根，根据地址从Trie树中获取账户的rlp编码数据，再进行解码成Account，然后根据Account生成stateObject</strong></p></blockquote><h2 id="statedb存储状态" tabindex="-1"><a class="header-anchor" href="#statedb存储状态" aria-hidden="true">#</a> StateDB存储状态</h2><p>StateDB读写状态主要关心以下几个文件：</p><ul><li>database.go</li><li>state_object.go</li><li>statedb.go</li></ul><p>接下来分别介绍这么几个文件，相当关键。</p><h3 id="database-go" tabindex="-1"><a class="header-anchor" href="#database-go" aria-hidden="true">#</a> database.go</h3><h4 id="根据世界状态root打开世界状态树" tabindex="-1"><a class="header-anchor" href="#根据世界状态root打开世界状态树" aria-hidden="true">#</a> 根据世界状态root打开世界状态树</h4><p>从<code>StateDB</code>中打开一个<code>Trie</code>大致经历以下过程：</p><blockquote><p>OpenTrie(root common.Hash)-&gt;NewSecure-&gt;New</p></blockquote><h4 id="根据账户地址和-stoage-root打开状态存储树" tabindex="-1"><a class="header-anchor" href="#根据账户地址和-stoage-root打开状态存储树" aria-hidden="true">#</a> 根据账户地址和 stoage root打开状态存储树</h4><p>创建一个账户的存储Trie过程如下：</p><blockquote><p>OpenStorageTrie(addrHash, root common.Hash)-&gt;NewSecure-New</p></blockquote><h4 id="account和stateobject" tabindex="-1"><a class="header-anchor" href="#account和stateobject" aria-hidden="true">#</a> Account和StateObject</h4><p>以太坊的账户分为普通账户和合约账户,以<code>Account</code>表示，<code>Account</code>是账户的数据，不包含账户地址，账户需要使用地址来表示，地址在<code>stateObject</code>中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Account <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Nonce    <span class="token builtin">uint64</span>
	Balance  <span class="token operator">*</span>big<span class="token punctuation">.</span>Int
	Root     common<span class="token punctuation">.</span>Hash <span class="token comment">// 存储树的merkle树根 账户状态</span>
	CodeHash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">//合约账户专属，合约代码编译后的Hash值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> stateObject <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  address  common<span class="token punctuation">.</span>Address <span class="token comment">// 账户地址</span>
	addrHash common<span class="token punctuation">.</span>Hash <span class="token comment">// 账户地址哈希</span>
	data     Account
	db       <span class="token operator">*</span>StateDB <span class="token comment">// 所属的StateDB</span>
  dbErr <span class="token builtin">error</span> <span class="token comment">//VM不处理db层的错误，先记录下来，最后返回，只能保存1个错误，保存存的第一个错误</span>
	trie Trie <span class="token comment">// storage trie, 使用trie组织stateObj的数据</span>
	code Code <span class="token comment">// 合约字节码，在加载代码时设置</span>
	originStorage Storage <span class="token comment">//将原始条目的存储高速缓存存储到dedup重写中，为每个事务重置</span>
	pendingStorage Storage <span class="token comment">//在整个块的末尾需要刷新到磁盘的存储条目</span>
	dirtyStorage Storage <span class="token comment">//在当前事务执行中已修改的存储条目</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建stateobject" tabindex="-1"><a class="header-anchor" href="#创建stateobject" aria-hidden="true">#</a> 创建StateObject</h4><p>创建状态对象会在两个地方进行调用：</p><ol><li>检索或者创建状态对象</li><li>创建账户</li></ol><p>最终都会去调用<code>createObject</code>创建一个新的状态对象。如果有一个现有的帐户给定的地址，老的将被覆盖并作为第二个返回值返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">createObject</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">(</span>newobj<span class="token punctuation">,</span> prev <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	prev <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getDeletedStateObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token comment">// 如果存在老的，获取用来以后删除掉</span>

	newobj <span class="token operator">=</span> <span class="token function">newObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> Account<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	newobj<span class="token punctuation">.</span><span class="token function">setNonce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
	<span class="token keyword">if</span> prev <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>createObjectChange<span class="token punctuation">{</span>account<span class="token punctuation">:</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>resetObjectChange<span class="token punctuation">{</span>prev<span class="token punctuation">:</span> prev<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span><span class="token function">setStateObject</span><span class="token punctuation">(</span>newobj<span class="token punctuation">)</span>
	<span class="token keyword">return</span> newobj<span class="token punctuation">,</span> prev
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state-object-go" tabindex="-1"><a class="header-anchor" href="#state-object-go" aria-hidden="true">#</a> state_object.go</h3><p><code>state_object.go</code>是很重要的文件，我们直接通过比较重要的函数来了解它。</p><h4 id="增加账户余额" tabindex="-1"><a class="header-anchor" href="#增加账户余额" aria-hidden="true">#</a> 增加账户余额</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>AddBalance<span class="token operator">-</span><span class="token operator">&gt;</span>SetBalance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="将对象的存储树保存到db" tabindex="-1"><a class="header-anchor" href="#将对象的存储树保存到db" aria-hidden="true">#</a> 将对象的存储树保存到db</h4><p>主要就做了两件事：</p><ol><li><em>updateTrie将缓存的存储修改写入对象的存储Trie。</em></li><li><em>将所有节点写入到trie的内存数据库中</em></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">CommitTrie</span><span class="token punctuation">(</span>db Database<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">updateTrie</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	root<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>trie<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),v={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>①：<strong>将缓存的存储修改写入对象的存储Trie</strong></p><blockquote><p>主要流程： 最终还是调用了trie.go的insert方法</p><p>updateTrie-&gt;TryUpdate-&gt;insert</p></blockquote><ol><li><code>s.finalise()</code> 将<code>dirtyStorage</code>中的所有数据移动到<code>pendingStorage</code>中</li><li>根据账户哈希和账户<code>root</code>打开账户存储树</li><li>将<code>key</code>与<code>trie</code>中的<code>value</code>关联，更新数据</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">updateTrie</span><span class="token punctuation">(</span>db Database<span class="token punctuation">)</span> Trie <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">finalise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ①
<span class="token operator">...</span>
	
	tr <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">getTrie</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> ②
	<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>pendingStorage <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">TryDelete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
		s<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">TryUpdate</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> ③
	<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个核心也就是<code>updateTrie</code>，调用了<code>trie</code>的<code>insert</code>方法进行处理。</p><p>②：<strong>将所有节点写入到trie的内存数据库，其key以sha3哈希形式存储</strong></p><blockquote><p>流程：</p><p>trie.Commit-&gt;t.trie.Commit-&gt;t.hashRoot</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SecureTrie<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getSecKeyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span>trie<span class="token punctuation">.</span>db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> hk<span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> t<span class="token punctuation">.</span>secKeyCache <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span>trie<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">insertPreimage</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span><span class="token function">BytesToHash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>hk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span>trie<span class="token punctuation">.</span>db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		t<span class="token punctuation">.</span>secKeyCache <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> t<span class="token punctuation">.</span>trie<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span>onleaf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>KeyCache</code>中已经有了，直接插入到磁盘数据库，否则的话插入到<code>Trie</code>的内存数据库。</p><h4 id="将trie根设置为的当前根哈希" tabindex="-1"><a class="header-anchor" href="#将trie根设置为的当前根哈希" aria-hidden="true">#</a> 将trie根设置为的当前根哈希</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token function">updateRoot</span><span class="token punctuation">(</span>db Database<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span><span class="token function">updateTrie</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>
	<span class="token keyword">if</span> metrics<span class="token punctuation">.</span>EnabledExpensive <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>start time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span>StorageHashes <span class="token operator">+=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Root <span class="token operator">=</span> s<span class="token punctuation">.</span>trie<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法也比较简单，底层调用<code>UpdateTrie</code>然后再更新<code>root</code>.</p><p><code>State_object.go</code>的核心方法也就这么些内容。</p><h3 id="statedb-go" tabindex="-1"><a class="header-anchor" href="#statedb-go" aria-hidden="true">#</a> statedb.go</h3><h4 id="创建账户" tabindex="-1"><a class="header-anchor" href="#创建账户" aria-hidden="true">#</a> 创建账户</h4><p>创建账户的核心就是创建状态对象，然后再初始化值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">CreateAccount</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	newObj<span class="token punctuation">,</span> prev <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> prev <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		newObj<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Balance<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">createObject</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">(</span>newobj<span class="token punctuation">,</span> prev <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	prev <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getDeletedStateObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> 

	newobj <span class="token operator">=</span> <span class="token function">newObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> Account<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	newobj<span class="token punctuation">.</span><span class="token function">setNonce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
	<span class="token keyword">if</span> prev <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>createObjectChange<span class="token punctuation">{</span>account<span class="token punctuation">:</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>resetObjectChange<span class="token punctuation">{</span>prev<span class="token punctuation">:</span> prev<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span><span class="token function">setStateObject</span><span class="token punctuation">(</span>newobj<span class="token punctuation">)</span>
	<span class="token keyword">return</span> newobj<span class="token punctuation">,</span> prev
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除、更新、获取状态对象" tabindex="-1"><a class="header-anchor" href="#删除、更新、获取状态对象" aria-hidden="true">#</a> 删除、更新、获取状态对象</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">deleteStateObject</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">updateStateObject</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">getStateObject</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>stateObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三个方法底层分别都是调用<code>Trie.TryDelete、Trie.TryUpdate、Trie.TryGet</code>方法来分别获取。</p><p>这里大致的讲一下<code>getStateObject</code>，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">getDeletedStateObject</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token operator">*</span>stateObject <span class="token punctuation">{</span>
	<span class="token comment">// Prefer live objects if any is available</span>
	<span class="token keyword">if</span> obj <span class="token operator">:=</span> s<span class="token punctuation">.</span>stateObjects<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">;</span> obj <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> obj
	<span class="token punctuation">}</span>
	<span class="token comment">// Track the amount of time wasted on loading the object from the database</span>
	<span class="token keyword">if</span> metrics<span class="token punctuation">.</span>EnabledExpensive <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>start time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span>AccountReads <span class="token operator">+=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Load the object from the database</span>
	enc<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>trie<span class="token punctuation">.</span><span class="token function">TryGet</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> data Account
	<span class="token keyword">if</span> err <span class="token operator">:=</span> rlp<span class="token punctuation">.</span><span class="token function">DecodeBytes</span><span class="token punctuation">(</span>enc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to decode state object&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Insert into the live set</span>
	obj <span class="token operator">:=</span> <span class="token function">newObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">setStateObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	<span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致就做了以下几件事：</p><ol><li>先从<code>StateDB</code>中获取<code>stateObjects</code>,有的话就返回。</li><li>如果没有的话就从<code>stateDB</code>的<code>trie</code>中获取账户状态数据，获取到<code>rlp</code>编码的数据之后，将其解码。</li><li>根据状态数据<code>Account</code> 构造<code>stateObject</code></li></ol><h4 id="余额操作" tabindex="-1"><a class="header-anchor" href="#余额操作" aria-hidden="true">#</a> 余额操作</h4><p>余额的操作大致有添加、减少、和设定。我们就拿添加来分析：</p><p>根据地址获取<code>stateObject</code>，然后<code>addBalance</code>.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">AddBalance</span><span class="token punctuation">(</span>addr common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> amount <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	stateObject <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">GetOrNewStateObject</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> stateObject <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		stateObject<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="储存快照和回退快照" tabindex="-1"><a class="header-anchor" href="#储存快照和回退快照" aria-hidden="true">#</a> 储存快照和回退快照</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">RevertToSnapshot</span><span class="token punctuation">(</span>revid <span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>储存快照和回退快照，我们可以在提交交易的流程中找到：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>worker<span class="token punctuation">)</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> coinbase common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Log<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	snap <span class="token operator">:=</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	receipt<span class="token punctuation">,</span> err <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">ApplyTransaction</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> w<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coinbase<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>gasPool<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>state<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>header<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>header<span class="token punctuation">.</span>GasUsed<span class="token punctuation">,</span> <span class="token operator">*</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">GetVMConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">RevertToSnapshot</span><span class="token punctuation">(</span>snap<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>txs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>txs<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>
	w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>receipts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>receipts<span class="token punctuation">,</span> receipt<span class="token punctuation">)</span>

	<span class="token keyword">return</span> receipt<span class="token punctuation">.</span>Logs<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们会对当前状态进行快照，然后执行<code>ApplyTransaction</code>，如果在预执行交易的阶段出错了，那么会回退到备份的快照位置。之前的修改全部会回退。</p><h4 id="计算状态trie的当前根哈希" tabindex="-1"><a class="header-anchor" href="#计算状态trie的当前根哈希" aria-hidden="true">#</a> 计算状态Trie的当前根哈希</h4><p>计算状态Trie的当前根哈希是由<code>IntermediateRoot</code>来完成的。</p><p>①：<strong>确定所有的脏存储状态（简单理解就是当前执行修改的所有对象）</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>StateDB<span class="token punctuation">)</span> <span class="token function">Finalise</span><span class="token punctuation">(</span>deleteEmptyObjects <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>journal<span class="token punctuation">.</span>dirties <span class="token punctuation">{</span>
		obj<span class="token punctuation">,</span> exist <span class="token operator">:=</span> s<span class="token punctuation">.</span>stateObjects<span class="token punctuation">[</span>addr<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> obj<span class="token punctuation">.</span>suicided <span class="token operator">||</span> <span class="token punctuation">(</span>deleteEmptyObjects <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			obj<span class="token punctuation">.</span>deleted <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			obj<span class="token punctuation">.</span><span class="token function">finalise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span>stateObjectsPending<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		s<span class="token punctuation">.</span>stateObjectsDirty<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span><span class="token function">clearJournalAndRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这个跟<code>state_object</code>的<code>finalise</code>方法是一个方式，底层就是调用了<code>obj.finalise</code>将<code>dirty</code>状态的所有数据全部推入到<code>pending</code>中去，等待处理。</p><p>②：<strong>处理stateObjectsPending中的数据</strong></p><p>先更新账户的<code>Root</code>根，然后再将将给定的对象写入<code>trie</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>stateObjectsPending <span class="token punctuation">{</span>
		obj <span class="token operator">:=</span> s<span class="token punctuation">.</span>stateObjects<span class="token punctuation">[</span>addr<span class="token punctuation">]</span>
		<span class="token keyword">if</span> obj<span class="token punctuation">.</span>deleted <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span><span class="token function">deleteStateObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			obj<span class="token punctuation">.</span><span class="token function">updateRoot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>db<span class="token punctuation">)</span>
			s<span class="token punctuation">.</span><span class="token function">updateStateObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将状态写入底层内存trie数据库" tabindex="-1"><a class="header-anchor" href="#将状态写入底层内存trie数据库" aria-hidden="true">#</a> 将状态写入底层内存Trie数据库</h4><p>这部分功能由commit方法完成。</p><ol><li>计算状态Trie的当前根哈希</li><li>将状态对象中的所有更改写入到存储树</li></ol><p>第一步在上面已经讲过了，第二步的内容如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> addr <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>stateObjectsDirty <span class="token punctuation">{</span>
		<span class="token keyword">if</span> obj <span class="token operator">:=</span> s<span class="token punctuation">.</span>stateObjects<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span>deleted <span class="token punctuation">{</span>
			<span class="token operator">...</span><span class="token punctuation">.</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token function">CommitTrie</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心就是<code>objectCommitTrie</code>,这也是上面<code>state_object</code>的内容。</p><p>总结流程如下：</p><blockquote><p>1.IntermediateRoot</p><p>2.CommitTrie-&gt;updateTrie-&gt;trie.Commit-&gt;trie.db.insertPreimage(已经有了直接持久化到硬盘数据库)</p><p>​ -&gt;t.trie.Commit（没有就提交到存储树中）</p></blockquote><p>最后看一下以太坊数据库的读写过程：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmlw6izetsj31ha0oogom.jpg" alt="image-20210113111013494" loading="lazy"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,53),m={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.jianshu.com/p/20d7f7c37b03",target:"_blank",rel:"noopener noreferrer"},f={href:"https://hackernoon.com/getting-deep-into-ethereum-how-data-is-stored-in-ethereum-e3f669d96033",target:"_blank",rel:"noopener noreferrer"},w={href:"https://web.xidian.edu.cn/qqpei/files/Blockchain/4_Data.pdf",target:"_blank",rel:"noopener noreferrer"},y={href:"http://www.ltk100.com/article-112-1.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://learnblockchain.cn/books/geth/part3/statedb.html",target:"_blank",rel:"noopener noreferrer"};function S(_,O){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("接下来将会分析State相关的一些类，着重关注"),r,s(",其中涉及的Trie相关的代码可以参照："),n("a",d,[s("浅谈以太坊源码分析之MPT树-下"),t(a)])]),k,n("p",null,[s("第一件事会在下面继续讲，第二件事可以参照我之前关于 "),n("a",v,[s("浅谈以太坊源码分析之MPT树-下"),t(a)]),s("的讲解。")]),b,n("blockquote",null,[n("p",null,[n("a",m,[s("https://mindcarver.cn"),t(a)])]),n("p",null,[n("a",g,[s("https://github.com/blockchainGuide"),t(a)])]),n("p",null,[n("a",h,[s("https://www.jianshu.com/p/20d7f7c37b03"),t(a)])]),n("p",null,[n("a",f,[s("https://hackernoon.com/getting-deep-into-ethereum-how-data-is-stored-in-ethereum-e3f669d96033"),t(a)])]),n("p",null,[n("a",w,[s("https://web.xidian.edu.cn/qqpei/files/Blockchain/4_Data.pdf"),t(a)])]),n("p",null,[n("a",y,[s("http://www.ltk100.com/article-112-1.html"),t(a)])]),n("p",null,[n("a",j,[s("https://learnblockchain.cn/books/geth/part3/statedb.html"),t(a)])])])])}const B=p(l,[["render",S],["__file","16.etheric_fang_source_analysis_of_state.html.vue"]]);export{B as default};
