import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,a,d as s,b as e,e as t,r}from"./app.d3a29ae6.js";const p="/assets/big-data.b553bf7d.png",d="/assets/bigdata.5327b9ad.png",c="/assets/atlas-architecture.113ae7b3.png",u={},h={href:"https://www.processon.com/view/link/5ee2424be0b34d4dba347744",target:"_blank",rel:"noopener noreferrer"},b=a("img",{src:p,alt:"",loading:"lazy"},null,-1),k=a("img",{src:d,alt:"",loading:"lazy"},null,-1),v=t('<h2 id="涉及关键知识点" tabindex="-1"><a class="header-anchor" href="#涉及关键知识点" aria-hidden="true">#</a> 涉及关键知识点</h2><h3 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h3><h4 id="lsm" tabindex="-1"><a class="header-anchor" href="#lsm" aria-hidden="true">#</a> LSM</h4><p>Log Structured Merge Tree 日志结构合并树</p><blockquote><p>Apache HBase, Apache Cassandra, MongoDB(Wired Tiger), LevelDB , RocksDB 都使用 LSM 存储引擎</p></blockquote><p>LSM 类存储引擎，将对数据的修改增量保存在内存中，达到指定大小限制之后批量把数据flush到磁盘中，磁盘中树定期可以做merge操作，合并成一棵大树，以优化写性能。因为数据是先写到内存中，所以为了防止内存数据丢失，会先把数据写入hlog中，也符合了数据库中标准，先写日志，再写数据。</p><blockquote><p>不过读取的时候稍微麻烦一些，读取时看这些数据在内存中，如果未能命中内存，则需要访问较多的磁盘文件。极端的说，基于LSM树实现的存储引擎(如：hbase)写性能比<code>B+树</code>(如：mysql)高了一个数量级，读性能却低了一个数量级。</p></blockquote><h3 id="容错-数据冗余技术" tabindex="-1"><a class="header-anchor" href="#容错-数据冗余技术" aria-hidden="true">#</a> 容错 数据冗余技术</h3><h4 id="副本策略" tabindex="-1"><a class="header-anchor" href="#副本策略" aria-hidden="true">#</a> 副本策略</h4><p>Hadoop2.x 中使用了副本方案（Scheme）。存储开销200%<br> 如果有6个块，将有18个块占用空间</p><h4 id="纠删码-erasure-code" tabindex="-1"><a class="header-anchor" href="#纠删码-erasure-code" aria-hidden="true">#</a> 纠删码 Erasure Code</h4><p>Hadoop3.x 中使用Erasure编码处理容错。存储开销50%<br> 如果有6个块，将有9个块占用空间，6块block，3块用于奇偶校验。</p>',12),m={href:"http://jerasure.org/",target:"_blank",rel:"noopener noreferrer"},g=a("h4",{id:"磁盘阵列",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#磁盘阵列","aria-hidden":"true"},"#"),e(" 磁盘阵列")],-1),_=a("p",null,"RAID，Redundant Arrays of Independent Disks，独立磁盘构成的具有冗余能力的阵列",-1),f=a("h2",{id:"生态系统",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#生态系统","aria-hidden":"true"},"#"),e(" 生态系统")],-1),q=t("<li><p>Hadoop</p></li><li><p>HBase</p></li><li><p>MapReduce</p></li><li><p>Pig</p><blockquote><p>脚本方式去描述MapReduce</p></blockquote></li><li><p>Hive</p><blockquote><p>SQL方式去描述MapReduce</p></blockquote></li><li><p>Impala，Presto，Drill</p><blockquote><p>轻量级MapReduce</p></blockquote></li><li><p>Hive on Tez, Spark, SparkSQL</p></li><li><p>Ambari 集群管理</p></li><li><p>Sqoop</p><blockquote><p>SQL to Hadoop 用于在不同存储系统之间实现数据导入导出</p></blockquote></li><li><p>Cassandra</p></li><li><p>Druid, ClickHouse</p></li><li><p>Flink</p></li><li><p>Kafka</p></li><li><p>MPP (Massively Parallel Processing) 大规模并行处理</p></li><li><p>Ranger, Kerberos, Knox 安全鉴权</p></li><li><p>Alluxio</p><blockquote><p>为数据驱动型应用和存储系统构建了桥梁, 将数据从存储层移动到距离数据驱动型应用更近的位置从而能够更容易被访问</p></blockquote></li><li><p>Hudi</p><blockquote><p>使得您能在hadoop兼容的存储之上存储大量数据，同时它还提供两种流原语(插入更新,增量拉取)，使得除了经典的批处理之外，还可以在数据湖上进行流处理</p></blockquote></li>",17),A=a("p",null,"Altas",-1),S={href:"https://mp.weixin.qq.com/s/0-k5PYkUCU1HCZCBPIWiAw",target:"_blank",rel:"noopener noreferrer"},y=t('<h3 id="hadoop" tabindex="-1"><a class="header-anchor" href="#hadoop" aria-hidden="true">#</a> Hadoop</h3><h4 id="hdfs" tabindex="-1"><a class="header-anchor" href="#hdfs" aria-hidden="true">#</a> HDFS</h4><p>分布式文件系统</p><ul><li>NameNode</li><li>DataNode</li></ul><h4 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> YARN</h4><p>集群资源管理器</p><ul><li>ResourceManager</li><li>NodeManager</li></ul><h4 id="mapreduce" tabindex="-1"><a class="header-anchor" href="#mapreduce" aria-hidden="true">#</a> MapReduce</h4><p>批处理框架</p><h3 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper" aria-hidden="true">#</a> Zookeeper</h3><blockquote><p>应用于大数据开发中的，统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等场景</p></blockquote><ul><li>Znode <ul><li>持久节点</li><li>临时节点</li><li>有序节点</li></ul></li></ul><h3 id="hbase" tabindex="-1"><a class="header-anchor" href="#hbase" aria-hidden="true">#</a> HBase</h3><p>基于 Google 的 BigTable 论文，基于 HDFS 的面向列的数据库</p><ul><li>HMaster</li><li>HRegionServer <ul><li>HLog</li><li>HRegion <ul><li>Store</li></ul></li></ul></li></ul><h3 id="apache-atlas" tabindex="-1"><a class="header-anchor" href="#apache-atlas" aria-hidden="true">#</a> Apache Atlas</h3>',16),x={href:"http://atlas.apache.org/",target:"_blank",rel:"noopener noreferrer"},H=t('<ul><li>数据分类 <ul><li>为元数据导入或定义业务导向的分类注释</li><li>定义，注释，以及自动捕获数据集和底层元素之间的关系</li><li>导出元数据到第三方系统</li></ul></li><li>集中审计 <ul><li>捕获与所有应用，过程以及与数据交互的安全访问信息</li><li>捕获执行，步骤，活动等操作的信息</li></ul></li><li>搜索与血缘 <ul><li>预定义的导航路径用来探索数据分类以及审计信息</li><li>基于文本的搜索特性来快速和准确的定位相关联的数据和审计事件</li><li>对数据集血缘关系的可视化浏览使用户可以下钻到操作，安全以及数据起源相关的信息</li></ul></li><li>安全与策略引擎 <ul><li>基于数据分类模式，属性以及角色的运行时合理合规策略</li><li>基于分类-预测的高级策略定义以防止数据推导</li><li>基于cell的属性和值的行/列级别的masking</li></ul></li></ul><h4 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h4>',2),T={href:"http://atlas.apache.org/#/Architecture",target:"_blank",rel:"noopener noreferrer"},I=a("img",{src:c,alt:"",loading:"lazy"},null,-1),L=t(`<h5 id="core" tabindex="-1"><a class="header-anchor" href="#core" aria-hidden="true">#</a> Core</h5><ul><li><p>Ingest / Export<br> Ingest 组件允许将元数据添加到 Atlas, Export 组件暴露由 Atlas 检测到的元数据更改，以作为事件引发，消费者可以使用这些更改事件来实时响应元数据更改。</p></li><li><p>Type System<br> Atlas 允许用户为他们想要管理的元数据对象定义一个模型。该模型由称为 &quot;类型&quot; 的定义组成。&quot;类型&quot; 的 实例被称为 &quot;实体&quot; 表示被管理的实际元数据对象。类型系统是一个组件，允许用户定义和管理类型和实体。由 Atlas 管理的所有元数据对象（例如Hive表）都使用类型进行建模，并表示为实体。要在 Atlas 中存储新类型的元数据，需要了解类型系统组件的概念。</p></li></ul><blockquote><p>例如：Atlas 本身自带的 hive_table 类</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Name:         hive_table
TypeCategory: Entity
SuperTypes:   DataSet
Attributes:
    name:             string
    db:               hive_db
    owner:            string
    createTime:       date
    lastAccessTime:   date
    comment:          string
    retention:        int
    sd:               hive_storagedesc
    partitionKeys:    array&lt;hive_column&gt;
    aliases:          array&lt;string&gt;
    columns:          array&lt;hive_column&gt;
    parameters:       map&lt;string&gt;
    viewOriginalText: string
    viewExpandedText: string
    tableType:        string
    temporary:        boolean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>guid<span class="token operator">:</span>     <span class="token string">&quot;9ba387dd-fa76-429c-b791-ffc338d3c91f&quot;</span>
typeName<span class="token operator">:</span> <span class="token string">&quot;hive_table&quot;</span>
status<span class="token operator">:</span>   <span class="token string">&quot;ACTIVE&quot;</span>
values<span class="token operator">:</span>
    name<span class="token operator">:</span>             “customers”
    db<span class="token operator">:</span>               <span class="token punctuation">{</span> <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b42c6cfc-c1e7-42fd-a9e6-890e0adf33bc&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;typeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hive_db&quot;</span>
                      <span class="token punctuation">}</span>
    owner<span class="token operator">:</span>            “admin”
    createTime<span class="token operator">:</span>       <span class="token number">1490761686029</span>
    updateTime<span class="token operator">:</span>       <span class="token number">1516298102877</span>
    comment<span class="token operator">:</span>          <span class="token null keyword">null</span>
    retention<span class="token operator">:</span>        <span class="token number">0</span>
    sd<span class="token operator">:</span>               <span class="token punctuation">{</span> <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ff58025f-6854-4195-9f75-3a3058dd8dcf&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;typeName&quot;</span><span class="token operator">:</span>
                        <span class="token string">&quot;hive_storagedesc&quot;</span>
                      <span class="token punctuation">}</span>
    partitionKeys<span class="token operator">:</span>    <span class="token null keyword">null</span>
    aliases<span class="token operator">:</span>          <span class="token null keyword">null</span>
    columns<span class="token operator">:</span>          <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;65e2204f-6a23-4130-934a-9679af6a211f&quot;</span><span class="token punctuation">,</span>
                          <span class="token property">&quot;typeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hive_column&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token punctuation">{</span> <span class="token property">&quot;guid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;d726de70-faca-46fb-9c99-cf04f6b579a6&quot;</span><span class="token punctuation">,</span>
                          <span class="token property">&quot;typeName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hive_column&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                          ...
                      <span class="token punctuation">]</span>
    parameters<span class="token operator">:</span>       <span class="token punctuation">{</span> <span class="token property">&quot;transient_lastDdlTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1466403208&quot;</span><span class="token punctuation">}</span>
    viewOriginalText<span class="token operator">:</span> <span class="token null keyword">null</span>
    viewExpandedText<span class="token operator">:</span> <span class="token null keyword">null</span>
    tableType<span class="token operator">:</span>        “MANAGED_TABLE”
    temporary<span class="token operator">:</span>        <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类型的每个实例都由唯一标识符 GUID 标识。 定义对象时，此 GUID 由 Atlas 服务器生成，并且在实体的整个生命周期内保持不变。在任何时间点，都可以使用其 GUID 访问此特定实体。</p><ul><li>Graph Engine<br> 在内部，Atlas 持久化它使用图形模型管理的元数据对象。 这种方法提供了极大的灵活性，并支持高效地处理元数据对象之间的丰富关系。 图形引擎组件负责在 Atlas 类型系统和底层图形持久化模型的类型和实体之间进行转换。 除了管理图对象之外，图引擎还为元数据对象创建适当的索引，以便有效地搜索它们。 Atlas 使用 JanusGraph 来存储元数据对象。</li></ul><h5 id="integration" tabindex="-1"><a class="header-anchor" href="#integration" aria-hidden="true">#</a> Integration</h5><ul><li><p>API<br> Atlas 的所有功能都通过 REST API 向最终用户公开，该 API 允许创建、更新和删除类型和实体。 它也是查询和发现 Atlas 管理的类型和实体的主要机制。</p></li><li><p>Messaging<br> 除了 API 之外，用户还可以选择使用基于 Kafka 的消息传递界面与 Atlas 集成。 这对于与 Atlas 通信元数据对象以及使用 Atlas 中可以构建应用程序的元数据更改事件都很有用。 如果希望使用与 Atlas 更松散耦合的集成，从而实现更好的可伸缩性、可靠性等，则消息传递界面尤其有用。 Atlas 使用 apache kafka 作为元数据通知事件的钩子和下游消费者之间的通信通知服务器。 事件是由 hook 和 Atlas 写到不同的 Kafka topics。</p><ul><li>ATLAS_HOOK: 来自 各个组件的Hook 的元数据通知事件通过写入到名为 ATLAS_HOOK 的 Kafka topic 发送到 Atlas</li><li>ATLAS_ENTITIES：从 Atlas 到其他集成组件（如Ranger）的事件写入到名为 ATLAS_ENTITIES 的 Kafka topic</li></ul></li></ul><h5 id="metadata-source" tabindex="-1"><a class="header-anchor" href="#metadata-source" aria-hidden="true">#</a> Metadata source</h5><p>Atlas 支持集成多种源的元数据开箱即用</p>`,11),D={href:"http://atlas.apache.org/#/HookHBase",target:"_blank",rel:"noopener noreferrer"},E={href:"http://atlas.apache.org/#/HookHive",target:"_blank",rel:"noopener noreferrer"},M={href:"http://atlas.apache.org/#/HookSqoop",target:"_blank",rel:"noopener noreferrer"},R={href:"http://atlas.apache.org/#/HookStorm",target:"_blank",rel:"noopener noreferrer"},N={href:"http://atlas.apache.org/#/HookKafka",target:"_blank",rel:"noopener noreferrer"},w=t('<p>元数据源需要实现以下两点:<br> 首先，需要基于 atlas 的类型系统定义能够表达大数据组件元数据对象的元数据模型(例如 Hive 的元数据模型实现在 <code>org.apache.atlas.hive.model.HiveDataModelGenerator</code>； 然后，需要提供 hook 组件去从大数据组件的元数据源中提取元数据对象，实时侦听元数据的变更并反馈给 atlas；</p><h5 id="apps" tabindex="-1"><a class="header-anchor" href="#apps" aria-hidden="true">#</a> Apps</h5><ul><li><p>Admin UI<br> 这个组件是一个基于 web 的应用程序，允许数据管理员和科学家发现和注释元数据。 这里最重要的是一个搜索界面和类似 SQL 的查询语言，可用于查询 Atlas 管理的元数据类型和对象。 Admin UI 使用 Atlas 的 REST API 来构建其功能。</p></li><li><p>Ranger Tag Based Policies Apache Ranger 是 Hadoop 生态系统的高级安全管理解决方案，与各种 Hadoop 组件进行了广泛的集成。 通过与 Atlas 集成，Ranger 允许安全管理员定义元数据驱动的安全策略，以实现有效的治理。 Ranger 是 Atlas 通知的元数据更改事件的使用者。</p></li></ul><h3 id="数据湖-data-lake" tabindex="-1"><a class="header-anchor" href="#数据湖-data-lake" aria-hidden="true">#</a> 数据湖 Data lake</h3><p>数据湖是一个以 <strong>原始格式(通常是对象块或文件，数据不做预处理，保存数据的原始状态)存储数据的系统或存储库</strong>。数据湖通常是所有企业数据的单一存储（存储库中会汇总多种数据源，是一个单一库）。用于报告、可视化、高级分析和机器学习等任务。数据湖可以包括来自 <strong>关系数据库的结构化数据</strong>(行和列)、<strong>半结构化数据</strong>(CSV、日志、XML、JSON)、<strong>非结构化数据</strong>(电子邮件、文档、pdf)和 <strong>二进制数据</strong>(图像、音频、视频)。</p><blockquote><p>大数据刚兴起的时候，数据主要用途是 BI 、报表、可视化。因此数据需要是结构化的，并且需要 ETL 对数据进行预处理。这个阶段数据仓库更适合完成这样的需求，所以企业大部分需要分析的数据都集中到数据仓库中。而机器学习的兴起对数据的需求更加灵活，如果从数据仓库中提数会有一些问题。比如：数据都是结构化的；数据是经过处理的可能并不是算法想要的结果；算法同学与数仓开发同学沟通成本较大等。我在工作中就遇到这种情况，做算法的同学需要经常理解我们的数仓模型，甚至要深入到做了什么业务处理，并且我们的处理可能并不是他们的想要的。基于上面遇到的各种问题，数据湖的概念应运而生。下面的表格对比一下数据湖和数据仓库的区别，主要来自 AWS 。</p></blockquote><blockquote><p>Hudi是一个用于构建数据湖的开源工具。在GitHub是很活跃的。我们构建数仓很多时候会选Hive。而构建数据湖我们可以选择Hudi。它提供了数据湖所必要的数据提取、数据管理、血缘追踪等功能，而且可以Hadoop、Spark等大数据框架很好地结合起来。</p></blockquote>',7),B={href:"https://mp.weixin.qq.com/s/2VQQo2y5OWHIAmelmJVD2Q",target:"_blank",rel:"noopener noreferrer"},C=t("<table><thead><tr><th>特性</th><th>数据仓库</th><th>数据湖</th></tr></thead><tbody><tr><td>数据</td><td>经过预处理的结构化关系数据</td><td>来自IoT设备、网站、移动应用程序、社交媒体、企业应用的非关系型和关系型数据</td></tr><tr><td>Schema</td><td>设计在数据仓库之前，写入型 Schema</td><td>分析的时候临时建立 scheam 和表，用 SQL分析， 读取型 schema</td></tr></tbody></table><ul><li>Data Lake Analytics Aliyun</li></ul><blockquote><p>通过标准JDBC直接对阿里云OSS，TableStore，RDS，MongoDB等不同数据源中存储的数据进行查询和分析。DLA 无缝集成各类商业分析工具，提供便捷的数据可视化。阿里云OSS 可以存储各种结构化、半结构化、非结构化的数据，可以当做一个数据湖的存储库。DLA 使用前需要创建 Schema 、定义表，再进行后续分析。</p></blockquote><ul><li>Lake Formation AWS</li></ul><blockquote><p>可以识别 S3 或关系数据库和 NoSQL 数据库中存储的现有数据，并将数据移动到 S3 数据湖中。使用 EMR for Apache Spark（测试版）、Redshift 或 Athena 进行分析。支持的数据源跟阿里云差不多。</p></blockquote><p>工业数据空间（Industrial Data Space）</p>",6);function P(K,O){const n=r("ExternalLinkIcon");return o(),i("div",null,[a("p",null,[a("a",h,[b,s(n)]),k]),v,a("p",null,[a("a",m,[e("Erasure Coding Library"),s(n)])]),g,_,f,a("ul",null,[q,a("li",null,[A,a("blockquote",null,[a("p",null,[a("a",S,[e("元数据"),s(n)])])])])]),y,a("p",null,[a("a",x,[e("Apache Atlas"),s(n)]),e(" , Hadoop的数据治理和元数据框架。它为Hadoop集群提供了包括 数据分类、集中策略引擎、数据血缘、安全和生命周期管理在内的元数据治理核心能力。")]),H,a("p",null,[a("a",T,[I,s(n)])]),L,a("ul",null,[a("li",null,[a("a",D,[e("HBase"),s(n)])]),a("li",null,[a("a",E,[e("Hive"),s(n)])]),a("li",null,[a("a",M,[e("Sqoop"),s(n)])]),a("li",null,[a("a",R,[e("Storm"),s(n)])]),a("li",null,[a("a",N,[e("Kafka"),s(n)])])]),w,a("blockquote",null,[a("p",null,[a("a",B,[e("优秀文章"),s(n)])])]),C])}const V=l(u,[["render",P],["__file","bigdata.html.vue"]]);export{V as default};
