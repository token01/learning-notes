import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,b as a,d as e,e as c,r as i}from"./app.c2a49a29.js";const l={},u=c(`<h2 id="fetcher-功能概述" tabindex="-1"><a class="header-anchor" href="#fetcher-功能概述" aria-hidden="true">#</a> Fetcher 功能概述</h2><p>区块数据同步分为被动同步和主动同步:</p><ul><li><p>被动同步是指本地节点收到其他节点的一些<strong>广播</strong>的消息，然后请求区块信息。</p></li><li><p>主动同步是指节点主动向其他节点请求区块数据，比如geth刚启动时的syning，以及运行时定时和相邻节点同步</p></li></ul><p><code>Fetcher</code>负责被动同步，主要做以下事情：</p><ul><li>收到完整的block广播消息(NewBlockMsg)</li><li>收到blockhash广播消息(NewBlockHashesMsg)</li></ul><p>这两个消息又是分别由 <code>peer.AsyncSendNewBlockHash</code> 和 <code>peer.AsyncSendNewBlock</code> 两个方法发出的，这两个方法只有在矿工挖到新的区块时才会被调用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 订阅本地挖到新的区块的消息</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">minedBroadcastLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> obj <span class="token operator">:=</span> <span class="token keyword">range</span> pm<span class="token punctuation">.</span>minedBlockSub<span class="token punctuation">.</span><span class="token function">Chan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> ev<span class="token punctuation">,</span> ok <span class="token operator">:=</span> obj<span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token punctuation">(</span>core<span class="token punctuation">.</span>NewMinedBlockEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            pm<span class="token punctuation">.</span><span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// First propagate block to peers</span>
            pm<span class="token punctuation">.</span><span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// Only then announce to the rest</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProtocolManager<span class="token punctuation">)</span> <span class="token function">BroadcastBlock</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> propagate <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token keyword">if</span> propagate <span class="token punctuation">{</span>
        <span class="token operator">...</span><span class="token operator">...</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> transfer <span class="token punctuation">{</span>
            peer<span class="token punctuation">.</span><span class="token function">AsyncSendNewBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> td<span class="token punctuation">)</span> <span class="token comment">//发送区块数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">HasBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span>
            peer<span class="token punctuation">.</span><span class="token function">AsyncSendNewBlockHash</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token comment">//发送区块哈希</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，当某个矿工产生了新的区块、并将这个新区块广播给其它节点，而<strong>其它远程节点</strong>收到广播的消息时，才会用到 <code>fetcher</code> 模块去同步这些区块。</p><hr><h2 id="fetcher的状态字段" tabindex="-1"><a class="header-anchor" href="#fetcher的状态字段" aria-hidden="true">#</a> fetcher的状态字段</h2><p>在 <code>Fetcher</code> 内部对区块进行同步时，会被分成如下几个阶段，并且每个阶段都有一个状态字段与之对应，用来记录这个阶段的数据：</p><ul><li><code>Fetcher.announced</code>:此阶段代表节点宣称产生了新的区块（这个新产生的区块不一定是自己产生的，也可能是同步了其它节点新产生的区块），<code>Fetcher</code> 对象将相关信息放到 <code>Fetcher.announced</code> 中，等待下载。</li><li><code>Fetcher.fetching</code>：此阶段代表之前「announced」的区块正在被下载。</li><li><code>Fetcher.fetched</code>：代表区块的 <code>header</code> 已下载成功，现在等待下载 <code>body</code>。</li><li><code>Fetcher.completing</code>：代表 <code>body</code> 已经发起了下载，正在等待 <code>body</code> 下载成功。</li><li><code>Fetcher.queued</code>:代表 <code>body</code> 已经下载成功。因此一个区块的数据：<code>header</code> 和 body 都已下载完成，此区块正在等待写入本地数据库。</li></ul><h2 id="fetcher-同步区块哈希" tabindex="-1"><a class="header-anchor" href="#fetcher-同步区块哈希" aria-hidden="true">#</a> Fetcher 同步区块哈希</h2><p>而新产生区块时，会使用消息 <code>NewBlockHashesMsg</code> 和 <code>NewBlockMsg</code> 对其进行传播。因此 <code>Fetcher</code> 对象也是从这两个消息处发现新的区块信息的。先来看同步区块哈希的过程。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> msg<span class="token punctuation">.</span>Code <span class="token operator">==</span> NewBlockHashesMsg<span class="token punctuation">:</span>
  <span class="token keyword">var</span> announces newBlockHashesData
  <span class="token keyword">if</span> err <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>announces<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">errResp</span><span class="token punctuation">(</span>ErrDecode<span class="token punctuation">,</span> <span class="token string">&quot;%v: %v&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Mark the hashes as present at the remote node</span>
  <span class="token comment">// 将hash 标记存在于远程节点上</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> announces <span class="token punctuation">{</span>
   p<span class="token punctuation">.</span><span class="token function">MarkBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Schedule all the unknown hashes for retrieval 检索所有未知哈希</span>
  unknown <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>newBlockHashesData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>announces<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> announces <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token operator">!</span>pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">HasBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> block<span class="token punctuation">.</span>Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unknown <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span> block<span class="token punctuation">)</span> <span class="token comment">// 本地不存在的话就扔到unkonwn里面</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> unknown <span class="token punctuation">{</span>
   pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> block<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> block<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>RequestOneHeader<span class="token punctuation">,</span> p<span class="token punctuation">.</span>RequestBodies<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先将接收的哈希标记在远程节点上，然后去本地检索是否有这个哈希，如果本地数据库不存在的话，就放到<code>unknown</code>里面，然后通知本地的<code>fetcher</code>模块再去远程节点上请求此区块的<code>header</code>和<code>body</code>。 接下来进入到<code>fetcher.Notify</code>方法中。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func (f *Fetcher) Notify(peer string, hash common.Hash, number uint64, time time.Time,
 headerFetcher headerRequesterFn, bodyFetcher bodyRequesterFn) error {
 block := &amp;announce{
  hash:        hash,
  number:      number,
  time:        time,
  origin:      peer,
  fetchHeader: headerFetcher,
  fetchBodies: bodyFetcher,
 }
 select {
 case f.notify &lt;- block:
  return nil
 case &lt;-f.quit:
  return errTerminated
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它构造了一个 <code>announce</code> 结构，并将其发送给了 <code>Fetcher.notify</code> 这个 channel。注意 <code>announce</code> 这个结构里带着下载 header 和 body 的方法： <code>fetchHeader</code> 和 <code>fetchBodies</code> 。这两个方法在下面的过程中会讲到。 接下来我们进入到<code>fetcher.go</code>的loop函数中，找到<code>notify</code>，分以下几个内容：</p><p>①：校验防止Dos攻击(限制为256个)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>count <span class="token operator">:=</span> f<span class="token punctuation">.</span>announces<span class="token punctuation">[</span>notification<span class="token punctuation">.</span>origin<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
   <span class="token keyword">if</span> count <span class="token operator">&gt;</span> hashLimit <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Peer exceeded outstanding announces&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> notification<span class="token punctuation">.</span>origin<span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token punctuation">,</span> hashLimit<span class="token punctuation">)</span>
    propAnnounceDOSMeter<span class="token punctuation">.</span><span class="token function">Mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：新来的块号必须满足 $chainHeight - blockno &lt; 7$ 或者 $blockno - chainHeight &lt; 32$</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> notification<span class="token punctuation">.</span>number <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> dist <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int64</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">chainHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dist <span class="token operator">&lt;</span> <span class="token operator">-</span>maxUncleDist <span class="token operator">||</span> dist <span class="token operator">&gt;</span> maxQueueDist <span class="token punctuation">{</span>
   <span class="token operator">...</span>   <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：准备下载<code>header</code>的<code>fetching</code>中存在此哈希则跳过</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if _, ok := f.fetching[notification.hash]; ok { 
  break
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：准备下载<code>body</code>的<code>completing</code>中存在此哈希也跳过</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>notification<span class="token punctuation">.</span>hash<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token keyword">break</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：当确定<code>fetching</code>和<code>completing</code>不存在此区块哈希时，则把此区块哈希放入到<code>announced</code>中，准备拉取<code>header</code>和<code>body</code>。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>f.announced[notification.hash] = append(f.announced[notification.hash], notification)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥：如果 <code>Fetcher.announced</code> 中只有刚才新加入的这一个区块哈希，那么调用 <code>Fetcher.rescheduleFetch</code> 重新设置变量 <code>fetchTimer</code> 的周期</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>announced<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    f<span class="token punctuation">.</span><span class="token function">rescheduleFetch</span><span class="token punctuation">(</span>fetchTimer<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拉取header" tabindex="-1"><a class="header-anchor" href="#拉取header" aria-hidden="true">#</a> 拉取header</h3><p>接下来就是到<code>fetchTimer.C</code>函数中：进行拉取header的操作了,具体步骤如下：</p><p>①：选择要下载的区块，从 <code>announced</code> 转移到 <code>fetching</code> 中</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>for hash, announces := range f.announced {
    if time.Since(announces[0].time) &gt; arriveTimeout-gatherSlack {
    // 随机挑一个进行fetching
     announce := announces[rand.Intn(len(announces))]
     f.forgetHash(hash)

     // If the block still didn&#39;t arrive, queue for fetching
     if f.getBlock(hash) == nil {
      request[announce.origin] = append(request[announce.origin], hash)
      f.fetching[hash] = announce //
     }
    }
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：发送下载 <code>header</code> 的请求</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>//发送所有的header请求
   for peer, hashes := range request {
    log.Trace(&quot;Fetching scheduled headers&quot;, &quot;peer&quot;, peer, &quot;list&quot;, hashes)
    fetchHeader, hashes := f.fetching[hashes[0]].fetchHeader, hashes
    go func() {
     if f.fetchingHook != nil {
      f.fetchingHook(hashes)
     }
     for _, hash := range hashes {
      headerFetchMeter.Mark(1)
      fetchHeader(hash) 
     }
    }()
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们再回到<code>f.notify</code>函数中，找到<code>p.RequestOneHeader</code>，发送<code>GetBlockHeadersMsg</code>给远程节点，然后远程节点再通过<code>case msg.Code == GetBlockHeadersMsg</code>进行处理，本地区块链会返回headers，然后再发送回去。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>origin = pm.blockchain.GetHeaderByHash(query.Origin.Hash)
...
p.SendBlockHeaders(headers)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们请求的<code>headers</code>被远程节点给发送回来了，又是通过新的消息<code>BlockHeadersMsg</code>来传递的,当请求的 <code>header</code> 到来时，会通过两种方式来过滤header ：</p><ol><li><code>Fetcher.FilterHeaders</code> 通知 <code>Fetcher</code> 对象</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> msg<span class="token punctuation">.</span>Code <span class="token operator">==</span> BlockHeadersMsg<span class="token punctuation">:</span>
<span class="token operator">...</span><span class="token punctuation">.</span>
filter <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token keyword">if</span> filter <span class="token punctuation">{</span>
  headers <span class="token operator">=</span> pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">FilterHeaders</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.<code>downloader.DeliverHeaders</code> 通知<code>downloader</code>对象</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>filter <span class="token punctuation">{</span>
   err <span class="token operator">:=</span> pm<span class="token punctuation">.</span>downloader<span class="token punctuation">.</span><span class="token function">DeliverHeaders</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
  <span class="token operator">...</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>downloader</code>相关的放在接下的文章探讨。继续看<code>FilterHeaders</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>filter <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>headerFilterTask<span class="token punctuation">)</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span>
 <span class="token keyword">case</span> f<span class="token punctuation">.</span>headerFilter <span class="token operator">&lt;-</span> filter<span class="token punctuation">:</span> ①
<span class="token operator">...</span><span class="token punctuation">.</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span>
 <span class="token keyword">case</span> filter <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>headerFilterTask<span class="token punctuation">{</span>peer<span class="token punctuation">:</span> peer<span class="token punctuation">,</span> headers<span class="token punctuation">:</span> headers<span class="token punctuation">,</span> time<span class="token punctuation">:</span> time<span class="token punctuation">}</span><span class="token punctuation">:</span> ②
<span class="token operator">...</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span>
 <span class="token keyword">case</span> task <span class="token operator">:=</span> <span class="token operator">&lt;-</span>filter<span class="token punctuation">:</span> ③
  <span class="token keyword">return</span> task<span class="token punctuation">.</span>headers
<span class="token operator">...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要分为3个步骤：</p><ol><li>先发一个通信用的 <code>channel</code> 给 <code>headerFilter</code></li><li>将要过滤的 <code>headerFilterTask</code> 发送给 <code>filter</code></li><li>检索过滤后剩余的标题</li></ol><p>主要的处理步骤还是在<code>loop</code>函数中的<code>filter := &lt;-f.headerFilter</code>，在探讨处理前，先了解三个参数的含义：</p><ul><li><code>unknown：</code>未知的header</li><li><code>incomplete：</code><strong>header</strong>拉取完成，但是<strong>body</strong>还没有拉取</li><li><code>complete：</code><strong>header</strong>和<strong>body</strong>都拉取完成，一个完整的块，可导入到数据库</li></ul><p>接下来正式进入到<code>for _, header := range task.headers {}</code>循环中: <strong>这是第一段重要的循环</strong></p><p>①：判断是否是在<code>fetching</code>中的header，并且不是其他同步算法的<code>header</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> announce <span class="token operator">:=</span> f<span class="token punctuation">.</span>fetching<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">;</span> announce <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> announce<span class="token punctuation">.</span>origin <span class="token operator">==</span> task<span class="token punctuation">.</span>peer <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span>fetched<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span>queued<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：如果传递的<code>header</code>与承诺的<code>number</code>不匹配，删除<code>peer</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> announce<span class="token punctuation">.</span>number <span class="token punctuation">{</span>
  f<span class="token punctuation">.</span><span class="token function">dropPeer</span><span class="token punctuation">(</span>announce<span class="token punctuation">.</span>origin<span class="token punctuation">)</span>
  f<span class="token punctuation">.</span><span class="token function">forgetHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：判断此区块在本地是否已存在,如果不存在且只有<code>header</code>（空块），直接放入<code>complete</code>以及<code>f.completing</code>中，否则就放入到<code>incomplete</code>中等待同步<code>body</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      announce<span class="token punctuation">.</span>header <span class="token operator">=</span> header
      announce<span class="token punctuation">.</span>time <span class="token operator">=</span> task<span class="token punctuation">.</span>time

      <span class="token keyword">if</span> header<span class="token punctuation">.</span>TxHash <span class="token operator">==</span> types<span class="token punctuation">.</span><span class="token function">DeriveSha</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Transactions<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> header<span class="token punctuation">.</span>UncleHash <span class="token operator">==</span> types<span class="token punctuation">.</span><span class="token function">CalcUncleHash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
       block <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewBlockWithHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>
       block<span class="token punctuation">.</span>ReceivedAt <span class="token operator">=</span> task<span class="token punctuation">.</span>time

       complete <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>complete<span class="token punctuation">,</span> block<span class="token punctuation">)</span>
       f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> announce
       <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
      incomplete <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>incomplete<span class="token punctuation">,</span> announce<span class="token punctuation">)</span> <span class="token comment">// 否则添加到需要完成拉取body的列表中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：如果<code>f.fetching</code>中不存在此哈希，就放入到<code>unkown</code>中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token comment">// Fetcher doesn&#39;t know about it, add to the return list |fetcher 不认识的放到unkown中</span>
     unknown <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>unknown<span class="token punctuation">,</span> header<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：之后再把<code>Unknown</code>的<code>header</code>再通知fetcher继续过滤</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> filter <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>headerFilterTask<span class="token punctuation">{</span>headers<span class="token punctuation">:</span> unknown<span class="token punctuation">,</span> time<span class="token punctuation">:</span> task<span class="token punctuation">.</span>time<span class="token punctuation">}</span><span class="token punctuation">:</span>
   <span class="token keyword">case</span> <span class="token operator">&lt;-</span>f<span class="token punctuation">.</span>quit<span class="token punctuation">:</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是<strong>进入到第二个循环</strong>，要准备拿出incomplete里的哈希，进行同步body的同步</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> announce <span class="token operator">:=</span> <span class="token keyword">range</span> incomplete <span class="token punctuation">{</span>
    hash <span class="token operator">:=</span> announce<span class="token punctuation">.</span>header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
     <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    f<span class="token punctuation">.</span>fetched<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>fetched<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">,</span> announce<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>fetched<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
     f<span class="token punctuation">.</span><span class="token function">rescheduleComplete</span><span class="token punctuation">(</span>completeTimer<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>f.completing</code>中存在，就表明已经在开始同步<code>body</code>了，直接跳过，否则把这个哈希放入到<code>f.fetched</code>，表示<code>header</code>同步完毕，准备<code>body</code>同步，由<code>f.rescheduleComplete(completeTimer)</code>完成。最后是安排只有<code>header</code>的区块进行导入操作.</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>for _, block := range complete {
    if announce := f.completing[block.Hash()]; announce != nil {
     f.enqueue(announce.origin, block)
    }
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点分析<code>completeTimer.C</code>，同步<code>body</code>的操作，这步完成就是要准备区块导入到数据库流程了。</p><h3 id="拉取body" tabindex="-1"><a class="header-anchor" href="#拉取body" aria-hidden="true">#</a> 拉取body</h3><p>进入<code>completeTimer.C</code>，从f.fetched获取哈希，如果本地区块链查不到的话就把这个哈希放入到<code>f.completing</code>中，再循环进行<code>fetchBodies</code>，整个流程就结束了，代码大致如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> <span class="token operator">&lt;-</span>completeTimer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
<span class="token operator">...</span>
   <span class="token keyword">for</span> hash<span class="token punctuation">,</span> announces <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>fetched <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     request<span class="token punctuation">[</span>announce<span class="token punctuation">.</span>origin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>request<span class="token punctuation">[</span>announce<span class="token punctuation">.</span>origin<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
     f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> announce
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">for</span> peer<span class="token punctuation">,</span> hashes <span class="token operator">:=</span> <span class="token keyword">range</span> request <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token keyword">go</span> f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>hashes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fetchBodies</span><span class="token punctuation">(</span>hashes<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键的拉取<code>body</code>函数： <code>p.RequestBodies</code>，发送<code>GetBlockBodiesMsg</code>消息同步<code>body</code>。回到<code>handler</code>里面去查看对应的消息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> msg<span class="token punctuation">.</span>Code <span class="token operator">==</span> GetBlockBodiesMsg<span class="token punctuation">:</span>
  <span class="token comment">// Decode the retrieval message</span>
  msgStream <span class="token operator">:=</span> rlp<span class="token punctuation">.</span><span class="token function">NewStream</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Payload<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> msgStream<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> <span class="token punctuation">(</span>
   hash   common<span class="token punctuation">.</span>Hash
   bytes  <span class="token builtin">int</span>
   bodies <span class="token punctuation">[</span><span class="token punctuation">]</span>rlp<span class="token punctuation">.</span>RawValue
  <span class="token punctuation">)</span>
  <span class="token keyword">for</span> bytes <span class="token operator">&lt;</span> softResponseLimit <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>bodies<span class="token punctuation">)</span> <span class="token operator">&lt;</span> downloader<span class="token punctuation">.</span>MaxBlockFetch <span class="token punctuation">{</span>
   <span class="token operator">...</span>
   <span class="token keyword">if</span> data <span class="token operator">:=</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetBodyRLP</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    bodies <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>bodies<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    bytes <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">SendBlockBodiesRLP</span><span class="token punctuation">(</span>bodies<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>softResponseLimit</code>返回的<code>body</code>大小最大为$2 <em>1024</em> 1024$,<code>MaxBlockFetch</code>表示每个请求最多128个<code>body</code>。</p><p>之后直接通过<code>GetBodyRLP</code>返回数据通过<code>SendBlockBodiesRLP</code>发回给节点。</p><p>节点将会接收到新消息：<code>BlockBodiesMsg</code>，进入查看：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 过滤掉filter请求的body 同步，其他的都交给downloader</span>
  filter <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>transactions<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>uncles<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
  <span class="token keyword">if</span> filter <span class="token punctuation">{</span>
   transactions<span class="token punctuation">,</span> uncles <span class="token operator">=</span> pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">FilterBodies</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> transactions<span class="token punctuation">,</span> uncles<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>transactions<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>uncles<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>filter <span class="token punctuation">{</span>
   err <span class="token operator">:=</span> pm<span class="token punctuation">.</span>downloader<span class="token punctuation">.</span><span class="token function">DeliverBodies</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> transactions<span class="token punctuation">,</span> uncles<span class="token punctuation">)</span>
<span class="token operator">...</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤掉<code>filter</code>请求的<code>body</code> 同步，其他的都交给<code>downloader</code>，<code>downloader</code>部分之后的篇章讲。进入到<code>FilterBodies</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> filter <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>bodyFilterTask<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token punctuation">{</span>
 <span class="token keyword">case</span> f<span class="token punctuation">.</span>bodyFilter <span class="token operator">&lt;-</span> filter<span class="token punctuation">:</span>  ①
 <span class="token keyword">case</span> <span class="token operator">&lt;-</span>f<span class="token punctuation">.</span>quit<span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// Request the filtering of the body list</span>
 <span class="token comment">// 请求过滤body 列表</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span> ②
 <span class="token keyword">case</span> filter <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>bodyFilterTask<span class="token punctuation">{</span>peer<span class="token punctuation">:</span> peer<span class="token punctuation">,</span> transactions<span class="token punctuation">:</span> transactions<span class="token punctuation">,</span> uncles<span class="token punctuation">:</span> uncles<span class="token punctuation">,</span> time<span class="token punctuation">:</span> time<span class="token punctuation">}</span><span class="token punctuation">:</span>
 <span class="token keyword">case</span> <span class="token operator">&lt;-</span>f<span class="token punctuation">.</span>quit<span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// Retrieve the bodies remaining after filtering</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span> ③：
 <span class="token keyword">case</span> task <span class="token operator">:=</span> <span class="token operator">&lt;-</span>filter<span class="token punctuation">:</span>
  <span class="token keyword">return</span> task<span class="token punctuation">.</span>transactions<span class="token punctuation">,</span> task<span class="token punctuation">.</span>uncles
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要分为3个步骤：</p><ol><li>先发一个通信用的 <code>channel</code> 给 <code>bodyFilter</code></li><li>将要过滤的 <code>bodyFilterTask</code> 发送给 <code>filter</code></li><li>检索过滤后剩余的<code>body</code></li></ol><p>现在进入到<code>case filter := &lt;-f.bodyFilter</code>里面，大致做了以下几件事：</p><p>①：首先从f.completing中获取要同步body的哈希</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>transactions<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>uncles<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> hash<span class="token punctuation">,</span> announce <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>completing <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：然后从f.queued去查这个哈希是不是已经获取了body，如果没有并满足条件就创建一个完整block</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> f<span class="token punctuation">.</span>queued<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      txnHash <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">DeriveSha</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">Transactions</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>transactions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      uncleHash <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">CalcUncleHash</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>uncles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> txnHash <span class="token operator">==</span> announce<span class="token punctuation">.</span>header<span class="token punctuation">.</span>TxHash <span class="token operator">&amp;&amp;</span> uncleHash <span class="token operator">==</span> announce<span class="token punctuation">.</span>header<span class="token punctuation">.</span>UncleHash <span class="token operator">&amp;&amp;</span> announce<span class="token punctuation">.</span>origin <span class="token operator">==</span> task<span class="token punctuation">.</span>peer <span class="token punctuation">{</span>
       matched <span class="token operator">=</span> <span class="token boolean">true</span>

       <span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        block <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewBlockWithHeader</span><span class="token punctuation">(</span>announce<span class="token punctuation">.</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithBody</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>transactions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>uncles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        block<span class="token punctuation">.</span>ReceivedAt <span class="token operator">=</span> task<span class="token punctuation">.</span>time

                blocks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>blocks<span class="token punctuation">,</span> block<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：最后对完整的块进行导入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> block <span class="token operator">:=</span> <span class="token keyword">range</span> blocks <span class="token punctuation">{</span>
    <span class="token keyword">if</span> announce <span class="token operator">:=</span> f<span class="token punctuation">.</span>completing<span class="token punctuation">[</span>block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> announce <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     f<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>announce<span class="token punctuation">.</span>origin<span class="token punctuation">,</span> block<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后用一张粗略的图来大概的描述一下整个同步区块哈希的流程：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glae3zccpdj30wm0t6q67.jpg" alt="image-20201203090304059" loading="lazy"></p><hr><p>同步区块哈希的最终会走到<code>f.enqueue</code>里面，这个也是<strong>同步区块</strong>最重要的要做的一件事，下文就会讲到。</p><h2 id="fetcher-同步区块" tabindex="-1"><a class="header-anchor" href="#fetcher-同步区块" aria-hidden="true">#</a> Fetcher 同步区块</h2><p>分析完上面比较复杂的同步区块哈希过程，接下来就要分析比较简单的同步区块过程。从<code>NewBlockMsg</code>开始：</p><p>主要做两件事：</p><p>①：<code>fetcher</code>模块导入远程节点发过来的区块</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>pm.fetcher.Enqueue(p.id, request.Block)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：<strong>主动同步</strong>远程节点</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if _, td := p.Head(); trueTD.Cmp(td) &gt; 0 {
   p.SetHead(trueHead, trueTD)
   currentBlock := pm.blockchain.CurrentBlock()
   if trueTD.Cmp(pm.blockchain.GetTd(currentBlock.Hash(), currentBlock.NumberU64())) &gt; 0 {
    go pm.synchronise(p)
   }
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主动同步由<code>Downloader</code>去处理，我们这篇只讨论<code>fetcher</code>相关。</p><h3 id="区块入队列" tabindex="-1"><a class="header-anchor" href="#区块入队列" aria-hidden="true">#</a> 区块入队列</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pm<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">,</span> request<span class="token punctuation">.</span>Block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> op <span class="token operator">:=</span> <span class="token operator">&lt;-</span>f<span class="token punctuation">.</span>inject<span class="token punctuation">:</span>
   propBroadcastInMeter<span class="token punctuation">.</span><span class="token function">Mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   f<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>origin<span class="token punctuation">,</span> op<span class="token punctuation">.</span>block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正式进入将区块送进<code>queue</code>中，主要做了以下几件事：</p><p>①： 确保新加<code>peer</code>没有导致<code>DOS</code>攻击</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>count <span class="token operator">:=</span> f<span class="token punctuation">.</span>queues<span class="token punctuation">[</span>peer<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
 <span class="token keyword">if</span> count <span class="token operator">&gt;</span> blockLimit <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Discarded propagated block, exceeded allowance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token punctuation">,</span> blockLimit<span class="token punctuation">)</span>
  propBroadcastDOSMeter<span class="token punctuation">.</span><span class="token function">Mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  f<span class="token punctuation">.</span><span class="token function">forgetHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
  <span class="token keyword">return</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：丢弃掉过去的和比较老的区块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> dist <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int64</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">chainHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dist <span class="token operator">&lt;</span> <span class="token operator">-</span>maxUncleDist <span class="token operator">||</span> dist <span class="token operator">&gt;</span> maxQueueDist <span class="token punctuation">{</span>
  f<span class="token punctuation">.</span><span class="token function">forgetHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：安排区块导入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>queued<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
  op <span class="token operator">:=</span> <span class="token operator">&amp;</span>inject<span class="token punctuation">{</span>
   origin<span class="token punctuation">:</span> peer<span class="token punctuation">,</span>
   block<span class="token punctuation">:</span>  block<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  f<span class="token punctuation">.</span>queues<span class="token punctuation">[</span>peer<span class="token punctuation">]</span> <span class="token operator">=</span> count
  f<span class="token punctuation">.</span>queued<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> op
  f<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> f<span class="token punctuation">.</span>queueChangeHook <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   f<span class="token punctuation">.</span><span class="token function">queueChangeHook</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Queued propagated block&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">&quot;queued&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止，已经将区块送入到<code>queue</code>中，接下来就是要回到<code>loop</code>函数中去处理<code>queue</code>中的区块。</p><h3 id="区块入库" tabindex="-1"><a class="header-anchor" href="#区块入库" aria-hidden="true">#</a> 区块入库</h3><p>loop函数在处理队列中的区块主要做了以下事情：</p><ol><li>判断队列是否为空</li><li>取出区块哈希，并且和本地链进行比较，如果太高的话，就暂时不导入</li><li>最后通过f.insert将区块插入到数据库。</li></ol><p>代码如下：</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>height := f.chainHeight()
  for !f.queue.Empty() {
   op := f.queue.PopItem().(*inject)
   hash := op.block.Hash()
  ...
   number := op.block.NumberU64()
   if number &gt; height+1 {
    f.queue.Push(op, -int64(number))
 ...
    break
   }
   if number+maxUncleDist &lt; height || f.getBlock(hash) != nil {
    f.forgetBlock(hash)
    continue
   }
   f.insert(op.origin, op.block) //导入块
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到<code>f.insert</code>中，主要做了以下几件事：</p><p>①：判断区块的父块是否存在，不存在则中断插入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  parent <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown parent of propagated block&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②： 快速验证header，<strong>并在传递时广播该块</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">verifyHeader</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
   propBroadcastOutTimer<span class="token punctuation">.</span><span class="token function">UpdateSince</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>ReceivedAt<span class="token punctuation">)</span>
   <span class="token keyword">go</span> f<span class="token punctuation">.</span><span class="token function">broadcastBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：运行真正的插入逻辑</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if _, err := f.insertChain(types.Blocks{block}); err != nil {
   log.Debug(&quot;Propagated block import failed&quot;, &quot;peer&quot;, peer, &quot;number&quot;, block.Number(), &quot;hash&quot;, hash, &quot;err&quot;, err)
   return
  }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：导入成功广播此块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> f<span class="token punctuation">.</span><span class="token function">broadcastBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>真正做区块入库的是f.insertChain，这里会调用blockchain模块去操作，具体细节会后续文章讲述，到此为止Fether模块的同步就到此结束了，下面是同步区块的流程图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glae40anr7j30ps0mkn0t.jpg" alt="image-20201203090327173" loading="lazy"></p><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,127),d={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const s=i("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[n("a",d,[a("https://mindcarver.cn"),e(s)])]),n("p",null,[n("a",r,[a("https://github.com/blockchainGuide"),e(s)])])])])}const g=t(l,[["render",k],["__file","6.Etheric_fang_Fetcher_synchronization_of_the_source_code_analysis.html.vue"]]);export{g as default};
