import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.7b6c8628.js";const e={},p=t(`<blockquote><p>浅谈以太坊源码|以太坊启动流程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1go6tgnjvkhj20jg0c6mxi.jpg" alt="9ff239564d5d1129fa544f25d95c7468" loading="lazy"></p><h2 id="启动参数" tabindex="-1"><a class="header-anchor" href="#启动参数" aria-hidden="true">#</a> 启动参数</h2><p>以太坊是如何启动一个网络节点的呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">.</span><span class="token operator">/</span>geth <span class="token operator">--</span>datadir <span class="token string">&quot;../data0&quot;</span> <span class="token operator">--</span>nodekeyhex <span class="token string">&quot;27aa615f5fa5430845e4e97229def5f23e9525a20640cc49304f40f3b43824dc&quot;</span> <span class="token operator">--</span>bootnodes $enodeid <span class="token operator">--</span>mine <span class="token operator">--</span>debug <span class="token operator">--</span>metrics <span class="token operator">--</span>syncmode<span class="token operator">=</span><span class="token string">&quot;full&quot;</span> <span class="token operator">--</span>gcmode<span class="token operator">=</span>archive  <span class="token operator">--</span>gasprice <span class="token number">0</span> <span class="token operator">--</span>port <span class="token number">30303</span> <span class="token operator">--</span>rpc <span class="token operator">--</span>rpcaddr <span class="token string">&quot;0.0.0.0&quot;</span> <span class="token operator">--</span>rpcport <span class="token number">8545</span> <span class="token operator">--</span>rpcapi <span class="token string">&quot;db,eth,net,web3,personal&quot;</span> <span class="token operator">--</span>nat any <span class="token operator">--</span>allow<span class="token operator">-</span>insecure<span class="token operator">-</span>unlock  <span class="token number">2</span><span class="token operator">&gt;&gt;</span>log <span class="token number">1</span><span class="token operator">&gt;&gt;</span>log <span class="token number">0</span><span class="token operator">&gt;&gt;</span>log <span class="token operator">&gt;&gt;</span>log <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>geth : 编译好的geth程序，可以起别名</li><li>datadir：数据库和keystore密钥的数据目录</li><li>nodekeyhex: 十六进制的P2P节点密钥</li><li>bootnodes:用于P2P发现引导的enode urls</li><li>mine：打开挖矿</li><li>debug:突出显示调用位置日志(文件名及行号)</li><li>metrics: 启用metrics收集和报告</li><li>syncmode:同步模式 (&quot;fast&quot;, &quot;full&quot;, or &quot;light&quot;)</li><li>gcmode:表示即时将内存中的数据写入到文件中，否则重启节点可能会导致区块高度归零而丢失数据</li><li>gasprice:挖矿接受交易的最低gas价格</li><li>port:网卡监听端口(默认值:30303)</li><li>rpc:启用HTTP-RPC服务器</li><li>rpcaddr:HTTP-RPC服务器接口地址(默认值:“localhost”)</li><li>rpcport:HTTP-RPC服务器监听端口(默认值:8545)</li><li>rpcapi:基于HTTP-RPC接口提供的API</li><li>nat: NAT端口映射机制 (any|none|upnp|pmp|extip:) (默认: “any”)</li><li>allow-insecure-unlock:用于解锁账户</li></ul><p>详细的以太坊启动参数可以参考我的以太坊理论系列，里面有对参数的详细解释。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p><code>geth</code>位于<code>cmd/geth/main.go</code>文件中，入口如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> err <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjmkul302pj31gu0mcnd2.jpg" alt="image-20201012152238541" loading="lazy"></p><p>我们通过这张图可以看出来：main()并不是真正意义上的入口，在初始化完常量和变量以后，会先调用模块的init()函数，然后才是main()函数。所以初始化的工作是在init()函数里完成的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Initialize the CLI app and start Geth</span>
 app<span class="token punctuation">.</span>Action <span class="token operator">=</span> geth
 app<span class="token punctuation">.</span>HideVersion <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// we have a command to print the version</span>
 app<span class="token punctuation">.</span>Copyright <span class="token operator">=</span> <span class="token string">&quot;Copyright 2013-2019 The go-ethereum Authors&quot;</span>
 app<span class="token punctuation">.</span>Commands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cli<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这我们找到了入口函数geth:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">geth</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> args <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid command: %q&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token function">prepare</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
 node <span class="token operator">:=</span> <span class="token function">makeFullNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
 <span class="token keyword">defer</span> node<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">startNode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
 node<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要做了以下几件事：</p><ol><li>准备操作内存缓存配额并设置度量系统</li><li>加载配置和注册服务</li><li>启动节点</li><li>守护当前线程</li></ol><h2 id="加载配置和注册服务" tabindex="-1"><a class="header-anchor" href="#加载配置和注册服务" aria-hidden="true">#</a> 加载配置和注册服务</h2><p>makeFullNode</p><h3 id="_1-加载配置" tabindex="-1"><a class="header-anchor" href="#_1-加载配置" aria-hidden="true">#</a> 1.加载配置</h3><p>makeConfigNode</p><p>首先加载默认配置(作为主网节点启动)：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>cfg <span class="token operator">:=</span> gethConfig<span class="token punctuation">{</span>
  Eth<span class="token punctuation">:</span>  eth<span class="token punctuation">.</span>DefaultConfig<span class="token punctuation">,</span>
  Shh<span class="token punctuation">:</span>  whisper<span class="token punctuation">.</span>DefaultConfig<span class="token punctuation">,</span>
  Node<span class="token punctuation">:</span> <span class="token function">defaultNodeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>eth.DefaultConfig</strong> : 以太坊节点的主要参数配置。主要包括: 同步模式(fast)、chainid、交易池配置、gasprice、挖矿配置等；</li><li><strong>whisper.DefaultConfig</strong> : 主要用于配置网络间通讯；</li><li><strong>defaultNodeConfig()</strong> : 主要用于配置对外提供的RPC节点服务；</li><li><strong>dashboard.DefaultConfig</strong> : 主要用于对外提供看板数据访问服务。</li></ul><p>接着加载自定义配置（适用私有链）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> file <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GlobalString</span><span class="token punctuation">(</span>configFileFlag<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span> file <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        utils<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;%v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后加载命令窗口参数（开发阶段）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>utils<span class="token punctuation">.</span><span class="token function">SetNodeConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token comment">// 本地节点配置</span>
utils<span class="token punctuation">.</span><span class="token function">SetEthConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">.</span>Eth<span class="token punctuation">)</span><span class="token comment">// 以太坊配置</span>
utils<span class="token punctuation">.</span><span class="token function">SetShhConfig</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token punctuation">.</span>Shh<span class="token punctuation">)</span><span class="token comment">// whisper配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-registerethservice" tabindex="-1"><a class="header-anchor" href="#_2-registerethservice" aria-hidden="true">#</a> 2.RegisterEthService</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RegisterEthService</span><span class="token punctuation">(</span>stack <span class="token operator">*</span>node<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> cfg <span class="token operator">*</span>eth<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> err <span class="token builtin">error</span>
 <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>SyncMode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>LightSync <span class="token punctuation">{</span>
  err <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>Service<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> les<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  err <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>Service<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   fullNode<span class="token punctuation">,</span> err <span class="token operator">:=</span> eth<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
   <span class="token keyword">if</span> fullNode <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> cfg<span class="token punctuation">.</span>LightServ <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    ls<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> les<span class="token punctuation">.</span><span class="token function">NewLesServer</span><span class="token punctuation">(</span>fullNode<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
    fullNode<span class="token punctuation">.</span><span class="token function">AddLesServer</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> fullNode<span class="token punctuation">,</span> err
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register the Ethereum service: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出现了两个新类型：ServiceContext和Service。</p><p>先看一下ServiceContext的定义:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ServiceContext <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 config         <span class="token operator">*</span>Config
 services       <span class="token keyword">map</span><span class="token punctuation">[</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">]</span>Service <span class="token comment">// Index of the already constructed services</span>
 EventMux       <span class="token operator">*</span>event<span class="token punctuation">.</span>TypeMux           <span class="token comment">// Event multiplexer used for decoupled notifications</span>
 AccountManager <span class="token operator">*</span>accounts<span class="token punctuation">.</span>Manager        <span class="token comment">// Account manager created by the node.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServiceContext主要是存储了一些从结点（或者叫协议栈）那里继承过来的、和具体Service无关的一些信息，比如结点config、account manager等。其中有一个services字段保存了当前正在运行的所有Service.</p><p>接下来看一下Service的定义:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Service <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 <span class="token comment">// Protocols retrieves the P2P protocols the service wishes to start.</span>
 <span class="token comment">// 协议检索服务希望启动的P2P协议</span>
 <span class="token function">Protocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>p2p<span class="token punctuation">.</span>Protocol

 <span class="token comment">// APIs retrieves the list of RPC descriptors the service provides</span>
 <span class="token comment">// API检索服务提供的RPC描述符列表</span>
 <span class="token function">APIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>rpc<span class="token punctuation">.</span>API

 <span class="token comment">// Start is called after all services have been constructed and the networking</span>
 <span class="token comment">// layer was also initialized to spawn any goroutines required by the service.</span>
 <span class="token comment">//在所有服务都已构建完毕并且网络层也已初始化以生成服务所需的所有goroutine之后，将调用start。</span>
 <span class="token function">Start</span><span class="token punctuation">(</span>server <span class="token operator">*</span>p2p<span class="token punctuation">.</span>Server<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// Stop terminates all goroutines belonging to the service, blocking until they</span>
 <span class="token comment">// are all terminated.</span>
 <span class="token comment">//Stop终止属于该服务的所有goroutine，直到它们全部终止为止一直阻塞。</span>
 <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务注册过程中，主要注册四个服务：EthService、DashboardService、ShhService、EthStatsService，这四种服务类均扩展自Service接口。其中，EthService根据同步模式的不同，分为两种实现：</p><ul><li>LightEthereum，支持LightSync模式</li><li>Ethereum，支持FullSync、FastSync模式</li></ul><p>LightEthereum作为轻客户端，与Ethereum区别在于，它只需要更新区块头。当需要查询区块体数据时，需要通过调用其他全节点的les服务进行查询；另外，轻客户端本身是不能进行挖矿的。</p><p>回到RegisterEthService代码，分两个来讲：</p><p>LightSync同步：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>Service<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> les<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>node<span class="token punctuation">.</span>ServiceContext<span class="token punctuation">,</span> config <span class="token operator">*</span>eth<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>LightEthereum<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
  <span class="token number">1</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>OpenDatabase <span class="token comment">// 创建leveldb数据库</span>
  <span class="token number">2</span><span class="token punctuation">.</span>core<span class="token punctuation">.</span>SetupGenesisBlockWithOverride<span class="token comment">// 根据创世配置初始化链数据目录</span>
  <span class="token number">3.</span>实例化本地链id、共识引擎、注册peer节点、帐户管理器以及布隆过滤器的初始化
  <span class="token number">4</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>NewLightChain<span class="token comment">// 使用数据库中可用的信息返回完全初始化的轻链。它初始化默认的以太坊头</span>
  <span class="token number">5</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>NewTxPool <span class="token comment">// 实例化交易池NewTxPool</span>
  <span class="token number">6</span><span class="token punctuation">.</span>leth<span class="token punctuation">.</span>ApiBackend <span class="token operator">=</span> <span class="token operator">&amp;</span>LesApiBackend<span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">ExtRPCEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> leth<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> 
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FullSync/Fast同步：</p><ol><li><p>参数校验</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> config<span class="token punctuation">.</span>SyncMode <span class="token operator">==</span> downloader<span class="token punctuation">.</span>LightSync <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>SyncMode<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> config<span class="token punctuation">.</span>Miner<span class="token punctuation">.</span>GasPrice <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>Miner<span class="token punctuation">.</span>GasPrice<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>Big0<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> config<span class="token punctuation">.</span>NoPruning <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>TrieDirtyCache <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开数据库</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ctx<span class="token punctuation">.</span>OpenDatabaseWithFreezer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>根据创世配置初始化链数据目录</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>core<span class="token punctuation">.</span>SetupGenesisBlockWithOverride
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实例化Ethereum对象</p></li><li><p>创建BlockChain实例对象</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>core<span class="token punctuation">.</span>NewBlockChain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实例化交易池</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>core<span class="token punctuation">.</span>NewTxPool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实例化协议管理器</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">NewProtocolManager</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实例化对外API服务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">&amp;</span>EthAPIBackend<span class="token punctuation">{</span>ctx<span class="token punctuation">.</span><span class="token function">ExtRPCEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eth<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_3-registershhservice" tabindex="-1"><a class="header-anchor" href="#_3-registershhservice" aria-hidden="true">#</a> 3.RegisterShhService</h3><p>注册Whisper服务，用于p2p网络间加密通信。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>whisper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-registerethstatsservice" tabindex="-1"><a class="header-anchor" href="#_4-registerethstatsservice" aria-hidden="true">#</a> 4.RegisterEthStatsService</h3><p>注册状态推送服务,将当前以太坊网络状态推送至指定URL地址.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ethstats<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ethServ<span class="token punctuation">,</span> lesServ<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动节点" tabindex="-1"><a class="header-anchor" href="#启动节点" aria-hidden="true">#</a> 启动节点</h2><p>启动本地节点以及启动所有注册的服务。</p><h3 id="_1-启动节点" tabindex="-1"><a class="header-anchor" href="#_1-启动节点" aria-hidden="true">#</a> 1.启动节点</h3><p>startNode</p><h4 id="_1-1-stack-start" tabindex="-1"><a class="header-anchor" href="#_1-1-stack-start" aria-hidden="true">#</a> 1.1 stack.Start()</h4><ol><li><p>实例化p2p.Server对象。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>running <span class="token operator">:=</span> <span class="token operator">&amp;</span>p2p<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>Config<span class="token punctuation">:</span> n<span class="token punctuation">.</span>serverConfig<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>为注册的服务创建上下文</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> constructor <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>serviceFuncs <span class="token punctuation">{</span>
  ctx <span class="token operator">:=</span> <span class="token operator">&amp;</span>ServiceContext<span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>收集协议并启动新组装的p2p server</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> kind<span class="token punctuation">,</span> service <span class="token operator">:=</span> <span class="token keyword">range</span> services <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>running<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后启动配置的RPC接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>n<span class="token punctuation">.</span><span class="token function">startRPC</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>startInProc (启动进程内通讯服务)</li><li>startIPC （启动IPC RPC端点）</li><li>startHTTP（启动HTTP RPC端点）</li><li>startWS （启动websocket RPC端点）</li></ul></li></ol><h3 id="_2-解锁账户" tabindex="-1"><a class="header-anchor" href="#_2-解锁账户" aria-hidden="true">#</a> 2.解锁账户</h3><p>unlockAccounts</p><p>在datadir/keystore目录主要用于记录在当前节点创建的帐户keystore文件。如果你的keystore文件不在本地是无法进行解锁的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//解锁datadir/keystore目录中帐户</span>
ks <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">AccountManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Backends</span><span class="token punctuation">(</span>keystore<span class="token punctuation">.</span>KeyStoreType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>keystore<span class="token punctuation">.</span>KeyStore<span class="token punctuation">)</span>
 passwords <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">MakePasswordList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> account <span class="token operator">:=</span> <span class="token keyword">range</span> unlocks <span class="token punctuation">{</span>
  <span class="token function">unlockAccount</span><span class="token punctuation">(</span>ks<span class="token punctuation">,</span> account<span class="token punctuation">,</span> i<span class="token punctuation">,</span> passwords<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-注册钱包事件" tabindex="-1"><a class="header-anchor" href="#_3-注册钱包事件" aria-hidden="true">#</a> 3.注册钱包事件</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>events <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> accounts<span class="token punctuation">.</span>WalletEvent<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
stack<span class="token punctuation">.</span><span class="token function">AccountManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-监听钱包事件" tabindex="-1"><a class="header-anchor" href="#_4-监听钱包事件" aria-hidden="true">#</a> 4.监听钱包事件</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">for</span> event <span class="token operator">:=</span> <span class="token keyword">range</span> events <span class="token punctuation">{</span>
   <span class="token keyword">switch</span> event<span class="token punctuation">.</span>Kind <span class="token punctuation">{</span>
   <span class="token keyword">case</span> accounts<span class="token punctuation">.</span>WalletArrived<span class="token punctuation">:</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;New wallet appeared, failed to open&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   <span class="token keyword">case</span> accounts<span class="token punctuation">.</span>WalletOpened<span class="token punctuation">:</span>
    status<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;New wallet appeared&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>

    <span class="token keyword">var</span> derivationPaths <span class="token punctuation">[</span><span class="token punctuation">]</span>accounts<span class="token punctuation">.</span>DerivationPath
    <span class="token keyword">if</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Scheme <span class="token operator">==</span> <span class="token string">&quot;ledger&quot;</span> <span class="token punctuation">{</span>
     derivationPaths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>derivationPaths<span class="token punctuation">,</span> accounts<span class="token punctuation">.</span>LegacyLedgerBaseDerivationPath<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    derivationPaths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>derivationPaths<span class="token punctuation">,</span> accounts<span class="token punctuation">.</span>DefaultBaseDerivationPath<span class="token punctuation">)</span>

    event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">SelfDerive</span><span class="token punctuation">(</span>derivationPaths<span class="token punctuation">,</span> ethClient<span class="token punctuation">)</span>

   <span class="token keyword">case</span> accounts<span class="token punctuation">.</span>WalletDropped<span class="token punctuation">:</span>
    log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Old wallet dropped&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-启动挖矿" tabindex="-1"><a class="header-anchor" href="#_5-启动挖矿" aria-hidden="true">#</a> 5.启动挖矿</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ethereum<span class="token punctuation">.</span><span class="token function">StartMining</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动守护线程" tabindex="-1"><a class="header-anchor" href="#启动守护线程" aria-hidden="true">#</a> 启动守护线程</h2><p>stop通道阻塞当前线程，直到节点被停止。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>node<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以太坊启动主要就做了3件事，包括加载配置注册服务、启动节点相关服务以及启动守护线程.</p>`,73),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","1.etheric_fang_source_of_the_etheric_lanes_start_process.html.vue"]]);export{d as default};
