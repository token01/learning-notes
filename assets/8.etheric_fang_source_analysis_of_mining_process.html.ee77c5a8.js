import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as i,a as n,b as a,d as e,e as t,r as p}from"./app.11a9ee6c.js";const l={},u=t('<blockquote><p>浅谈以太坊源码分析之挖矿流程</p></blockquote><h2 id="基本架构" tabindex="-1"><a class="header-anchor" href="#基本架构" aria-hidden="true">#</a> 基本架构</h2><p>以太坊挖矿的主要流程是由<code>miner</code>包负责的，下面是基本的一个架构：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glkzcyd6xhj31am0u0qe0.jpg" alt="image-20201212125409326" loading="lazy"></p><p>首先外部是通过<code>miner</code>对象进行了操作，<code>miner</code>里面则是实用<code>worker</code>对象来实现挖矿的整体功能。miner决定着是否停止挖矿或者是否可以开始挖矿，同时还可以设置矿工的地址来获取奖励。</p><p>真正调度处理挖矿相关细节的则是在worker.go里面，我们先来看一张总体的图。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gllc2fgu1gj31cw0rwdlc.jpg" alt="image-20201212201358073" loading="lazy"></p><p>上图我们看到有四个循环，分别通过几个<code>channel</code>负责不同的事：</p><h3 id="newworkloop" tabindex="-1"><a class="header-anchor" href="#newworkloop" aria-hidden="true">#</a> newWorkLoop</h3><ol><li><code>startCh</code>：接收<code>startCh</code>信号，开始挖矿</li><li><code>chainHeadCh</code>：表示接收到新区块，需要终止当前的挖矿工作，开始新的挖矿。</li><li><code>timer.C</code>：默认每三秒检查一次是否有新交易需要处理。如果有则需要重新开始挖矿。以便将加高的交易优先打包到区块中。</li></ol><p>在 <code>newWorkLoop</code> 中还有一个辅助信号，<code>resubmitAdjustCh</code> 和 <code>resubmitIntervalCh</code>。运行外部修改timer计时器的时钟。<code>resubmitAdjustCh</code>是根据历史情况重新计算一个合理的间隔时间。而<code>resubmitIntervalCh</code>则允许外部，实时通过 <code>Miner</code> 实例方法 <code>SetRecommitInterval</code> 修改间隔时间。</p><h3 id="mainloop" tabindex="-1"><a class="header-anchor" href="#mainloop" aria-hidden="true">#</a> mainLoop</h3><ol><li><code>newWorkCh</code>:接收生成新的挖矿任务信号</li><li><code>chainSideCh</code>:接收区块链中加入了一个新区块作为当前链头的旁支的信号</li><li><code>txsCh</code>:接收交易池的Pending中新加入了交易事件的信号</li></ol><p><code>TaskLoop</code>则是提交新的挖矿任务，而<code>resultLoop</code>则是成功出块之后做的一些处理。</p><hr><h2 id="启动挖矿" tabindex="-1"><a class="header-anchor" href="#启动挖矿" aria-hidden="true">#</a> 启动挖矿</h2><h3 id="挖矿的参数设置" tabindex="-1"><a class="header-anchor" href="#挖矿的参数设置" aria-hidden="true">#</a> 挖矿的参数设置</h3><p><code>geth</code>挖矿的参数设置定义在 <code>cmd/utils/flags.go</code> 文件中</p>',18),d=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"参数"),n("th",{style:{"text-align":"left"}},"默认值"),n("th",{style:{"text-align":"center"}},"用途")])],-1),r=n("tr",null,[n("td",{style:{"text-align":"left"}},"–mine"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"center"}},"是否开启自动挖矿")],-1),k=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.threads"),n("td",{style:{"text-align":"left"}},"0"),n("td",{style:{"text-align":"center"}},"挖矿时可用并行PoW计算的协程（轻量级线程）数。 兼容过时参数 —minerthreads。")],-1),m=n("td",{style:{"text-align":"left"}},"–miner.notify",-1),v=n("td",{style:{"text-align":"left"}},"空",-1),g={style:{"text-align":"center"}},h=n("code",null,",",-1),b={href:"http://api.miner.com%2Chttp//api2.miner.com%E2%80%9C",target:"_blank",rel:"noopener noreferrer"},f=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.noverify"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"center"}},"是否禁用区块的PoW工作量校验。")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.gasprice"),n("td",{style:{"text-align":"left"}},"1000000000 wei"),n("td",{style:{"text-align":"center"}},"矿工可接受的交易Gas价格， 低于此GasPrice的交易将被拒绝写入交易池和不会被矿工打包到区块。")],-1),w=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.gastarget"),n("td",{style:{"text-align":"left"}},"8000000 gas"),n("td",{style:{"text-align":"center"}},"动态计算新区块燃料上限（gaslimit）的下限值。 兼容过时参数 —targetgaslimit。")],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.gaslimit"),n("td",{style:{"text-align":"left"}},"8000000 gas"),n("td",{style:{"text-align":"center"}},"动态技术新区块燃料上限的上限值。")],-1),_=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.etherbase"),n("td",{style:{"text-align":"left"}},"第一个账户"),n("td",{style:{"text-align":"center"}},"用于接收挖矿奖励的账户地址， 默认是本地钱包中的第一个账户地址。")],-1),G=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.extradata"),n("td",{style:{"text-align":"left"}},"geth版本号"),n("td",{style:{"text-align":"center"}},"允许矿工自定义写入区块头的额外数据。")],-1),C=n("tr",null,[n("td",{style:{"text-align":"left"}},"–miner.recommit"),n("td",{style:{"text-align":"left"}},"3s"),n("td",{style:{"text-align":"center"}},"重新开始挖掘新区块的时间间隔。 将自动放弃进行中的挖矿后，重新开始一次新区块挖矿。")],-1),O=t(`<h3 id="常见的启动挖矿的方式" tabindex="-1"><a class="header-anchor" href="#常见的启动挖矿的方式" aria-hidden="true">#</a> 常见的启动挖矿的方式</h3><h4 id="参数设置挖矿" tabindex="-1"><a class="header-anchor" href="#参数设置挖矿" aria-hidden="true">#</a> 参数设置挖矿</h4><blockquote><p>dgeth --dev --mine</p></blockquote><h4 id="控制台启动挖矿" tabindex="-1"><a class="header-anchor" href="#控制台启动挖矿" aria-hidden="true">#</a> 控制台启动挖矿</h4><blockquote><p>miner.start(1)</p></blockquote><h4 id="rpc-启动挖矿" tabindex="-1"><a class="header-anchor" href="#rpc-启动挖矿" aria-hidden="true">#</a> rpc 启动挖矿</h4><p>这是部署节点使用的方式，一般设置如下：</p><blockquote><p>/geth --datadir &quot;/data0&quot; --nodekeyhex &quot;27aa615f5fa5430845e4e99229def5f23e9525a20640cc49304f40f3b43824dc&quot; --bootnodes $enodeid --mine --debug --metrics --syncmode=&quot;full&quot; --gcmode=archive --istanbul.blockperiod 5 --gasprice 0 --port 30303 --rpc --rpcaddr &quot;0.0.0.0&quot; --rpcport 8545 --rpcapi &quot;db,eth,net,web3,personal&quot; --nat any --allow-insecure-unlock</p></blockquote><hr><p>开始源码分析，进入到<code>miner.go</code>的<code>New</code>函数中：</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func New(eth Backend, config *Config, chainConfig *params.ChainConfig, mux *event.TypeMux, engine consensus.Engine, isLocalBlock func(block *types.Block) bool) *Miner {
 miner := &amp;Miner{
  ...
 }
 go miner.update()
 return miner
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func (miner *Miner) update() {
  switch ev.Data.(type) {
   case downloader.StartEvent:
    atomic.StoreInt32(&amp;miner.canStart, 0)
    if miner.Mining() {
     miner.Stop()
     atomic.StoreInt32(&amp;miner.shouldStart, 1)
     log.Info(&quot;Mining aborted due to sync&quot;)
    }
   case downloader.DoneEvent, downloader.FailedEvent:
    shouldStart := atomic.LoadInt32(&amp;miner.shouldStart) == 1

    atomic.StoreInt32(&amp;miner.canStart, 1)
    atomic.StoreInt32(&amp;miner.shouldStart, 0)
    if shouldStart {
     miner.Start(miner.coinbase)
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一开始我们初始化的<code>canStart=1</code> ， 如果<code>Downloader</code>模块正在同步，则<code>canStart=0</code>,并且停止挖矿，如果<code>Downloader</code>模块<code>Done</code>或者<code>Failed</code>，则<code>canStart=1</code>,且同时<code>shouldStart=0</code>,miner将启动。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>miner<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>miner<span class="token punctuation">.</span>coinbase<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>miner <span class="token operator">*</span>Miner<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>coinbase common<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
 miner<span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>worker<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
 w<span class="token punctuation">.</span>startCh <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来将会进入到<code>mainLoop</code>中去处理<code>startCh</code>：</p><p>①：清除过旧的挖矿任务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">clearPending</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：提交新的挖矿任务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>commit <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>noempty <span class="token builtin">bool</span><span class="token punctuation">,</span> s <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
  w<span class="token punctuation">.</span>newWorkCh <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>newWorkReq<span class="token punctuation">{</span>interrupt<span class="token punctuation">:</span> interrupt<span class="token punctuation">,</span> noempty<span class="token punctuation">:</span> noempty<span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> timestamp<span class="token punctuation">}</span>
<span class="token operator">...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成新的挖矿任务" tabindex="-1"><a class="header-anchor" href="#生成新的挖矿任务" aria-hidden="true">#</a> 生成新的挖矿任务</h2><p>根据<code>newWorkCh</code>生成新的挖矿任务，进入到<code>CommitNewWork</code>中：</p><p>①：组装<code>header</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>header <span class="token operator">:=</span> <span class="token operator">&amp;</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span> <span class="token comment">//组装header</span>
  ParentHash<span class="token punctuation">:</span> parent<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">:</span>     num<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> common<span class="token punctuation">.</span>Big1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//num+1</span>
  GasLimit<span class="token punctuation">:</span>   core<span class="token punctuation">.</span><span class="token function">CalcGasLimit</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> w<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GasFloor<span class="token punctuation">,</span> w<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GasCeil<span class="token punctuation">)</span><span class="token punctuation">,</span>
  Extra<span class="token punctuation">:</span>      w<span class="token punctuation">.</span>extra<span class="token punctuation">,</span>
  Time<span class="token punctuation">:</span>       <span class="token function">uint64</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：根据共识引擎吃初始化header的共识字段</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>w.engine.Prepare(w.chain, header); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：为当前挖矿新任务创建环境</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> w<span class="token punctuation">.</span><span class="token function">makeCurrent</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> header<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：添加叔块</p><p>叔块集分本地矿工打包区块和其他挖矿打包的区块。优先选择自己挖出的区块。选择时，将先删除太旧的区块，只从最近的7(staleThreshold)个高度中选择，最多<strong>选择两个叔块</strong>放入新区块中.在真正添加叔块的同时会进行校验，包括如下：</p><ul><li>叔块存在报错</li><li>添加的uncle是父块的兄弟报错</li><li>叔块的父块未知报错</li></ul><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>commitUncles(w.localUncles)
commitUncles(w.remoteUncles)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：如果noempty为false，则提交空块，不填充交易进入到区块中,表示提前挖矿</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>noempty <span class="token punctuation">{</span>
  w<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>uncles<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> tstart<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥：填充交易到新区块中</p><p>6.1 从交易池中获取交易，并把交易分为本地交易和远程交易，本地交易优先，先将本地交易提交，再将外部交易提交。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>localTxs, remoteTxs := make(map[common.Address]types.Transactions), pending
 for _, account := range w.eth.TxPool().Locals() {
  if txs := remoteTxs[account]; len(txs) &gt; 0 {
   delete(remoteTxs, account)
   localTxs[account] = txs
  }
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>localTxs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   txs <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewTransactionsByPriceAndNonce</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>signer<span class="token punctuation">,</span> localTxs<span class="token punctuation">)</span>
   <span class="token keyword">if</span> w<span class="token punctuation">.</span><span class="token function">commitTransactions</span><span class="token punctuation">(</span>txs<span class="token punctuation">,</span> w<span class="token punctuation">.</span>coinbase<span class="token punctuation">,</span> interrupt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>remoteTxs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.2提交交易</p><ul><li>首先校验有没有可用的<code>Gas</code></li><li>如果碰到以下情况要进行交易执行的中断 <ul><li>新的头块事件到达，中断信号为 1 (整个任务会被丢弃)</li><li><code>worker</code> 开启或者重启，中断信号为 1 （整个任务会被丢弃）</li><li><code>worker</code>重新创建挖矿任务根据新的交易，中断信号为 2 （任务还是会被送入到共识引擎）</li></ul></li></ul><p>6.3开始执行交易</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>logs, err := w.commitTransaction(tx, coinbase)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.4执行交易获取收据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>receipt<span class="token punctuation">,</span> err <span class="token operator">:=</span> core<span class="token punctuation">.</span><span class="token function">ApplyTransaction</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chainConfig<span class="token punctuation">,</span> w<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coinbase<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>gasPool<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>state<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>header<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>header<span class="token punctuation">.</span>GasUsed<span class="token punctuation">,</span> <span class="token operator">*</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">GetVMConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果执行出错，直接回退上一个快照</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">RevertToSnapshot</span><span class="token punctuation">(</span>snap<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出错的原因大概有以下几个：</p><ul><li>超出当前块的<code>gas limit</code></li><li><code>Nonce</code> 太低</li><li><code>Nonce</code> 太高</li></ul><p>执行成功的话讲交易和收据存入到<code>w.current</code>中。</p><p>⑦：执行交易的状态更改，并组装成最终块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>w<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>uncles<span class="token punctuation">,</span> w<span class="token punctuation">.</span>fullTaskHook<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> tstart<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行交易的状态更改，并组装成最终块是由下面的共识引擎所完成的事情：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> w<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">FinalizeAndAssemble</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>header<span class="token punctuation">,</span> s<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>txs<span class="token punctuation">,</span> uncles<span class="token punctuation">,</span> w<span class="token punctuation">.</span>current<span class="token punctuation">.</span>receipts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>底层会调用 <code>state.IntermediateRoot</code>执行状态更改。组装成最终块意味着到这打包任务完成。接着就是要提交新的挖矿任务。</p><hr><h2 id="提交新的挖矿任务" tabindex="-1"><a class="header-anchor" href="#提交新的挖矿任务" aria-hidden="true">#</a> 提交新的挖矿任务</h2><p>①：获取<code>sealHash</code>（挖矿前的区块哈希），重复提交则跳过</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>sealHash <span class="token operator">:=</span> w<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">SealHash</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 返回挖矿前的块的哈希</span>
   <span class="token keyword">if</span> sealHash <span class="token operator">==</span> prev <span class="token punctuation">{</span>
    <span class="token keyword">continue</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②:生成新的挖矿请求，结果返回到<code>reultCh</code>或者<code>StopCh</code>中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>w<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">Seal</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>chain<span class="token punctuation">,</span> task<span class="token punctuation">.</span>block<span class="token punctuation">,</span> w<span class="token punctuation">.</span>resultCh<span class="token punctuation">,</span> stopCh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>挖矿的结果会返回到<code>resultCh</code>中或者<code>stopCh</code>中，<code>resultCh</code>有数据成功出块，<code>stopCh</code>不为空，则中断挖矿线程。</p><hr><h2 id="成功出块" tabindex="-1"><a class="header-anchor" href="#成功出块" aria-hidden="true">#</a> 成功出块</h2><p><code>resultCh</code>有区块数据，则成功挖出了块，到最后的成功出块我们还需要进行相应的验证判断。</p><p>①：块为空或者链上已经有块或者<code>pendingTasks</code>不存在相关的<code>sealhash</code>,跳过处理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> block <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> w<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">HasBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
task<span class="token punctuation">,</span> exist <span class="token operator">:=</span> w<span class="token punctuation">.</span>pendingTasks<span class="token punctuation">[</span>sealhash<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：更新<code>receipts</code></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>for i, receipt := range task.receipts {
  receipt.BlockHash = hash
  ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：提交块和状态到数据库</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>_, err := w.chain.WriteBlockWithState(block, receipts, logs, task.state, true) // 互斥
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：广播区块并宣布链插入事件</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>w.mux.Post(core.NewMinedBlockEvent{Block: block})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤：等待规范确认本地挖出的块</p><p>新区块并非立即稳定，暂时存入到未确认区块集中。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>w.unconfirmed.Insert(block.NumberU64(), block.Hash())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="总结-参考" tabindex="-1"><a class="header-anchor" href="#总结-参考" aria-hidden="true">#</a> 总结&amp;参考</h2><p>整个挖矿流程还是比较的简单，通过 4 个<code>Loop</code>互相工作，从开启挖矿到生成新的挖矿任务到提交新的挖矿任务到最后的成功出块，这里面的共识处理细节不会提到，接下来的文章会说到。</p>`,79),S={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"},T={href:"https://learnblockchain.cn/books/geth/part2/mine/design.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://yangzhe.me/2019/02/25/ethereum-miner/#%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E5%87%BA%E5%9D%97%E9%A2%91%E7%8E%258",target:"_blank",rel:"noopener noreferrer"};function B(N,H){const s=p("ExternalLinkIcon");return c(),i("div",null,[u,n("table",null,[d,n("tbody",null,[r,k,n("tr",null,[m,v,n("td",g,[a("挖出新块时用于通知远程服务的任意数量的远程服务地址。 是用 "),h,a("分割的多个远程服务器地址。 如：”"),n("a",b,[a("http://api.miner.com,http://api2.miner.com“"),e(s)])])]),f,x,w,y,_,G,C])]),O,n("blockquote",null,[n("p",null,[n("a",S,[a("https://mindcarver.cn"),e(s)])]),n("p",null,[n("a",q,[a("https://github.com/blockchainGuide"),e(s)])]),n("p",null,[n("a",T,[a("https://learnblockchain.cn/books/geth/part2/mine/design.html"),e(s)])]),n("p",null,[n("a",E,[a("https://yangzhe.me/2019/02/25/ethereum-miner/#动态调整出块频��%8"),e(s)])])])])}const I=o(l,[["render",B],["__file","8.etheric_fang_source_analysis_of_mining_process.html.vue"]]);export{I as default};
