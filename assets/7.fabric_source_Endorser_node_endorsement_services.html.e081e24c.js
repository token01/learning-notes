import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a as n,b as o,d as e,e as c,r as i}from"./app.1ee57811.js";const l={},u=c(`<blockquote><p>浅谈hyperledger fabric源码|Endorser节点背书服务</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2cdssqtrj30zk0m8dhn.jpg" alt="77613ebad5a9eb5ea42dbb3b323fdaf5" loading="lazy"></p><h2 id="背书概述" tabindex="-1"><a class="header-anchor" href="#背书概述" aria-hidden="true">#</a> 背书概述</h2><p>Endorser背书节点提供<code>ProcessProposal()</code>服务接口用于接收与处理签名提案消息的请求，启动用户链码容器，执行调用链码，并对模拟执行结果进行签名背书，。<code>Peer</code>节点启动时解析<code>core.yaml</code>文件中的<code>peer.handlers</code>配置项，并构造认证过滤器列表。如果存在合法类型的认证过滤器，则需要先经过所有认证过滤器调用<code>ProcessProposal</code>()方法进行验证过滤，例如检查身份证书是否过期，然后再提交给背书服务器的<code>serverEndorser.ProcessProposal</code>()方法进行处理。 方法功能如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Endorser<span class="token punctuation">)</span> <span class="token function">ProcessProposal</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> signedProp <span class="token operator">*</span>pb<span class="token punctuation">.</span>SignedProposal<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">//检查并检验签名提案消息的合法性</span>
	vr<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">preProcess</span><span class="token punctuation">(</span>signedProp<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 创建交易模拟器与历史查询执行器</span>
	<span class="token keyword">var</span> txsim ledger<span class="token punctuation">.</span>TxSimulator
	<span class="token keyword">var</span> historyQueryExecutor ledger<span class="token punctuation">.</span>HistoryQueryExecutor
	<span class="token keyword">if</span> chainID <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建交易模拟器对象</span>
		<span class="token keyword">if</span> txsim<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">GetTxSimulator</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> txid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> historyQueryExecutor<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">GetHistoryQueryExecutor</span><span class="token punctuation">(</span>chainID<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 创建历史查询器对象</span>
			<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 将历史查询执行器添加到context中的KV键值对</span>
		ctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chaincode<span class="token punctuation">.</span>HistoryQueryExecutorKey<span class="token punctuation">,</span> historyQueryExecutor<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 模拟交易执行</span>
	cd<span class="token punctuation">,</span> res<span class="token punctuation">,</span> simulationResult<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">simulateProposal</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 检查交易模拟运行结果的响应消息</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
			<span class="token comment">// 创建背书失败的提案响应消息</span>
			pResp<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">CreateProposalResponseFailure</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>Payload<span class="token punctuation">,</span> res<span class="token punctuation">,</span> simulationResult<span class="token punctuation">,</span> cceventBytes<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>PayloadVisibility<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>

			<span class="token keyword">return</span> pResp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>chaincodeError<span class="token punctuation">{</span>res<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Message<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 调用ESCC系统链码对模拟执行结果进行背书，并回复提案响应消息</span>
	<span class="token keyword">var</span> pResp <span class="token operator">*</span>pb<span class="token punctuation">.</span>ProposalResponse
	<span class="token keyword">if</span> chainID <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		pResp <span class="token operator">=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> res<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 签名背书</span>
		pResp<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">endorseProposal</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> res<span class="token punctuation">,</span> simulationResult<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>PayloadVisibility<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">,</span> txsim<span class="token punctuation">,</span> cd<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> pResp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> res<span class="token punctuation">.</span>Status <span class="token operator">&gt;=</span> shim<span class="token punctuation">.</span>ERRORTHRESHOLD <span class="token punctuation">{</span> <span class="token comment">// 检查响应消息是否存在错误</span>
				endorserLogger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s][%s] endorseProposal() resulted in chaincode %s error for txid: %s&quot;</span><span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> <span class="token function">shorttxid</span><span class="token punctuation">(</span>txid<span class="token punctuation">)</span><span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">,</span> txid<span class="token punctuation">)</span>
				<span class="token keyword">return</span> pResp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>chaincodeError<span class="token punctuation">{</span>res<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Message<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	pResp<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Payload <span class="token operator">=</span> res<span class="token punctuation">.</span>Payload <span class="token comment">// 设置链码提案响应消息负载字节数组,含有链码调用返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要做了以下几件事：</p><ol><li>调用<code>preProcess()</code>方法预处理签名提案消息，验证消息合法性</li><li>调用<code>simulateProposal()</code>方法启动链码容器并模拟执行提案，将结果读写集记录到模拟交易器中。</li><li>调用<code>endorseProposal()</code>方法对模拟执行结果进行签名背书，并返回提案响应消息。</li></ol><p>下面的内容将会紧紧围绕这几部分来进行分析。</p><h2 id="预处理签名提案消息" tabindex="-1"><a class="header-anchor" href="#预处理签名提案消息" aria-hidden="true">#</a> 预处理签名提案消息</h2><p>进入到<code>preProcess</code>函数：</p><p>①： <em>验证签名提案消息格式与签名的合法性</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>prop<span class="token punctuation">,</span> hdr<span class="token punctuation">,</span> hdrExt<span class="token punctuation">,</span> err <span class="token operator">:=</span> validation<span class="token punctuation">.</span><span class="token function">ValidateProposalMessage</span><span class="token punctuation">(</span>signedProp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②: <em>检查提案消息是否允许外部调用的系统链码</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//解析消息通道头部ChannelHeader结构</span>
	chdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">UnmarshalChannelHeader</span><span class="token punctuation">(</span>hdr<span class="token punctuation">.</span>ChannelHeader<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">//解析消息签名头部SignatureHeader结构</span>
	shdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">GetSignatureHeader</span><span class="token punctuation">(</span>hdr<span class="token punctuation">.</span>SignatureHeader<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">//如果是系统链码，则检查是否为允许从外部调用的系统链码：cscc、lscc或qscc</span>
	<span class="token keyword">if</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCCAndNotInvokableExternal</span><span class="token punctuation">(</span>hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endorserLogger<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: an attempt was made by %#v to invoke system chaincode %s&quot;</span><span class="token punctuation">,</span>
			shdr<span class="token punctuation">.</span>Creator<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;chaincode %s cannot be invoked through a proposal&quot;</span><span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		<span class="token comment">//构造提案响应消息对象：状态码为500（错误）与错误信息</span>
		vr<span class="token punctuation">.</span>resp <span class="token operator">=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
		<span class="token keyword">return</span> vr<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<em>检查签名提案消息的唯一性以及是否满足指定通道的访问权限策略</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chainID <span class="token operator">:=</span> chdr<span class="token punctuation">.</span>ChannelId <span class="token comment">//获取通道标识号ChannelID，即链chainID</span>
	<span class="token comment">//// 检查账本中交易ID的唯一性。注意ValidateProposalMessage()方法已经验证了交易号ID的合法性</span>
	txid <span class="token operator">:=</span> chdr<span class="token punctuation">.</span>TxId
	<span class="token keyword">if</span> txid <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;invalid txID. It must be different from the empty string&quot;</span><span class="token punctuation">)</span>
		vr<span class="token punctuation">.</span>resp <span class="token operator">=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
		<span class="token keyword">return</span> vr<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	endorserLogger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s][%s] processing txid: %s&quot;</span><span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> <span class="token function">shorttxid</span><span class="token punctuation">(</span>txid<span class="token punctuation">)</span><span class="token punctuation">,</span> txid<span class="token punctuation">)</span>
	<span class="token keyword">if</span> chainID <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 根据交易ID从账本中获取指定的交易对象，检查账本中交易对象的唯一性，</span>
		<span class="token comment">// 若找到该对象则说明重复发起了交易，此时应报错</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">GetTransactionByID</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> txid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> vr<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;duplicate transaction found [%s]. Creator [%x]&quot;</span><span class="token punctuation">,</span> txid<span class="token punctuation">,</span> shdr<span class="token punctuation">.</span>Creator<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/// 检查是否为系统链码，确保是用户链码</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCC</span><span class="token punctuation">(</span>hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//// 检查提案是否符合WRITER写通道权限策略</span>
			<span class="token keyword">if</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">CheckACL</span><span class="token punctuation">(</span>signedProp<span class="token punctuation">,</span> chdr<span class="token punctuation">,</span> shdr<span class="token punctuation">,</span> hdrExt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				vr<span class="token punctuation">.</span>resp <span class="token operator">=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
				<span class="token keyword">return</span> vr<span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上3个部分内容还需要进一步的细化，看接下来的分析。</p><h3 id="验证消息格式与签名合法性" tabindex="-1"><a class="header-anchor" href="#验证消息格式与签名合法性" aria-hidden="true">#</a> 验证消息格式与签名合法性</h3><p>①：调用<code>validation.ValidateProposalMessage()</code>函数，以检查签名提案消息格式与签名的合法性，解析获取提案消息、消息头部及其扩展域。</p><p>1.1 校验header</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chdr<span class="token punctuation">,</span> shdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">validateCommonHeader</span><span class="token punctuation">(</span>hdr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>校验header里面大概做了这几件事：</p><ul><li><p><code>validateChannelHeader(chdr</code>)函数检查通道头部<code>chdr</code>的合法性，其通道头部类型应该属于<code>ENDORSER_TRANSACTION</code>、<code>CONFIG_UPDATE</code>、<code>CONFIG</code>或<code>PEER_RESOURCE_UPDATE</code>，并且<code>Epoch</code>字段应该为0；</p></li><li><p><code>validateSignatureHeader(shdr)</code>函数检查签名头部<code>shdr</code>的合法性，随机数<code>Nonce</code>和消息</p><p>签名者<code>Creator</code>不应该为<code>nil</code>，并且该对象字节数不为0</p></li></ul><p>1.2 检查消息签名的合法性</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">=</span> <span class="token function">checkSignatureFromCreator</span><span class="token punctuation">(</span>shdr<span class="token punctuation">.</span>Creator<span class="token punctuation">,</span> signedProp<span class="token punctuation">.</span>Signature<span class="token punctuation">,</span> signedProp<span class="token punctuation">.</span>ProposalBytes<span class="token punctuation">,</span> chdr<span class="token punctuation">.</span>ChannelId<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法先获取当前通道的身份反序列化组件<code>mspObj</code>，解析出该签名头部的签名者<code>creator</code>，并调用<code>creator.Validate()</code>方法，验证<code>creator</code>是否为MSP有效的X.509合法证书。然后，调用<code>creator.Verify()</code>方法获取哈希方法及消息摘要（哈希值），通过所属<code>MSP</code>组件的<code>BCCSP</code>加密安全组件调用<code>id.msp.bccsp.Verify()</code>方法，验证消息签名的真实性</p><p>1.3 验证提案消息头部中的交易ID是否计算正确</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">CheckProposalTxID</span><span class="token punctuation">(</span>
		chdr<span class="token punctuation">.</span>TxId<span class="token punctuation">,</span>
		shdr<span class="token punctuation">.</span>Nonce<span class="token punctuation">,</span>
		shdr<span class="token punctuation">.</span>Creator<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新计算消息随机数<code>Nonce</code>（防止重放攻击）与签名者<code>Creator</code>组合信息后的哈希值，并且与交易ID进行比较。如果两者匹配相同，则说明交易ID是正确的。</p><h3 id="检查是否为允许外部调用的系统链码" tabindex="-1"><a class="header-anchor" href="#检查是否为允许外部调用的系统链码" aria-hidden="true">#</a> 检查是否为允许外部调用的系统链码</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCCAndNotInvokableExternal</span><span class="token punctuation">(</span>hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endorserLogger<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: an attempt was made by %#v to invoke system chaincode %s&quot;</span><span class="token punctuation">,</span>
			shdr<span class="token punctuation">.</span>Creator<span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;chaincode %s cannot be invoked through a proposal&quot;</span><span class="token punctuation">,</span> hdrExt<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		<span class="token comment">//构造提案响应消息对象：状态码为500（错误）与错误信息</span>
		vr<span class="token punctuation">.</span>resp <span class="token operator">=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">{</span>Response<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">{</span>Status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> Message<span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
		<span class="token keyword">return</span> vr<span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查签名提案消息的唯一性" tabindex="-1"><a class="header-anchor" href="#检查签名提案消息的唯一性" aria-hidden="true">#</a> 检查签名提案消息的唯一性</h3><p>preProcess()方法继续检查签名提案消息的唯一性，以防止重放攻击。该方法从提案消息通道头部提取链与交易ID，包括两种情况:</p><ul><li>如果链ID不是空字符串，则需要检查该交易ID的唯一性，确保之前没有提交过该交易到账本中。即根据交易ID从账本的区块文件以及区块索引数据库获取交易数据与交易验证码，并构造成已处理的交易对象 。如果获取交易数据成功且没有错误，则说明账本中已经保存了指定交易ID的交易数据。因此，当前提案消息属于重复提交，报错返回。否则，就说明该签名提案消息通过了消息唯一性的检查；</li><li>如果链ID是空字符串，则不需要检查签名提案消息的唯一性与验证通道访问权限策略，只需要通过<code>ValidateProposalMessage()</code>函数验证该提案消息的合法性即可。</li></ul><h3 id="检查是否满足通道的访问权限策略" tabindex="-1"><a class="header-anchor" href="#检查是否满足通道的访问权限策略" aria-hidden="true">#</a> 检查是否满足通道的访问权限策略</h3><p>首先调用<code>IsSysCC</code>函数，检查链码是否为系统链码。如果是用户链码，则调用 <code>CheckACL</code>方法，检查签名提案消息是否满足通道<code>PROPOSE</code>权限策略要求，以允许提交该消息到指定通道上继续进行处理。<code>CheckACL</code>方法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>defaultACLProvider<span class="token punctuation">)</span> <span class="token function">CheckACL</span><span class="token punctuation">(</span>resName <span class="token builtin">string</span><span class="token punctuation">,</span> channelID <span class="token builtin">string</span><span class="token punctuation">,</span> idinfo <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  policy <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">defaultPolicy</span><span class="token punctuation">(</span>resName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> <span class="token operator">*</span>pb<span class="token punctuation">.</span>SignedProposal<span class="token punctuation">:</span>
		<span class="token keyword">return</span> d<span class="token punctuation">.</span>policyChecker<span class="token punctuation">.</span><span class="token function">CheckPolicy</span><span class="token punctuation">(</span>channelID<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> idinfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>SignedProposal<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>common<span class="token punctuation">.</span>Envelope<span class="token punctuation">:</span>
		sd<span class="token punctuation">,</span> err <span class="token operator">:=</span> idinfo<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>common<span class="token punctuation">.</span>Envelope<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsSignedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> d<span class="token punctuation">.</span>policyChecker<span class="token punctuation">.</span><span class="token function">CheckPolicyBySignedData</span><span class="token punctuation">(</span>channelID<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> sd<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法先调用<code>defaultPolicy()</code>方法，从全局通道资源策略字典<code>cResourcePolicyMap</code>中获取指定策略名称resources.PROPOSE的默认策略。对于<code>SignedProposal</code>类型的签名提案消息，<code>CheckACL()</code>方法调用<code>d.policyChecker.CheckPolicy()</code>方法，检查该签名提案消息是否满足该通道上的<code>Writers</code>写权限策略要求。</p><h2 id="模拟执行提案" tabindex="-1"><a class="header-anchor" href="#模拟执行提案" aria-hidden="true">#</a> 模拟执行提案</h2><p>ProcessProposal()方法启动<strong>链码容器</strong>与<strong>初始化链码执行环境</strong>，模拟执行合法的签名提案消息，并将模拟执行结果记录在交易模拟器中。其中，对公有数据（包含公共数据与隐私数据哈希值）继续签名背书，并提交给<code>Orderer</code>节点请求排序出块，同时将隐私数据通过<code>Gossip</code>消息协议发送到组织内的其他授权节点上。核心函数如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Endorser<span class="token punctuation">)</span> <span class="token function">simulateProposal</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chainID <span class="token builtin">string</span><span class="token punctuation">,</span> txid <span class="token builtin">string</span><span class="token punctuation">,</span> signedProp <span class="token operator">*</span>pb<span class="token punctuation">.</span>SignedProposal<span class="token punctuation">,</span> prop <span class="token operator">*</span>pb<span class="token punctuation">.</span>Proposal<span class="token punctuation">,</span> cid <span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeID<span class="token punctuation">,</span> txsim ledger<span class="token punctuation">.</span>TxSimulator<span class="token punctuation">)</span> <span class="token punctuation">(</span>resourcesconfig<span class="token punctuation">.</span>ChaincodeDefinition<span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeEvent<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 解析获取链码调用规范对象</span>
	cis<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">GetChaincodeInvocationSpec</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">//1 检查是否为系统链码</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCC</span><span class="token punctuation">(</span>cid<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是调用用户链码，则需要保证该链码已经实例化了</span>
		<span class="token comment">// === 用户链码，通过调用LSCC系统链码获取账本中保存的链码数据对象ChaincodeData结构</span>
		<span class="token comment">// 如果链上有链码数据对象，则说明链码已经成功实例化</span>
		cdLedger<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">GetChaincodeDefinition</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cid<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;make sure the chaincode %s has been successfully instantiated and try again&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 获取已保存的链码版本</span>
		version <span class="token operator">=</span> cdLedger<span class="token punctuation">.</span><span class="token function">CCVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 检查提案中的实例化策略与调用账本中的实例化策略是否匹配</span>
		err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">CheckInstantiationPolicy</span><span class="token punctuation">(</span>cid<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> version<span class="token punctuation">,</span> cdLedger<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// === 执行系统链码，如lscc等</span>
		version <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">GetSysCCVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取系统链码版本</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token comment">// 2 启动链码容器调用链码</span>
	res<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">callChaincode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> version<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cis<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		endorserLogger<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s][%s] failed to invoke chaincode %s, error: %+v&quot;</span><span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> <span class="token function">shorttxid</span><span class="token punctuation">(</span>txid<span class="token punctuation">)</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">//3 获取并处理交易模拟执行结果</span>
	<span class="token keyword">if</span> txsim <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> simResult<span class="token punctuation">,</span> err <span class="token operator">=</span> txsim<span class="token punctuation">.</span><span class="token function">GetTxSimulationResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> simResult<span class="token punctuation">.</span>PvtSimulationResults <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 检查模拟结果隐私数据的合法性</span>
			<span class="token keyword">if</span> cid<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;lscc&quot;</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO: remove once we can store collection configuration outside of LSCC</span>
				<span class="token comment">// 分发隐私数据</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;Private data is forbidden to be used in instantiate&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">distributePrivateData</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> simResult<span class="token punctuation">.</span>PvtSimulationResults<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 分发隐私数据</span>
		<span class="token keyword">if</span> pubSimResBytes<span class="token punctuation">,</span> err <span class="token operator">=</span> simResult<span class="token punctuation">.</span><span class="token function">GetPubSimulationBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> cdLedger<span class="token punctuation">,</span> res<span class="token punctuation">,</span> pubSimResBytes<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根据链码类型执行不同实例化策略" tabindex="-1"><a class="header-anchor" href="#根据链码类型执行不同实例化策略" aria-hidden="true">#</a> 根据链码类型执行不同实例化策略</h3><p>首先调用<code>GetChaincodeInvocationSpec</code>函数，从提案消息中解析提取出链码调用规范对象，然后调用<code>IsSysCC(cid.Name)</code>方法，依次匹配默认的系统链码名称，以判断当前链码类型是用户链码还是系统链码，分为用户链码和系统链码两种情况检查实例化策略。</p><p>①：<em>用户链码</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCC</span><span class="token punctuation">(</span>cid<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是调用用户链码，则需要保证该链码已经实例化了</span>
		<span class="token comment">// === 用户链码，通过调用LSCC系统链码获取账本中保存的链码数据对象ChaincodeData结构</span>
		<span class="token comment">// 如果链上有链码数据对象，则说明链码已经成功实例化</span>
		cdLedger<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">GetChaincodeDefinition</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cid<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;make sure the chaincode %s has been successfully instantiated and try again&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 获取已保存的链码版本</span>
		version <span class="token operator">=</span> cdLedger<span class="token punctuation">.</span><span class="token function">CCVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 检查提案中的实例化策略与调用账本中的实例化策略是否匹配</span>
		err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">CheckInstantiationPolicy</span><span class="token punctuation">(</span>cid<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> version<span class="token punctuation">,</span> cdLedger<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：系统链码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// === 执行系统链码，如lscc等</span>
		version <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">GetSysCCVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取系统链码版本</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动链码容器" tabindex="-1"><a class="header-anchor" href="#启动链码容器" aria-hidden="true">#</a> 启动链码容器</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>res<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">callChaincode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> version<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cis<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>①：<em>设置context上下文对象中交易模拟器的KV键值对，其中，键为TXSimulatorKey，值为交易模拟器txsim</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> txsim <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		ctxt <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> chaincode<span class="token punctuation">.</span>TXSimulatorKey<span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>根据链码名称检查是否为系统链码</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>scc <span class="token operator">:=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCC</span><span class="token punctuation">(</span>cid<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：<em>执行链码调用</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>res<span class="token punctuation">,</span> ccevent<span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> cid<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> version<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> scc<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：<em>检查调用链码名称lscc</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 第1个参数为deploy部署或upgrade升级，第2个参数是链ID，第3个是链码部署规范对象</span>
	<span class="token keyword">if</span> cid<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;lscc&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>cis<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>cis<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;deploy&quot;</span> <span class="token operator">||</span> <span class="token function">string</span><span class="token punctuation">(</span>cis<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;upgrade&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> cds <span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeDeploymentSpec
		<span class="token comment">// 获取并验证链码部署规范</span>
		cds<span class="token punctuation">,</span> err <span class="token operator">=</span> putils<span class="token punctuation">.</span><span class="token function">GetChaincodeDeploymentSpec</span><span class="token punctuation">(</span>cis<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>

		<span class="token comment">//this should not be a system chaincode</span>
		<span class="token comment">// 若试图部署/升级系统链码，则报错</span>
		<span class="token keyword">if</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">IsSysCC</span><span class="token punctuation">(</span>cds<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;attempting to deploy a system chaincode %s/%s&quot;</span><span class="token punctuation">,</span> cds<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> chainID<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 执行部署/升级链码</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span>s<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> cds<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> cds<span class="token punctuation">.</span>ChaincodeSpec<span class="token punctuation">.</span>ChaincodeId<span class="token punctuation">.</span>Version<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> cds<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动的真正过程正是在<code>e.s.Execute</code>中完成的,分析如下：</p><blockquote><p>/core/chaincode/exectransaction.go/Execute()</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctxt context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cccid <span class="token operator">*</span>ccprovider<span class="token punctuation">.</span>CCContext<span class="token punctuation">,</span> spec <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeEvent<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// === 设置初始链码消息对象</span>
	<span class="token comment">// 部署（实例化）deploy命令或升级upgrade命令：调用链码Init()接口方法</span>
	cctyp <span class="token operator">:=</span> pb<span class="token punctuation">.</span>ChaincodeMessage_INIT
	<span class="token comment">//// 检查链码规范对象类型为ChaincodeDeploymentSpec或ChaincodeInvocationSpec</span>
	<span class="token keyword">if</span> cds<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeDeploymentSpec<span class="token punctuation">)</span><span class="token punctuation">;</span> cds <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> ci<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> spec<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeInvocationSpec<span class="token punctuation">)</span><span class="token punctuation">;</span> ci <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Execute should be called with deployment or invocation spec&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 调用invoke或查询query命令等：调用链码Invoke()接口方法</span>
		cctyp <span class="token operator">=</span> pb<span class="token punctuation">.</span>ChaincodeMessage_TRANSACTION
	<span class="token punctuation">}</span>

	<span class="token comment">// === 启动链码容器，返回链码输入参数等</span>
	<span class="token comment">// created-&gt;established-&gt;ready状态</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> cMsg<span class="token punctuation">,</span> err <span class="token operator">:=</span> theChaincodeSupport<span class="token punctuation">.</span><span class="token function">Launch</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> cccid<span class="token punctuation">,</span> spec<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// === 模拟执行交易链码并等待完成，监听并返回resp响应结果消息</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> theChaincodeSupport<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> cccid<span class="token punctuation">,</span> ccMsg<span class="token punctuation">,</span> theChaincodeSupport<span class="token punctuation">.</span>executetimeout<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// === 处理模拟执行结果</span>
	<span class="token keyword">if</span> resp<span class="token punctuation">.</span>ChaincodeEvent <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span><span class="token punctuation">.</span>
	<span class="token punctuation">}</span>
		<span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动的动作在下面这个方法中完成：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">,</span> cMsg<span class="token punctuation">,</span> err <span class="token operator">:=</span> theChaincodeSupport<span class="token punctuation">.</span><span class="token function">Launch</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> cccid<span class="token punctuation">,</span> spec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此方法的核心又是：<code>launchAndWaitForRegister()</code>，负责具体的链码容器工作,代码位置：<strong>/core/chaincode/chaincode_support.go/launchAndWaitForRegister</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>chaincodeSupport <span class="token operator">*</span>ChaincodeSupport<span class="token punctuation">)</span> <span class="token function">launchAndWaitForRegister</span><span class="token punctuation">(</span>ctxt context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cccid <span class="token operator">*</span>ccprovider<span class="token punctuation">.</span>CCContext<span class="token punctuation">,</span> cds <span class="token operator">*</span>pb<span class="token punctuation">.</span>ChaincodeDeploymentSpec<span class="token punctuation">,</span> launcher launcherIntf<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 如果chaincodeMap字典中已经存在对应的链码规范名称，则说明已经启动链码容器，此时直接返回即可</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> hasBeenLaunched <span class="token operator">:=</span> chaincodeSupport<span class="token punctuation">.</span><span class="token function">chaincodeHasBeenLaunched</span><span class="token punctuation">(</span>canName<span class="token punctuation">)</span><span class="token punctuation">;</span> hasBeenLaunched <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 检查该链码容器是否已经正常运行，直接返回</span>
	<span class="token keyword">if</span> chaincodeSupport<span class="token punctuation">.</span><span class="token function">launchStarted</span><span class="token punctuation">(</span>canName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
		<span class="token comment">// 核心方法：启动容器，实际调用的是ccLauncherImpl方法</span>
		resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> launcher<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">,</span> notfy<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// === 阻塞等待处理响应消息，等待REGISTER链码消息</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>notfy<span class="token punctuation">:</span>
		<span class="token comment">// Peer侧接收到链码容器侧发来的REGISTER注册链码消息，触发Handler的FSM运行，</span>
		<span class="token comment">// 在回调方法beforeregister()中将外层Handler传递的notfy通道注册到Peer侧Handler中，</span>
		<span class="token comment">// 根据链码注册成功结果，将结果消息放入notfy通道，触发此处的select语句。</span>
		<span class="token comment">// 若notfy为flase，则说明注册失败。反之，则说明注册成功</span>
		<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<code>chaincode.Execute()</code>函数检查并启动了链码容器，执行完成链码请求操作.</p><h3 id="处理模拟执行结果" tabindex="-1"><a class="header-anchor" href="#处理模拟执行结果" aria-hidden="true">#</a> 处理模拟执行结果</h3><p>处理模拟执行结果是由下面几段代码实现的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//=== 获取并处理交易模拟执行结果</span>
	<span class="token keyword">if</span> txsim <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> simResult<span class="token punctuation">,</span> err <span class="token operator">=</span> txsim<span class="token punctuation">.</span><span class="token function">GetTxSimulationResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> simResult<span class="token punctuation">.</span>PvtSimulationResults <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 检查模拟结果隐私数据的合法性</span>
			<span class="token keyword">if</span> cid<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;lscc&quot;</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO: remove once we can store collection configuration outside of LSCC</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;Private data is forbidden to be used in instantiate&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 分发隐私数据</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">distributePrivateData</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> simResult<span class="token punctuation">.</span>PvtSimulationResults<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> pubSimResBytes<span class="token punctuation">,</span> err <span class="token operator">=</span> simResult<span class="token punctuation">.</span><span class="token function">GetPubSimulationBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个关键函数：一个是<code>GetTxSimulationResults</code>，还有一个就是<code>distributePrivateData</code>。</p><p><code>GetTxSimulationResults</code>主要获取交易模拟执行结果的隐私数据读写集，然后遍历计算集合隐私数据的哈希值，然后获取交易模拟执行结果的公有数据读写集，最后构造交易模拟执行结果<code>TxSimulationResults</code>结构对象并返回。</p><p><code>distributePrivateData</code>首先会<em>获取指定通道上的隐私数据处理句柄</em>，然后通过<code>handler.distributor.Distribute</code>分发隐私数据，</p><p>最后通过<code>coordinator</code>模块将指定交易<code>txID</code>的隐私数据读写集<code>privData</code>暂时保存到本地<code>transient</code>隐私数据库中。<code>Committer</code>记账节点在提交区块数据与隐私数据之后，主动删除<code>transient</code>隐私数据库中关联的隐私数据，以及时清理过期数据。</p><h2 id="对模拟执行结果签名背书" tabindex="-1"><a class="header-anchor" href="#对模拟执行结果签名背书" aria-hidden="true">#</a> 对模拟执行结果签名背书</h2><p><code>endorseProposal()</code>方法对模拟执行结果进行签名背书，并返回提案响应消息。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Endorser<span class="token punctuation">)</span> <span class="token function">endorseProposal</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>ProposalResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">// 调用ESCC系统链码进行背书</span>
	res<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">callChaincode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> chainID<span class="token punctuation">,</span> version<span class="token punctuation">,</span> txid<span class="token punctuation">,</span> signedProp<span class="token punctuation">,</span> proposal<span class="token punctuation">,</span> ecccis<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ChaincodeID<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> escc<span class="token punctuation">}</span><span class="token punctuation">,</span> txsim<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>callChaincode()</code>方法调用<code>ESCC</code>系统链码的<code>EndorserOneValidSignature.Invoke</code>()方法，对模拟结果执行签名背书操作。代码如下：</p><p>位置：<code>/core/scc/escc/endorser_onevalidsignature.go/Invoke</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>EndorserOneValidSignature<span class="token punctuation">)</span> <span class="token function">Invoke</span><span class="token punctuation">(</span>stub shim<span class="token punctuation">.</span>ChaincodeStubInterface<span class="token punctuation">)</span> pb<span class="token punctuation">.</span>Response <span class="token punctuation">{</span>
	args <span class="token operator">:=</span> stub<span class="token punctuation">.</span><span class="token function">GetArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取参数列表</span>
	<span class="token comment">// 检测参数个数</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> shim<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Incorrect number of arguments (expected a minimum of 5, provided %d)&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> shim<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Incorrect number of arguments (expected a maximum of 7, provided %d)&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token comment">// 获取执行链码响应消息</span>
	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 获取模拟执行结果</span>
	results <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>

	<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">// 获取本地MSP组件</span>
	localMsp <span class="token operator">:=</span> mspmgmt<span class="token punctuation">.</span><span class="token function">GetLocalMSP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 获取本地默认签名者身份实体（即背书成员）</span>
	signingEndorser<span class="token punctuation">,</span> err <span class="token operator">:=</span> localMsp<span class="token punctuation">.</span><span class="token function">GetDefaultSigningIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 创建签名的提案响应消息</span>
	presp<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">CreateProposalResponse</span><span class="token punctuation">(</span>hdr<span class="token punctuation">,</span> payl<span class="token punctuation">,</span> response<span class="token punctuation">,</span> results<span class="token punctuation">,</span> events<span class="token punctuation">,</span> ccid<span class="token punctuation">,</span> visibility<span class="token punctuation">,</span> signingEndorser<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 序列化提案响应字节数组</span>
	prBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">GetBytesProposalResponse</span><span class="token punctuation">(</span>presp<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 回复执行成功消息</span>
	<span class="token keyword">return</span> shim<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>prBytes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<code>Endorser</code>背书节点处理签名提案消息的流程结束。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,80),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const s=i("ExternalLinkIcon");return t(),p("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[o("https://github.com/blockchainGuide/"),e(s)])])])])}const g=a(l,[["render",k],["__file","7.fabric_source_Endorser_node_endorsement_services.html.vue"]]);export{g as default};
