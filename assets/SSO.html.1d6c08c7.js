import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as d,a as e,b as t,d as i,e as r,r as s}from"./app.af6359e2.js";const l="/assets/SAML.6a3edf0f.png",c={},h=r('<h2 id="sso-single-sign-on-单点登录" tabindex="-1"><a class="header-anchor" href="#sso-single-sign-on-单点登录" aria-hidden="true">#</a> SSO (Single Sign On) 单点登录</h2><p>简而言之就是在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</p><ul><li><strong>同域下的单点登录</strong> 比如两个系统为 <code>a.z.com</code>,<code>b.z.com</code> 。由于<code>Cookie</code>是不能跨域的,所以我们只需要将 <code>Cookie</code> 的 <code>domain</code> 设置成 <code>.z.com</code> 即可。</li><li><strong>不同域</strong> 主要原理是系统共同拥有一个<code>认证服务器</code> a 系统使用认证服务器获得授权 token ，在进入 b 系统时，将 这个 token 以参数形式带到 b 系统，b 系统收到 token ，去认证服务器认证 token 是否有效，有效即可正常访问 b 系统资源，实现单点登录。</li></ul><h2 id="oauth2" tabindex="-1"><a class="header-anchor" href="#oauth2" aria-hidden="true">#</a> OAuth2</h2>',4),p={href:"https://tools.ietf.org/html/rfc6749#section-4.1",target:"_blank",rel:"noopener noreferrer"},u=r(`<h3 id="角色" tabindex="-1"><a class="header-anchor" href="#角色" aria-hidden="true">#</a> 角色</h3><ul><li>Authorization Server 认证服务器</li><li>Resource server 资源服务器</li><li>Resource Owner 资源拥有者。可以理解为<code>用户</code></li><li>Client 客户端。可以理解为需要获取授权资源的<code>第三方应用程序</code></li><li>User Agent：用户代理。可以理解为<code>浏览器</code></li></ul><h3 id="授权协议" tabindex="-1"><a class="header-anchor" href="#授权协议" aria-hidden="true">#</a> 授权协议</h3><p>Grant Type：</p><h4 id="授权码模式-authorization-code" tabindex="-1"><a class="header-anchor" href="#授权码模式-authorization-code" aria-hidden="true">#</a> 授权码模式（authorization code）</h4><p>功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&quot;服务提供商&quot;的认证服务器进行互动。</p><pre><code> +----------+
 | Resource |
 |   Owner  |
 |          |
 +----------+
      ^
      |
     (B)
 +----|-----+          Client Identifier      +---------------+
 |         -+----(A)-- &amp; Redirection URI ----&gt;|               |
 |  User-   |                                 | Authorization |
 |  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |
 |          |                                 |               |
 |         -+----(C)-- Authorization Code ---&lt;|               |
 +-|----|---+                                 +---------------+
   |    |                                         ^      v
  (A)  (C)                                        |      |
   |    |                                         |      |
   ^    v                                         |      |
 +---------+                                      |      |
 |         |&gt;---(D)-- Authorization Code ---------&#39;      |
 |  Client |          &amp; Redirection URI                  |
 |         |                                             |
 |         |&lt;---(E)----- Access Token -------------------&#39;
 +---------+       (w/ Optional Refresh Token)
</code></pre><p>A. 用户访问客户端，后者将前者导向认证服务器；<br> B. 用户选择是否给予客户端授权；<br> C. 假设用户给予授权，认证服务器将用户导向客户端事先指定的&quot;重定向URI&quot;（redirection URI），同时附上一个授权码；<br> D. 客户端收到授权码，附上早先的&quot;重定向URI&quot;，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见；<br> E. 认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//获取授权码。一般情况下会跳到认证服务器的登录页面，让用户登录，并确认授权
GET https://auth.ifuture.pro/oauth/authorize?client_id=zzzclient&amp;response_type=code&amp;redirect_uri=https://admin.z.com/

//拿到 code 后向认证服务器请求获得 token。一般情况这个请求得在后台进行
POST https://auth.ifuture.pro/oauth/token?code=kQoo2G&amp;client_id=zzzclient&amp;client_secret=111111&amp;grant_type=authorization_code&amp;redirect_uri=https://admin.z.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简化模式-implicit" tabindex="-1"><a class="header-anchor" href="#简化模式-implicit" aria-hidden="true">#</a> 简化模式（implicit）</h4><p>采用Implicit Grant（隐式授权）方式获取Access Token的授权验证流程与OAuth 2.0标准的User-Agent Flow相同，适用于所有无Server端配合的应用（由于应用往往位于一个User Agent里，如浏览器里面，因此这类应用在某些平台下又被称为Client-Side Application），如手机/桌面客户端程序、浏览器插件等, 他们的一个共同特点是，应用无法妥善保管其应用密钥（App Secret Key），如果采取Authorization Code模式，则会存在泄漏其应用密钥的可能性。</p><pre><code> +----------+
 | Resource |
 |  Owner   |
 |          |
 +----------+
      ^
      |
     (B)
 +----|-----+          Client Identifier     +---------------+
 |         -+----(A)-- &amp; Redirection URI ---&gt;|               |
 |  User-   |                                | Authorization |
 |  Agent  -|----(B)-- User authenticates --&gt;|     Server    |
 |          |                                |               |
 |          |&lt;---(C)--- Redirection URI ----&lt;|               |
 |          |          with Access Token     +---------------+
 |          |            in Fragment
 |          |                                +---------------+
 |          |----(D)--- Redirection URI ----&gt;|   Web-Hosted  |
 |          |          without Fragment      |     Client    |
 |          |                                |    Resource   |
 |     (F)  |&lt;---(E)------- Script ---------&lt;|               |
 |          |                                +---------------+
 +-|--------+
   |    |
  (A)  (G) Access Token
   |    |
   ^    v
 +---------+
 |         |
 |  Client |
 |         |
 +---------+
</code></pre><p>A. 客户端将用户导向认证服务器；<br> B. 用户决定是否给于客户端授权；<br> C. 假设用户给予授权，认证服务器将用户导向客户端指定的&quot;重定向URI&quot;，并在URI的Hash部分包含了访问令牌；<br> D. 浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值；<br> E. 资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌；<br> F. 浏览器执行上一步获得的脚本，提取出令牌；<br> G. 浏览器将令牌发给客户端；</p><p>主要就是没有获取 code 这一步了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 发起请求，用户登录
https://auth.ifuture.pro/oauth/authorize?client_id=client&amp;response_type=token&amp;redirect_uri=https://ifuture.pro/callback/
// 直接返回 token
https://auth.ifuture.pro/callback/#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOnsiaWQiOjEsInVzZXJuYW1lIjoienp6.-WJP1h9_FE6CzrB_WAL09gxmyvrmrcBi604pRIj8er0&amp;token_type=bearer&amp;expires_in=86399&amp;scope=all%20read%20write&amp;jti=547d4c82-426c-48ef-bc56-2d0095a01c3a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="密码模式-password" tabindex="-1"><a class="header-anchor" href="#密码模式-password" aria-hidden="true">#</a> 密码模式（Password）</h4><p>适用于受信任客户端应用，例如同个组织的内部或外部应用。</p><p>客户端可能也有自己的登录页面，并且与用户认证服务器之间互相信任，因为需要暴露用户密码给客户端。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//登录页面获取用户密码后，在后台发起下面请求获取 token
POST https://auth.ifuture.pro/oauth/token?username=zzz&amp;password=123123&amp;grant_type=password&amp;client_id=zzzApp&amp;client_secret=111111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端模式-client-credentials" tabindex="-1"><a class="header-anchor" href="#客户端模式-client-credentials" aria-hidden="true">#</a> 客户端模式（client credentials）</h4><ul><li><p>客户端调用认证服务器，认证客户端的合法性，获得合法 token 。<strong>与用户无关</strong></p><blockquote><p>因为与用户无关，所以不能获取用户信息（并没有当前登录用户这一概念），一般是服务与服务直接的调用认证使用，与用户无关。</p></blockquote></li><li><p>资源服务器与认证服务器之间的鉴权认证</p></li><li><p>用于客户端调用主服务API型应用（比如百度API Store）</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST http://localhost:8000/oauth/token?client_id=client&amp;client_secret=111111&amp;grant_type=client_credentials
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="open-id" tabindex="-1"><a class="header-anchor" href="#open-id" aria-hidden="true">#</a> Open ID</h2><p>OpenID 与 OAuth2 类似。</p><p>OpenID ：只用于 <strong>身份认证（Authentication）</strong>，允许你以 同一个账户 在 多个网站登陆。它仅仅是为你的 合法身份 背书，当你以 Facebook 账号登陆某个站点之后，该站点 无权访问 你的在 Facebook 上的 数据</p><p>OAuth2：用于 <strong>授权（Authorisation）</strong>，允许 被授权方 访问 授权方 的 用户数据。</p><h2 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> JWT</h2>`,27),m={href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"包含：",-1),b=r("<li><p>Header: 标题包含了令牌的元数据，并且在最小包含签名和/或加密算法的类型</p></li><li><p>Claims: Claims 也称 Payload 包含您想要签署的任何信息</p><ul><li>iss: 该JWT的签发者</li><li>sub: 该JWT所面向的用户</li><li>aud: 接收该JWT的一方</li><li>exp(expires): 什么时候过期，这里是一个Unix时间戳</li><li>iat(issued at): 在什么时候签发的</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul></li>",2),g={href:"https://tools.ietf.org/html/rfc7515",target:"_blank",rel:"noopener noreferrer"},f={href:"https://jwt.io/#encoded-jwt",target:"_blank",rel:"noopener noreferrer"},A=e("h2",{id:"oidc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#oidc","aria-hidden":"true"},"#"),t(" OIDC")],-1),k={href:"https://openid.net/connect/",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"OpenId的身份标识 + OAuth2的授权 + JWT数据包装方式 = OIDC",-1),x=e("h3",{id:"关键字",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#关键字","aria-hidden":"true"},"#"),t(" 关键字")],-1),I=e("ul",null,[e("li",null,"EU：End User：用户。"),e("li",null,"RP：Relying Party ,用来代指OAuth2中的受信任的客户端，身份认证和授权信息的消费方；"),e("li",null,"OP：OpenID Provider，有能力提供EU认证的服务（比如OAuth2中的授权服务），用来为RP提供EU的身份认证信息；"),e("li",null,"ID Token：JWT格式的数据，包含EU身份认证的信息。"),e("li",null,"UserInfo Endpoint：用户信息接口（受OAuth2保护），当RP使用Access Token访问时，返回授权用户的信息，此接口必须使用HTTPS。")],-1),S=e("p",null,"+--------+ +--------+ | | | | | |---------(1) AuthN Request-------->| | | | | | | | +--------+ | | | | | | | | | | | End- |<--(2) AuthN & AuthZ-->| | | | | User | | | | RP | | | | OP | | | +--------+ | | | | | | | |<--------(3) AuthN Response--------| | | | | | | |---------(4) UserInfo Request----->| | | | | | | |<--------(5) UserInfo Response-----| | | | | | +--------+ +--------+",-1),O={href:"https://openid.net/specs/openid-connect-core-1_0.html",target:"_blank",rel:"noopener noreferrer"},P=e("ol",null,[e("li",null,"RP发送一个认证请求给OP；"),e("li",null,"OP对EU进行身份认证，然后提供授权；"),e("li",null,"OP把ID Token和Access Token（需要的话）返回给RP；"),e("li",null,"RP使用Access Token发送一个请求UserInfo EndPoint；"),e("li",null,"UserInfo EndPoint返回EU的Claims。")],-1),R=e("p",null,"AuthN=Authentication（认证），AuthZ=Authorization（授权）",-1),z={href:"https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://blog.csdn.net/iamlake/article/details/93415206",target:"_blank",rel:"noopener noreferrer"},C=r('<h2 id="saml" tabindex="-1"><a class="header-anchor" href="#saml" aria-hidden="true">#</a> SAML</h2><p>SAML (Security Assertion Markup Language) 安全断言标记语言。诞生于2005年。</p><h3 id="saml1-1" tabindex="-1"><a class="header-anchor" href="#saml1-1" aria-hidden="true">#</a> SAML1.1</h3><h3 id="saml2-0" tabindex="-1"><a class="header-anchor" href="#saml2-0" aria-hidden="true">#</a> SAML2.0</h3><p><img src="'+l+'" alt="SAML" loading="lazy"></p><ol><li>还 未登陆 的用户 打开浏览器 访问你的网站（SP），网站 提供服务 但是并 不负责用户认证。</li><li>于是 SP 会生成一个 SAML 的认证请求数据包，把这个请求放在一个 html 的 form 表达的隐藏域中，这个 form 后面有一句 javascript 自动提交这个 form。 而 form 的action地址就是 提前配置好的 idp地址</li><li>提交这个 form 用户浏览器 重定向到 IDP。</li><li>IDP 在验证完来自 SP 的 请求无误 之后，在浏览器中呈现 登陆表单</li><li>用户填写 用户名 和 密码 进行登陆。</li><li>用户登陆成功， IDP 会生成一个包含 用户信息的 SAML token（SAML token 又称为 SAML Assertion，本质上是 XML ）。生产一个带 token 的 form 表单 返回至浏览器。</li><li>自动提交这个带 token 的表单，用户重定向 到 SP 。</li><li>SP 对拿到的 token 进行验证，并从中解析出 用户信息（双方持有对方的公钥），例如 用户是谁 以及 用户的权限 有哪些。此时就能够根据这些信息允许用户访问我们网站的内容。</li></ol>',6),D={href:"https://www.jianshu.com/p/d041935641b4",target:"_blank",rel:"noopener noreferrer"},T=r('<h2 id="ldap" tabindex="-1"><a class="header-anchor" href="#ldap" aria-hidden="true">#</a> LDAP</h2><p>LDAP（Light Directory Access Portocol），它是基于X.500标准的 <strong>轻量级目录访问协议</strong></p><p><strong>目录数据库和关系数据库不同</strong>，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好象它的名字一样。LDAP目录服务是由目录数据库和一套访问协议组成的系统。</p><h3 id="关键字-1" tabindex="-1"><a class="header-anchor" href="#关键字-1" aria-hidden="true">#</a> 关键字</h3><table><thead><tr><th>关键字</th><th>英文全称</th><th>含义</th></tr></thead><tbody><tr><td>dc</td><td>Domain Component</td><td>域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）</td></tr><tr><td>uid</td><td>User Id</td><td>用户ID songtao.xu（一条记录的ID）</td></tr><tr><td>ou</td><td>Organization Unit</td><td>组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如“oa组”（一条记录的所属组织）</td></tr><tr><td>cn</td><td>Common Name</td><td>公共名称，如“Thomas Johansson”（一条记录的名称）</td></tr><tr><td>sn</td><td>Surname</td><td>姓，如“万”</td></tr><tr><td>dn</td><td>Distinguished Name</td><td>“uid=songtao.xu,ou=oa组,dc=example,dc=com”，一条记录的位置（唯一）</td></tr><tr><td>rdn</td><td>Relative dn</td><td>相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”</td></tr></tbody></table><h3 id="产品" tabindex="-1"><a class="header-anchor" href="#产品" aria-hidden="true">#</a> 产品</h3><h4 id="服务" tabindex="-1"><a class="header-anchor" href="#服务" aria-hidden="true">#</a> 服务</h4><ul><li>Microsoft Active Directory 使用非常广</li><li>OpenLDAP</li></ul><h4 id="接入方案" tabindex="-1"><a class="header-anchor" href="#接入方案" aria-hidden="true">#</a> 接入方案</h4>',9),w={href:"https://spring.io/projects/spring-ldap",target:"_blank",rel:"noopener noreferrer"};function L(y,E){const n=s("ExternalLinkIcon");return o(),d("div",null,[h,e("p",null,[t("OAuth2是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方应用或分享他们数据的所有内容。"),e("a",p,[t("https://tools.ietf.org/html/rfc6749#section-4.1"),i(n)])]),u,e("p",null,[e("a",m,[t("JSON Web token"),i(n)])]),_,e("ul",null,[b,e("li",null,[e("p",null,[e("a",g,[t("JSON Web Signature (JWS)"),i(n)]),t(": 在header中指定的使用该算法的数字签名和声明 "),e("a",f,[t("在线解析"),i(n)])])])]),A,e("p",null,[e("a",k,[t("OpenID Connect"),i(n)]),t(" = (Identity, Authentication) + OAuth 2.0")]),v,x,I,S,e("p",null,[e("a",O,[t("https://openid.net/specs/openid-connect-core-1_0.html"),i(n)])]),P,R,e("p",null,[e("a",z,[t("https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server/"),i(n)]),e("a",U,[t("https://blog.csdn.net/iamlake/article/details/93415206"),i(n)])]),C,e("p",null,[e("a",D,[t("OpenSAML"),i(n)])]),T,e("ul",null,[e("li",null,[e("a",w,[t("Spring LDAP"),i(n)])])])])}const j=a(c,[["render",L],["__file","SSO.html.vue"]]);export{j as default};
