import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as n,b as s,d as e,e as i,r as l}from"./app.84e5f037.js";const c={},r=n("h2",{id:"前后端分离项目-如何解决跨域问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前后端分离项目-如何解决跨域问题","aria-hidden":"true"},"#"),s(" 前后端分离项目，如何解决跨域问题？")],-1),u={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[n("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-1.png",alt:"",loading:"lazy"})],-1),m=n("p",null,"403 Forbidden 是HTTP协议中的一个状态码（Status Code），意味着后端服务虽然成功解析了请求，但前端却没有访问该资源的权限。",-1),v=n("p",null,"那怎么解决这个问题呢？通常有两个思路：",-1),g=n("ul",null,[n("li",null,"前端使用 Nodejs 代理（开发环境下，生产环境下可以用 Nginx 替代）"),n("li",null,"或者后端开启跨域资源共享")],-1),b=n("h3",{id:"一、关于跨域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、关于跨域","aria-hidden":"true"},"#"),s(" 一、关于跨域")],-1),k=n("p",null,"跨域对于前后端开发者来说，就像一块狗皮膏药，无论是面试还是开发中，都会经常遇到。",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"},_=i(`<p>前面我们提到了，前端跑在 8080 端口下，后端跑在 9002 端口下，这种情况就属于不同的源（域名不同，协议不同，端口不同），所以 8080 端口下的前端请求直接访问 9002 端口下的后端接口时就访问失败了。</p><p>那正确的打开方式是什么呢？我们前面也提到了，前端使用 Nodejs 代理或者后端开启跨域资源共享，我们一一来实践下。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-2.gif" alt="" loading="lazy"></p><h3 id="二、nodejs-代理" tabindex="-1"><a class="header-anchor" href="#二、nodejs-代理" aria-hidden="true">#</a> 二、Nodejs 代理</h3><p>在 Nodejs 出现之前，JavaScript 编写的程序通常需要在用户的浏览器上执行，Node.js 出现后，JavaScript 也能用于服务端编程了。Nodejs 一系列的内置模块使得程序可以脱离 IIS、Apache 这种 Web 服务作为独立的服务器执行。</p><p>我们使用 Nodejs 来解决跨域问题的思路就是，在本地创建一个虚拟服务器，对 8080 端口下的前端请求进行代理，同时接收 9002 端口下的服务器端响应，这样服务端和服务端进行数据的交互就不会出现跨域问题了。</p><p>第一步，配置 Nodejs 代理服务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module.exports = {
  dev: {
    // Paths
    assetsSubDirectory: &#39;static&#39;,
    assetsPublicPath: &#39;/&#39;,
    proxyTable: {
      &#39;/api&#39;: {
        target: &#39;http://localhost:9002&#39;, // 你请求的第三方接口
        changeOrigin: false, // 在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题
        pathRewrite: { // 路径重写，
          &#39;^/api&#39;: &#39;&#39; // 替换target中的请求地址，也就是说以后你在请求http://api.codingmore.top/v2/XXXXX这个地址的时候直接写成/api即可。
        }
      },
    },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，配置前端访问请求路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>module.exports = merge(prodEnv, {
  NODE_ENV: &#39;&quot;development&quot;&#39;,
  VUE_APP_BASE_API: &#39;&quot;/api&quot;&#39;
  // VUE_APP_BASE_API: &#39;&quot;http://localhost:9002&quot;&#39;
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，重启前端服务</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-3.png" alt="" loading="lazy"></p><p>再次点击「登录」按钮，可以看到请求的 URL 发生了改变，原来是 <code>http://localhost:9002/users/login</code>，现在是 <code>http://localhost:8080/api/users/login</code>。与此同时，可以看到多了一个 Remote Address，端口也是 8080，也就是说经过 Nodejs 的代理，前后端的交互在同一个源下面了，这样就不会发生跨域问题了。</p><p>同时，可以看得到，服务器端返回的状态码变成了 200，表示请求成功。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-4.png" alt="" loading="lazy"></p><h3 id="三、开启跨域资源共享" tabindex="-1"><a class="header-anchor" href="#三、开启跨域资源共享" aria-hidden="true">#</a> 三、开启跨域资源共享</h3><p>跨域资源共享，也就是 Cross-Origin Resource Sharing，简拼为 CORS，是一种基于 HTTP 头信息的机制，通过允许服务器标识除了它自己以外的资源，从而实现跨域访问。</p><p>第一步，开启 CORS 支持</p><p>在 Spring Boot 应用中，加入 CORS 的支持简单到不忍直视，添加一个配置类就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalCorsConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置你要允许的网站域名</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许跨域发送cookie</span>
        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行全部原始头信息</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许所有请求方法跨域调用</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，重启后端服务，再次点击登录按钮，发现请求已经可以正常访问了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-5.png" alt="" loading="lazy"></p><p>本例中，后端返回 <code>Access-Control-Allow-Origin: http://localhost:8080</code> 就表示，跑在 9002 端口下的后端接口可以被 8080 端口的前端请求访问。</p><p>如果允许所有域名进行跨域调用的话，只需改变一行代码即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//允许所有域名进行跨域调用</span>
config<span class="token punctuation">.</span><span class="token function">addAllowedOriginPattern</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置你要允许的网站域名</span>
<span class="token comment">//        config.addAllowedOrigin(&quot;http://localhost:8080&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 login 这种简单的请求来说，它们是不会触发 CORS 预检的，因此不需要在服务器端增加其他配置就可以了。那什么是简单请求呢？</p><p>1）请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>2）HTTP 的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded、multipart/form-data、text/plain</code></li></ul><p>那对于会触发 CORS 预检的非简单请求（比如说请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 <code>application/json</code>，或者请求消息头包含了一些自定义的字段），该怎么办呢？</p><p>非简单请求在正式通信之前，会增加一次 HTTP 查询请求，称为“预检”请求。预检请求通过后，才会返回正常的响应内容。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-6.png" alt="" loading="lazy"></p><p>拿编程猫的文章管理页来举例，该页面会向后端发起一个 <code>posts/queryPageable</code> 的分页查询，该请求包含了一个自定义的消息头 Authorization，于是浏览器认为该请求是一个非简单请求，然后就会自动发起一次 OPTIONS 请求，但由于我们的 Spring Boot 项目整合了 SpringsScurity 安全管理框架，没有对OPTIONS请求放开登录认证，导致验证失败，文章分页请求的响应数据就没有返回回来。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-7.png" alt="" loading="lazy"></p><p>第三步，通过以下代码给 OPTIONS 请求放行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span>ExpressionInterceptUrlRegistry registry <span class="token operator">=</span> httpSecurity
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许跨域请求的OPTIONS请求</span>
        registry<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次重启后端服务，重新访问文章列表接口，发现有响应数据了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-8.png" alt="" loading="lazy"></p><p>非简单请求必须首先使用 OPTIONS 请求方法发起一个预检请求到服务器端，以获知服务器是否允许该实际请求。&quot;预检请求“的使用，避免了跨域请求对服务器的用户数据造成未预期的影响。</p><p>我们来通过两张图片简单总结一下预检请求的整个过程，第一张，发起 OPTIONS 预检请求：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-9.png" alt="" loading="lazy"></p><p>第二章，发起正式请求：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/cors-10.png" alt="" loading="lazy"></p><h3 id="四、源码路径" tabindex="-1"><a class="header-anchor" href="#四、源码路径" aria-hidden="true">#</a> 四、源码路径</h3><p>编程猫后端源码：</p>`,46),f={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"编程猫后台管理的前端源码：",-1),y={href:"https://github.com/itwanger/codingmore-admin-web",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"参考链接：",-1),S={href:"https://segmentfault.com/a/1190000015597029",target:"_blank",rel:"noopener noreferrer"},C={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/amandakelake/blog/issues/62",target:"_blank",rel:"noopener noreferrer"},T=n("hr",null,null,-1),N=n("p",null,[n("strong",null,"本篇已收录至 GitHub 上星标 1.6k+ star 的开源专栏《Java 程序员进阶之路》，据说每一个优秀的 Java 程序员都喜欢她，风趣幽默、通俗易懂。内容包括 Java 基础、Java 并发编程、Java 虚拟机、Java 企业级开发、Java 面试等核心知识点。学 Java，就认准 Java 程序员进阶之路"),s("😄。")],-1),P={href:"https://github.com/token01/token01.github.io",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"star 了这个仓库就等于你拥有了成为了一名优秀 Java 工程师的潜力。也可以戳下面的链接跳转到《Java 程序员进阶之路》的官网网址，开始愉快的学习之旅吧。",-1),A={href:"https://tobebetterjavaer.com/",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,[n("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/aop-log-5.png",alt:"",loading:"lazy"})],-1),E=n("p",null,[n("em",null,"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟"),s("。")],-1);function I(R,J){const a=l("ExternalLinkIcon");return o(),p("div",null,[r,n("p",null,[s("跨域问题是前后端分离项目中非常常见的一个问题，举例来说，编程猫（"),n("a",u,[s("codingmore"),e(a)]),s("）学习网站的前端服务跑在 8080 端口下，后端服务跑在 9002 端口下，那么前端在请求后端接口的时候就会出现跨域问题。")]),d,m,v,g,b,k,n("p",null,[s("之所以出现跨域问题，是因为"),n("a",h,[s("浏览器的同源策略"),e(a)]),s("，为了隔离潜在的恶意文件，为了防御来自歪门邪道的攻击，浏览器限制了从同一个源加载的文档或脚本与来自另一个源的资源进行交互。")]),_,n("blockquote",null,[n("p",null,[n("a",f,[s("https://github.com/itwanger/coding-more"),e(a)])])]),j,n("blockquote",null,[n("p",null,[n("a",y,[s("https://github.com/itwanger/codingmore-admin-web"),e(a)])])]),w,n("blockquote",null,[n("p",null,[s("跨域："),n("a",S,[s("https://segmentfault.com/a/1190000015597029"),e(a)]),s(" CORS："),n("a",C,[s("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS"),e(a)]),s(" 阮一峰："),n("a",x,[s("https://www.ruanyifeng.com/blog/2016/04/cors.html"),e(a)]),s(" 简单请求+预检请求："),n("a",O,[s("https://github.com/amandakelake/blog/issues/62"),e(a)])])]),T,N,n("p",null,[n("a",P,[s("https://github.com/token01/token01.github.io"),e(a)])]),q,n("p",null,[n("a",A,[s("https://tobebetterjavaer.com/"),e(a)])]),z,E])}const U=t(c,[["render",I],["__file","cors.html.vue"]]);export{U as default};
