import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as e,a as n,b as s,d as t,e as c,r as l}from"./app.7b6c8628.js";const i={},u=n("blockquote",null,[n("p",null,"浅谈以太坊源码分析之MPT树-下")],-1),k={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"trie",-1),d=c(`<div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>|-encoding.go 主要讲编码之间的转换
|-hasher.go 实现了从某个结点开始计算子树的哈希的功能
|-node.go 定义了一个Trie树中所有结点的类型和解析的代码
|-sync.go 实现了SyncTrie对象的定义和所有方法
|-iterator.go 定义了所有枚举相关接口和实现
|-secure_trie.go 实现了SecureTrie对象
|-proof.go 为key构造一个merkle证明
|-trie.go Trie树的增删改查
|-database.go 对内存中的trie树节点进行引用计数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现概览" tabindex="-1"><a class="header-anchor" href="#实现概览" aria-hidden="true">#</a> 实现概览</h2><h3 id="encoding-go" tabindex="-1"><a class="header-anchor" href="#encoding-go" aria-hidden="true">#</a> encoding.go</h3><p>这个主要是讲三种编码（<code>KEYBYTES encoding</code>、<code>HEX encoding</code>、<code>COMPACT encoding</code>）的实现与转换，<code>trie</code>中全程都需要用到这些，该文件中主要实现了如下功能：</p><ol><li>hex编码转换为Compact编码：<code>hexToCompact()</code></li><li>Compact编码转换为hex编码：<code>compactToHex()</code></li><li>keybytes编码转换为Hex编码：<code>keybytesToHex()</code></li><li>hex编码转换为keybytes编码：<code>hexToKeybytes()</code></li><li>获取两个字节数组的公共前缀的长度：<code>prefixLen()</code></li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hexToCompact</span><span class="token punctuation">(</span>hex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    terminator <span class="token operator">:=</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">hasTerm</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//检查是否有结尾为0x10 =&gt; 16</span>
        terminator <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//有结束标记16说明是叶子节点</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">//去除尾部标记</span>
    <span class="token punctuation">}</span>
    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 字节数组</span>
    
    buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> terminator <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token comment">// 标志byte为00000000或者00100000</span>
    <span class="token comment">//如果长度为奇数，添加奇数位标志1，并把第一个nibble字节放入buf[0]的低四位</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token comment">// 奇数标志 00110000</span>
        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> hex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 第一个nibble包含在第一个字节中 0011xxxx</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将两个nibble字节合并成一个字节</span>
    <span class="token function">decodeNibbles</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> buf
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//compact编码转化为Hex编码</span>
<span class="token keyword">func</span> <span class="token function">compactToHex</span><span class="token punctuation">(</span>compact <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    base <span class="token operator">:=</span> <span class="token function">keybytesToHex</span><span class="token punctuation">(</span>compact<span class="token punctuation">)</span>
    base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
     <span class="token comment">// apply terminator flag</span>
    <span class="token comment">// base[0]包括四种情况</span>
    <span class="token comment">// 00000000 扩展节点偶数位</span>
    <span class="token comment">// 00000001 扩展节点奇数位</span>
    <span class="token comment">// 00000010 叶子节点偶数位</span>
    <span class="token comment">// 00000011 叶子节点奇数位</span>

    <span class="token comment">// apply terminator flag</span>
    <span class="token keyword">if</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
       <span class="token comment">//如果是叶子节点，末尾添加Hex标志位16</span>
        base <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// apply odd flag</span>
    <span class="token comment">//如果是偶数位，chop等于2，否则等于1</span>
    chop <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">-</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span>
    <span class="token keyword">return</span> base<span class="token punctuation">[</span>chop<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//compact编码转化为Hex编码</span>
<span class="token keyword">func</span> <span class="token function">compactToHex</span><span class="token punctuation">(</span>compact <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    base <span class="token operator">:=</span> <span class="token function">keybytesToHex</span><span class="token punctuation">(</span>compact<span class="token punctuation">)</span>
    base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
     <span class="token comment">// apply terminator flag</span>
    <span class="token comment">// base[0]包括四种情况</span>
    <span class="token comment">// 00000000 扩展节点偶数位</span>
    <span class="token comment">// 00000001 扩展节点奇数位</span>
    <span class="token comment">// 00000010 叶子节点偶数位</span>
    <span class="token comment">// 00000011 叶子节点奇数位</span>

    <span class="token comment">// apply terminator flag</span>
    <span class="token keyword">if</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
       <span class="token comment">//如果是叶子节点，末尾添加Hex标志位16</span>
        base <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// apply odd flag</span>
    <span class="token comment">//如果是偶数位，chop等于2，否则等于1</span>
    chop <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">-</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span>
    <span class="token keyword">return</span> base<span class="token punctuation">[</span>chop<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 将十六进制的bibbles转成key bytes，这只能用于偶数长度的key</span>
<span class="token keyword">func</span> <span class="token function">hexToKeybytes</span><span class="token punctuation">(</span>hex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">hasTerm</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t convert hex key of odd length&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    key <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">decodeNibbles</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> key
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 返回a和b的公共前缀的长度</span>
<span class="token keyword">func</span> <span class="token function">prefixLen</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length <span class="token punctuation">{</span>
        length <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="node-go" tabindex="-1"><a class="header-anchor" href="#node-go" aria-hidden="true">#</a> node.go</h3><h4 id="四种节点" tabindex="-1"><a class="header-anchor" href="#四种节点" aria-hidden="true">#</a> 四种节点</h4><p>node 接口分四种实现: fullNode，shortNode，valueNode，hashNode，其中只有 fullNode 和 shortNode 可以带有子节点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> <span class="token punctuation">(</span>
	fullNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Children <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span>node <span class="token comment">// 分支节点</span>
		flags    nodeFlag
	<span class="token punctuation">}</span>
	shortNode <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">//扩展节点</span>
		Key   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
		Val   node <span class="token comment">//可能指向叶子节点，也可能指向分支节点。</span>
		flags nodeFlag
	<span class="token punctuation">}</span>
	hashNode  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	valueNode <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// 叶子节点值，但是该叶子节点最终还是会包装在shortNode中</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trie-go" tabindex="-1"><a class="header-anchor" href="#trie-go" aria-hidden="true">#</a> trie.go</h3><p>Trie对象实现了MPT树的所有功能，包括(key, value)对的增删改查、计算默克尔哈希，以及将整个树写入数据库中。</p><h3 id="iterator-go" tabindex="-1"><a class="header-anchor" href="#iterator-go" aria-hidden="true">#</a> iterator.go</h3><p><code>nodeIterator</code>提供了遍历树内部所有结点的功能。其结构如下：此结构体是在<code>trie.go</code>定义的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> nodeIterator <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	trie<span class="token punctuation">.</span>NodeIterator
	t   <span class="token operator">*</span>odrTrie
	err <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面包含了一个接口<code>NodeIterator</code>，它的实现则是由<code>iterator.go</code>来提供的，其方法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span>descend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafProof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">seek</span><span class="token punctuation">(</span>prefix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">peek</span><span class="token punctuation">(</span>descend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">nextChild</span><span class="token punctuation">(</span>parent <span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> ancestor common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>state <span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> parentIndex <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NodeIterator</code>的核心是<code>Next</code>方法，每调用一次这个方法，NodeIterator对象代表的当前节点就会更新至下一个节点，当所有结点遍历结束，<code>Next</code>方法返回<code>false</code>。</p><p>生成NodeIterator结口的方法有以下3种：</p><p><strong>①：Trie.NodeIterator(start []byte)</strong></p><p>通过<code>start</code>参数指定从哪个路径开始遍历，如果为<code>nil</code>则从头到尾按顺序遍历。</p><p><strong>②：NewDifferenceIterator(a, b NodeIterator)</strong></p><p>当调用<code>NewDifferenceIterator(a, b NodeIterator)</code>后，生成的<code>NodeIterator</code>只遍历存在于 b 但不存在于 a 中的结点。</p><p><strong>③：NewUnionIterator(iters []NodeIterator)</strong></p><p>当调用<code>NewUnionIterator(its []NodeIterator)</code>后，生成的<code>NodeIterator</code>遍历的结点是所有传入的结点的合集。</p><h3 id="database-go" tabindex="-1"><a class="header-anchor" href="#database-go" aria-hidden="true">#</a> database.go</h3><p><code>Database</code>是<code>trie</code>模块对真正数据库的缓存层，其目的是对缓存的节点进行引用计数，从而实现区块的修剪功能。主要方法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewDatabase</span><span class="token punctuation">(</span>diskdb ethdb<span class="token punctuation">.</span>KeyValueStore<span class="token punctuation">)</span> <span class="token operator">*</span>Database
<span class="token keyword">func</span> <span class="token function">NewDatabaseWithCache</span><span class="token punctuation">(</span>diskdb ethdb<span class="token punctuation">.</span>KeyValueStore<span class="token punctuation">,</span> cache <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Database 
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">DiskDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ethdb<span class="token punctuation">.</span>KeyValueReader
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">InsertBlob</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> blob <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> blob <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> node node<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">insertPreimage</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> preimage <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">node</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> node
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Node</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">preimage</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">secureKey</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Hash
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Reference</span><span class="token punctuation">(</span>child common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> parent common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Dereference</span><span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">dereference</span><span class="token punctuation">(</span>child common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> parent common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Cap</span><span class="token punctuation">(</span>limit common<span class="token punctuation">.</span>StorageSize<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>node common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> report <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="security-trie-go" tabindex="-1"><a class="header-anchor" href="#security-trie-go" aria-hidden="true">#</a> security_trie.go</h3><p>可以理解为加密了的<code>trie</code>的实现，<code>ecurity_trie</code>包装了一下<code>trie</code>树， 所有的<code>key</code>都转换成<code>keccak256</code>算法计算的<code>hash</code>值。同时在数据库里面存储<code>hash</code>值对应的原始的<code>key</code>。 但是官方在代码里也注释了，这个代码不稳定，除了测试用例，别的地方并没有使用该代码。</p><h3 id="proof-go" tabindex="-1"><a class="header-anchor" href="#proof-go" aria-hidden="true">#</a> proof.go</h3><ul><li>Prove()：根据给定的<code>key</code>，在<code>trie</code>中，将满足<code>key</code>中最大长度前缀的路径上的节点都加入到<code>proofDb</code>（队列中每个元素满足：未编码的hash以及对应<code>rlp</code>编码后的节点）</li><li>VerifyProof()：验证<code>proffDb</code>中是否存在满足输入的<code>hash</code>，和对应key的节点，如果满足，则返回<code>rlp</code>解码后的该节点。</li></ul><h2 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节" aria-hidden="true">#</a> 实现细节</h2><h3 id="trie对象的增删改查" tabindex="-1"><a class="header-anchor" href="#trie对象的增删改查" aria-hidden="true">#</a> Trie对象的增删改查</h3><p>①：<strong>Trie树的初始化</strong></p><p>如果<code>root</code>不为空，就通过<code>resolveHash</code>来加载整个<code>Trie</code>树，如果为空，就新建一个<code>Trie</code>树。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Trie<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trie.New called without a database&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	trie <span class="token operator">:=</span> <span class="token operator">&amp;</span>Trie<span class="token punctuation">{</span>
		db<span class="token punctuation">:</span> db<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> root <span class="token operator">!=</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root <span class="token operator">!=</span> emptyRoot <span class="token punctuation">{</span>
		rootnode<span class="token punctuation">,</span> err <span class="token operator">:=</span> trie<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		trie<span class="token punctuation">.</span>root <span class="token operator">=</span> rootnode
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> trie<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<strong>Trie树的插入</strong></p><p>首先Trie树的插入是个递归调用的过程，它会从根开始找，一直找到合适的位置插入。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> value node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>n: 当前要插入的节点</li><li>prefix: 当前已经处理完的<strong>key</strong>(节点共有的前缀)</li><li>key: 未处理完的部分<strong>key</strong>，完整的<code>key = prefix + key</code></li><li>value：需要插入的值</li></ul><p>返回值说明：</p><ul><li>bool : 操作是否改变了<strong>Trie</strong>树(<strong>dirty</strong>)</li><li>Node :插入完成后的子树的根节点</li></ul><p>接下来就是分别对<code>shortNode</code>、<code>fullNode</code>、<code>hashNode</code>、<code>nil</code> 几种情况进行说明。</p><p><strong>2.1：节点为nil</strong></p><p>空树直接返回<code>shortNode</code>， 此时整颗树的根就含有了一个<code>shortNode</code>节点。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>case nil:
		return true, &amp;shortNode{key, value, t.newFlag()}, nil
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.2 ：节点为shortNode</strong></p><ul><li><p>首先计算公共前缀，如果公共前缀就等于<code>key</code>，那么说明这两个<code>key</code>是一样的，如果<code>value</code>也一样的(<code>dirty == false</code>)，那么返回错误。</p></li><li><p>如果没有错误就更新<code>shortNode</code>的值然后返回</p></li><li><p>如果公共前缀不完全匹配，那么就需要把公共前缀提取出来形成一个独立的节点(扩展节点),扩展节点后面连接一个<code>branch</code>节点，<code>branch</code>节点后面看情况连接两个<code>short</code>节点。</p></li><li><p>首先构建一个branch节点(branch := &amp;fullNode{flags: t.newFlag()}),然后再branch节点的Children位置调用t.insert插入剩下的两个short节点</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>matchlen <span class="token operator">:=</span> <span class="token function">prefixLen</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
		<span class="token keyword">if</span> matchlen <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>matchlen<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		branch <span class="token operator">:=</span> <span class="token operator">&amp;</span>fullNode<span class="token punctuation">{</span>flags<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> branch<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> branch<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> matchlen <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> branch<span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">,</span> branch<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.3: 节点为fullNode</strong></p><p>节点是<code>fullNode</code>(也就是分支节点)，那么直接往对应的孩子节点调用<code>insert</code>方法,然后把对应的孩子节点指向新生成的节点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>flags <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nn
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.4: 节点为hashnode</strong></p><p>暂时还在数据库中的节点，先调用 <code>t.resolveHash(n, prefix)</code>来加载到内存，然后调用<code>insert</code>方法来插入。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rn<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rn<span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<strong>Trie树查询值</strong></p><p>其实就是根据输入的<code>hash</code>，找到对应的叶子节点的数据。主要看<code>TryGet</code>方法。</p><p>参数：</p><ul><li><code>origNode</code>：当前查找的起始<strong>node</strong>位置</li><li><code>key</code>：输入要查找的数据的<strong>hash</strong></li><li><code>pos</code>：当前<strong>hash</strong>匹配到第几位</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">tryGet</span><span class="token punctuation">(</span>origNode node<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> pos <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> newnode node<span class="token punctuation">,</span> didResolve <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n <span class="token operator">:=</span> <span class="token punctuation">(</span>origNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span> <span class="token comment">//表示当前trie是空树</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> valueNode<span class="token punctuation">:</span> <span class="token comment">////这就是我们要查找的叶子节点对应的数据</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span> <span class="token comment">////在叶子节点或者扩展节点匹配</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">-</span>pos <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> key<span class="token punctuation">[</span>pos<span class="token punctuation">:</span>pos<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> didResolve <span class="token punctuation">{</span>
			n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			n<span class="token punctuation">.</span>Val <span class="token operator">=</span> newnode
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> n<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err
	<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>在分支节点匹配
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> didResolve <span class="token punctuation">{</span>
			n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnode
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> n<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err
	<span class="token keyword">case</span> hashNode<span class="token punctuation">:</span> <span class="token comment">//说明当前节点是轻节点，需要从db中获取</span>
		child<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>didResolve</code>用于判断<code>trie</code>树是否会发生变化，<code>tryGet()</code>只是用来获取数据的，当<code>hashNode</code>去<code>db</code>中获取该<code>node</code>值后需要更新现有的trie，<code>didResolve</code>就会发生变化。其他就是基本的递归查找树操作。</p><p>④：<strong>Trie树更新值</strong></p><p>更新值，其实就是调用insert方法进行操作。</p><p>到此Trie树的增删改查就讲解的差不多了。</p><h3 id="将节点写入到trie的内存数据库" tabindex="-1"><a class="header-anchor" href="#将节点写入到trie的内存数据库" aria-hidden="true">#</a> 将节点写入到Trie的内存数据库</h3><p>如果要把节点写入到内存数据库，需要序列化，可以先去了解下以太坊的Rlp编码。这部分工作由<code>trie.Commit()</code>完成，当<code>trie.Commit(nil)</code>，会执行序列化和缓存等操作，序列化之后是使用的<code>Compact Encoding</code>进行编码，从而达到节省空间的目的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;commit called on trie with nil database&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	hash<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">hashRoot</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>db<span class="token punctuation">,</span> onleaf<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span>root <span class="token operator">=</span> cached
	<span class="token keyword">return</span> common<span class="token punctuation">.</span><span class="token function">BytesToHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token punctuation">(</span>hashNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码大概讲了这些：</p><ul><li>每次执行<code>Commit()</code>，该trie的<code>cachegen</code>就会加 1</li><li><code>Commit()</code>方法返回的是<code>trie.root</code>所指向的<code>node</code>的<code>hash</code>（未编码）</li><li>其中的<code>hashRoot()</code>方法目的是<code>返回trie.root所指向的node的hash</code>以及<code>每个节点都带有各自hash的trie树的root</code>。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//为每个node生成一个hash</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">hashRoot</span><span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">,</span> onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">hashNode</span><span class="token punctuation">(</span>emptyRoot<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	h <span class="token operator">:=</span> <span class="token function">newHasher</span><span class="token punctuation">(</span>onleaf<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">returnHasherToPool</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>
	<span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>root<span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//为每个节点生成一个未编码的hash</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>hashRoot</code>的核心方法就是 <code>h.hash</code>，它返回了头节点的<code>hash</code>以及每个子节点都带有<code>hash</code>的头节点（Trie.root指向它），大致做了以下几件事：</p><p>①：<em>如果我们不存储节点，而只是哈希，则从缓存中获取数据</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> hash<span class="token punctuation">,</span> dirty <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> hash<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token punctuation">{</span>
			<span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">,</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span>
				<span class="token keyword">return</span> hash<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> hash<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>递归调用<code>h.hashChildren</code>，求出所有的子节点的<code>hash</code>值，再把原有的子节点替换成现在子节点的<code>hash</code>值</em></p><p><strong>2.1:如果节点是<code>shortNode</code></strong></p><p>首先把<code>collapsed.Key从Hex Encoding</code> 替换成 <code>Compact Encoding</code>, 然后递归调用<code>hash</code>方法计算子节点的<code>hash</code>和<code>cache</code>，从而把子节点替换成了子节点的<code>hash</code>值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>collapsed<span class="token punctuation">,</span> cached <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		collapsed<span class="token punctuation">.</span>Key <span class="token operator">=</span> <span class="token function">hexToCompact</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
		cached<span class="token punctuation">.</span>Key <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">CopyBytes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>

		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			collapsed<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> cached<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> err <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> original<span class="token punctuation">,</span> original<span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> collapsed<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.2:节点是fullNode</strong></p><p>遍历每个子节点，把子节点替换成子节点的<code>Hash</code>值，否则的化这个节点没有<code>children</code>。直接返回。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>		collapsed<span class="token punctuation">,</span> cached <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				collapsed<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cached<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> original<span class="token punctuation">,</span> original<span class="token punctuation">,</span> err
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		cached<span class="token punctuation">.</span>Children<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> collapsed<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<em>存储节点n的哈希值，如果我们指定了存储层，它会写对应的键/值对</em></p><p>store()方法主要就做了两件事：</p><ul><li><code>rlp</code>序列化<code>collapsed</code>节点并将其插入db磁盘中</li><li>生成当前节点的<code>hash</code></li><li>将节点哈希插入<code>db</code></li></ul><p><strong>3.1：空数据或者hashNode，则不处理</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> isHash <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span>hashNode<span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> isHash <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.2:生成节点的RLP编码</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>h<span class="token punctuation">.</span>tmp<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment">// 缓存初始化</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> rlp<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">//将当前node序列化</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;encode error: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// Nodes smaller than 32 bytes are stored inside their parent 编码后的node长度小于32，若force为true，则可确保所有节点都被编码</span>
	<span class="token punctuation">}</span>
<span class="token comment">//长度过大的，则都将被新计算出来的hash取代</span>
	hash<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//取出当前节点的hash</span>
	<span class="token keyword">if</span> hash <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		hash <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">makeHashNode</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">)</span> <span class="token comment">//生成哈希node</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.3:将Trie节点合并到中间内存缓存中</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>hash <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">BytesToHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
		db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> h<span class="token punctuation">.</span>tmp<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// Track external references from account-&gt;storage trie</span>
		<span class="token comment">//跟踪帐户-&gt;存储Trie中的外部引用</span>
		<span class="token keyword">if</span> h<span class="token punctuation">.</span>onleaf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">switch</span> n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span>
				<span class="token keyword">if</span> child<span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  <span class="token comment">//指向的是分支节点</span>
					h<span class="token punctuation">.</span><span class="token function">onleaf</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token comment">//用于统计当前节点的信息，比如当前节点有几个子节点，当前有效的节点数</span>
				<span class="token punctuation">}</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">:</span>
				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> child<span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
						h<span class="token punctuation">.</span><span class="token function">onleaf</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止将节点写入到<code>Trie</code>的内存数据库就已经完成了。</p><p><em>如果觉得文章不错可以关注公众号：<strong>区块链技术栈</strong>，详细的所有以太坊源码分析文章内容以及代码资料都在其中。</em></p><h3 id="trie树缓存机制" tabindex="-1"><a class="header-anchor" href="#trie树缓存机制" aria-hidden="true">#</a> Trie树缓存机制</h3><p><code>Trie</code>树的结构里面有两个参数， 一个是<code>cachegen</code>,一个是<code>cachelimit</code>。这两个参数就是<code>cache</code>控制的参数。 <code>Trie</code>树每一次调用<code>Commit</code>方法，会导致当前的<code>cachegen</code>增加1。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
    t<span class="token punctuation">.</span>cachegen<span class="token operator">++</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>Trie</code>树插入的时候，会把当前的<code>cachegen</code>存放到节点中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> value node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span><span class="token punctuation">.</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> nodeFlag <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nodeFlag<span class="token punctuation">{</span>dirty<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> gen<span class="token punctuation">:</span> t<span class="token punctuation">.</span>cachegen<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>trie.cachegen - node.cachegen &gt; cachelimit</code>，就可以把节点从内存里面拿掉。 也就是说节点经过几次<code>Commit</code>，都没有修改，那么就把节点从内存里面干掉。 只要<code>trie</code>路径上新增或者删除一个节点，整个路径的节点都需要重新实例化，也就是节点中的<code>nodeFlag</code>被初始化了。都需要重新更新到<code>db</code>磁盘。</p><p>拿掉节点过程在 <code>hasher.hash</code>方法中， 这个方法是在<code>commit</code>的时候调用。如果方法的<code>canUnload</code>方法调用返回真，那么就拿掉节点，如果只返回了<code>hash</code>节点，而没有返回<code>node</code>节点，这样节点就没有引用，不久就会被gc清除掉。 节点被拿掉之后，会用一个<code>hashNode</code>节点来表示这个节点以及其子节点。 如果后续需要使用，可以通过方法把这个节点加载到内存里面来。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>hasher<span class="token punctuation">)</span> <span class="token function">hash</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> db <span class="token operator">*</span>Database<span class="token punctuation">,</span> force <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token operator">...</span><span class="token punctuation">.</span>
       <span class="token comment">// 从缓存中卸载节点。它的所有子节点将具有较低或相等的缓存世代号码。</span>
       cacheUnloadCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考-总结" tabindex="-1"><a class="header-anchor" href="#参考-总结" aria-hidden="true">#</a> 参考&amp;总结</h2><p>这部分重要的内容也就上面讲述的，主要集中在<code>Trie</code>上面，如果有不对的地方，可以及时指正哦。</p>`,107),v={href:"https://mindcarver.cn/about/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/blockchainGuide/blockchainguide",target:"_blank",rel:"noopener noreferrer"};function m(h,g){const a=l("ExternalLinkIcon");return o(),e("div",null,[u,n("p",null,[n("a",k,[s("上篇"),t(a)]),s("主要介绍了以太坊中的MPT树的原理，这篇主要会对MPT树涉及的源码进行拆解分析。"),r,s("模块主要有以下几个文件：")]),d,n("blockquote",null,[n("p",null,[n("a",v,[s("https://mindcarver.cn/about/"),t(a)])]),n("p",null,[n("a",b,[s("https://github.com/blockchainGuide/blockchainguide"),t(a)])])])])}const w=p(i,[["render",m],["__file","14.etheric_fang_source_analysis_MPT_tree.html.vue"]]);export{w as default};
