import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as p,r as i}from"./app.c2a49a29.js";const l={},u=p('<blockquote><p>浅谈密码学|ECDSA算法</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn80yxj5d7j30et08cjrr.jpg" alt="u=1020757406,2710278676&amp;fm=26&amp;gp=0" loading="lazy"></p><h2 id="生成签名" tabindex="-1"><a class="header-anchor" href="#生成签名" aria-hidden="true">#</a> 生成签名</h2><p>假设 Alice 希望对消息$m$进行签名，所采用的椭圆曲线参数为$D=(p,a,b,G,n,h)$，对应的密钥对为$(k,Q)$，其中为公钥$Q$，$k$为私钥。</p><p>Alice 将按如下步骤进行签名：</p><ol><li>产生一个随机数$d$，$1 \\leq d \\leq n-1$. （签名算法首先生成一个临时私公钥对，该临时密钥对用于计算 r 和 s 值。）</li><li>计算$dG=(x_1,y_1)$，将$x_1$化为整数$\\overline{x_1}$.</li><li>计算$r=\\overline{x_1} \\ mod \\ n$，若$r=0$，则转向第1步. （r 值为临时公钥的坐标 x 值）</li><li>计算 $d^{-1} \\ mod \\ n$</li><li>计算哈希值$H(m)$，并将得到的比特串转化为整数 e</li><li>计算$s=d^{-1}(e+kr) \\ mod \\ n$，若$s=0$，则转向第1步.</li><li>$(r,s)$即为 Alice 对消息的签名.</li></ol><h2 id="椭圆曲线签名验证" tabindex="-1"><a class="header-anchor" href="#椭圆曲线签名验证" aria-hidden="true">#</a> 椭圆曲线签名验证</h2><p>为验证 Alice 对消息 m 的签名$(r,s)$，Bob 需要得到 Alice 所用的椭圆曲线参数$D=(p,a,b,G,n,h)$以及 Alice 的公钥 Q。</p><p>步骤如下：</p><ol><li>验证 r 和 s 是区间$[1,n-1]$上的整数.</li><li>计算$H(m)$并将其转化为整数 e.</li><li>计算$w=s^{-1} \\ mod \\ n$</li><li>计算$u_1=ew \\ mod \\ n$以及$u_2=rw \\ mod \\ n$</li><li>计算$X=(x_1,y_1)=u_1G+u_2Q$</li><li>若$X=O$，则拒绝签名，否则将 X 的$x$坐标$x_1$转化为整数，并计$\\overline{x_1}$算$v=\\overline{x_1} \\ mod \\ n$</li><li>当且仅当$v=r$时，签名通过验证.</li></ol><h2 id="椭圆曲线签名正确性" tabindex="-1"><a class="header-anchor" href="#椭圆曲线签名正确性" aria-hidden="true">#</a> 椭圆曲线签名正确性</h2><p>要证明$v=r$，只需要证明$X=dG$即可。</p><p>证明步骤：</p><p>令：$C=u_1G + u_2Q = u_1G+u_2kG=(u_1+u_2k)G$</p><p>将$u_1$、$u_2$带入：$C=(ew+rwk)G=(e+rk)wG=(e+rk)s^{-1}G$</p>',15),r=n("p",null,[s("由$s=d^{-1}(e+kr) \\mod n$得出$s"),n("sup",{"-1":""},"{-1}=d(e+kr)"),s(" \\mod n$，带入： $C=(e+kr)d(d+kr)^{-1}G = dG$")],-1),k=p(`<h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//生成签名----</span>
	<span class="token comment">//声明明文</span>
	message <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">//生成私钥</span>
	privateKey<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span>elliptic<span class="token punctuation">.</span><span class="token function">P256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span>
	<span class="token comment">//生成公钥</span>
	pub <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>PublicKey
	<span class="token comment">//将明文散列</span>
	digest <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token comment">//生成签名</span>
	r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token comment">//设置私钥的参数类型为曲线类型</span>
	param <span class="token operator">:=</span> privateKey<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//获得私钥byte长度</span>
	curveOrderByteSize <span class="token operator">:=</span> param<span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span>
	<span class="token comment">//获得签名返回值的字节</span>
	rByte<span class="token punctuation">,</span> sByte <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//创建数组</span>
	signature <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token comment">//通过数组保存了签名结果的返回值</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>rByte<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rByte<span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>sByte<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sByte<span class="token punctuation">)</span>

	<span class="token comment">//验证----</span>
	<span class="token comment">//将明文做hash散列，为了验证的内容对比</span>
	digest <span class="token operator">=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	curveOrderByteSize <span class="token operator">=</span> pub<span class="token punctuation">.</span>Curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span>
	<span class="token comment">//创建两个整形对象</span>
	r<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>
	<span class="token comment">//设置证书值</span>
	r<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span><span class="token punctuation">:</span>curveOrderByteSize<span class="token punctuation">]</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>signature<span class="token punctuation">[</span>curveOrderByteSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	<span class="token comment">//验证</span>
	e <span class="token operator">:=</span> ecdsa<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pub<span class="token punctuation">,</span> digest<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token keyword">if</span> e <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;failed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,3),d={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6844903671411671047",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/6844903882343071758",target:"_blank",rel:"noopener noreferrer"},$={href:"http://read.pudn.com/downloads54/sourcecode/windows/188357/ECDSA%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%AE%89%E5%85%A8%E6%80%A7%E5%88%86%E6%9E%90.pdf",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zhuanlan.zhihu.com/p/94852431",target:"_blank",rel:"noopener noreferrer"};function h(_,f){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,k,n("blockquote",null,[n("p",null,[n("a",d,[s("https://mindcarver.cn"),t(a)])]),n("p",null,[n("a",m,[s("https://juejin.cn/post/6844903671411671047"),t(a)])]),n("p",null,[n("a",v,[s("https://juejin.cn/post/6844903882343071758"),t(a)])]),n("p",null,[n("a",$,[s("http://read.pudn.com/downloads54/sourcecode/windows/188357/ECDSA算法实现及其安全性分析.pdf"),t(a)])]),n("p",null,[n("a",b,[s("https://zhuanlan.zhihu.com/p/94852431"),t(a)])])])])}const B=e(l,[["render",h],["__file","2.ECDSA.html.vue"]]);export{B as default};
