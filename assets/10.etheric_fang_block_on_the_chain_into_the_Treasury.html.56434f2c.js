import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e as p,r as u}from"./app.11a9ee6c.js";const i={},l=p(`<blockquote><p>浅谈以太坊源码分析之区块上链入库</p></blockquote><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>不管是矿工挖矿还是<code>Fetcher</code>同步，<code>Downloader</code>同步，或者是导入本地文件等等，最中都是将区块上链入库。接下来我们就详细分析这部分的动作。</p><h2 id="几处可能调用的地方" tabindex="-1"><a class="header-anchor" href="#几处可能调用的地方" aria-hidden="true">#</a> 几处可能调用的地方</h2><p>①：在Downloader同步最后会将区块插入到区块链中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">importBlockResults</span><span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchResult<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> index<span class="token punctuation">,</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：创建一个新的以太坊协议管理器，也会将区块插入到链中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewProtocolManager</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ProtocolManager<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  n<span class="token punctuation">,</span> err <span class="token operator">:=</span> manager<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：插入侧链数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">insertSideChain</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> it <span class="token operator">*</span>insertIterator<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">insertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：从本地文件导入链</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>api <span class="token operator">*</span>PrivateAdminAPI<span class="token punctuation">)</span> <span class="token function">ImportChain</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> api<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">BlockChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：fetcher同步导入块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>Fetcher<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>peer <span class="token builtin">string</span><span class="token punctuation">,</span> block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">insertChain</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Blocks<span class="token punctuation">{</span>block<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是比较常见的需要将区块上链的动作。调用的核心方法就是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">insertChain</span><span class="token punctuation">(</span>chain types<span class="token punctuation">.</span>Blocks<span class="token punctuation">,</span> verifySeals <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,17),k={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},r=p(`<h2 id="插入数据到blockchain中" tabindex="-1"><a class="header-anchor" href="#插入数据到blockchain中" aria-hidden="true">#</a> 插入数据到blockchain中</h2><p>①：如果链正在中断，直接返回</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if atomic.LoadInt32(&amp;bc.procInterrupt) == 1 {
  return 0, nil
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：开启并行的签名恢复</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code> senderCacher.recoverFromBlocks(types.MakeSigner(bc.chainConfig, chain[0].Number()), chain)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：开启并行校验header</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>abort<span class="token punctuation">,</span> results <span class="token operator">:=</span> bc<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">VerifyHeaders</span><span class="token punctuation">(</span>bc<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> seals<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>校验<code>header</code>是共识引擎所要做的事情，我们这里只分析<code>ethash</code>它的实现。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">VerifyHeaders</span><span class="token punctuation">(</span>chain consensus<span class="token punctuation">.</span>ChainReader<span class="token punctuation">,</span> headers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> seals <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  errors<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> ethash<span class="token punctuation">.</span><span class="token function">verifyHeaderWorker</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> seals<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">verifyHeaderWorker</span><span class="token punctuation">(</span>chain consensus<span class="token punctuation">.</span>ChainReader<span class="token punctuation">,</span> headers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> seals <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> parent <span class="token operator">*</span>types<span class="token punctuation">.</span>Header
 <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  parent <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span>headers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ParentHash<span class="token punctuation">,</span> headers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> headers<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> headers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>ParentHash <span class="token punctuation">{</span>
  parent <span class="token operator">=</span> headers<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> consensus<span class="token punctuation">.</span>ErrUnknownAncestor
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> chain<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span>headers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// known block</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> ethash<span class="token punctuation">.</span><span class="token function">verifyHeader</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> headers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> seals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先会调用<code>verifyHeaderWorker</code>进行校验，主要检验块的祖先是否已知以及块是否已知，接着会调用<code>verifyHeader</code>进行更深的校验，也是最核心的校验，大概做了以下几件事：</p><ol><li>header.Extra<em>不可超过32字节</em></li><li>header.Time<em>不能超过15秒，15秒以后的就被认定为未来的块</em></li><li><em>当前header的时间戳不可以等于父块的时间戳</em></li><li><em>根据难度计算算法得出的expected必须和header.Difficulty 一致。</em></li><li><em>Gas limit 要 &lt;= 2 ^ 63-1</em></li><li><em>gasUsed&lt;= gasLimit</em></li><li><em>Gas limit 要在允许范围内</em></li><li><em>块号必须是父块加1</em></li><li><em>根据 ethash.VerifySeal去验证块是否满足POW难度要求</em></li></ol><p>到此验证header的事情就做完了。</p><p>④：循环校验body</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>block<span class="token punctuation">,</span> err <span class="token operator">:=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> ValidateBody
  <span class="token operator">-</span><span class="token operator">&gt;</span> VerifyUncles
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包括以下错误：</p><ul><li><strong>block</strong>已知</li><li><strong>uncle</strong>太多</li><li>重复的<strong>uncle</strong></li><li><strong>uncle</strong>是祖先块</li><li><strong>uncle</strong>哈希不匹配</li><li>交易哈希不匹配</li><li>未知祖先</li><li>祖先块的状态无法获取</li></ul><p>4.1 如果<code>block</code>存在，且是已知块，则写入已知块。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span><span class="token function">writeKnownBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.2 如果是祖先块的状态无法获取的错误，则作为侧链插入：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span><span class="token function">insertSideChain</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> it<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.3 如果是未来块或者未知祖先，则添加未来块：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span><span class="token function">addFutureBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意这里的添加 futureBlock，会被扔进futureBlocks里面去，在NewBlockChain的时候会开启新的goroutine:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> bc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  futureTimer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">{</span>
    <span class="token keyword">select</span><span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span>futureTimer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
   bc<span class="token punctuation">.</span><span class="token function">procFutureBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">procFutureBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> hash <span class="token operator">:=</span> <span class="token keyword">range</span> bc<span class="token punctuation">.</span>futureBlocks<span class="token punctuation">.</span><span class="token function">Keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> block<span class="token punctuation">,</span> exist <span class="token operator">:=</span> bc<span class="token punctuation">.</span>futureBlocks<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>
   blocks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>blocks<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token operator">...</span>
  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> blocks <span class="token punctuation">{</span>
   bc<span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">[</span>i <span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会开启一个计时器，每5秒就会去执行插入这些未来的块。</p><p>4.4 如果是其他错误，直接中断，并且报告坏块。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span>futureBlocks<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
bc<span class="token punctuation">.</span><span class="token function">reportBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：没有校验错误</p><p>5.1 如果是坏块，则报告；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> BadHashes<span class="token punctuation">[</span>block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   bc<span class="token punctuation">.</span><span class="token function">reportBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrBlacklistedHash<span class="token punctuation">)</span>
   <span class="token keyword">return</span> it<span class="token punctuation">.</span>index<span class="token punctuation">,</span> ErrBlacklistedHash
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.2 如果是未知块，则写入未知块；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">==</span> ErrKnownBlock <span class="token punctuation">{</span>
   logger <span class="token operator">:=</span> log<span class="token punctuation">.</span>Debug
   <span class="token keyword">if</span> bc<span class="token punctuation">.</span>chainConfig<span class="token punctuation">.</span>Clique <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    logger <span class="token operator">=</span> log<span class="token punctuation">.</span>Warn
   <span class="token punctuation">}</span>
  <span class="token operator">...</span>
   <span class="token keyword">if</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">writeKnownBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> it<span class="token punctuation">.</span>index<span class="token punctuation">,</span> err
   <span class="token punctuation">}</span>
   stats<span class="token punctuation">.</span>processed<span class="token operator">++</span>
   lastCanon <span class="token operator">=</span> block
   <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.3 根据给定trie，创建状态；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>parent <span class="token operator">:=</span> it<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   parent <span class="token operator">=</span> bc<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  statedb<span class="token punctuation">,</span> err <span class="token operator">:=</span> state<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>Root<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>stateCache<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.4执行块中的交易： (<strong>稍后会在下节对此进行详细分析</strong>)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>receipts<span class="token punctuation">,</span> logs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span>processor<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>vmConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.5 使用默认的validator校验状态：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span>validator<span class="token punctuation">.</span><span class="token function">ValidateState</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> usedGas<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.6 将块写入到区块链中并获取状态： (<strong>稍后会在下节对此进行详细分析</strong>)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>status<span class="token punctuation">,</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">writeBlockWithState</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> receipts<span class="token punctuation">,</span> logs<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥：校验写入区块的状态</p><ul><li><code>CanonStatTy</code> ： 插入成功新的block</li><li><code>SideStatTy</code>：插入成功新的分叉区块</li><li><code>Default</code>：插入未知状态的block</li></ul><p>⑦：如果还有块，并且是未来块的话，那么将块添加到未来块的缓存中去</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span><span class="token function">addFutureBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此<code>insertChain</code> 大概介绍清楚。</p><hr><h3 id="执行块中交易" tabindex="-1"><a class="header-anchor" href="#执行块中交易" aria-hidden="true">#</a> 执行块中交易</h3><p>在我们将区块上链，有一个关键步骤就是执行区块交易：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>receipts<span class="token punctuation">,</span> logs<span class="token punctuation">,</span> usedGas<span class="token punctuation">,</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span>processor<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>vmConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入函数，具体分析：</p><p>①：准备要用的字段，循环执行交易</p><p>关键函数：<code>ApplyTransaction</code>,根据此函数返回收据。</p><p>1.1 将交易结构转成<code>Message</code>结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">AsMessage</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">MakeSigner</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.2 创建要在EVM环境中使用的新上下文</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>context <span class="token operator">:=</span> <span class="token function">NewEVMContext</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> header<span class="token punctuation">,</span> bc<span class="token punctuation">,</span> author<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.3 创建一个新环境，其中包含有关事务和调用机制的所有相关信息。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>vmenv := vm.NewEVM(context, statedb, config, cfg)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.4 将交易应用到当前状态(包含在env中)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token boolean">_</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ApplyMessage</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> gp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这部分代码继续跟进：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ApplyMessage</span><span class="token punctuation">(</span>evm <span class="token operator">*</span>vm<span class="token punctuation">.</span>EVM<span class="token punctuation">,</span> msg Message<span class="token punctuation">,</span> gp <span class="token operator">*</span>GasPool<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">NewStateTransition</span><span class="token punctuation">(</span>evm<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> gp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">TransitionDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NewStateTransition</code> 是一个状态转换对象，<code>TransitionDb()</code> 负责转换交易状态，继续跟进： 先进行<code>preCheck</code>，用来校验<code>nonce</code>是否正确</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>st<span class="token punctuation">.</span><span class="token function">preCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">CheckNonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nonce <span class="token operator">:=</span> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> nonce <span class="token operator">&lt;</span> st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> ErrNonceTooHigh
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nonce <span class="token operator">&gt;</span> st<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> ErrNonceTooLow
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算所需<code>gas</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>gas<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">IntrinsicGas</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>data<span class="token punctuation">,</span> contractCreation<span class="token punctuation">,</span> homestead<span class="token punctuation">,</span> istanbul<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>扣除<code>gas</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">useGas</span><span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>st <span class="token operator">*</span>StateTransition<span class="token punctuation">)</span> <span class="token function">useGas</span><span class="token punctuation">(</span>amount <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> st<span class="token punctuation">.</span>gas <span class="token operator">&lt;</span> amount <span class="token punctuation">{</span>
  <span class="token keyword">return</span> vm<span class="token punctuation">.</span>ErrOutOfGas
 <span class="token punctuation">}</span>
 st<span class="token punctuation">.</span>gas <span class="token operator">-=</span> amount
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是合约交易,则新建一个合约</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ret<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span>gas<span class="token punctuation">,</span> vmerr <span class="token operator">=</span> evm<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> st<span class="token punctuation">.</span>data<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gas<span class="token punctuation">,</span> st<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不是合约交易，则增加<code>nonce</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">SetNonce</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">GetNonce</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
ret<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gas<span class="token punctuation">,</span> vmerr <span class="token operator">=</span> evm<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span>data<span class="token punctuation">,</span> st<span class="token punctuation">.</span>gas<span class="token punctuation">,</span> st<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注<code>evm.call</code>方法：</p><p><em>检查账户是否有足够的气体进行转账</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">CanTransfer</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> gas<span class="token punctuation">,</span> ErrInsufficientBalance
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>如果stateDb不存在此账户，则新建账户</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">.</span><span class="token function">CreateAccount</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>执行转账操作</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>evm<span class="token punctuation">.</span><span class="token function">Transfer</span><span class="token punctuation">(</span>evm<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> caller<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>创建合约</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>contract <span class="token operator">:=</span> <span class="token function">NewContract</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> to<span class="token punctuation">,</span> value<span class="token punctuation">,</span> gas<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>执行合约</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ret<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span>evm<span class="token punctuation">,</span> contract<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加余额</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> st<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">AddBalance</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">gasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span>gasPrice<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回到<code>ApplyTransaction</code></p><p>1.5 调用<code>IntermediateRoot</code>计算状态<code>trie</code>的当前根哈希值。</p><p>最终确定所有肮脏的存储状态，并把它们写进<code>trie</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s<span class="token punctuation">.</span><span class="token function">Finalise</span><span class="token punctuation">(</span>deleteEmptyObjects<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将trie根设置为当前的根哈希并将给定的<code>object</code>写入到<code>trie</code>中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>obj<span class="token punctuation">.</span><span class="token function">updateRoot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>db<span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">updateStateObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>1.6 创建收据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>receipt <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">NewReceipt</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> <span class="token operator">*</span>usedGas<span class="token punctuation">)</span>
 receipt<span class="token punctuation">.</span>TxHash <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 receipt<span class="token punctuation">.</span>GasUsed <span class="token operator">=</span> gas
 <span class="token keyword">if</span> msg<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  receipt<span class="token punctuation">.</span>ContractAddress <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">CreateAddress</span><span class="token punctuation">(</span>vmenv<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Origin<span class="token punctuation">,</span> tx<span class="token punctuation">.</span><span class="token function">Nonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// Set the receipt logs and create a bloom for filtering</span>
 receipt<span class="token punctuation">.</span>Logs <span class="token operator">=</span> statedb<span class="token punctuation">.</span><span class="token function">GetLogs</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 receipt<span class="token punctuation">.</span>Bloom <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">CreateBloom</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Receipts<span class="token punctuation">{</span>receipt<span class="token punctuation">}</span><span class="token punctuation">)</span>
 receipt<span class="token punctuation">.</span>BlockHash <span class="token operator">=</span> statedb<span class="token punctuation">.</span><span class="token function">BlockHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 receipt<span class="token punctuation">.</span>BlockNumber <span class="token operator">=</span> header<span class="token punctuation">.</span>Number
 receipt<span class="token punctuation">.</span>TransactionIndex <span class="token operator">=</span> <span class="token function">uint</span><span class="token punctuation">(</span>statedb<span class="token punctuation">.</span><span class="token function">TxIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：最后完成区块，应用任何共识引擎特定的额外功能(例如区块奖励)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p<span class="token punctuation">.</span>engine<span class="token punctuation">.</span><span class="token function">Finalize</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>bc<span class="token punctuation">,</span> header<span class="token punctuation">,</span> statedb<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Transactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Uncles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">Finalize</span><span class="token punctuation">(</span>chain consensus<span class="token punctuation">.</span>ChainReader<span class="token punctuation">,</span> header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> state <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> txs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> uncles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Accumulate any block and uncle rewards and commit the final state root</span>
 <span class="token comment">//累积任何块和叔叔的奖励并提交最终状态树根</span>
 <span class="token function">accumulateRewards</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> uncles<span class="token punctuation">)</span>
 header<span class="token punctuation">.</span>Root <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">IntermediateRoot</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止<code>bc.processor.Process</code>执行完毕，返回<code>receipts</code>.</p><hr><h3 id="校验状态" tabindex="-1"><a class="header-anchor" href="#校验状态" aria-hidden="true">#</a> 校验状态</h3><p>大致包括4部分的校验：</p><p>①：校验使用的<code>gas</code>是否相等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> block<span class="token punctuation">.</span><span class="token function">GasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> usedGas <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid gas used (remote: %d local: %d)&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">GasUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> usedGas<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：校验bloom是否相等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rbloom <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">CreateBloom</span><span class="token punctuation">(</span>receipts<span class="token punctuation">)</span>
 <span class="token keyword">if</span> rbloom <span class="token operator">!=</span> header<span class="token punctuation">.</span>Bloom <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid bloom (remote: %x  local: %x)&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Bloom<span class="token punctuation">,</span> rbloom<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：校验收据哈希是否相等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>receiptSha <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">DeriveSha</span><span class="token punctuation">(</span>receipts<span class="token punctuation">)</span>
 <span class="token keyword">if</span> receiptSha <span class="token operator">!=</span> header<span class="token punctuation">.</span>ReceiptHash <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid receipt root hash (remote: %x local: %x)&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>ReceiptHash<span class="token punctuation">,</span> receiptSha<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：校验merkleroot 是否相等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> root <span class="token operator">:=</span> statedb<span class="token punctuation">.</span><span class="token function">IntermediateRoot</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> header<span class="token punctuation">.</span>Root <span class="token operator">!=</span> root <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid merkle root (remote: %x local: %x)&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Root<span class="token punctuation">,</span> root<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="将块和关联状态写入到数据库" tabindex="-1"><a class="header-anchor" href="#将块和关联状态写入到数据库" aria-hidden="true">#</a> 将块和关联状态写入到数据库</h3><p>函数：<strong>WriteBlockWithState</strong></p><p>①：计算块的<code>total td</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ptd <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">GetTd</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">ParentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：添加待插入块本身的<code>td</code> ,并将此时最新的<code>total td</code> 存储到数据库中。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>bc.hc.WriteTd(block.Hash(), block.NumberU64(), externTd)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：将块的<code>header</code>和<code>body</code>分别序列化到数据库</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rawdb<span class="token punctuation">.</span><span class="token function">WriteBlock</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>db<span class="token punctuation">,</span> block<span class="token punctuation">)</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">WriteBody</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：将状态写入底层内存<code>Trie</code>数据库</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>state<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>chainConfig<span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤：遍历节点数据写入到磁盘</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>triedb<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Root<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥：存储一个块的所有交易数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>rawdb<span class="token punctuation">.</span><span class="token function">WriteReceipts</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> receipts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑦：将新的<code>head</code>块注入到当前链中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> status <span class="token operator">==</span> CanonStatTy <span class="token punctuation">{</span>
  bc<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>存储分配给规范块的哈希</li><li>存储头块的哈希</li><li>存储最新的快</li><li>更新<code>currentFastBlock</code></li></ul><p>⑧：发送<code>chainEvent</code>事件或者<code>ChainSideEvent</code>事件或者<code>ChainHeadEvent</code>事件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> status <span class="token operator">==</span> CanonStatTy <span class="token punctuation">{</span>
  bc<span class="token punctuation">.</span>chainFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>ChainEvent<span class="token punctuation">{</span>Block<span class="token punctuation">:</span> block<span class="token punctuation">,</span> Hash<span class="token punctuation">:</span> block<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Logs<span class="token punctuation">:</span> logs<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>logs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   bc<span class="token punctuation">.</span>logsFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>logs<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">if</span> emitHeadEvent <span class="token punctuation">{</span>
   bc<span class="token punctuation">.</span>chainHeadFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>ChainHeadEvent<span class="token punctuation">{</span>Block<span class="token punctuation">:</span> block<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  bc<span class="token punctuation">.</span>chainSideFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>ChainSideEvent<span class="token punctuation">{</span>Block<span class="token punctuation">:</span> block<span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此writeBlockWithState 结束，从上面可以知道，insertChain的最终还是调用了<code>writeBlockWithState</code>的insert方法完成了最终的上链入库动作。</p><p>最后整个<code>insertChain</code> <em>函数，如果已经完成了插入，就发送<code>chain head</code>事件</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> lastCanon <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> bc<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> lastCanon<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   bc<span class="token punctuation">.</span>chainHeadFeed<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>ChainHeadEvent<span class="token punctuation">{</span>lastCanon<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较常见的有这么几处会进行订阅<code>chain head</code> 事件：</p><ol><li><p>在tx_pool.go中，收到此事件会进行换head的操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pool<span class="token punctuation">.</span>chainHeadSub <span class="token operator">=</span> pool<span class="token punctuation">.</span>chain<span class="token punctuation">.</span><span class="token function">SubscribeChainHeadEvent</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>chainHeadCh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在worker.go中,其他节点的矿工收到此事件就会停止当前的挖矿，继续下一个挖矿任务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>worker<span class="token punctuation">.</span>chainHeadSub <span class="token operator">=</span> eth<span class="token punctuation">.</span><span class="token function">BlockChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SubscribeChainHeadEvent</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>chainHeadCh<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>到此整个区块上链入库就完成了，最后再送上一张总结的图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glyqxrr9p0j31530u0jz0.jpg" alt="image-20201224104046731" loading="lazy"></p><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,141),d={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"};function b(m,g){const a=u("ExternalLinkIcon");return o(),c("div",null,[l,n("blockquote",null,[n("p",null,[s("获取区块链所有相关文章以及资料，请参阅："),n("a",k,[s("https://github.com/blockchainGuide/"),t(a)])])]),r,n("blockquote",null,[n("p",null,[n("a",d,[s("https://mindcarver.cn"),t(a)])]),n("p",null,[n("a",v,[s("https://github.com/blockchainGuide"),t(a)])])])])}const y=e(i,[["render",b],["__file","10.etheric_fang_block_on_the_chain_into_the_Treasury.html.vue"]]);export{y as default};
