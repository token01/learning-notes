import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as n,b as s,d as a,w as r,e as t,r as o}from"./app.d3a29ae6.js";const d={},u=n("h2",{id:"solidity",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#solidity","aria-hidden":"true"},"#"),s(" Solidity")],-1),k={href:"https://solidity.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://solidity.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),h={href:"https://learnblockchain.cn/docs/solidity/",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),g={href:"https://github.com/OpenZeppelin/openzeppelin-contracts",target:"_blank",rel:"noopener noreferrer"},_=t(`<blockquote><p>以太坊虚拟机（EVM）是一个 “The World Machine” 所以请原谅它简陋的语法特性、令人抓狂的debug体验、近乎贫瘠的类库支持、动不动就需要插入汇编语句来解决一下问题。Solidity 语言在这种环境下必须严格遵循的设计原则以及权衡后必须付出的代价。</p></blockquote><h2 id="abi" tabindex="-1"><a class="header-anchor" href="#abi" aria-hidden="true">#</a> ABI</h2><p>Application Binary Interface(ABI)</p><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h2><p><strong>栈</strong> 用于存储字节码指令的操作数。在Solidity中，局部变量若是整型、定长字节数组等类型，就会随着指令的运行入栈、出栈。对于这类变量，无法强行改变它们的存储方式，如果在它们之前放置memory修饰符，编译会报错。<br><strong>内存</strong> 类似java中的堆，它用于储存&quot;对象&quot;。在Solidity编程中，如果一个局部变量属于变长字节数组、字符串、结构体等类型，其通常会被memory修饰符修饰，以表明存储在内存中。<br><strong>状态存储</strong> 用于存储合约的状态字段。从实现而言，不同的链可能采用不同实现，比较经典的是以太坊所采用的MPT树。由于MPT树性能、扩展性等问题，FISCO BCOS放弃了这一结构，而采用了分布式存储，通过rocksdb或mysql来存储状态数据，使存储的性能、可扩展性得到提高。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>contract Demo<span class="token punctuation">{</span>
    <span class="token comment">//状态存储</span>
    uint <span class="token keyword">private</span> _state<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">uint state</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">//栈存储</span>
        uint i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//内存存储</span>
        string memory str <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-log" tabindex="-1"><a class="header-anchor" href="#event-log" aria-hidden="true">#</a> Event/Log</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
pragma solidity <span class="token operator">&gt;=</span><span class="token number">0.4</span><span class="token number">.21</span> <span class="token operator">&lt;</span><span class="token number">0.7</span><span class="token number">.0</span><span class="token punctuation">;</span>
contract Demo <span class="token punctuation">{</span>
  <span class="token comment">// 定义事件</span>
  event <span class="token function">Transfer</span><span class="token punctuation">(</span>address indexed from<span class="token punctuation">,</span> address indexed to<span class="token punctuation">,</span> uint256 value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">bid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> payable <span class="token punctuation">{</span>
    <span class="token comment">//触发事件</span>
    emit <span class="token function">Transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _to<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最多三个参数可以使用 <code>indexed</code> 属性</p><ul><li>这些参数会使用 <code>keccak-256</code> 哈希后得到值被作为 <code>topic</code> 保存在区块的 Event 里</li><li>API调用时可以使用这些 <code>indexed</code> 参数的特定值来进行过滤</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> event <span class="token operator">=</span> demoContract<span class="token punctuation">.</span><span class="token function">Transfer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>高效使用：</p><ul><li>异步获取执行结果，并可提供过滤器，支持参数的检索和过滤。</li><li>提供一种回调机制，在事件执行成功后，由节点向注册监听的SDK发送回调通知，触发回调函数被执行。Oracle 的原理</li><li>存储合约数据，巧用日志去存储数据，可以大大减少交易费用 <blockquote><p>storage存储的大概价格为：每32字节需要消耗20000Gas，而日志存储价格大概为每字节8Gas</p></blockquote></li></ul><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h2><p><strong>修饰函数</strong></p><ul><li><code>pure</code> - 不允许修改和访问状态</li><li><code>view</code> - 不允许修改状态</li><li><code>payable</code> - 允许调用接收 以太币</li></ul><p><strong>修饰函数和变量</strong></p><ul><li><p><code>constant</code></p><p>函数：与<code>view</code>等价。<br> 变量：不允许赋值（初始化除外），它不会占据 <code>storage slot</code></p></li><li><p><code>external</code> - 可以从其他合约和交易中调用，不可内部调用，在接收大量数据时更为高效。</p><p>当函数的某个参数非常大时，如果显式地将函数标记为external，可以强制将函数存储的位置设置为 <code>calldata</code>，这会节约函数执行时所需存储或计算资源。</p></li><li><p><code>public</code> - 可以在内部或通过消息调用。没指定默认为 public</p><p>变量：会自动生成一个 <code>getter</code> 函数</p></li><li><p><code>internal</code> - 只能是内部访问</p><p>变量：状态变量的修饰符默认是<code>internal</code></p></li><li><p><code>private</code> - 仅在当前定义它们的合约中使用，并且不能被派生合约使用</p></li></ul><p><strong>修饰事件参数</strong></p><ul><li><code>indexed</code> - 可作为索引</li><li><code>anonymous</code> - 事件签名的哈希值不会在 <code>topic</code> 中存储</li></ul><p><strong>修饰器</strong></p>`,21),f=n("code",null,"modifier",-1),x={href:"https://solidity-cn.readthedocs.io/zh/develop/contracts.html#modifier",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"有点面向切面编程的感觉。",-1),E=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>event <span class="token function">LogStartMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event <span class="token function">LogEndMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
modifier logMethod <span class="token punctuation">{</span>
    emit <span class="token function">LogStartMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _<span class="token punctuation">;</span><span class="token comment">//表示所修饰函数中的代码,也就是在函数的最前与最后插入代码</span>
    emit <span class="token function">LogEndMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">doing</span><span class="token punctuation">(</span><span class="token parameter">address _owner</span><span class="token punctuation">)</span> <span class="token keyword">public</span> logMethod <span class="token punctuation">{</span>
    <span class="token comment">// something...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽象类与接口" tabindex="-1"><a class="header-anchor" href="#抽象类与接口" aria-hidden="true">#</a> 抽象类与接口</h2>`,2),j={href:"https://solidity-cn.readthedocs.io/zh/develop/contracts.html#index-17",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><ul><li>一个合约中，入参、返回值、内部变量不能超过了16个</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Compiler error<span class="token operator">:</span> Stack too deep<span class="token punctuation">,</span> <span class="token keyword">try</span> removing local variables<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>EVM所设计用于最大的栈深度为16。所有的计算都在一个栈内执行，对栈的访问只限于其顶端，限制方式为：允许拷贝最顶端16个元素中的一个到栈顶，或者将栈顶元素和下面16个元素中的一个交换。所有其他操作都只能取最顶的几个元素，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但无法只访问栈上指定深度的那个元素，除非先从栈顶移除其他元素。</p>`,4),w=n("strong",null,"建议",-1);function M(S,A){const e=o("ExternalLinkIcon"),i=o("RouterLink");return c(),l("div",null,[u,n("p",null,[n("a",k,[s("Solidity"),a(e)]),s(" 是一门面向合约的、为实现智能合约而创建的高级编程语言，运作在以太坊虚拟机（EVM）上。")]),n("p",null,[n("a",v,[s("官方文档"),a(e)]),m,n("a",h,[s("非官方中文文档"),a(e)]),b,n("a",g,[s("Openzeppelin合约类库"),a(e)])]),_,n("ul",null,[n("li",null,[n("p",null,[f,s(" - "),n("a",x,[s("修饰器"),a(e)])]),y])]),E,n("p",null,[n("a",j,[s("docs"),a(e)]),s(" 与其他语言类似。但需要注意合适地使用接口或抽象合约有助于增强合约设计的可扩展性。但是，由于区块链EVM上计算和存储资源的限制，切忌过度设计，这也是从高级语言技术栈转到Solidity开发的老司机常常会陷入的天坑。")]),q,n("p",null,[w,s(" 使用结构体或数组来封装入参或返回值，达到减少栈顶元素使用的目的，从而避免此错误。对于智能合约也应该"),a(i,{to:"/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"},{default:r(()=>[s("避免过多的设计")]),_:1}),s("。需要分布式协作的重要数据才上链，非必需数据不上链；链上验证，链下授权。")])])}const V=p(d,[["render",M],["__file","智能合约.html.vue"]]);export{V as default};
