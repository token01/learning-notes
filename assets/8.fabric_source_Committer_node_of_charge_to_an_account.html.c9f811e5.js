import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as e,a as n,b as p,d as o,e as c,r as l}from"./app.c2a49a29.js";const i={},u=c(`<blockquote><p>浅谈hyperledger fabric源码|Committer记账节点</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3h9nzkclj31c00u0wt0.jpg" alt="facdd49577decf1dc62abc9fc97caf97" loading="lazy"></p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>Committer</code>记账节点功能模块的设计与实现的源代码主要分布在下表：</p><table><thead><tr><th style="text-align:center;">源码目录</th><th style="text-align:center;"></th><th style="text-align:center;">文件</th><th style="text-align:center;">功能阐述</th></tr></thead><tbody><tr><td style="text-align:center;">core</td><td style="text-align:center;">committer</td><td style="text-align:center;">Txvalidator</td><td style="text-align:center;">交易验证器功能模块</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">committer.go</td><td style="text-align:center;">账本提交器接口定义</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">committer_impl.go</td><td style="text-align:center;">账本提交器实现</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">ledger</td><td style="text-align:center;">kvledge</td><td style="text-align:center;">kvLedger账本功能模块</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">ledgerstorage</td><td style="text-align:center;">账本数据存储对象模块</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">pvtdatastorage</td><td style="text-align:center;">隐私数据存储对象模块</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">ledgermgmt</td><td style="text-align:center;">账本管理模块</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">customtx</td><td style="text-align:center;">配置交易处理器模块</td></tr><tr><td style="text-align:center;">common</td><td style="text-align:center;">ledger</td><td style="text-align:center;">blockstorage</td><td style="text-align:center;">区块存储模块</td></tr><tr><td style="text-align:center;">protos</td><td style="text-align:center;">Common</td><td style="text-align:center;">ledger</td><td style="text-align:center;">protobuf消息定义模块</td></tr></tbody></table><p>接下来将会围绕着这部分的内容进行分析。</p><h2 id="创建committer功能模块" tabindex="-1"><a class="header-anchor" href="#创建committer功能模块" aria-hidden="true">#</a> 创建Committer功能模块</h2><p>Peer节点通过请求调用<code>CSCC</code>系统链码加入应用通道，执行<code>joinChain()→peer.Create- ChainFromBlock()→createChain()</code>函数，基于应用通道创世区块创建通道的链结构对象，用于管理账本、通道配置等资源，以正常接收通道的账本区块。</p><p>接着，创建了交易验证器，并封装了<code>vsccValidatorImpl</code>结构对象用于支持调用VSCC链码。</p><p>然后，创建账本提交器，并定义回调函数<code>eventer</code>，用于提交账本后自动更新链结构上的最新配置区块对象。</p><p>现在进入到<code>createChain</code>里面分析：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">createChain</span><span class="token punctuation">(</span>cid <span class="token builtin">string</span><span class="token punctuation">,</span> ledger ledger<span class="token punctuation">.</span>PeerLedger<span class="token punctuation">,</span> cb <span class="token operator">*</span>common<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
  vcs <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 构造新的验证链码支持对象</span>
		<span class="token operator">*</span>chainSupport
		<span class="token operator">*</span>semaphore<span class="token punctuation">.</span>Weighted
		Support
	<span class="token punctuation">}</span><span class="token punctuation">{</span>cs<span class="token punctuation">,</span> validationWorkersSemaphore<span class="token punctuation">,</span> <span class="token function">GetSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	validator <span class="token operator">:=</span> txvalidator<span class="token punctuation">.</span><span class="token function">NewTxValidator</span><span class="token punctuation">(</span>vcs<span class="token punctuation">)</span> <span class="token comment">// 创建交易验证器</span>
	<span class="token comment">// 创建账本提交器</span>
	c <span class="token operator">:=</span> committer<span class="token punctuation">.</span><span class="token function">NewLedgerCommitterReactive</span><span class="token punctuation">(</span>ledger<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>block <span class="token operator">*</span>common<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		chainID<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">GetChainIDFromBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">SetCurrConfigBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> chainID<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
	<span class="token comment">// 创建transient隐私数据存储对象</span>
	store<span class="token punctuation">,</span> err <span class="token operator">:=</span> transientStoreFactory<span class="token punctuation">.</span><span class="token function">OpenStore</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span><span class="token function">ConfigtxValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// 初始化指定通道上的Gossip消息模块。</span>
	<span class="token comment">// 若是主节点，则从Orderer服务节点获取区块数据。否则，从组织内其他节点同步数据</span>
	service<span class="token punctuation">.</span><span class="token function">GetGossipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InitializeChannel</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span><span class="token function">ConfigtxValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ordererAddresses<span class="token punctuation">,</span> service<span class="token punctuation">.</span>Support<span class="token punctuation">{</span>
		Validator<span class="token punctuation">:</span> validator<span class="token punctuation">,</span>
		Committer<span class="token punctuation">:</span> c<span class="token punctuation">,</span>
		Store<span class="token punctuation">:</span>     store<span class="token punctuation">,</span>
		Cs<span class="token punctuation">:</span>        simpleCollectionStore<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	chains<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> chains<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 构造新的链结构并插入Peer节点链结构</span>
	chains<span class="token punctuation">.</span>list<span class="token punctuation">[</span>cid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>chain<span class="token punctuation">{</span>
		cs<span class="token punctuation">:</span>        cs<span class="token punctuation">,</span> <span class="token comment">// 链支持对象</span>
		cb<span class="token punctuation">:</span>        cb<span class="token punctuation">,</span> <span class="token comment">// 配置区块</span>
		committer<span class="token punctuation">:</span> c<span class="token punctuation">,</span>  <span class="token comment">// 账本提交器</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证交易数据的合法性" tabindex="-1"><a class="header-anchor" href="#验证交易数据的合法性" aria-hidden="true">#</a> 验证交易数据的合法性</h2><p>验证交易入口：<code>core/committer/txvalidator/validator.go/validateTx()</code>,主要做了以下几件事</p><p>①：<em>解析获取交易数据的Envelope结构对象</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> env<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">GetEnvelopeFromBlock</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：<em>检查交易格式是否正确、签名是否合法、交易内容是否被篡改</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> payload<span class="token punctuation">,</span> txResult <span class="token operator">=</span> validation<span class="token punctuation">.</span><span class="token function">ValidateTransaction</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> v<span class="token punctuation">.</span>support<span class="token punctuation">.</span><span class="token function">Capabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> txResult <span class="token operator">!=</span> peer<span class="token punctuation">.</span>TxValidationCode_VALID <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid transaction with index %d&quot;</span><span class="token punctuation">,</span> tIdx<span class="token punctuation">)</span>
			results <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>blockValidationResult<span class="token punctuation">{</span>
				tIdx<span class="token punctuation">:</span>           tIdx<span class="token punctuation">,</span>
				validationCode<span class="token punctuation">:</span> txResult<span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<em>解析获取通道头部</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">UnmarshalChannelHeader</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ChannelHeader<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：<em>检查通道链结构是否存在</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>channel <span class="token operator">:=</span> chdr<span class="token punctuation">.</span>ChannelId
<span class="token keyword">if</span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">chainExists</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：<em>根据<code>Header</code>的类型来分别处理消息</em></p><p>5.1 <em>普通交易消息</em></p><p>先从账本获取指定交易的ID数据，检查是否存在，然后获取交易读写集，并检查写集的合法性，调用<code>VSCC</code>验证交易背书策略，接着获取交易链码实例，并设置调用链码实例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>txID <span class="token operator">=</span> chdr<span class="token punctuation">.</span>TxId
<span class="token comment">// 从账本获取指定交易的ID数据，检查是否存在</span>
<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>support<span class="token punctuation">.</span><span class="token function">Ledger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTransactionByID</span><span class="token punctuation">(</span>txID<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取交易读写集，并检查写集的合法性，调用VSCC验证交易背书策略</span>
err<span class="token punctuation">,</span> cde <span class="token operator">:=</span> v<span class="token punctuation">.</span>vscc<span class="token punctuation">.</span><span class="token function">VSCCValidateTx</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> d<span class="token punctuation">,</span> env<span class="token punctuation">)</span>
i<span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 获取交易链码实例</span>
invokeCC<span class="token punctuation">,</span> upgradeCC<span class="token punctuation">,</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">getTxCCInstance</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token comment">// 设置调用链码实例</span>
txsChaincodeName <span class="token operator">=</span> invokeCC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.2 <em>通道配置交易消息</em></p><p>先解析获取配置交易对象，然后更新通道配置。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 通道配置交易消息，解析获取配置交易对象</span>
configEnvelope<span class="token punctuation">,</span> err <span class="token operator">:=</span> configtx<span class="token punctuation">.</span><span class="token function">UnmarshalConfigEnvelope</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token comment">// 更新通道配置</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span>support<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span>configEnvelope<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.3 如果是<em>Peer资源更新消息</em>，直接构造<code>blockValidationResult</code>返回</p><p>⑥：<em>序列化封装交易Envelope结构对象</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot marshal transaction: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			results <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>blockValidationResult<span class="token punctuation">{</span>
				tIdx<span class="token punctuation">:</span>           tIdx<span class="token punctuation">,</span>
				validationCode<span class="token punctuation">:</span> peer<span class="token punctuation">.</span>TxValidationCode_MARSHAL_TX_ERROR<span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑦：<em>最后通过了交易，基于上述参数构造区块验证结果对象</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>results <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>blockValidationResult<span class="token punctuation">{</span>
			tIdx<span class="token punctuation">:</span>                 tIdx<span class="token punctuation">,</span>
			txsChaincodeName<span class="token punctuation">:</span>     txsChaincodeName<span class="token punctuation">,</span>
			txsUpgradedChaincode<span class="token punctuation">:</span> txsUpgradedChaincode<span class="token punctuation">,</span>
			validationCode<span class="token punctuation">:</span>       peer<span class="token punctuation">.</span>TxValidationCode_VALID<span class="token punctuation">,</span>
			txid<span class="token punctuation">:</span>                 txID<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="账本提交器" tabindex="-1"><a class="header-anchor" href="#账本提交器" aria-hidden="true">#</a> 账本提交器</h2><p>账本提交器的<code>LedgerCommitter.CommitWithPvtData()</code>方法负责执行具体的账本提交工作。该方法首先调用<code>LedgerCommitter</code>对象的<code>lc.preCommit(blockAndPvtData.Block)</code>方法，预处理待提交的区块数据，对于配置区块执行自定义<code>lc.eventer(block)</code>回调函数，即从当前区块中解析出链ID，再调用<code>SetCurrConfigBlock</code>()函数，从本地链结构字典中获取关联的链结构<code>chains.list[cid]</code>并更新其最新的配置区块。接着，调用<code>lc.PeerLedger.CommitWithPvtData(blockAndPvtData)→kvLedger.CommitWithPvtData()</code>方法提交数据到账本中，这是账本提交器的核心工作方法。当成功提交账本后，调用<code>lc.postCommit(blockAndPvtData.Block)</code>方法，基于该区块创建区块事件与过滤区块事件，并执行<code>producer.Send()</code>方法将两个事件发送到事件服务器，通知订阅客户端有新区块到达。</p><p>进入到<code>CommitWithPvtData</code>()方法中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>kvLedger<span class="token punctuation">)</span> <span class="token function">CommitWithPvtData</span><span class="token punctuation">(</span>pvtdataAndBlock <span class="token operator">*</span>ledger<span class="token punctuation">.</span>BlockAndPvtData<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	block <span class="token operator">:=</span> pvtdataAndBlock<span class="token punctuation">.</span>Block                 <span class="token comment">// 获取区块对象</span>
	blockNo <span class="token operator">:=</span> pvtdataAndBlock<span class="token punctuation">.</span>Block<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Number <span class="token comment">// 获取区块号</span>
	<span class="token comment">// 验证并准备区块和隐私数据对象</span>
	err <span class="token operator">=</span> l<span class="token punctuation">.</span>txtmgmt<span class="token punctuation">.</span><span class="token function">ValidateAndPrepare</span><span class="token punctuation">(</span>pvtdataAndBlock<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">//提交区块和隐私数据到账本中</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> l<span class="token punctuation">.</span>blockStore<span class="token punctuation">.</span><span class="token function">CommitWithPvtData</span><span class="token punctuation">(</span>pvtdataAndBlock<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>	
	<span class="token keyword">if</span> err <span class="token operator">=</span> l<span class="token punctuation">.</span>txtmgmt<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 更新有效交易数据到状态数据库</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">\`Error during commit to txmgr:%s\`</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> ledgerconfig<span class="token punctuation">.</span><span class="token function">IsHistoryDBEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Channel [%s]: Committing block [%d] transactions to history database&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>ledgerID<span class="token punctuation">,</span> blockNo<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span>historyDB<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 更新区块数据到历史数据库</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">\`Error during commit to history db:%s\`</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数主要也就做了以下比较关键的事情：</p><ul><li><code>ValidateAndPrepare</code>:验证并准备区块和隐私数据对象</li><li><code>CommitWithPvtData</code>:提交区块和隐私数据到账本中</li><li><code>txtmgmt.Commit()</code>:更新有效交易数据到状态数据库</li><li><code>l.historyDB.Commit(block)</code>:更新区块数据到历史数据库</li></ul><p>接下来将分别介绍这些功能的细节。</p><h3 id="验证并准备区块和隐私数据对象" tabindex="-1"><a class="header-anchor" href="#验证并准备区块和隐私数据对象" aria-hidden="true">#</a> 验证并准备区块和隐私数据对象</h3><p>函数调用：</p><blockquote><p>err = l.txtmgmt.ValidateAndPrepare(pvtdataAndBlock, true)</p><p>-&gt; batch, err := txmgr.validator.ValidateAndPrepareBatch(blockAndPvtdata, doMVCCValidation)</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">validateAndPreparePvtBatch</span><span class="token punctuation">(</span>block <span class="token operator">*</span>valinternal<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> pvtdata <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>ledger<span class="token punctuation">.</span>TxPvtData<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>privacyenabledstate<span class="token punctuation">.</span>PvtUpdateBatch<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pvtUpdates <span class="token operator">:=</span> privacyenabledstate<span class="token punctuation">.</span><span class="token function">NewPvtUpdateBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> block<span class="token punctuation">.</span>Txs <span class="token punctuation">{</span>
		<span class="token keyword">if</span> tx<span class="token punctuation">.</span>ValidationCode <span class="token operator">!=</span> peer<span class="token punctuation">.</span>TxValidationCode_VALID <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>tx<span class="token punctuation">.</span><span class="token function">ContainsPvtWrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		txPvtdata <span class="token operator">:=</span> pvtdata<span class="token punctuation">[</span><span class="token function">uint64</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>IndexInBlock<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// 获取指定交易的隐私数据</span>
		<span class="token keyword">if</span> txPvtdata <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                         <span class="token comment">// 跳过没有隐私数据的交易</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 检查是否需要验证隐私数据，默认都返回true</span>
		<span class="token keyword">if</span> <span class="token function">requiresPvtdataValidation</span><span class="token punctuation">(</span>txPvtdata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 验证隐私数据哈希值是否匹配</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">validatePvtdata</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> txPvtdata<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">var</span> pvtRWSet <span class="token operator">*</span>rwsetutil<span class="token punctuation">.</span>TxPvtRwSet
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		<span class="token comment">// 解析隐私数据写集合</span>
		<span class="token keyword">if</span> pvtRWSet<span class="token punctuation">,</span> err <span class="token operator">=</span> rwsetutil<span class="token punctuation">.</span><span class="token function">TxPvtRwSetFromProtoMsg</span><span class="token punctuation">(</span>txPvtdata<span class="token punctuation">.</span>WriteSet<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token comment">// 添加到隐私数据更新批量操作</span>
		<span class="token function">addPvtRWSetToPvtUpdateBatch</span><span class="token punctuation">(</span>pvtRWSet<span class="token punctuation">,</span> pvtUpdates<span class="token punctuation">,</span> version<span class="token punctuation">.</span><span class="token function">NewHeight</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Num<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>IndexInBlock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> pvtUpdates<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先遍历当前内部区块的交易列表<code>block.Txs</code>，对于其中的每个交易对象tx，需要过滤掉如下三类交易。</p><ul><li>交易验证码不为<code>TxValidationCode_VALID</code>的无效交易</li><li>不存在隐私数据写数据哈希值的交易</li><li>无隐私数据的交易</li></ul><p>如果交易通过了上述检查，则对于合法有效的交易tx及其隐私数据txPvtdata（TxPvt-Data类型），调用<code>validatePvtdata(tx，txPvtdata)</code>方法，以验证隐私数据哈希值的正确性，因为隐私数据都是由<code>Endorser</code>背书节点生成的，需要检查传播后的数据是否被篡改过。大致的过程如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">validatePvtdata</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>valinternal<span class="token punctuation">.</span>Transaction<span class="token punctuation">,</span> pvtdata <span class="token operator">*</span>ledger<span class="token punctuation">.</span>TxPvtData<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> nsPvtdata <span class="token operator">:=</span> <span class="token keyword">range</span> pvtdata<span class="token punctuation">.</span>WriteSet<span class="token punctuation">.</span>NsPvtRwset <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> collPvtdata <span class="token operator">:=</span> <span class="token keyword">range</span> nsPvtdata<span class="token punctuation">.</span>CollectionPvtRwset <span class="token punctuation">{</span>
			<span class="token comment">// 基于原始数据计算隐私数据哈希值</span>
			collPvtdataHash <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>collPvtdata<span class="token punctuation">.</span>Rwset<span class="token punctuation">)</span>
			<span class="token comment">// 获取 交易中的数据哈希值</span>
			hashInPubdata <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">RetrieveHash</span><span class="token punctuation">(</span>nsPvtdata<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> collPvtdata<span class="token punctuation">.</span>CollectionName<span class="token punctuation">)</span>
			<span class="token comment">// 比较隐私数据哈希值</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>collPvtdataHash<span class="token punctuation">,</span> hashInPubdata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提交区块和隐私数据到账本中" tabindex="-1"><a class="header-anchor" href="#提交区块和隐私数据到账本中" aria-hidden="true">#</a> 提交区块和隐私数据到账本中</h3><p>函数调用：<strong>l.blockStore.CommitWithPvtData(pvtdataAndBlock)</strong></p><blockquote><p>core/ledger/ledgerstorage/store.go/CommitWithPvtData</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">CommitWithPvtData</span><span class="token punctuation">(</span>blockAndPvtdata <span class="token operator">*</span>ledger<span class="token punctuation">.</span>BlockAndPvtData<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> blockAndPvtdata<span class="token punctuation">.</span>BlockPvtData <span class="token punctuation">{</span>
		<span class="token comment">// 添加隐私数据到隐私数据列表pvtdata</span>
		pvtdata <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>pvtdata<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 准备将隐私数据列表pvtdata提交到账本中，先提交再确认</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>pvtdataStore<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>blockAndPvtdata<span class="token punctuation">.</span>Block<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> pvtdata<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// 提交区块到账本中</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">AddBlock</span><span class="token punctuation">(</span>blockAndPvtdata<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>pvtdataStore<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// 确认提交隐私数据</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>pvtdataStore<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大概就做了以下几件事：</p><ol><li>准备提交隐私数据：<code>Prepare</code></li><li>提交区块数据：<code>s.AddBlock</code></li><li>确认提交隐私数据：<code>s.pvtdataStore.Commit()</code></li></ol><p>①：准备提交隐私数据</p><p>通过隐私数据存储对象调用s.pvtdataStore.Prepare()→store.Prepare()方法，将pvtdata列表中的每个隐私数据对象重新编码并构成KV键值对，添加到账本上隐私数据库的更新批量操作中，并同步更新到数据库中。最后，等待区块数据提交操作确认后，根据提交结果状态确认提交或回滚恢复隐私数据。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>store<span class="token punctuation">)</span> <span class="token function">Prepare</span><span class="token punctuation">(</span>blockNum <span class="token builtin">uint64</span><span class="token punctuation">,</span> pvtData <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ledger<span class="token punctuation">.</span>TxPvtData<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 检查合法性，执行Prepare()时应该是false，因为Commit和Rollback操作会重置该标志位</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>batchPending <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>ErrIllegalCall<span class="token punctuation">{</span><span class="token string">\`A pending batch exists as as result of last invoke to &quot;Prepare&quot; call.
			 Invoke &quot;Commit&quot; or &quot;Rollback&quot; on the pending batch before invoking &quot;Prepare&quot; function\`</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取下一个区块号</span>
	expectedBlockNum <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">nextBlockNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 检查区块号的合法性</span>
	<span class="token keyword">if</span> expectedBlockNum <span class="token operator">!=</span> blockNum <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>ErrIllegalArgs<span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Expected block number=%d, recived block number=%d&quot;</span><span class="token punctuation">,</span> expectedBlockNum<span class="token punctuation">,</span> blockNum<span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 创建数据库更新操作集合batch，记录所有需要删除或增加数据的key键</span>
	batch <span class="token operator">:=</span> leveldbhelper<span class="token punctuation">.</span><span class="token function">NewUpdateBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> key<span class="token punctuation">,</span> value <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token comment">// 遍历隐私数据列表，构造该隐私数据KV键值对</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> txPvtData <span class="token operator">:=</span> <span class="token keyword">range</span> pvtData <span class="token punctuation">{</span>
		<span class="token comment">// 遍历隐私数据列表，构造该隐私数据KV键值对</span>
		key <span class="token operator">=</span> <span class="token function">encodePK</span><span class="token punctuation">(</span>blockNum<span class="token punctuation">,</span> txPvtData<span class="token punctuation">.</span>SeqInBlock<span class="token punctuation">)</span>
		<span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">encodePvtRwSet</span><span class="token punctuation">(</span>txPvtData<span class="token punctuation">.</span>WriteSet<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 构造value值：隐私数据写集合</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Adding private data to LevelDB batch for block [%d], tran [%d]&quot;</span><span class="token punctuation">,</span> blockNum<span class="token punctuation">,</span> txPvtData<span class="token punctuation">.</span>SeqInBlock<span class="token punctuation">)</span>
		<span class="token comment">// 添加隐私数据键值对的操作</span>
		batch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 添加pendingCommitKey键值对的操作</span>
	batch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>pendingCommitKey<span class="token punctuation">,</span> emptyValue<span class="token punctuation">)</span>
	<span class="token comment">// 同步执行数据库的更新操作集合</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">WriteBatch</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// 更新状态标志位</span>
	s<span class="token punctuation">.</span>batchPending <span class="token operator">=</span> <span class="token boolean">true</span>
	logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Saved %d private data write sets for block [%d]&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pvtData<span class="token punctuation">)</span><span class="token punctuation">,</span> blockNum<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：提交区块数据</p><p>调用<code>s.AddBlock(blockAndPvtdata.Block)</code>方法，实际上是通过区块文件管理器，调用<code>blockfileMgr.addBlock()</code>方法，提交新区块<code>blockAndPvt-data.Block</code>到区块数据文件中，并保存新的区块检查点信息<code>newCPInfo</code>。接着，调用<code>indexBlock()</code>方法，建立当前区块的索引信息与索引检查点信息（当前区块号等），更新到区块索引数据库中。然后，调用<code>mgr.updateCheckpoint(newCPInfo)</code>方法，更新区块文件管理器上的区块检查点信息，再执行mgr.cpInfoCond.Broadcast()方法，广播唤醒所有等待该同步条件变量的程序，通知已有新区块提交到账本中。最后，调用<code>mgr.updateBlockchain-Info()</code>方法，更新区块链信息，如最新区块高度、最新区块头哈希值等。</p><p>③：确认提交隐私数据</p><p>调用 <code>s.pvtdataStore.Commit()</code>方法，执行隐私数据的提交确认操作。由于前面的<code>Prepare()</code>方法已经更新了所有的隐私数据键值对到数据库中，因此，该方法实际上是在隐私数据库上删除<code>pendingCommitKey</code>键值对，并添加<code>lastCommittedBlkkey</code>键值对，以保存最近提交成功的区块号<code>committingBlockNum</code>。最后，更新隐私数据相关标志位与变量，将等待提交确认标志位batchPending与标志位<code>isEmpty</code>设置为<code>false</code>，将<code>lastCommitted-Block</code>更新为提交账本的区块号<code>committingBlockNum</code>。</p><p>如果提交区块数据失败，则<code>CommitWithPvtData()</code>将通过隐私数据存储对象调用s.pvt-dataStore.Rollback()方法执行回滚操作，将已提交的隐私数据恢复到提交数据库之前的状态。</p><h3 id="提交数据到状态数据库" tabindex="-1"><a class="header-anchor" href="#提交数据到状态数据库" aria-hidden="true">#</a> 提交数据到状态数据库</h3><p>入口：<strong>core/ledger/kvledger/txmgmt/txmgr/lockbasedtxmgr/lockbased_txmgr.go/ Commit()</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>txmgr <span class="token operator">*</span>LockBasedTxMgr<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> txmgr<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">ApplyPrivacyAwareUpdates</span><span class="token punctuation">(</span>txmgr<span class="token punctuation">.</span>batch<span class="token punctuation">,</span>
		version<span class="token punctuation">.</span><span class="token function">NewHeight</span><span class="token punctuation">(</span>txmgr<span class="token punctuation">.</span>currentBlock<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>txmgr<span class="token punctuation">.</span>currentBlock<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>CommonStorageDB<span class="token punctuation">)</span> <span class="token function">ApplyPrivacyAwareUpdates</span><span class="token punctuation">(</span>updates <span class="token operator">*</span>UpdateBatch<span class="token punctuation">,</span> height <span class="token operator">*</span>version<span class="token punctuation">.</span>Height<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token function">addPvtUpdates</span><span class="token punctuation">(</span>updates<span class="token punctuation">.</span>PubUpdates<span class="token punctuation">,</span> updates<span class="token punctuation">.</span>PvtUpdates<span class="token punctuation">)</span>
	<span class="token function">addHashedUpdates</span><span class="token punctuation">(</span>updates<span class="token punctuation">.</span>PubUpdates<span class="token punctuation">,</span> updates<span class="token punctuation">.</span>HashUpdates<span class="token punctuation">,</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">BytesKeySuppoted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>VersionedDB<span class="token punctuation">.</span><span class="token function">ApplyUpdates</span><span class="token punctuation">(</span>updates<span class="token punctuation">.</span>PubUpdates<span class="token punctuation">.</span>UpdateBatch<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终会进入到下面的函数中：</p><blockquote><p>core/ledger/kvledger/txmgmt/statedb/stateleveldb/stateleveldb.go</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>vdb <span class="token operator">*</span>versionedDB<span class="token punctuation">)</span> <span class="token function">ApplyUpdates</span><span class="token punctuation">(</span>batch <span class="token operator">*</span>statedb<span class="token punctuation">.</span>UpdateBatch<span class="token punctuation">,</span> height <span class="token operator">*</span>version<span class="token punctuation">.</span>Height<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	dbBatch <span class="token operator">:=</span> leveldbhelper<span class="token punctuation">.</span><span class="token function">NewUpdateBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	namespaces <span class="token operator">:=</span> batch<span class="token punctuation">.</span><span class="token function">GetUpdatedNamespaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ns <span class="token operator">:=</span> <span class="token keyword">range</span> namespaces <span class="token punctuation">{</span>
		updates <span class="token operator">:=</span> batch<span class="token punctuation">.</span><span class="token function">GetUpdates</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span>
		<span class="token keyword">for</span> k<span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> updates <span class="token punctuation">{</span>
			compositeKey <span class="token operator">:=</span> <span class="token function">constructCompositeKey</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
			logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Channel [%s]: Applying key(string)=[%s] key(bytes)=[%#v]&quot;</span><span class="token punctuation">,</span> vdb<span class="token punctuation">.</span>dbName<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">)</span><span class="token punctuation">,</span> compositeKey<span class="token punctuation">)</span>

			<span class="token keyword">if</span> vv<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				dbBatch<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				dbBatch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>compositeKey<span class="token punctuation">,</span> statedb<span class="token punctuation">.</span><span class="token function">EncodeValue</span><span class="token punctuation">(</span>vv<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> vv<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	dbBatch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>savePointKey<span class="token punctuation">,</span> height<span class="token punctuation">.</span><span class="token function">ToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// Setting snyc to true as a precaution, false may be an ok optimization after further testing.</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> vdb<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">WriteBatch</span><span class="token punctuation">(</span>dbBatch<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ApplyUpdates()</code>方法主要做了以下几件事：</p><ol><li>遍历更新批量操作，对于其包含的键值对（键k与值vv），调用<code>constructCompositeKey(ns，k)</code>方法重新构造组合键<code>compositeKey</code></li><li>检查该键值对操作的删除标识。如果vv.Value为nil，说明该键值对更新操作为删除操作，则继续调用<code>dbBatch.Delete(compositeKey)</code>方法，添加该删除操作到<code>dbBatch</code>对象中。否则，将vv.Version中的区块号与交易序号经过编码序列化成字节数组，并与<code>vv.Value</code>组合成编码值<code>encodedValue</code>，再将其写入操作添加到dbBatch对象中</li><li>调用<code>dbBatch.Put</code>方法，添加保存点标识的<code>KV</code>键值对。其中，键为<code>[]byte{0x00}</code>，值为版本<code>height</code>经过编码序列化后的字节数组</li><li>调用<code>vdb.db.WriteBatch</code>方法，以原子操作方式将<code>dbBatch</code>更新同步到状态数据库上。注意，在写入数据库时同样会重新构造KV键值对，在原来的键上添加数据库名称（链ID/账本ID）前缀，即<code>[]byte(dbName)+[]byte{0x00}</code>，以隔离不同通道上的状态数据。</li></ol><h3 id="更新历史数据库" tabindex="-1"><a class="header-anchor" href="#更新历史数据库" aria-hidden="true">#</a> 更新历史数据库</h3><p>调用<code>l.historyDB.Commit(block)</code>方法，以更新区块<code>block</code>中经过<code>Endorser</code>背书的有效交易数据到历史数据库中，代码如下：</p><blockquote><p>core/ledger/kvledger/history/historydb/historyleveldb/historyleveldb.go</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>historyDB <span class="token operator">*</span>historyDB<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>block <span class="token operator">*</span>common<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>

	blockNo <span class="token operator">:=</span> block<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Number <span class="token comment">// 获取区块号</span>
	<span class="token comment">//Set the starting tranNo to 0</span>
	<span class="token keyword">var</span> tranNo <span class="token builtin">uint64</span>
<span class="token operator">...</span>
	<span class="token comment">// Get the invalidation byte array for the block</span>
	<span class="token comment">// 获取交易验证码列表</span>
	txsFilter <span class="token operator">:=</span> util<span class="token punctuation">.</span><span class="token function">TxValidationFlags</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span>common<span class="token punctuation">.</span>BlockMetadataIndex_TRANSACTIONS_FILTER<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token comment">// Initialize txsFilter if it does not yet exist (e.g. during testing, for genesis block, etc)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>txsFilter<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		txsFilter <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">NewTxValidationFlags</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		block<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span>common<span class="token punctuation">.</span>BlockMetadataIndex_TRANSACTIONS_FILTER<span class="token punctuation">]</span> <span class="token operator">=</span> txsFilter
	<span class="token punctuation">}</span>

	<span class="token comment">// write each tran&#39;s write set to history db</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> envBytes <span class="token operator">:=</span> <span class="token keyword">range</span> block<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Data <span class="token punctuation">{</span> <span class="token comment">// 遍历区块所有交易数据</span>
		<span class="token keyword">if</span> txsFilter<span class="token punctuation">.</span><span class="token function">IsInvalid</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>tranNo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 过滤掉无效交易</span>
			logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Channel [%s]: Skipping history write for invalid transaction number %d&quot;</span><span class="token punctuation">,</span>
				historyDB<span class="token punctuation">.</span>dbName<span class="token punctuation">,</span> tranNo<span class="token punctuation">)</span>
			tranNo<span class="token operator">++</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 解析获取交易消息Envelope结构对象</span>
		env<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">GetEnvelopeFromBlock</span><span class="token punctuation">(</span>envBytes<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>

	<span class="token operator">...</span>
		<span class="token comment">// 检查类型：经Endorser背书的普通交易消息</span>
		<span class="token keyword">if</span> common<span class="token punctuation">.</span><span class="token function">HeaderType</span><span class="token punctuation">(</span>chdr<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token operator">==</span> common<span class="token punctuation">.</span>HeaderType_ENDORSER_TRANSACTION <span class="token punctuation">{</span>

			<span class="token comment">// extract actions from the envelope message</span>
			<span class="token comment">// 从交易消息中解析提取链码动作</span>
			respPayload<span class="token punctuation">,</span> err <span class="token operator">:=</span> putils<span class="token punctuation">.</span><span class="token function">GetActionFromEnvelope</span><span class="token punctuation">(</span>envBytes<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
<span class="token operator">...</span>
			<span class="token comment">// 解析交易读写集到TxReadWriteSet结构对象中</span>
			<span class="token keyword">if</span> err <span class="token operator">=</span> txRWSet<span class="token punctuation">.</span><span class="token function">FromProtoBytes</span><span class="token punctuation">(</span>respPayload<span class="token punctuation">.</span>Results<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token comment">// 遍历所有读写集，重新构造KV键值对添加到历史数据库</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> nsRWSet <span class="token operator">:=</span> <span class="token keyword">range</span> txRWSet<span class="token punctuation">.</span>NsRwSets <span class="token punctuation">{</span>
				ns <span class="token operator">:=</span> nsRWSet<span class="token punctuation">.</span>NameSpace

				<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> kvWrite <span class="token operator">:=</span> <span class="token keyword">range</span> nsRWSet<span class="token punctuation">.</span>KvRwSet<span class="token punctuation">.</span>Writes <span class="token punctuation">{</span>
					writeKey <span class="token operator">:=</span> kvWrite<span class="token punctuation">.</span>Key

					<span class="token comment">// 构造组合键</span>
					compositeHistoryKey <span class="token operator">:=</span> historydb<span class="token punctuation">.</span><span class="token function">ConstructCompositeHistoryKey</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> writeKey<span class="token punctuation">,</span> blockNo<span class="token punctuation">,</span> tranNo<span class="token punctuation">)</span>

					<span class="token comment">// 写入空的字节数组[]byte{}</span>
					dbBatch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>compositeHistoryKey<span class="token punctuation">,</span> emptyValue<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>

		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 跳过交易，因为该消息不是经过Endorser背书的普通交易消息</span>
			logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Skipping transaction [%d] since it is not an endorsement transaction\\n&quot;</span><span class="token punctuation">,</span> tranNo<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		tranNo<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	height <span class="token operator">:=</span> version<span class="token punctuation">.</span><span class="token function">NewHeight</span><span class="token punctuation">(</span>blockNo<span class="token punctuation">,</span> tranNo<span class="token punctuation">)</span> <span class="token comment">// 创建版本对象</span>
	dbBatch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>savePointKey<span class="token punctuation">,</span> height<span class="token punctuation">.</span><span class="token function">ToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 添加保存点用于恢复</span>

	<span class="token comment">// 同步更新批量操作dbBatch到历史数据库中</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> historyDB<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">WriteBatch</span><span class="token punctuation">(</span>dbBatch<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止：账本提交功能分析结束。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,78),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=l("ExternalLinkIcon");return t(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[p("https://github.com/blockchainGuide/"),o(s)])])])])}const g=a(i,[["render",d],["__file","8.fabric_source_Committer_node_of_charge_to_an_account.html.vue"]]);export{g as default};
