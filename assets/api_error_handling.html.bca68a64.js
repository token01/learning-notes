import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as t,a as s,b as n,d as o,e as c,r as l}from"./app.1ed5bacd.js";const i={},u=s("h2",{id:"为什么写这篇文章",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#为什么写这篇文章","aria-hidden":"true"},"#"),n(" 为什么写这篇文章？")],-1),r=s("p",null,[n("相信不少 Java 开发都在项目中使用过类似 "),s("code",null,"ApiResult"),n(" 这样的对象来包装 Api 返回类型，这相比什么都不包装有一定的好处，但这真的就是最好的做法吗？")],-1),k={href:"https://xwjie.github.io/rule/controller.html",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"DRY",-1),v=c(`<p>统一返回 ApiResult 还不是最佳实践，必须不断思考优化，就像 React 所提倡的 <code>Rethinking Best Practices</code> 。</p><h2 id="apiresult-现状" tabindex="-1"><a class="header-anchor" href="#apiresult-现状" aria-hidden="true">#</a> ApiResult 现状</h2><p>我们先看一个常见的 ApiResult 对象，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好处：客户端可以使用统一的处理方式。</p><p>存在的问题：</p><ol><li>在统一返回 ApiResult 的情况下，即使是正常返回，也会带上 code、message 属性，<code>多数情况</code> 下属于 <code>冗余</code> 。</li><li><code>Controller</code> 层代码存在重复，返回对象重复定义、包装调用编写重复，<code>代码整洁度下降</code> 。</li><li>统一返回 200 状态码不利于 <code>请求监控</code> 。</li><li>ApiResult 同时承担了Api结果和错误结果的职责，不符合 <code>单一职责</code> 原则。</li></ol><p>像下面这样一段获取列表数据的代码，若不涉及业务预期内的请求验证，是没必要包装一层 ApiResult 的，什么是业务预期内的验证呢，举个例子，比如非会员无法获取列表，业务上需要提醒用户购买会员，这属于合法请求，此时仍然可以使用 ApiResult 携带 code 明确返回给客户端。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ApiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ApiResult</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ApiResult 要根据业务场景使用，不需要每个场景都使用它。</p><p>当 API 越来越多时，统一返回 ApiResult 的问题会被放大，如何解决这些问题呢？请接着看。</p><h2 id="使用-http-状态码" tabindex="-1"><a class="header-anchor" href="#使用-http-状态码" aria-hidden="true">#</a> 使用 HTTP 状态码</h2><p>有许多项目采用的方式是，在 API 调用成功时使用正常的数据模型，而在出现错误时，返回相应的 <code>HTTP 错误码</code> 和描述信息。我们看一段 <code>jhipster</code> 中的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/authors/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthorDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthorDTO</span><span class="token punctuation">&gt;</span></span> authorDTO <span class="token operator">=</span> authorService<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">ResponseUtil</span><span class="token punctuation">.</span><span class="token function">wrapOrNotFound</span><span class="token punctuation">(</span>authorDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要 HTTP 状态码的含义：</p><ul><li>1XX – Informational</li><li>2XX – Success</li><li>3XX – Redirection</li><li>4XX – Client Error</li><li>5XX – Server Error</li></ul><p>采用 HTTP 状态码就不再需要统一返回 ApiResult ，但问题也随之而来，那就是 ApiResult 中定义的 <code>error code</code> 很难跟 HTTP 错误码一一对应，光有 HTTP 错误码和描述信息是不够的，还需要定义专门的错误模型。</p><h2 id="api-错误模型" tabindex="-1"><a class="header-anchor" href="#api-错误模型" aria-hidden="true">#</a> API 错误模型</h2><p>如何定义一个好的 API 错误模型，这需要根据 <code>业务的复杂程度</code> 来定，我们先来看看几个 <code>Big Company</code> 都是怎么做的。</p><p>先看 <code>twitter</code> 的，其中省略了无关的 HTTP 输出信息。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>HTTP/<span class="token number">1.1</span> <span class="token number">400</span> Bad Request

<span class="token punctuation">{</span><span class="token property">&quot;errors&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;code&quot;</span><span class="token operator">:</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token property">&quot;message&quot;</span><span class="token operator">:</span><span class="token string">&quot;Bad Authentication data.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了错误码，并且错误模型是一个数组，意味着可能会返回多个错误。</p><p>再来看 <code>Facebook</code> 的 Graph API。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>HTTP/<span class="token number">1.1</span> <span class="token number">200</span>

<span class="token punctuation">{</span>
  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Syntax error \\&quot;Field picture specified more than once. This is only possible before version 2.1\\&quot; at character 23: id,name,picture,picture&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;OAuthException&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">2500</span><span class="token punctuation">,</span>
    <span class="token property">&quot;fbtrace_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxxxxxxxxxx&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，其返回的是统一的 200 状态码，错误模型中还包含 <code>异常类型</code> 和 <code>trace_id</code>，这两个属性有助于排查错误。</p><p>最后看看巨头微软 <code>Bing</code> 的错误模型。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>HTTP/<span class="token number">1.1</span> <span class="token number">200</span>

<span class="token punctuation">{</span>
  <span class="token property">&quot;SearchResponse&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;SearchTerms&quot;</span><span class="token operator">:</span> <span class="token string">&quot;api error codes&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;Errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;Code&quot;</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Required parameter is missing.&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;Parameter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SearchRequest.AppId&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;HelpUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http\\u003a\\u002f\\u002fmsdn.microsoft.com\\u002fen-us\\u002flibrary\\u002fdd251042.aspx&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其返回的也是 200 状态码，但可以看到它使用了类似 ApiResult 的包装方式，并且还包含了 <code>输入信息</code>、<code>输入参数</code> 和 <code>帮助链接</code> ，原来这就是 <code>大佬</code> 的做事方式吗？</p><p>果然 API 错误模型的设计，根据业务复杂程序的不同，实现起来也不太一样，这三个中，我们参考 <code>twitter 的 API 设计</code> 来看看在 <code>Spring</code> 项目中实现起来有哪些需要注意的，毕竟绝大多数项目的复杂度都达不到 FB 和 Bing 的程度。</p><h2 id="spring-api-错误模型实战" tabindex="-1"><a class="header-anchor" href="#spring-api-错误模型实战" aria-hidden="true">#</a> Spring API 错误模型实战</h2><p>错误模型的定义是非常简单的，代码如下。</p><p>ErrorResponse.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorResponse</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ErrorDetail</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ErrorDetail.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorDetail</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误详情中增加了一个 <code>type</code> 属性，可以帮助更好地定位到异常。</p><p>在 <code>Controller</code> 层编写时至需要返回正常的数据模型，如 <code>List、VO、DTO</code> 之类。</p><p>异常使用 <code>AOP</code> 的方式来处理。</p><p>编写一个 <code>ControllerAdvice</code> 类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">serverErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">ApiCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_EXCEPTION</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">serverErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">ApiCode</span> apiCode<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> apiCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//服务端异常需要记录日志</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//服务端异常使用api code中的message，避免敏感异常信息发送到客户端</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">errorResponse</span><span class="token punctuation">(</span>apiCode<span class="token punctuation">,</span> <span class="token class-name">ErrorMessageType</span><span class="token punctuation">.</span><span class="token constant">API_CODE</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">ApiCode</span> apiCode<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> apiCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//客户端请求错误只记录debug日志</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//客户端异常使用异常中的message</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">errorResponse</span><span class="token punctuation">(</span>apiCode<span class="token punctuation">,</span> <span class="token class-name">ErrorMessageType</span><span class="token punctuation">.</span><span class="token constant">EXCEPTION</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ErrorResponse</span> <span class="token function">errorResponse</span><span class="token punctuation">(</span><span class="token class-name">ApiCode</span> code<span class="token punctuation">,</span> <span class="token class-name">ErrorMessageType</span> messageType<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ErrorDetail</span> errorDetail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        errorDetail<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ErrorMessageType</span><span class="token punctuation">.</span><span class="token constant">API_CODE</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errorDetail<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            errorDetail<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        errorDetail<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ErrorResponse</span> errorResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        errorResponse<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>errorDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> errorResponse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">RequestVerifyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestVerifyExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">RequestVerifyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">requestErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">ApiCode</span><span class="token punctuation">.</span><span class="token constant">PARAMETER_EXCEPTION</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码只放了两个 <code>ExceptionHandler</code> ，一个是针对 <code>请求验证错误</code> ，一个是针对 <code>未知服务器错误</code> ，分别对应的是 <code>400</code> 和 <code>500</code> 的 HTTP 状态码。需要对其他异常做专门处理，也仍然是使用以上的公共 <code>errorResponse</code> 方法，就看异常被定义为 <code>请求异常</code> 还是 <code>服务端异常</code> 。</p><p>至此，API 就能返回 <code>&quot;漂亮&quot;</code> 的错误模型了。</p><h2 id="结束了吗" tabindex="-1"><a class="header-anchor" href="#结束了吗" aria-hidden="true">#</a> 结束了吗？</h2><p>先别走，还没结束呢，如果正常和错误情况下返回的数据模型不一样，那接口文档该如何定义呢？如果使用了 swagger ，那么我们需要添加针对 400 和 500 状态码的 <code>全局输出模型</code>。</p><p>在最新版本的 <code>springfox</code> 中要实现起来还是有点费劲的，来看部分代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token class-name">TypeResolver</span> typeResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//附加错误模型</span>
    <span class="token class-name">Docket</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span>swaggerProperties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>swaggerProperties<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">additionalModels</span><span class="token punctuation">(</span>typeResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ErrorResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加400错误码输出模型</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&gt;</span></span> responseMessages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResponseBuilder</span> responseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    responseBuilder<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token string">&quot;400&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>globalResponseMessageBody<span class="token punctuation">.</span><span class="token function">getModelRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        responseBuilder<span class="token punctuation">.</span><span class="token function">representation</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>rep <span class="token operator">-&gt;</span> rep<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>m <span class="token operator">-&gt;</span> m<span class="token punctuation">.</span><span class="token function">referenceModel</span><span class="token punctuation">(</span>
                re <span class="token operator">-&gt;</span> re<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>key<span class="token operator">-&gt;</span>key<span class="token punctuation">.</span><span class="token function">qualifiedModelName</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QualifiedModelName</span><span class="token punctuation">(</span><span class="token string">&quot;com.package.api&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ErrorResponse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    responseMessages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>responseBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    builder<span class="token punctuation">.</span><span class="token function">useDefaultResponseMessages</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">globalResponses</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> responseMessages<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">globalResponses</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> responseMessages<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上仅为部分代码，主要在于 <code>需要附加模型</code> 并指定输出模型，在实际项目中应该将模型信息放在配置当中，根据配置自动添加，关于 swagger 的自动配置，若读者朋友感兴趣，可以有机会专门写篇文章来讲解。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>在每个接口中返回统一的 ApiResult，笔者觉得是一件挺无聊的事情，写程序应该是一件能发挥创造力的事情。不断去思考最佳实践，学习优秀的设计，这件小小的事情，我们在工作当中几乎每天都会碰到，它是值得被改进的。</p>`,49);function m(b,g){const a=l("ExternalLinkIcon");return e(),t("div",null,[u,r,s("p",null,[n("关于封装 ResultBean 对象，晓风轻在他的 "),s("a",k,[n("程序员你为什么这么累"),o(a)]),n(" 系列文章中有过不错的分享，但统一封装 ResultBean 实际上也是一种重复工作，秉承 "),d,n(" 的理念，还有必要对其继续优化。")]),v])}const h=p(i,[["render",m],["__file","api_error_handling.html.vue"]]);export{h as default};
