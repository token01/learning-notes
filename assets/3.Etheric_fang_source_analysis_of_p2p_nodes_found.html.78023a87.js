import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as e,e as t,r as i}from"./app.8c636bb6.js";const l={},u=n("blockquote",null,[n("p",null,"浅谈以太坊源码分析之p2p节点发现")],-1),d={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},r=t(`<h2 id="节点发现概述" tabindex="-1"><a class="header-anchor" href="#节点发现概述" aria-hidden="true">#</a> 节点发现概述</h2><p>节点发现，使本地节点得知其他节点的信息，进而加入到p2p网络中。</p><p>以太坊的节点发现基于类似的kademlia算法，源码中有两个版本，v4和v5。v4适用于全节点，通过<code>discover.ListenUDP</code>使用，v5适用于轻节点通过<code>discv5.ListenUDP</code>使用，本文介绍的是v4版本。</p><p>节点发现功能主要涉及 <strong>Server</strong> <strong>Table</strong> <strong>udp</strong> 这几个数据结构，它们有独自的事件响应循环，节点发现功能便是它们互相协作完成的。其中，每个以太坊客户端启动后都会在本地运行一个<strong>Server</strong>，并将网络拓扑中相邻的节点视为<strong>Node</strong>，而<strong>Table</strong>是<strong>Node</strong>的容器，<strong>udp</strong>则是负责维持底层的连接。这些结构的关系如下图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkzetbpzowj30z00egtbh.jpg" alt="image-20201123210628944" loading="lazy"></p><h2 id="p2p服务开启节点发现" tabindex="-1"><a class="header-anchor" href="#p2p服务开启节点发现" aria-hidden="true">#</a> p2p服务开启节点发现</h2><p>在P2p的server.go 的start方法中:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">setupDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> err
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到<code>setupDiscovery</code>中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Discovery V4</span>
 <span class="token keyword">var</span> unhandled <span class="token keyword">chan</span> discover<span class="token punctuation">.</span>ReadPacket
 <span class="token keyword">var</span> sconn <span class="token operator">*</span>sharedUDPConn
 <span class="token keyword">if</span> <span class="token operator">!</span>srv<span class="token punctuation">.</span>NoDiscovery <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  ntab<span class="token punctuation">,</span> err <span class="token operator">:=</span> discover<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>localnode<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>discover.ListenUDP</code>方法即开启了节点发现的功能.</p><p>首先解析出监听地址的UDP端口，根据端口返回与之相连的UDP连接，之后返回连接的本地网络地址，接着设置最后一个UDP-on-IPv4端口。到此为止节点发现的一些准备工作做好，接下下来开始UDP的监听：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ntab<span class="token punctuation">,</span> err <span class="token operator">:=</span> discover<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>localnode<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后进行UDP 的监听，下面是监听的过程：</p><h3 id="监听udp" tabindex="-1"><a class="header-anchor" href="#监听udp" aria-hidden="true">#</a> 监听UDP</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 监听给定的socket 上的发现的包</span>
<span class="token keyword">func</span> <span class="token function">ListenUDP</span><span class="token punctuation">(</span>c UDPConn<span class="token punctuation">,</span> ln <span class="token operator">*</span>enode<span class="token punctuation">.</span>LocalNode<span class="token punctuation">,</span> cfg Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UDPv4<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">ListenV4</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> ln<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ListenV4</span><span class="token punctuation">(</span>c UDPConn<span class="token punctuation">,</span> ln <span class="token operator">*</span>enode<span class="token punctuation">.</span>LocalNode<span class="token punctuation">,</span> cfg Config<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UDPv4<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 closeCtx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 t <span class="token operator">:=</span> <span class="token operator">&amp;</span>UDPv4<span class="token punctuation">{</span>
  conn<span class="token punctuation">:</span>            c<span class="token punctuation">,</span>
  priv<span class="token punctuation">:</span>            cfg<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span>
  netrestrict<span class="token punctuation">:</span>     cfg<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">,</span>
  localNode<span class="token punctuation">:</span>       ln<span class="token punctuation">,</span>
  db<span class="token punctuation">:</span>              ln<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  gotreply<span class="token punctuation">:</span>        <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> reply<span class="token punctuation">)</span><span class="token punctuation">,</span>
  addReplyMatcher<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>replyMatcher<span class="token punctuation">)</span><span class="token punctuation">,</span>
  closeCtx<span class="token punctuation">:</span>        closeCtx<span class="token punctuation">,</span>
  cancelCloseCtx<span class="token punctuation">:</span>  cancel<span class="token punctuation">,</span>
  log<span class="token punctuation">:</span>             cfg<span class="token punctuation">.</span>Log<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> t<span class="token punctuation">.</span>log <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  t<span class="token punctuation">.</span>log <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 tab<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newTable</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> ln<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Bootnodes<span class="token punctuation">,</span> t<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token comment">// </span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>
 t<span class="token punctuation">.</span>tab <span class="token operator">=</span> tab
 <span class="token keyword">go</span> tab<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//</span>

 t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
 <span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//</span>
 <span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">readLoop</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Unhandled<span class="token punctuation">)</span> <span class="token comment">//</span>
 <span class="token keyword">return</span> t<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要做了以下几件事：</p><h4 id="_1-新建路由表" tabindex="-1"><a class="header-anchor" href="#_1-新建路由表" aria-hidden="true">#</a> 1.新建路由表</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tab<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newTable</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> ln<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Bootnodes<span class="token punctuation">,</span> t<span class="token punctuation">.</span>log<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建路由表做了以下几件事：</p><ul><li>初始化table对象</li><li>设置bootnode（setFallbackNodes） <ul><li>节点第一次启动的时候，节点会与硬编码在以太坊源码中的<code>bootnode</code>进行连接，所有的节点加入几乎都先连接了它。连接上<code>bootnode</code>后，获取<code>bootnode</code>部分的邻居节点，然后进行节点发现，获取更多的活跃的邻居节点</li><li>nursery 是在 Table 为空并且数据库中没有存储节点时的初始连接节点（上文中的 6 个节点），通过 bootnode 可以发现新的邻居</li></ul></li><li>tab.seedRand：使用提供的种子值将生成器初始化为确定性状态</li><li>loadSeedNodes：加载种子节点；从保留已知节点的数据库中随机的抽取30个节点，再加上引导节点列表中的节点，放置入k桶中，如果K桶没有空间，则假如到替换列表中。</li></ul><h4 id="_2-测试邻居节点连通性" tabindex="-1"><a class="header-anchor" href="#_2-测试邻居节点连通性" aria-hidden="true">#</a> 2.测试邻居节点连通性</h4><p>首先知道UDP协议是没有连接的概念的，所以需要不断的ping 来测试对端节点是否正常，在新建路由表之后，就来到下面的循环，不断的去做上面的事。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> tab<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定时运行<code>doRefresh</code>、<code>doRevalidate</code>、<code>copyLiveNodes</code>进行刷新K桶。</p><p>以太坊的k桶设置：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
 alpha           <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment">// Kademlia并发参数, 是系统内一个优化参数,控制每次从K桶最多取出节点个数,ethereum取值3</span>
  
 bucketSize      <span class="token operator">=</span> <span class="token number">16</span> <span class="token comment">// K桶大小(可容纳节点数)</span>
  
 maxReplacements <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 每桶更换列表的大小</span>
 hashBits          <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment">//每个节点ID长度,32*8=256, 32位16进制</span>
 nBuckets          <span class="token operator">=</span> hashBits <span class="token operator">/</span> <span class="token number">15</span>       <span class="token comment">//  K桶个数</span>
  ）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先搞清楚这三个定时器运行的时间：</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>refreshInterval    = 30 * time.Minute
revalidateInterval = 10 * time.Second
copyNodesInterval  = 30 * time.Second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="dorefresh" tabindex="-1"><a class="header-anchor" href="#dorefresh" aria-hidden="true">#</a> <code>doRefresh</code></h5><p>doRefresh对随机目标执行查找以保持K桶已满。如果表为空（初始引导程序或丢弃的有故障），则插入种子节点。</p><p>主要以下几步：</p><ol><li><p>从数据库加载随机节点和引导节点。这应该会产生一些以前见过的节点</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>tab.loadSeedNodes()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将本地节点ID作为目标节点进行查找最近的邻居节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tab<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token function">lookupSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>UDPv4<span class="token punctuation">)</span> <span class="token function">lookupSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>enode<span class="token punctuation">.</span>Node <span class="token punctuation">{</span>
 <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">newLookup</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>closeCtx<span class="token punctuation">,</span> <span class="token function">encodePubkey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">.</span>priv<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>UDPv4<span class="token punctuation">)</span> <span class="token function">newLookup</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> targetKey encPubkey<span class="token punctuation">)</span> <span class="token operator">*</span>lookup <span class="token punctuation">{</span>
 <span class="token operator">...</span>
  <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">findnode</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetKey<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> it
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向这些节点发起<code>findnode</code>操作查询离target节点最近的节点列表,将查询得到的节点进行<code>ping-pong</code>测试,将测试通过的节点落库保存</p><p>经过这个流程后,节点的K桶就能够比较均匀地将不同网络节点更新到本地K桶中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>unc <span class="token punctuation">(</span>t <span class="token operator">*</span>UDPv4<span class="token punctuation">)</span> <span class="token function">findnode</span><span class="token punctuation">(</span>toid enode<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> toaddr <span class="token operator">*</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">,</span> target encPubkey<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 t<span class="token punctuation">.</span><span class="token function">ensureBond</span><span class="token punctuation">(</span>toid<span class="token punctuation">,</span> toaddr<span class="token punctuation">)</span>
 nodes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span>
 nreceived <span class="token operator">:=</span> <span class="token number">0</span>
  <span class="token comment">// 设置回应回调函数，等待类型为neighborsPacket的邻近节点包，如果类型对，就执行回调请求</span>
 rm <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">pending</span><span class="token punctuation">(</span>toid<span class="token punctuation">,</span> toaddr<span class="token punctuation">.</span>IP<span class="token punctuation">,</span> p_neighborsV4<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>r <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>matched <span class="token builtin">bool</span><span class="token punctuation">,</span> requestDone <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  reply <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>neighborsV4<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> rn <span class="token operator">:=</span> <span class="token keyword">range</span> reply<span class="token punctuation">.</span>Nodes <span class="token punctuation">{</span>
   nreceived<span class="token operator">++</span>
      <span class="token comment">// 得到一个简单的node结构</span>
   n<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">nodeFromRPC</span><span class="token punctuation">(</span>toaddr<span class="token punctuation">,</span> rn<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid neighbor node received&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> rn<span class="token punctuation">.</span>IP<span class="token punctuation">,</span> <span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span> toaddr<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
   <span class="token punctuation">}</span>
   nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> nreceived <span class="token operator">&gt;=</span> bucketSize
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">//上面了一个管道事件，下面开始发送真正的findnode报文，然后进行等待了</span>
 t<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>toaddr<span class="token punctuation">,</span> toid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>findnodeV4<span class="token punctuation">{</span>
  Target<span class="token punctuation">:</span>     target<span class="token punctuation">,</span>
  Expiration<span class="token punctuation">:</span> <span class="token function">uint64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>expiration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> nodes<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>rm<span class="token punctuation">.</span>errc
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查找3个随机的目标节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
  tab<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token function">lookupRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="dorevalidate" tabindex="-1"><a class="header-anchor" href="#dorevalidate" aria-hidden="true">#</a> <code>doRevalidate</code></h5><p>doRevalidate检查随机存储桶中的最后一个节点是否仍然存在，如果不是，则替换或删除该节点。</p><p>主要以下几步：</p><ol><li><p>返回随机的非空K桶中的最后一个节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>last<span class="token punctuation">,</span> bi <span class="token operator">:=</span> tab<span class="token punctuation">.</span><span class="token function">nodeToRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对最后的节点执行Ping操作，然后等待Pong</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>remoteSeq<span class="token punctuation">,</span> err <span class="token operator">:=</span> tab<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token function">unwrapNode</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果节点ping通了的话，将节点移动到最前面</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tab<span class="token punctuation">.</span><span class="token function">bumpInBucket</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> last<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>没有收到回复，选择一个替换节点，或者如果没有任何替换节点，则删除该节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tab<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> last<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h5 id="copylivenodes" tabindex="-1"><a class="header-anchor" href="#copylivenodes" aria-hidden="true">#</a> <code>copyLiveNodes</code></h5><p>copyLiveNodes将表中的节点添加到数据库,如果节点在表中的时间超过了5分钟。</p><p>这部分代码比较简单，就伸展阐述。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> n<span class="token punctuation">.</span>livenessChecks <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>addedAt<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> seedMinTableTime <span class="token punctuation">{</span>
    tab<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">UpdateNode</span><span class="token punctuation">(</span><span class="token function">unwrapNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-检测各类信息" tabindex="-1"><a class="header-anchor" href="#_3-检测各类信息" aria-hidden="true">#</a> 3.检测各类信息</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>loop循环主要监听以下几类消息：</p><ul><li>case &lt;-t.closeCtx.Done()：检测是否停止</li><li>p := &lt;-t.addReplyMatcher：检测是否有添加新的待处理消息</li><li>r := &lt;-t.gotreply：检测是否接收到其他节点的回复消息</li></ul><h4 id="_4-处理udp数据包" tabindex="-1"><a class="header-anchor" href="#_4-处理udp数据包" aria-hidden="true">#</a> 4. 处理UDP数据包</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">readLoop</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Unhandled<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要有以下两件事：</p><ol><li><p>循环接收其他节点发来的udp消息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>nbytes<span class="token punctuation">,</span> from<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>处理接收到的UDP消息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>t<span class="token punctuation">.</span><span class="token function">handlePacket</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span>nbytes<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>接下来对这两个函数进行进一步的解析。</p><h5 id="接收udp消息" tabindex="-1"><a class="header-anchor" href="#接收udp消息" aria-hidden="true">#</a> 接收UDP消息</h5><p>接收UDP消息比较的简单，就是不断的从连接中读取Packet数据，它有以下几种消息：</p><ul><li><p><code>ping</code>：用于判断远程节点是否在线。</p></li><li><p><code>pong</code>：用于回复<code>ping</code>消息的响应。</p></li><li><p><code>findnode</code>：查找与给定的目标节点相近的节点。</p></li><li><p><code>neighbors</code>：用于回复<code>findnode</code>的响应，与给定的目标节点相近的节点列表</p></li></ul><hr><h5 id="处理udp消息" tabindex="-1"><a class="header-anchor" href="#处理udp消息" aria-hidden="true">#</a> 处理UDP消息</h5><p>主要做了以下几件事：</p><ol><li><p>数据包解码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>packet<span class="token punctuation">,</span> fromKey<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">decodeV4</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检查数据包是否有效，是否可以处理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> packet<span class="token punctuation">.</span><span class="token function">preverify</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> from<span class="token punctuation">,</span> fromID<span class="token punctuation">,</span> fromKey<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在校验这一块，涉及不同的消息类型不同的校验，我们来分别对各种消息进行分析。</p><p>①：<code>ping</code></p><ul><li>校验消息是否过期</li><li>校验公钥是否有效</li></ul><p>②：<code>pong</code></p><ul><li>校验消息是否过期</li><li>校验回复是否正确</li></ul><p>③：<code>findNodes</code></p><ul><li>校验消息是否过期</li><li>校验节点是否是最近的节点</li></ul><p>④：<code>neighbors</code></p><ul><li>校验消息是否过期</li><li>用于回复<code>findnode</code>的响应，校验回复是否正确</li></ul></li><li><p>处理packet数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>packet<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> from<span class="token punctuation">,</span> fromID<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相同的，也会有4种消息，但是我们这边重点讲处理findNodes的消息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,58),k=n("em",null,"findnodeV4) handle(t",-1),v={href:"http://enode.ID",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
我们这里就稍微介绍下如何处理\`findnode\`的消息：

\`\`\`go
func (req *findnodeV4) handle(t *UDPv4, from *net.UDPAddr, fromID enode.ID, mac []byte) {
 // 确定最近的节点
 target := enode.ID(crypto.Keccak256Hash(req.Target[:]))
 t.tab.mutex.Lock()
 //最接近的返回表中最接近给定id的n个节点
 closest := t.tab.closest(target, bucketSize, true).entries
 t.tab.mutex.Unlock()
 // 以每个数据包最多maxNeighbors的块的形式发送邻居，以保持在数据包大小限制以下。
 p := neighborsV4{Expiration: uint64(time.Now().Add(expiration).Unix())}
 var sent bool
 for _, n := range closest { //扫描这些最近的节点列表，然后一个包一个包的发送给对方
  if netutil.CheckRelayIP(from.IP, n.IP()) == nil {
   p.Nodes = append(p.Nodes, nodeToRPC(n))
  }
  if len(p.Nodes) == maxNeighbors {
   t.send(from, fromID, &amp;p)//给对方发送 neighborsPacket 包，里面包含节点列表
   p.Nodes = p.Nodes[:0]
   sent = true
  }
 }
 if len(p.Nodes) &gt; 0 || !sent {
  t.send(from, fromID, &amp;p)
 }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先先确定最近的节点，再一个包一个包的发给对方，并校验节点的IP，最后把有效的节点发送给请求方。</p><hr><h2 id="涉及的结构体" tabindex="-1"><a class="header-anchor" href="#涉及的结构体" aria-hidden="true">#</a> 涉及的结构体</h2><h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h3><ul><li>conn ：接口，包括了从UDP中读取和写入，关闭UDP连接以及获取本地地址。</li><li>netrestrict：IP网络列表</li><li>localNode：本地节点</li><li>tab：路由表</li></ul><hr><h3 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> Table</h3><ul><li><p>buckets：所有节点都加到这个里面，按照距离</p></li><li><p>nursery：启动节点</p></li><li><p>rand：随机来源</p></li><li><p>ips：跟踪IP，确保IP中最多N个属于同一网络范围</p></li><li><p>net: UDP 传输的接口</p><ul><li>返回本地节点</li><li>将enrRequest发送到给定的节点并等待响应</li><li>findnode向给定节点发送一个findnode请求，并等待该节点最多发送了k个邻居</li><li>返回查找最近的节点</li><li>将ping消息发送到给定的节点，然后等待答复</li></ul></li></ul><p>以下是table的结构图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkm6yzncc3j30t00ggdim.jpg" alt="image-20201112104254003" loading="lazy"></p><hr><h2 id="思维导图" tabindex="-1"><a class="header-anchor" href="#思维导图" aria-hidden="true">#</a> 思维导图</h2>`,13),b={href:"https://github.com/blockchainGuide/blockchainguide/tree/main/%E4%B8%BB%E6%B5%81%E5%8C%BA%E5%9D%97%E9%93%BE/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/p2p",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[n("img",{src:"https://tva1.sinaimg.cn/large/0081Kckwgy1gkzexhy1kqj31d80mqafh.jpg",alt:"image-20201123211034861",loading:"lazy"})],-1),h=n("h2",{id:"参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),s(" 参考文档")],-1),f={href:"http://mindcarver.cn/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.cnblogs.com/xiaolincoding/p/12571184.html",target:"_blank",rel:"noopener noreferrer"},x={href:"http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.jianshu.com/p/b232c870dcd2",target:"_blank",rel:"noopener noreferrer"},D={href:"https://bbs.huaweicloud.com/blogs/113684",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.jianshu.com/p/94d02a41a146",target:"_blank",rel:"noopener noreferrer"};function U(N,I){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("在阅读节点发现源码之前必须要理解kadmilia算法，"),n("a",d,[s("可以参考：KAD算法详解"),e(a)]),s("。")]),r,n("p",null,[s("func (req "),k,s("UDPv4, from *net.UDPAddr, fromID "),n("a",v,[s("enode.ID"),e(a)]),s(", mac []byte) { ... }")]),m,n("blockquote",null,[n("p",null,[n("a",b,[s("思维导图获取地址"),e(a)])])]),g,h,n("blockquote",null,[n("p",null,[n("a",f,[s("http://mindcarver.cn/"),e(a)]),s(" ⭐️⭐️⭐️⭐️")]),n("p",null,[n("a",y,[s("https://github.com/blockchainGuide/"),e(a)]),s(" ⭐️⭐️⭐️⭐️")]),n("p",null,[n("a",_,[s("https://www.cnblogs.com/xiaolincoding/p/12571184.html"),e(a)])]),n("p",null,[n("a",x,[s("http://qjpcpu.github.io/blog/2018/01/29/shen-ru-ethereumyuan-ma-p2pmo-kuai-ji-chu-jie-gou/"),e(a)])]),n("p",null,[n("a",w,[s("https://www.jianshu.com/p/b232c870dcd2"),e(a)])]),n("p",null,[n("a",D,[s("https://bbs.huaweicloud.com/blogs/113684"),e(a)])]),n("p",null,[n("a",P,[s("https://www.jianshu.com/p/94d02a41a146"),e(a)])])])])}const K=p(l,[["render",U],["__file","3.Etheric_fang_source_analysis_of_p2p_nodes_found.html.vue"]]);export{K as default};
