import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as e,a as n,b as a,d as p,e as c,r as u}from"./app.1ee57811.js";const l={},i=c(`<blockquote><p>浅谈以太坊源码分析之p2p网络启动</p></blockquote><h2 id="p2p源码目录" tabindex="-1"><a class="header-anchor" href="#p2p源码目录" aria-hidden="true">#</a> p2p源码目录</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>discover/          基于UDP的节点发现V4协议
  discv5/            节点发现V5协议
  enode/             节点信息
  enr/               以太坊节点记录（ethereum node records)
  nat/               网络地址转换，用于内网穿透
  netutil/
  protocol/
  simulations/       本地p2p网络的模拟器
  dial.go            建立连接请求，以任务的形式 
  message.go         定义了读写的接口
  metrics.go         计时器和计量器工具
  peer.go            节点
  protocol.go        子协议
  rlpx.go            加密传输协议 
  server.go          底层p2p网络的函数入口 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启动p2p网络" tabindex="-1"><a class="header-anchor" href="#启动p2p网络" aria-hidden="true">#</a> 启动p2p网络</h2><p>启动p2p网络主要会做以下几件事：</p><ol><li>发现远程节点，建立相邻节点列表</li><li>监听远程节点发过来的建立TCP请求</li><li>向远程节点发送建立TCP连接请求</li></ol><p>首先找到p2p网络启动的入口：</p><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> Start()</h3><p><code>start</code>函数主要做了以下6件事：</p><ol><li>初始化server的字段</li><li>设置本地节点setupLocalNode</li><li>设置监听TCP连接请求setupListening</li><li>设置节点发现（setupDiscovery）V4版本</li><li>设置最大可以主动发起的连接为50/3</li><li>srv.run(dialer) 发起建立TCP连接请求</li></ol><p>其中setupLocalNode、setupListening、setupDiscovery、newDialState、srv.run(dialer)是我们要重点分析的函数。</p><h4 id="设置本地节点" tabindex="-1"><a class="header-anchor" href="#设置本地节点" aria-hidden="true">#</a> 设置本地节点</h4><p>进入到setupLocalNode中：</p><p>①：创建devp2p握手</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pubkey <span class="token operator">:=</span> crypto<span class="token punctuation">.</span><span class="token function">FromECDSAPub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span>
 srv<span class="token punctuation">.</span>ourHandshake <span class="token operator">=</span> <span class="token operator">&amp;</span>protoHandshake<span class="token punctuation">{</span>Version<span class="token punctuation">:</span> baseProtocolVersion<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> srv<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ID<span class="token punctuation">:</span> pubkey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> srv<span class="token punctuation">.</span>Protocols <span class="token punctuation">{</span>
  srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">.</span>Caps <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">.</span>Caps<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">capsByNameAndVersion</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">.</span>Caps<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>握手协议包括协议版本号，节点名称和节点的公钥，存入到Caps中要根据名称和协议排序。</p><p>②：创建本地节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> enode<span class="token punctuation">.</span><span class="token function">OpenDB</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>NodeDatabase<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> err
 <span class="token punctuation">}</span>
 srv<span class="token punctuation">.</span>nodedb <span class="token operator">=</span> db
 srv<span class="token punctuation">.</span>localnode <span class="token operator">=</span> enode<span class="token punctuation">.</span><span class="token function">NewLocalNode</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span>
 srv<span class="token punctuation">.</span>localnode<span class="token punctuation">.</span><span class="token function">SetFallbackIP</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>IP<span class="token punctuation">{</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token comment">// TODO: check conflicts</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> srv<span class="token punctuation">.</span>Protocols <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>Attributes <span class="token punctuation">{</span>
   srv<span class="token punctuation">.</span>localnode<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先从节点数据库中去获取节点信息，如果不存在则新建本地节点并设置默认IP，同时将节点记录的协议特定信息存入到本地节点中。</p><hr><h4 id="设置监听" tabindex="-1"><a class="header-anchor" href="#设置监听" aria-hidden="true">#</a> 设置监听</h4><p>进入到<code>setupListening</code>:</p><p>①：启动监听器</p><p>②：如果配置了NAT，则更新本地节点记录并映射TCP监听端口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> tcp<span class="token punctuation">,</span> ok <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>net<span class="token punctuation">.</span>TCPAddr<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
  srv<span class="token punctuation">.</span>localnode<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>enr<span class="token punctuation">.</span><span class="token function">TCP</span><span class="token punctuation">(</span>tcp<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>tcp<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">IsLoopback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> srv<span class="token punctuation">.</span>NAT <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   srv<span class="token punctuation">.</span>loopWG<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nat<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>NAT<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>quit<span class="token punctuation">,</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> tcp<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> tcp<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> <span class="token string">&quot;ethereum p2p&quot;</span><span class="token punctuation">)</span>
    srv<span class="token punctuation">.</span>loopWG<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：开启P2P监听，接收<code>inbound</code>连接</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>srv<span class="token punctuation">.</span><span class="token function">listenLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数需要进一步分析：</p><p>主要有以下逻辑：</p><ul><li><p>首先<code>defaultMaxPendingPeers</code>这个字段指的是<code>inbound</code> 和<code>outbound</code>连接，默认最大值为50</p></li><li><p>将监听的连接返回给<code>listener</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fd<span class="token punctuation">,</span> err <span class="token operator">=</span> srv<span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取监听的连接的地址并检查这个连接</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>remoteIP <span class="token operator">:=</span> netutil<span class="token punctuation">.</span><span class="token function">AddrIP</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">checkInboundConn</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> remoteIP<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>checkInboundConn</code>主要是做了以下的判断：</p><ul><li>拒绝不符合NetRestrict的连接（NetRestrict是指已经限定了某些连接，除此之外会拒绝）</li><li>拒绝尝试过多的节点</li></ul></li><li><p>最后真正建立连接</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   srv<span class="token punctuation">.</span><span class="token function">SetupConn</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> inboundConn<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">// 连接建立过程（将连接添加为peer）</span>
   slots <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意setupConn的第三个字段传入的是nil，表示还没有拨号，如果正在拨号的话需要节点公钥。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> dialPubkey <span class="token operator">*</span>ecdsa<span class="token punctuation">.</span>PublicKey
 <span class="token keyword">if</span> dialDest <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  dialPubkey <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>ecdsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> dialDest<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>enode<span class="token punctuation">.</span>Secp256k1<span class="token punctuation">)</span><span class="token punctuation">(</span>dialPubkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;dial destination doesn&#39;t have a secp256k1 public key&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就是进行RLPX（RLPX会单独讲）握手</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>remotePubkey<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">doEncHandshake</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">,</span> dialPubkey<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果dialDest 不为nil，检查公钥是否匹配，如果为nil,就从连接中返回一个node出来</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> dialDest <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token comment">// For dialed connections, check that the remote public key matches.</span>
  <span class="token comment">//对于拨号连接，请检查远程公钥是否匹配</span>
  <span class="token keyword">if</span> dialPubkey<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>remotePubkey<span class="token punctuation">.</span>X<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> dialPubkey<span class="token punctuation">.</span>Y<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>remotePubkey<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> DiscUnexpectedIdentity
  <span class="token punctuation">}</span>
  c<span class="token punctuation">.</span>node <span class="token operator">=</span> dialDest
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  c<span class="token punctuation">.</span>node <span class="token operator">=</span> <span class="token function">nodeFromConn</span><span class="token punctuation">(</span>remotePubkey<span class="token punctuation">,</span> c<span class="token punctuation">.</span>fd<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是真正执行握手了 ,这部分也属于RLPX，跳过</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>phs<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">doProtoHandshake</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>ourHandshake<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后要进行检查，如果成功了的话，连接就会作为节点被添加，并且启动了runPeer.</p><p>到此为止，整个listenLoop 就完成了。</p><hr></li></ul><h4 id="设置节点发现" tabindex="-1"><a class="header-anchor" href="#设置节点发现" aria-hidden="true">#</a> 设置节点发现</h4><p>进入到<code>srv.setupDiscovery()</code></p><p>①：添加特定于协议的发现源</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>added <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> proto <span class="token operator">:=</span> <span class="token keyword">range</span> srv<span class="token punctuation">.</span>Protocols <span class="token punctuation">{</span>
  <span class="token keyword">if</span> proto<span class="token punctuation">.</span>DialCandidates <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>added<span class="token punctuation">[</span>proto<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token punctuation">{</span>
   srv<span class="token punctuation">.</span>discmix<span class="token punctuation">.</span><span class="token function">AddSource</span><span class="token punctuation">(</span>proto<span class="token punctuation">.</span>DialCandidates<span class="token punctuation">)</span>
   added<span class="token punctuation">[</span>proto<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：如果DHT禁用的话，就不要在UDP上监听</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> srv<span class="token punctuation">.</span>NoDiscovery <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>srv<span class="token punctuation">.</span>DiscoveryV5 <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：监听给定的socket 上的发现的包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ntab<span class="token punctuation">,</span> err <span class="token operator">:=</span> discover<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>localnode<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建dialstate" tabindex="-1"><a class="header-anchor" href="#创建dialstate" aria-hidden="true">#</a> 创建DialState</h4><p>dialstate负责拨号和查找发现。</p><p>①：初始化dialstate</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token operator">&amp;</span>dialstate<span class="token punctuation">{</span>
   maxDynDials<span class="token punctuation">:</span> maxdyn<span class="token punctuation">,</span>
   self<span class="token punctuation">:</span>        self<span class="token punctuation">,</span>
   netrestrict<span class="token punctuation">:</span> cfg<span class="token punctuation">.</span>NetRestrict<span class="token punctuation">,</span>
   log<span class="token punctuation">:</span>         cfg<span class="token punctuation">.</span>Logger<span class="token punctuation">,</span>
   static<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>enode<span class="token punctuation">.</span>ID<span class="token punctuation">]</span><span class="token operator">*</span>dialTask<span class="token punctuation">)</span><span class="token punctuation">,</span>
   dialing<span class="token punctuation">:</span>     <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>enode<span class="token punctuation">.</span>ID<span class="token punctuation">]</span>connFlag<span class="token punctuation">)</span><span class="token punctuation">,</span>
   bootnodes<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>enode<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>BootstrapNodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：加入初始引导节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>BootstrapNodes<span class="token punctuation">)</span>
 <span class="token keyword">if</span> s<span class="token punctuation">.</span>log <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span>log <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③： 加入静态节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> cfg<span class="token punctuation">.</span>StaticNodes <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">addStatic</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bootnodes</code>是初始引导节点，在节点没有接收到任何节点的连接请求，也没有节点可以给我们邻居节点的时候，就去连接<code>bootnodes</code>，它硬编码在了以太坊的源码中。</p><p><code>static</code>是静态节点，如果我们想和某些节点保持长期的连接，就把它们加入到静态节点的列表中</p><p>接下来就是到了运行p2p网络的时候了，主要的函数是：<code>go srv.run(dialer)</code></p><hr><h2 id="运行p2p网络" tabindex="-1"><a class="header-anchor" href="#运行p2p网络" aria-hidden="true">#</a> 运行p2p网络</h2><h3 id="srv-run-dialer" tabindex="-1"><a class="header-anchor" href="#srv-run-dialer" aria-hidden="true">#</a> srv.run(dialer)</h3><p>在p2p网络启动时候，我们会监听远程节点发送过来的TCP请求，到了运行p2p网络的时候，我们则会向远程节点发起TCP的连接请求。首先我们要知道我们所说的发起TCP连接请求可以形容成拨号，每个拨号都是以任务的形式存在，进入到<code>srv.run(dialer)</code>分析</p><p>整个函数就是一个循环，介绍下它的主要功能：</p><h4 id="发起tcp连接任务" tabindex="-1"><a class="header-anchor" href="#发起tcp连接任务" aria-hidden="true">#</a> 发起TCP连接任务</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">scheduleTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>scheduleTasks</code>主要是从queued task 中去获取任务，通过查询dialer以查找新任务并立即启动尽可能多的任务，我们这里要注意个变量<code>maxActiveDialTasks</code>,它的默认值为16 ，而安排任务的核心方法是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>nt <span class="token operator">:=</span> dialstate<span class="token punctuation">.</span><span class="token function">newTasks</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>runningTasks<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>queuedTasks<span class="token punctuation">)</span><span class="token punctuation">,</span> peers<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要做了以下几件事：</p><p>①：为没有连接的静态节点创建拨号任务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> id<span class="token punctuation">,</span> t <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>static <span class="token punctuation">{</span>
  err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">checkDial</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>dest<span class="token punctuation">,</span> peers<span class="token punctuation">)</span>
  <span class="token keyword">switch</span> err <span class="token punctuation">{</span>
  <span class="token keyword">case</span> errNotWhitelisted<span class="token punctuation">,</span> errSelf<span class="token punctuation">:</span>
   s<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Removing static dial candidate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>TCPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">.</span><span class="token function">IP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">.</span><span class="token function">TCP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>static<span class="token punctuation">,</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
   s<span class="token punctuation">.</span>dialing<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>flags
   newtasks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newtasks<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先对拨号节点进行校验：正在连接，已经连接，是本身，不在白名单中，最近连接过的都会报错，并且不是在白名单中的和自身的节点会直接从静态节点列表中删除，校验通过的创建任务。</p><p>②：计算所需的动态拨号数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>needDynDials <span class="token operator">:=</span> s<span class="token punctuation">.</span>maxDynDials
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span>
  <span class="token keyword">if</span> p<span class="token punctuation">.</span>rw<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>dynDialedConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   needDynDials<span class="token operator">--</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> flag <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>dialing <span class="token punctuation">{</span>
  <span class="token keyword">if</span> flag<span class="token operator">&amp;</span>dynDialedConn <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   needDynDials<span class="token operator">--</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主动发起的TCP连接请求是由节点最大连接数除以拨号比率得出的，即<code>maxPeers/radio</code>，同时我们会判断节点中是否已经有建立了连接的节点和正在拨号的节点，有的话会needDynDials会减去。</p><p>③：如果找不到任何的peers,就去随机找bootnode，发起连接</p><p>不过这个一般适用在<strong>测试网或者私链</strong>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needDynDials <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token operator">&gt;</span> fallbackInterval <span class="token punctuation">{</span>
  bootnode <span class="token operator">:=</span> s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  s<span class="token punctuation">.</span>bootnodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
  s<span class="token punctuation">.</span>bootnodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>bootnodes<span class="token punctuation">,</span> bootnode<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token function">addDial</span><span class="token punctuation">(</span>dynDialedConn<span class="token punctuation">,</span> bootnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   needDynDials<span class="token operator">--</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：从节点发现结果中创建动态拨号任务</p><p>如果不满足最大任务数量的话，就去<code>s.lookupBuf</code>中寻找，<code>lookupBuf</code>通过KAD算法获取的节点。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> needDynDials <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token function">addDial</span><span class="token punctuation">(</span>dynDialedConn<span class="token punctuation">,</span> s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   needDynDials<span class="token operator">--</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 s<span class="token punctuation">.</span>lookupBuf <span class="token operator">=</span> s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">,</span> s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">)</span> <span class="token operator">&lt;</span> needDynDials <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>lookupRunning <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span>lookupRunning <span class="token operator">=</span> <span class="token boolean">true</span>
  newtasks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newtasks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>discoverTask<span class="token punctuation">{</span>want<span class="token punctuation">:</span> needDynDials <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>lookupBuf<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：没有需要执行的任务，保持拨号逻辑继续运行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> nRunning <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>newtasks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>hist<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  t <span class="token operator">:=</span> <span class="token operator">&amp;</span>waitExpireTask<span class="token punctuation">{</span>s<span class="token punctuation">.</span>hist<span class="token punctuation">.</span><span class="token function">nextExpiry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">}</span>
  newtasks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newtasks<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此创建新任务结束，返回<code>newTasks</code></p><hr><h4 id="执行tcp连接任务" tabindex="-1"><a class="header-anchor" href="#执行tcp连接任务" aria-hidden="true">#</a> 执行TCP连接任务</h4><p>直到满足最大活动任务数才开始任务执行，具体的执行过程在以下代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>startTasks <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ts <span class="token punctuation">[</span><span class="token punctuation">]</span>task<span class="token punctuation">)</span> <span class="token punctuation">(</span>rest <span class="token punctuation">[</span><span class="token punctuation">]</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">:=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>runningTasks<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxActiveDialTasks <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
   t <span class="token operator">:=</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
   srv<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;New dial task&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
   <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">;</span> taskdone <span class="token operator">&lt;-</span> t <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   runningTasks <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>runningTasks<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>t<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行的主要任务包括下面几种：</p><ol><li>dialTask</li><li>discoverTask</li><li>waitExpireTask</li></ol><p>最关键的就是<code>dialTask</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>dialTask<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">.</span><span class="token function">Incomplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  srv<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;Dial error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token comment">// Try resolving the ID of static nodes if dialing failed.</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>dialError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>staticDialedConn <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> t<span class="token punctuation">.</span>dest<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正的连接是在<code>t.dail</code>中做的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 实际的网络连接操作</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>dialTask<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">,</span> dest <span class="token operator">*</span>enode<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 fd<span class="token punctuation">,</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span>Dialer<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>dialError<span class="token punctuation">{</span>err<span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 mfd <span class="token operator">:=</span> <span class="token function">newMeteredConn</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>TCPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> dest<span class="token punctuation">.</span><span class="token function">IP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> dest<span class="token punctuation">.</span><span class="token function">TCP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> srv<span class="token punctuation">.</span><span class="token function">SetupConn</span><span class="token punctuation">(</span>mfd<span class="token punctuation">,</span> t<span class="token punctuation">.</span>flags<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再往下面就没必要深究了，实际的网络连接操作到此为止了。</p><hr><h4 id="管理tcp连接任务" tabindex="-1"><a class="header-anchor" href="#管理tcp连接任务" aria-hidden="true">#</a> 管理TCP连接任务</h4><p>在TCP连接任务完成后，会对连接有各种处理，如下：</p><p>①：停止p2p服务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>quit<span class="token punctuation">:</span>
<span class="token keyword">break</span> running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>②：添加静态节点到peer列表</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>addstatic<span class="token punctuation">:</span>
srv<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;Adding static node&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
dialstate<span class="token punctuation">.</span><span class="token function">addStatic</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：发送断开连接请求，并断开连接</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>removestatic<span class="token punctuation">:</span>
dialstate<span class="token punctuation">.</span><span class="token function">removeStatic</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
   <span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> peers<span class="token punctuation">[</span>n<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>DiscRequested<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>断开连接会立即返回，并且不会等连接关闭。</p><p>④：标记可信节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>addtrusted<span class="token punctuation">:</span>
trusted<span class="token punctuation">[</span>n<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：从信任节点中删除一个节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> n <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>removetrusted<span class="token punctuation">:</span>
<span class="token function">delete</span><span class="token punctuation">(</span>trusted<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥：拨号任务完成</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>taskdone<span class="token punctuation">:</span>newTasks
dialstate<span class="token punctuation">.</span><span class="token function">taskDone</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">delTask</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑦：连接已通过加密握手,远程身份是已知的（但尚未经过验证）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> c <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>checkpointPostHandshake<span class="token punctuation">:</span>
c<span class="token punctuation">.</span>cont <span class="token operator">&lt;-</span> srv<span class="token punctuation">.</span><span class="token function">postHandshakeChecks</span><span class="token punctuation">(</span>peers<span class="token punctuation">,</span> inboundCount<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑧：连接已通过协议握手，已知其功能并验证了远程身份</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">addPeerChecks</span><span class="token punctuation">(</span>peers<span class="token punctuation">,</span> inboundCount<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token comment">// 握手完成，所有检查完毕</span>
    p <span class="token operator">:=</span> <span class="token function">newPeer</span><span class="token punctuation">(</span>srv<span class="token punctuation">.</span>log<span class="token punctuation">,</span> c<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>Protocols<span class="token punctuation">)</span>
   <span class="token comment">//启用了消息事件就把peerfeed传给peer</span>
    <span class="token keyword">if</span> srv<span class="token punctuation">.</span>EnableMsgEvents <span class="token punctuation">{</span>
     p<span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token operator">&amp;</span>srv<span class="token punctuation">.</span>peerFeed
    <span class="token punctuation">}</span>
    name <span class="token operator">:=</span> <span class="token function">truncateName</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;peers&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">go</span> srv<span class="token punctuation">.</span><span class="token function">runPeer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 重点</span>
    peers<span class="token punctuation">[</span>c<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> p
    <span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token function">Inbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     inboundCount<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> conn<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>fd<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>meteredConn<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
     conn<span class="token punctuation">.</span><span class="token function">handshakeDone</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment">// </span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>addPeerChecks</code>会删除没有匹配协议的连接，并且会重复握手后检查，因为自执行这些检查后可能已更改。连接通过握手后，将调用<code>handshakeDone</code></p><p>⑨：Peer断开连接</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> pd <span class="token operator">:=</span> <span class="token operator">&lt;-</span>srv<span class="token punctuation">.</span>delpeer<span class="token punctuation">:</span>
d <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">PrettyDuration</span><span class="token punctuation">(</span>mclock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> pd<span class="token punctuation">.</span>created<span class="token punctuation">)</span>
   pd<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Removing p2p peer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;peers&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;duration&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">&quot;req&quot;</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>requested<span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>err<span class="token punctuation">)</span>
   <span class="token function">delete</span><span class="token punctuation">(</span>peers<span class="token punctuation">,</span> pd<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> pd<span class="token punctuation">.</span><span class="token function">Inbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inboundCount<span class="token operator">--</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止整个主要的处理TCP连接的循环讲解结束。</p><hr><h2 id="总结-参考" tabindex="-1"><a class="header-anchor" href="#总结-参考" aria-hidden="true">#</a> 总结&amp;参考</h2><ol><li>开启p2p网络主要包括：设置本地节点，监听TCP连接以及设置节点发现</li><li>运行P2P网络之后主要包括：发起TCP连接并执行连接，以及相关的连接处理。</li></ol>`,113),k=n("p",null,"公众号：区块链技术栈",-1),r={href:"https://mindcarver.cn/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const s=u("ExternalLinkIcon");return o(),e("div",null,[i,n("blockquote",null,[k,n("p",null,[n("a",r,[a("https://mindcarver.cn/"),p(s)])]),n("p",null,[n("a",d,[a("https://github.com/blockchainGuide/"),p(s)])])])])}const h=t(l,[["render",v],["__file","1.Etheric_fang_source_analysis_of_p2p_network_boot.html.vue"]]);export{h as default};
