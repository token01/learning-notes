import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a,d as s,w as u,b as n,e as t,r as e}from"./app.9fe353dd.js";const r="/assets/springinit.7415e138.webp",d={},k=t(`<h2 id="spring-问答" tabindex="-1"><a class="header-anchor" href="#spring-问答" aria-hidden="true">#</a> Spring 问答</h2><h3 id="spring-bean-生命周期" tabindex="-1"><a class="header-anchor" href="#spring-bean-生命周期" aria-hidden="true">#</a> Spring Bean 生命周期</h3><ol><li><p><strong>实例化 Instantiation</strong></p></li><li><p><strong>属性赋值 Populate</strong></p></li><li><p>BeanNameAware</p></li><li><p>BeanFactoryAware, ApplicationContextAware</p></li><li><p>BeanPostProcessor#postProcessBeforeInitialization</p></li><li><p>InitializingBean#afterPropertiesSet</p></li><li><p>@PostConstruct</p></li><li><p><strong>初始化 Initialization</strong></p></li><li><p>BeanPostProcessor#postProcessAfterInitialization</p></li><li><p>DisposableBean</p></li><li><p>@PreDestroy</p></li><li><p><strong>销毁 Destruction</strong></p></li></ol><blockquote><p><code>ConfigurableApplicationContext#close()</code><code>((AbstractApplicationContext)context).registerShutdownHook();</code> 此代码将注册 jvm系统钩子 <code>Runtime.getRuntime().addShutdownHook(...)</code></p></blockquote><blockquote><p>主线生命周期参考源码</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory
doCreateBean
createBean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="spring" loading="lazy"></p><h3 id="postconstruct-predestroy-实现原理" tabindex="-1"><a class="header-anchor" href="#postconstruct-predestroy-实现原理" aria-hidden="true">#</a> PostConstruct,PreDestroy 实现原理</h3><p>在 xml 配置中这两个注解分别对应 init-method， destory-method</p><p>Constructor &gt; @Autowired &gt; @PostConstruct</p><p>具体参考 <a href="#Spring-Bean-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">Spring Bean 生命周期</a> 源码参考部分</p><h3 id="spring-事务隔离级别与传播机制" tabindex="-1"><a class="header-anchor" href="#spring-事务隔离级别与传播机制" aria-hidden="true">#</a> Spring 事务隔离级别与传播机制</h3><h4 id="事务传播机制" tabindex="-1"><a class="header-anchor" href="#事务传播机制" aria-hidden="true">#</a> 事务传播机制</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Transactional(propagation=Propagation.REQUIRED)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>REQUIRED : 如果有事务则加入事务，如果没有事务，则创建一个新的（默认值）</li><li>NOT_SUPPORTED : Spring不为当前方法开启事务，相当于没有事务</li><li>REQUIRES_NEW : 不管是否存在事务，都创建一个新的事务，原来的方法挂起，新的方法执行完毕后，继续执行老的事务</li><li>MANDATORY : 必须在一个已有的事务中执行，否则报错</li><li>NEVER : 必须在一个没有的事务中执行，否则报错</li><li>SUPPORTS : 如果其他bean调用这个方法时，其他bean声明了事务，则就用这个事务，如果没有声明事务，那就不用事务</li><li>NESTED : 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与REQUIRED类似的操作</li></ul><h4 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Transactional(isolation=Isolation.DEFAULT)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>ISOLOCATION_DEFAULT: 数据库默认级别。 ORACLE（读已提交） MySQL（可重复读）</li><li>ISOLOCATION_READ_UNCOMMITTED: 允许读取未提交的读， 可能导致脏读，不可重复读，幻读</li><li>ISOLOCATION_READ_COMMITTED: 允许读取已提交的读，可能导致不可重复读，幻读</li><li>ISOLOCATION_REPEATABLE_READ : 不能能更新另一个事务修改单尚未提交(回滚)的数据，可能引起幻读</li><li>ISOLOCATION_SERIALIZABLE: 序列执行效率低</li></ul><h3 id="bean的作用域" tabindex="-1"><a class="header-anchor" href="#bean的作用域" aria-hidden="true">#</a> Bean的作用域</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_SINGLETON</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MilestoneServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MilestoneService</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>org.springframework.beans.factory.config.ConfigurableBeanFactory#SCOPE_PROTOTYPE</p><p>唯一bean实例，Spring中的bean默认都是单例的。</p></li><li><p>org.springframework.beans.factory.config.ConfigurableBeanFactory#SCOPE_SINGLETON</p><p>每次请求都会创建一个新的bean实例。</p></li><li><p>org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST</p><p>每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效</p></li><li><p>org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</p><p>每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP session内有效。</p></li></ul><p>默认单例情况下，有可能发生线程安全问题。当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。</p><ol><li>在bean对象中尽量避免定义可变的成员变量</li><li>使用 ThreadLocal。Spring 源码中多种上下文都是这么使用的</li></ol><h3 id="spring框架中用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#spring框架中用到了哪些设计模式" aria-hidden="true">#</a> Spring框架中用到了哪些设计模式</h3><ul><li>工厂设计模式：Spring使用工厂模式通过BeanFactory和ApplicationContext创建bean对象。</li><li>代理设计模式：Spring AOP功能的实现。</li><li>单例设计模式：Spring中的bean默认都是单例的。</li><li>模板方法模式：Spring Security中的AbstractUserDetailsAuthenticationProvider#authenticate</li><li>包装器设计模式：我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li><li>观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。spring中Observer模式常用的地方是listener的实现。如ApplicationListener。</li><li>适配器模式：Spring AOP的增强或通知（Advice）使用到了适配器模式、Spring MVC中也是用到了适配器模式适配Controller。</li></ul><h3 id="spring-三级缓存解决循环依赖" tabindex="-1"><a class="header-anchor" href="#spring-三级缓存解决循环依赖" aria-hidden="true">#</a> Spring 三级缓存解决循环依赖</h3><p>循环依赖：类A 依赖 类B ，类B 又依赖 类A</p><p>关闭循环依赖：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无法解决的循环依赖</p><p>一般可以处理 <code>setter</code> 注入或 属性 <code>@Autowired</code><br> 无法处理<code>构造器注入</code> 和 <code>@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</code></p><p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一级缓存：缓存已经初始化完成，可以暴露的 bean 对象，已经完成初始化，属性设置</span>
<span class="token doc-comment comment">/** Cache of singleton objects: bean name to bean instance. */</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 三级缓存：存储回调方法，可以调用回调方法 getObject 获取正在创建 bean 对象</span>
 <span class="token doc-comment comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 二级缓存：缓存的是已经完成初始化但还没设置属性的 bean 对象，正在创建中</span>
 <span class="token doc-comment comment">/** Cache of early singleton objects: bean name to bean instance. */</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 context.getBean(A.class)，旨在获取容器内的单例A</li><li>先从一级缓存 singletonObjects 中去获取。（如果获取到就直接return）</li><li>如果获取不到或者对象正在创建中（isSingletonCurrentlyInCreation()），那就再从二级缓存 earlySingletonObjects 中获取。（如果获取到就直接return）</li><li>如果还是获取不到，且允许 singletonFactories（allowEarlyReference=true）通过 getObject() 获取。就从三级缓存 singletonFactory.getObject() 获取。（如果获取到了就从 singletonFactories 中移除，并且放进 earlySingletonObjects 。其实也就是从三级缓存移动（是剪切、不是复制哦~）到了二级缓存）</li><li>显然初次获取A是不存在的，因此走A的创建之路</li><li>实例化A，放入三级缓存</li><li>初始化A，设置属性，发现有 @Autowired B类</li><li>依旧去三个缓存中查找，显然还是没有，走B的创建之路</li><li>实例化B，放入三级缓存</li><li>初始化B，设置属性，发现有 @Autowired A类</li><li>缓存中查找，在三级缓存中发现，获取完在三级缓存中删除，保存到二级缓存中</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>B初始化成功,删除二级三级缓存，保存到一级中</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> singletonObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>B实例已经成功返回了，因此最终A也初始化成功</li><li>B持有的已经是初始化完成的A，A持有的也是初始化完成的B</li></ul><h2 id="spring-security" tabindex="-1"><a class="header-anchor" href="#spring-security" aria-hidden="true">#</a> Spring Security</h2>`,39),v=a("h3",{id:"spring-security-oauth",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#spring-security-oauth","aria-hidden":"true"},"#"),n(" Spring-Security-OAuth")],-1),g={href:"https://projects.spring.io/spring-security-oauth/docs/oauth2.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h4 id="授权" tabindex="-1"><a class="header-anchor" href="#授权" aria-hidden="true">#</a> 授权</h4><ul><li>授权端点 <code>/oauth/authorize</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>AuthorizationEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>授权确认端点 <code>/oauth/confirm_access</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>WhitelabelApprovalEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端是否自动确认授权取决于 <code>org.springframework.security.oauth2.providerClientDetails#isAutoApprove</code></p><ul><li>授权失败端点 <code>/oauth/error</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>WhitelabelErrorEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>自定义上面两个URL</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span>AuthorizationServerEndpointsConfiguration</span>#authorizationEndpoint
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configurers<span class="token punctuation">.</span></span>AuthorizationServerEndpointsConfigurer</span>#pathMapping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获得-token" tabindex="-1"><a class="header-anchor" href="#获得-token" aria-hidden="true">#</a> 获得 token</h4><ul><li>获得令牌端点 <code>/oauth/token</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>TokenEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生产 Token</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span></span>AbstractTokenGranter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="获得-token-key" tabindex="-1"><a class="header-anchor" href="#获得-token-key" aria-hidden="true">#</a> 获得 Token Key</h4><p>返回 JWT具体算法和公钥，如果没有使用 <code>KeyPair</code> 直接用 <code>SigningKey</code> 将直接这个 <code>SigningKey</code> 这是很危险的</p><ul><li>获得令牌签名（公钥）端点 <code>/oauth/token_key</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>TokenKeyEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="验证解析-token" tabindex="-1"><a class="header-anchor" href="#验证解析-token" aria-hidden="true">#</a> 验证解析 Token</h4><ul><li>验证解析令牌端点 <code>/oauth/check_token</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span></span>CheckTokenEndpoint</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>官方文档介绍，主要考虑授权服务与资源服务分开的情况，<code>RemoteTokenServices</code> 它将允许资源服务器通过HTTP请求来解码令牌（也就是授权服务的 <code>/oauth/check_token</code> 端点）。如果你的资源服务没有太大的访问量的话，那么使用<code>RemoteTokenServices</code> 将会很方便（所有受保护的资源请求都将请求一次授权服务用以检验token值），或者你可以通过缓存来保存每一个token验证的结果</p><ul><li>验证流程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span>OAuth2AuthenticationProcessingFilter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从 <code>header(Bearer Token Header)</code> 、<code>query(access_token)</code> 里获取 token 进行认证处理</p><h4 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h4><ul><li>默认处理</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>error<span class="token punctuation">.</span></span>DefaultWebResponseExceptionTranslator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Spring MVC 处理 <code>@ExceptionHandler</code> <code>HttpMessageConverters</code></li></ul>`,30);function b(h,y){const o=e("RouterLink"),p=e("ExternalLinkIcon");return c(),l("div",null,[k,a("p",null,[s(o,{to:"/devops/SSO.html"},{default:u(()=>[n("SSO OAuth关键概念")]),_:1})]),v,a("p",null,[n("关键源码位置，结合"),a("a",g,[n("官网文档"),s(p)]),n("效果更好")]),m])}const S=i(d,[["render",b],["__file","Spring.html.vue"]]);export{S as default};
