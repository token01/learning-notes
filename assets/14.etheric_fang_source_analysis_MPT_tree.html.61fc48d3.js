import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as n,d as a,w as i,b as s,f as u,r as t}from"./app.62e9bec7.js";const k={},r=n("blockquote",null,[n("p",null,"\u6D45\u8C08\u4EE5\u592A\u574A\u6E90\u7801\u5206\u6790\u4E4BMPT\u6811-\u4E0B")],-1),d=n("code",null,"trie",-1),v=u(`<div class="language-GO ext-GO line-numbers-mode"><pre class="language-GO"><code>|-encoding.go \u4E3B\u8981\u8BB2\u7F16\u7801\u4E4B\u95F4\u7684\u8F6C\u6362
|-hasher.go \u5B9E\u73B0\u4E86\u4ECE\u67D0\u4E2A\u7ED3\u70B9\u5F00\u59CB\u8BA1\u7B97\u5B50\u6811\u7684\u54C8\u5E0C\u7684\u529F\u80FD
|-node.go \u5B9A\u4E49\u4E86\u4E00\u4E2ATrie\u6811\u4E2D\u6240\u6709\u7ED3\u70B9\u7684\u7C7B\u578B\u548C\u89E3\u6790\u7684\u4EE3\u7801
|-sync.go \u5B9E\u73B0\u4E86SyncTrie\u5BF9\u8C61\u7684\u5B9A\u4E49\u548C\u6240\u6709\u65B9\u6CD5
|-iterator.go \u5B9A\u4E49\u4E86\u6240\u6709\u679A\u4E3E\u76F8\u5173\u63A5\u53E3\u548C\u5B9E\u73B0
|-secure_trie.go \u5B9E\u73B0\u4E86SecureTrie\u5BF9\u8C61
|-proof.go \u4E3Akey\u6784\u9020\u4E00\u4E2Amerkle\u8BC1\u660E
|-trie.go Trie\u6811\u7684\u589E\u5220\u6539\u67E5
|-database.go \u5BF9\u5185\u5B58\u4E2D\u7684trie\u6811\u8282\u70B9\u8FDB\u884C\u5F15\u7528\u8BA1\u6570
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B9E\u73B0\u6982\u89C8" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u6982\u89C8" aria-hidden="true">#</a> \u5B9E\u73B0\u6982\u89C8</h2><h3 id="encoding-go" tabindex="-1"><a class="header-anchor" href="#encoding-go" aria-hidden="true">#</a> encoding.go</h3><p>\u8FD9\u4E2A\u4E3B\u8981\u662F\u8BB2\u4E09\u79CD\u7F16\u7801\uFF08<code>KEYBYTES encoding</code>\u3001<code>HEX encoding</code>\u3001<code>COMPACT encoding</code>\uFF09\u7684\u5B9E\u73B0\u4E0E\u8F6C\u6362\uFF0C<code>trie</code>\u4E2D\u5168\u7A0B\u90FD\u9700\u8981\u7528\u5230\u8FD9\u4E9B\uFF0C\u8BE5\u6587\u4EF6\u4E2D\u4E3B\u8981\u5B9E\u73B0\u4E86\u5982\u4E0B\u529F\u80FD\uFF1A</p><ol><li>hex\u7F16\u7801\u8F6C\u6362\u4E3ACompact\u7F16\u7801\uFF1A<code>hexToCompact()</code></li><li>Compact\u7F16\u7801\u8F6C\u6362\u4E3Ahex\u7F16\u7801\uFF1A<code>compactToHex()</code></li><li>keybytes\u7F16\u7801\u8F6C\u6362\u4E3AHex\u7F16\u7801\uFF1A<code>keybytesToHex()</code></li><li>hex\u7F16\u7801\u8F6C\u6362\u4E3Akeybytes\u7F16\u7801\uFF1A<code>hexToKeybytes()</code></li><li>\u83B7\u53D6\u4E24\u4E2A\u5B57\u8282\u6570\u7EC4\u7684\u516C\u5171\u524D\u7F00\u7684\u957F\u5EA6\uFF1A<code>prefixLen()</code></li></ol><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hexToCompact</span><span class="token punctuation">(</span>hex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    terminator <span class="token operator">:=</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">hasTerm</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\u68C0\u67E5\u662F\u5426\u6709\u7ED3\u5C3E\u4E3A0x10 =&gt; 16</span>
        terminator <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//\u6709\u7ED3\u675F\u6807\u8BB016\u8BF4\u660E\u662F\u53F6\u5B50\u8282\u70B9</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">//\u53BB\u9664\u5C3E\u90E8\u6807\u8BB0</span>
    <span class="token punctuation">}</span>
    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// \u5B57\u8282\u6570\u7EC4</span>
    
    buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> terminator <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token comment">// \u6807\u5FD7byte\u4E3A00000000\u6216\u800500100000</span>
    <span class="token comment">//\u5982\u679C\u957F\u5EA6\u4E3A\u5947\u6570\uFF0C\u6DFB\u52A0\u5947\u6570\u4F4D\u6807\u5FD71\uFF0C\u5E76\u628A\u7B2C\u4E00\u4E2Anibble\u5B57\u8282\u653E\u5165buf[0]\u7684\u4F4E\u56DB\u4F4D</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token comment">// \u5947\u6570\u6807\u5FD7 00110000</span>
        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> hex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// \u7B2C\u4E00\u4E2Anibble\u5305\u542B\u5728\u7B2C\u4E00\u4E2A\u5B57\u8282\u4E2D 0011xxxx</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u5C06\u4E24\u4E2Anibble\u5B57\u8282\u5408\u5E76\u6210\u4E00\u4E2A\u5B57\u8282</span>
    <span class="token function">decodeNibbles</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> buf
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//compact\u7F16\u7801\u8F6C\u5316\u4E3AHex\u7F16\u7801</span>
<span class="token keyword">func</span> <span class="token function">compactToHex</span><span class="token punctuation">(</span>compact <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    base <span class="token operator">:=</span> <span class="token function">keybytesToHex</span><span class="token punctuation">(</span>compact<span class="token punctuation">)</span>
    base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
     <span class="token comment">// apply terminator flag</span>
    <span class="token comment">// base[0]\u5305\u62EC\u56DB\u79CD\u60C5\u51B5</span>
    <span class="token comment">// 00000000 \u6269\u5C55\u8282\u70B9\u5076\u6570\u4F4D</span>
    <span class="token comment">// 00000001 \u6269\u5C55\u8282\u70B9\u5947\u6570\u4F4D</span>
    <span class="token comment">// 00000010 \u53F6\u5B50\u8282\u70B9\u5076\u6570\u4F4D</span>
    <span class="token comment">// 00000011 \u53F6\u5B50\u8282\u70B9\u5947\u6570\u4F4D</span>

    <span class="token comment">// apply terminator flag</span>
    <span class="token keyword">if</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
       <span class="token comment">//\u5982\u679C\u662F\u53F6\u5B50\u8282\u70B9\uFF0C\u672B\u5C3E\u6DFB\u52A0Hex\u6807\u5FD7\u4F4D16</span>
        base <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// apply odd flag</span>
    <span class="token comment">//\u5982\u679C\u662F\u5076\u6570\u4F4D\uFF0Cchop\u7B49\u4E8E2\uFF0C\u5426\u5219\u7B49\u4E8E1</span>
    chop <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">-</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span>
    <span class="token keyword">return</span> base<span class="token punctuation">[</span>chop<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//compact\u7F16\u7801\u8F6C\u5316\u4E3AHex\u7F16\u7801</span>
<span class="token keyword">func</span> <span class="token function">compactToHex</span><span class="token punctuation">(</span>compact <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    base <span class="token operator">:=</span> <span class="token function">keybytesToHex</span><span class="token punctuation">(</span>compact<span class="token punctuation">)</span>
    base <span class="token operator">=</span> base<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
     <span class="token comment">// apply terminator flag</span>
    <span class="token comment">// base[0]\u5305\u62EC\u56DB\u79CD\u60C5\u51B5</span>
    <span class="token comment">// 00000000 \u6269\u5C55\u8282\u70B9\u5076\u6570\u4F4D</span>
    <span class="token comment">// 00000001 \u6269\u5C55\u8282\u70B9\u5947\u6570\u4F4D</span>
    <span class="token comment">// 00000010 \u53F6\u5B50\u8282\u70B9\u5076\u6570\u4F4D</span>
    <span class="token comment">// 00000011 \u53F6\u5B50\u8282\u70B9\u5947\u6570\u4F4D</span>

    <span class="token comment">// apply terminator flag</span>
    <span class="token keyword">if</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
       <span class="token comment">//\u5982\u679C\u662F\u53F6\u5B50\u8282\u70B9\uFF0C\u672B\u5C3E\u6DFB\u52A0Hex\u6807\u5FD7\u4F4D16</span>
        base <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// apply odd flag</span>
    <span class="token comment">//\u5982\u679C\u662F\u5076\u6570\u4F4D\uFF0Cchop\u7B49\u4E8E2\uFF0C\u5426\u5219\u7B49\u4E8E1</span>
    chop <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">-</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span>
    <span class="token keyword">return</span> base<span class="token punctuation">[</span>chop<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u5C06\u5341\u516D\u8FDB\u5236\u7684bibbles\u8F6C\u6210key bytes\uFF0C\u8FD9\u53EA\u80FD\u7528\u4E8E\u5076\u6570\u957F\u5EA6\u7684key</span>
<span class="token keyword">func</span> <span class="token function">hexToKeybytes</span><span class="token punctuation">(</span>hex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">hasTerm</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hex <span class="token operator">=</span> hex<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t convert hex key of odd length&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    key <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">decodeNibbles</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> key
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// \u8FD4\u56DEa\u548Cb\u7684\u516C\u5171\u524D\u7F00\u7684\u957F\u5EA6</span>
<span class="token keyword">func</span> <span class="token function">prefixLen</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length <span class="token punctuation">{</span>
        length <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="node-go" tabindex="-1"><a class="header-anchor" href="#node-go" aria-hidden="true">#</a> node.go</h3><h4 id="\u56DB\u79CD\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u56DB\u79CD\u8282\u70B9" aria-hidden="true">#</a> \u56DB\u79CD\u8282\u70B9</h4><p>node \u63A5\u53E3\u5206\u56DB\u79CD\u5B9E\u73B0: fullNode\uFF0CshortNode\uFF0CvalueNode\uFF0ChashNode\uFF0C\u5176\u4E2D\u53EA\u6709 fullNode \u548C shortNode \u53EF\u4EE5\u5E26\u6709\u5B50\u8282\u70B9\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> <span class="token punctuation">(</span>
	fullNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Children <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span>node <span class="token comment">// \u5206\u652F\u8282\u70B9</span>
		flags    nodeFlag
	<span class="token punctuation">}</span>
	shortNode <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">//\u6269\u5C55\u8282\u70B9</span>
		Key   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
		Val   node <span class="token comment">//\u53EF\u80FD\u6307\u5411\u53F6\u5B50\u8282\u70B9\uFF0C\u4E5F\u53EF\u80FD\u6307\u5411\u5206\u652F\u8282\u70B9\u3002</span>
		flags nodeFlag
	<span class="token punctuation">}</span>
	hashNode  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	valueNode <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">// \u53F6\u5B50\u8282\u70B9\u503C\uFF0C\u4F46\u662F\u8BE5\u53F6\u5B50\u8282\u70B9\u6700\u7EC8\u8FD8\u662F\u4F1A\u5305\u88C5\u5728shortNode\u4E2D</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trie-go" tabindex="-1"><a class="header-anchor" href="#trie-go" aria-hidden="true">#</a> trie.go</h3><p>Trie\u5BF9\u8C61\u5B9E\u73B0\u4E86MPT\u6811\u7684\u6240\u6709\u529F\u80FD\uFF0C\u5305\u62EC(key, value)\u5BF9\u7684\u589E\u5220\u6539\u67E5\u3001\u8BA1\u7B97\u9ED8\u514B\u5C14\u54C8\u5E0C\uFF0C\u4EE5\u53CA\u5C06\u6574\u4E2A\u6811\u5199\u5165\u6570\u636E\u5E93\u4E2D\u3002</p><h3 id="iterator-go" tabindex="-1"><a class="header-anchor" href="#iterator-go" aria-hidden="true">#</a> iterator.go</h3><p><code>nodeIterator</code>\u63D0\u4F9B\u4E86\u904D\u5386\u6811\u5185\u90E8\u6240\u6709\u7ED3\u70B9\u7684\u529F\u80FD\u3002\u5176\u7ED3\u6784\u5982\u4E0B\uFF1A\u6B64\u7ED3\u6784\u4F53\u662F\u5728<code>trie.go</code>\u5B9A\u4E49\u7684</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> nodeIterator <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	trie<span class="token punctuation">.</span>NodeIterator
	t   <span class="token operator">*</span>odrTrie
	err <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u91CC\u9762\u5305\u542B\u4E86\u4E00\u4E2A\u63A5\u53E3<code>NodeIterator</code>\uFF0C\u5B83\u7684\u5B9E\u73B0\u5219\u662F\u7531<code>iterator.go</code>\u6765\u63D0\u4F9B\u7684\uFF0C\u5176\u65B9\u6CD5\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span>descend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> common<span class="token punctuation">.</span>Hash 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">LeafProof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">seek</span><span class="token punctuation">(</span>prefix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">peek</span><span class="token punctuation">(</span>descend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">nextChild</span><span class="token punctuation">(</span>parent <span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> ancestor common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span>state <span class="token operator">*</span>nodeIteratorState<span class="token punctuation">,</span> parentIndex <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> 
<span class="token keyword">func</span> <span class="token punctuation">(</span>it <span class="token operator">*</span>nodeIterator<span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NodeIterator</code>\u7684\u6838\u5FC3\u662F<code>Next</code>\u65B9\u6CD5\uFF0C\u6BCF\u8C03\u7528\u4E00\u6B21\u8FD9\u4E2A\u65B9\u6CD5\uFF0CNodeIterator\u5BF9\u8C61\u4EE3\u8868\u7684\u5F53\u524D\u8282\u70B9\u5C31\u4F1A\u66F4\u65B0\u81F3\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u5F53\u6240\u6709\u7ED3\u70B9\u904D\u5386\u7ED3\u675F\uFF0C<code>Next</code>\u65B9\u6CD5\u8FD4\u56DE<code>false</code>\u3002</p><p>\u751F\u6210NodeIterator\u7ED3\u53E3\u7684\u65B9\u6CD5\u6709\u4EE5\u4E0B3\u79CD\uFF1A</p><p><strong>\u2460\uFF1ATrie.NodeIterator(start []byte)</strong></p><p>\u901A\u8FC7<code>start</code>\u53C2\u6570\u6307\u5B9A\u4ECE\u54EA\u4E2A\u8DEF\u5F84\u5F00\u59CB\u904D\u5386\uFF0C\u5982\u679C\u4E3A<code>nil</code>\u5219\u4ECE\u5934\u5230\u5C3E\u6309\u987A\u5E8F\u904D\u5386\u3002</p><p><strong>\u2461\uFF1ANewDifferenceIterator(a, b NodeIterator)</strong></p><p>\u5F53\u8C03\u7528<code>NewDifferenceIterator(a, b NodeIterator)</code>\u540E\uFF0C\u751F\u6210\u7684<code>NodeIterator</code>\u53EA\u904D\u5386\u5B58\u5728\u4E8E b \u4F46\u4E0D\u5B58\u5728\u4E8E a \u4E2D\u7684\u7ED3\u70B9\u3002</p><p><strong>\u2462\uFF1ANewUnionIterator(iters []NodeIterator)</strong></p><p>\u5F53\u8C03\u7528<code>NewUnionIterator(its []NodeIterator)</code>\u540E\uFF0C\u751F\u6210\u7684<code>NodeIterator</code>\u904D\u5386\u7684\u7ED3\u70B9\u662F\u6240\u6709\u4F20\u5165\u7684\u7ED3\u70B9\u7684\u5408\u96C6\u3002</p><h3 id="database-go" tabindex="-1"><a class="header-anchor" href="#database-go" aria-hidden="true">#</a> database.go</h3><p><code>Database</code>\u662F<code>trie</code>\u6A21\u5757\u5BF9\u771F\u6B63\u6570\u636E\u5E93\u7684\u7F13\u5B58\u5C42\uFF0C\u5176\u76EE\u7684\u662F\u5BF9\u7F13\u5B58\u7684\u8282\u70B9\u8FDB\u884C\u5F15\u7528\u8BA1\u6570\uFF0C\u4ECE\u800C\u5B9E\u73B0\u533A\u5757\u7684\u4FEE\u526A\u529F\u80FD\u3002\u4E3B\u8981\u65B9\u6CD5\u5982\u4E0B\uFF1A</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewDatabase</span><span class="token punctuation">(</span>diskdb ethdb<span class="token punctuation">.</span>KeyValueStore<span class="token punctuation">)</span> <span class="token operator">*</span>Database
<span class="token keyword">func</span> <span class="token function">NewDatabaseWithCache</span><span class="token punctuation">(</span>diskdb ethdb<span class="token punctuation">.</span>KeyValueStore<span class="token punctuation">,</span> cache <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Database 
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">DiskDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ethdb<span class="token punctuation">.</span>KeyValueReader
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">InsertBlob</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> blob <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> blob <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> node node<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">insertPreimage</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> preimage <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">node</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> node
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Node</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">preimage</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">secureKey</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Hash
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Reference</span><span class="token punctuation">(</span>child common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> parent common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Dereference</span><span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">dereference</span><span class="token punctuation">(</span>child common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> parent common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Cap</span><span class="token punctuation">(</span>limit common<span class="token punctuation">.</span>StorageSize<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>node common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> report <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="security-trie-go" tabindex="-1"><a class="header-anchor" href="#security-trie-go" aria-hidden="true">#</a> security_trie.go</h3><p>\u53EF\u4EE5\u7406\u89E3\u4E3A\u52A0\u5BC6\u4E86\u7684<code>trie</code>\u7684\u5B9E\u73B0\uFF0C<code>ecurity_trie</code>\u5305\u88C5\u4E86\u4E00\u4E0B<code>trie</code>\u6811\uFF0C \u6240\u6709\u7684<code>key</code>\u90FD\u8F6C\u6362\u6210<code>keccak256</code>\u7B97\u6CD5\u8BA1\u7B97\u7684<code>hash</code>\u503C\u3002\u540C\u65F6\u5728\u6570\u636E\u5E93\u91CC\u9762\u5B58\u50A8<code>hash</code>\u503C\u5BF9\u5E94\u7684\u539F\u59CB\u7684<code>key</code>\u3002 \u4F46\u662F\u5B98\u65B9\u5728\u4EE3\u7801\u91CC\u4E5F\u6CE8\u91CA\u4E86\uFF0C\u8FD9\u4E2A\u4EE3\u7801\u4E0D\u7A33\u5B9A\uFF0C\u9664\u4E86\u6D4B\u8BD5\u7528\u4F8B\uFF0C\u522B\u7684\u5730\u65B9\u5E76\u6CA1\u6709\u4F7F\u7528\u8BE5\u4EE3\u7801\u3002</p><h3 id="proof-go" tabindex="-1"><a class="header-anchor" href="#proof-go" aria-hidden="true">#</a> proof.go</h3><ul><li>Prove()\uFF1A\u6839\u636E\u7ED9\u5B9A\u7684<code>key</code>\uFF0C\u5728<code>trie</code>\u4E2D\uFF0C\u5C06\u6EE1\u8DB3<code>key</code>\u4E2D\u6700\u5927\u957F\u5EA6\u524D\u7F00\u7684\u8DEF\u5F84\u4E0A\u7684\u8282\u70B9\u90FD\u52A0\u5165\u5230<code>proofDb</code>\uFF08\u961F\u5217\u4E2D\u6BCF\u4E2A\u5143\u7D20\u6EE1\u8DB3\uFF1A\u672A\u7F16\u7801\u7684hash\u4EE5\u53CA\u5BF9\u5E94<code>rlp</code>\u7F16\u7801\u540E\u7684\u8282\u70B9\uFF09</li><li>VerifyProof()\uFF1A\u9A8C\u8BC1<code>proffDb</code>\u4E2D\u662F\u5426\u5B58\u5728\u6EE1\u8DB3\u8F93\u5165\u7684<code>hash</code>\uFF0C\u548C\u5BF9\u5E94key\u7684\u8282\u70B9\uFF0C\u5982\u679C\u6EE1\u8DB3\uFF0C\u5219\u8FD4\u56DE<code>rlp</code>\u89E3\u7801\u540E\u7684\u8BE5\u8282\u70B9\u3002</li></ul><h2 id="\u5B9E\u73B0\u7EC6\u8282" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u7EC6\u8282" aria-hidden="true">#</a> \u5B9E\u73B0\u7EC6\u8282</h2><h3 id="trie\u5BF9\u8C61\u7684\u589E\u5220\u6539\u67E5" tabindex="-1"><a class="header-anchor" href="#trie\u5BF9\u8C61\u7684\u589E\u5220\u6539\u67E5" aria-hidden="true">#</a> Trie\u5BF9\u8C61\u7684\u589E\u5220\u6539\u67E5</h3><p>\u2460\uFF1A<strong>Trie\u6811\u7684\u521D\u59CB\u5316</strong></p><p>\u5982\u679C<code>root</code>\u4E0D\u4E3A\u7A7A\uFF0C\u5C31\u901A\u8FC7<code>resolveHash</code>\u6765\u52A0\u8F7D\u6574\u4E2A<code>Trie</code>\u6811\uFF0C\u5982\u679C\u4E3A\u7A7A\uFF0C\u5C31\u65B0\u5EFA\u4E00\u4E2A<code>Trie</code>\u6811\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Trie<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;trie.New called without a database&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	trie <span class="token operator">:=</span> <span class="token operator">&amp;</span>Trie<span class="token punctuation">{</span>
		db<span class="token punctuation">:</span> db<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> root <span class="token operator">!=</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root <span class="token operator">!=</span> emptyRoot <span class="token punctuation">{</span>
		rootnode<span class="token punctuation">,</span> err <span class="token operator">:=</span> trie<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		trie<span class="token punctuation">.</span>root <span class="token operator">=</span> rootnode
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> trie<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2461\uFF1A<strong>Trie\u6811\u7684\u63D2\u5165</strong></p><p>\u9996\u5148Trie\u6811\u7684\u63D2\u5165\u662F\u4E2A\u9012\u5F52\u8C03\u7528\u7684\u8FC7\u7A0B\uFF0C\u5B83\u4F1A\u4ECE\u6839\u5F00\u59CB\u627E\uFF0C\u4E00\u76F4\u627E\u5230\u5408\u9002\u7684\u4F4D\u7F6E\u63D2\u5165\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> value node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u53C2\u6570\u8BF4\u660E\uFF1A</p><ul><li>n: \u5F53\u524D\u8981\u63D2\u5165\u7684\u8282\u70B9</li><li>prefix: \u5F53\u524D\u5DF2\u7ECF\u5904\u7406\u5B8C\u7684<strong>key</strong>(\u8282\u70B9\u5171\u6709\u7684\u524D\u7F00)</li><li>key: \u672A\u5904\u7406\u5B8C\u7684\u90E8\u5206<strong>key</strong>\uFF0C\u5B8C\u6574\u7684<code>key = prefix + key</code></li><li>value\uFF1A\u9700\u8981\u63D2\u5165\u7684\u503C</li></ul><p>\u8FD4\u56DE\u503C\u8BF4\u660E\uFF1A</p><ul><li>bool : \u64CD\u4F5C\u662F\u5426\u6539\u53D8\u4E86<strong>Trie</strong>\u6811(<strong>dirty</strong>)</li><li>Node :\u63D2\u5165\u5B8C\u6210\u540E\u7684\u5B50\u6811\u7684\u6839\u8282\u70B9</li></ul><p>\u63A5\u4E0B\u6765\u5C31\u662F\u5206\u522B\u5BF9<code>shortNode</code>\u3001<code>fullNode</code>\u3001<code>hashNode</code>\u3001<code>nil</code> \u51E0\u79CD\u60C5\u51B5\u8FDB\u884C\u8BF4\u660E\u3002</p><p><strong>2.1\uFF1A\u8282\u70B9\u4E3Anil</strong></p><p>\u7A7A\u6811\u76F4\u63A5\u8FD4\u56DE<code>shortNode</code>\uFF0C \u6B64\u65F6\u6574\u9897\u6811\u7684\u6839\u5C31\u542B\u6709\u4E86\u4E00\u4E2A<code>shortNode</code>\u8282\u70B9\u3002</p><div class="language-GO ext-GO line-numbers-mode"><pre class="language-GO"><code>case nil:
		return true, &amp;shortNode{key, value, t.newFlag()}, nil
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.2 \uFF1A\u8282\u70B9\u4E3AshortNode</strong></p><ul><li><p>\u9996\u5148\u8BA1\u7B97\u516C\u5171\u524D\u7F00\uFF0C\u5982\u679C\u516C\u5171\u524D\u7F00\u5C31\u7B49\u4E8E<code>key</code>\uFF0C\u90A3\u4E48\u8BF4\u660E\u8FD9\u4E24\u4E2A<code>key</code>\u662F\u4E00\u6837\u7684\uFF0C\u5982\u679C<code>value</code>\u4E5F\u4E00\u6837\u7684(<code>dirty == false</code>)\uFF0C\u90A3\u4E48\u8FD4\u56DE\u9519\u8BEF\u3002</p></li><li><p>\u5982\u679C\u6CA1\u6709\u9519\u8BEF\u5C31\u66F4\u65B0<code>shortNode</code>\u7684\u503C\u7136\u540E\u8FD4\u56DE</p></li><li><p>\u5982\u679C\u516C\u5171\u524D\u7F00\u4E0D\u5B8C\u5168\u5339\u914D\uFF0C\u90A3\u4E48\u5C31\u9700\u8981\u628A\u516C\u5171\u524D\u7F00\u63D0\u53D6\u51FA\u6765\u5F62\u6210\u4E00\u4E2A\u72EC\u7ACB\u7684\u8282\u70B9(\u6269\u5C55\u8282\u70B9),\u6269\u5C55\u8282\u70B9\u540E\u9762\u8FDE\u63A5\u4E00\u4E2A<code>branch</code>\u8282\u70B9\uFF0C<code>branch</code>\u8282\u70B9\u540E\u9762\u770B\u60C5\u51B5\u8FDE\u63A5\u4E24\u4E2A<code>short</code>\u8282\u70B9\u3002</p></li><li><p>\u9996\u5148\u6784\u5EFA\u4E00\u4E2Abranch\u8282\u70B9(branch := &amp;fullNode{flags: t.newFlag()}),\u7136\u540E\u518Dbranch\u8282\u70B9\u7684Children\u4F4D\u7F6E\u8C03\u7528t.insert\u63D2\u5165\u5269\u4E0B\u7684\u4E24\u4E2Ashort\u8282\u70B9</p></li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>matchlen <span class="token operator">:=</span> <span class="token function">prefixLen</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
		<span class="token keyword">if</span> matchlen <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>matchlen<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		branch <span class="token operator">:=</span> <span class="token operator">&amp;</span>fullNode<span class="token punctuation">{</span>flags<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> branch<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Key<span class="token punctuation">[</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> branch<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>matchlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> matchlen <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> branch<span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span>matchlen<span class="token punctuation">]</span><span class="token punctuation">,</span> branch<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.3: \u8282\u70B9\u4E3AfullNode</strong></p><p>\u8282\u70B9\u662F<code>fullNode</code>(\u4E5F\u5C31\u662F\u5206\u652F\u8282\u70B9)\uFF0C\u90A3\u4E48\u76F4\u63A5\u5F80\u5BF9\u5E94\u7684\u5B69\u5B50\u8282\u70B9\u8C03\u7528<code>insert</code>\u65B9\u6CD5,\u7136\u540E\u628A\u5BF9\u5E94\u7684\u5B69\u5B50\u8282\u70B9\u6307\u5411\u65B0\u751F\u6210\u7684\u8282\u70B9\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>flags <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nn
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.4: \u8282\u70B9\u4E3Ahashnode</strong></p><p>\u6682\u65F6\u8FD8\u5728\u6570\u636E\u5E93\u4E2D\u7684\u8282\u70B9\uFF0C\u5148\u8C03\u7528 <code>t.resolveHash(n, prefix)</code>\u6765\u52A0\u8F7D\u5230\u5185\u5B58\uFF0C\u7136\u540E\u8C03\u7528<code>insert</code>\u65B9\u6CD5\u6765\u63D2\u5165\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>rn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		dirty<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rn<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token operator">||</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rn<span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> nn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2462\uFF1A<strong>Trie\u6811\u67E5\u8BE2\u503C</strong></p><p>\u5176\u5B9E\u5C31\u662F\u6839\u636E\u8F93\u5165\u7684<code>hash</code>\uFF0C\u627E\u5230\u5BF9\u5E94\u7684\u53F6\u5B50\u8282\u70B9\u7684\u6570\u636E\u3002\u4E3B\u8981\u770B<code>TryGet</code>\u65B9\u6CD5\u3002</p><p>\u53C2\u6570\uFF1A</p><ul><li><code>origNode</code>\uFF1A\u5F53\u524D\u67E5\u627E\u7684\u8D77\u59CB<strong>node</strong>\u4F4D\u7F6E</li><li><code>key</code>\uFF1A\u8F93\u5165\u8981\u67E5\u627E\u7684\u6570\u636E\u7684<strong>hash</strong></li><li><code>pos</code>\uFF1A\u5F53\u524D<strong>hash</strong>\u5339\u914D\u5230\u7B2C\u51E0\u4F4D</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">tryGet</span><span class="token punctuation">(</span>origNode node<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> pos <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> newnode node<span class="token punctuation">,</span> didResolve <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> n <span class="token operator">:=</span> <span class="token punctuation">(</span>origNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span> <span class="token comment">//\u8868\u793A\u5F53\u524Dtrie\u662F\u7A7A\u6811</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> valueNode<span class="token punctuation">:</span> <span class="token comment">////\u8FD9\u5C31\u662F\u6211\u4EEC\u8981\u67E5\u627E\u7684\u53F6\u5B50\u8282\u70B9\u5BF9\u5E94\u7684\u6570\u636E</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span> <span class="token comment">////\u5728\u53F6\u5B50\u8282\u70B9\u6216\u8005\u6269\u5C55\u8282\u70B9\u5339\u914D</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">-</span>pos <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> key<span class="token punctuation">[</span>pos<span class="token punctuation">:</span>pos<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> didResolve <span class="token punctuation">{</span>
			n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			n<span class="token punctuation">.</span>Val <span class="token operator">=</span> newnode
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> n<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err
	<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>\u5728\u5206\u652F\u8282\u70B9\u5339\u914D
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> didResolve <span class="token punctuation">{</span>
			n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> newnode
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> n<span class="token punctuation">,</span> didResolve<span class="token punctuation">,</span> err
	<span class="token keyword">case</span> hashNode<span class="token punctuation">:</span> <span class="token comment">//\u8BF4\u660E\u5F53\u524D\u8282\u70B9\u662F\u8F7B\u8282\u70B9\uFF0C\u9700\u8981\u4ECEdb\u4E2D\u83B7\u53D6</span>
		child<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">resolveHash</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
		<span class="token punctuation">}</span>
		value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">tryGet</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> key<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> newnode<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> err
<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>didResolve</code>\u7528\u4E8E\u5224\u65AD<code>trie</code>\u6811\u662F\u5426\u4F1A\u53D1\u751F\u53D8\u5316\uFF0C<code>tryGet()</code>\u53EA\u662F\u7528\u6765\u83B7\u53D6\u6570\u636E\u7684\uFF0C\u5F53<code>hashNode</code>\u53BB<code>db</code>\u4E2D\u83B7\u53D6\u8BE5<code>node</code>\u503C\u540E\u9700\u8981\u66F4\u65B0\u73B0\u6709\u7684trie\uFF0C<code>didResolve</code>\u5C31\u4F1A\u53D1\u751F\u53D8\u5316\u3002\u5176\u4ED6\u5C31\u662F\u57FA\u672C\u7684\u9012\u5F52\u67E5\u627E\u6811\u64CD\u4F5C\u3002</p><p>\u2463\uFF1A<strong>Trie\u6811\u66F4\u65B0\u503C</strong></p><p>\u66F4\u65B0\u503C\uFF0C\u5176\u5B9E\u5C31\u662F\u8C03\u7528insert\u65B9\u6CD5\u8FDB\u884C\u64CD\u4F5C\u3002</p><p>\u5230\u6B64Trie\u6811\u7684\u589E\u5220\u6539\u67E5\u5C31\u8BB2\u89E3\u7684\u5DEE\u4E0D\u591A\u4E86\u3002</p><h3 id="\u5C06\u8282\u70B9\u5199\u5165\u5230trie\u7684\u5185\u5B58\u6570\u636E\u5E93" tabindex="-1"><a class="header-anchor" href="#\u5C06\u8282\u70B9\u5199\u5165\u5230trie\u7684\u5185\u5B58\u6570\u636E\u5E93" aria-hidden="true">#</a> \u5C06\u8282\u70B9\u5199\u5165\u5230Trie\u7684\u5185\u5B58\u6570\u636E\u5E93</h3><p>\u5982\u679C\u8981\u628A\u8282\u70B9\u5199\u5165\u5230\u5185\u5B58\u6570\u636E\u5E93\uFF0C\u9700\u8981\u5E8F\u5217\u5316\uFF0C\u53EF\u4EE5\u5148\u53BB\u4E86\u89E3\u4E0B\u4EE5\u592A\u574A\u7684Rlp\u7F16\u7801\u3002\u8FD9\u90E8\u5206\u5DE5\u4F5C\u7531<code>trie.Commit()</code>\u5B8C\u6210\uFF0C\u5F53<code>trie.Commit(nil)</code>\uFF0C\u4F1A\u6267\u884C\u5E8F\u5217\u5316\u548C\u7F13\u5B58\u7B49\u64CD\u4F5C\uFF0C\u5E8F\u5217\u5316\u4E4B\u540E\u662F\u4F7F\u7528\u7684<code>Compact Encoding</code>\u8FDB\u884C\u7F16\u7801\uFF0C\u4ECE\u800C\u8FBE\u5230\u8282\u7701\u7A7A\u95F4\u7684\u76EE\u7684\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;commit called on trie with nil database&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	hash<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">hashRoot</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>db<span class="token punctuation">,</span> onleaf<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span>root <span class="token operator">=</span> cached
	<span class="token keyword">return</span> common<span class="token punctuation">.</span><span class="token function">BytesToHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token punctuation">(</span>hashNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u4EE3\u7801\u5927\u6982\u8BB2\u4E86\u8FD9\u4E9B\uFF1A</p><ul><li>\u6BCF\u6B21\u6267\u884C<code>Commit()</code>\uFF0C\u8BE5trie\u7684<code>cachegen</code>\u5C31\u4F1A\u52A0 1</li><li><code>Commit()</code>\u65B9\u6CD5\u8FD4\u56DE\u7684\u662F<code>trie.root</code>\u6240\u6307\u5411\u7684<code>node</code>\u7684<code>hash</code>\uFF08\u672A\u7F16\u7801\uFF09</li><li>\u5176\u4E2D\u7684<code>hashRoot()</code>\u65B9\u6CD5\u76EE\u7684\u662F<code>\u8FD4\u56DEtrie.root\u6240\u6307\u5411\u7684node\u7684hash</code>\u4EE5\u53CA<code>\u6BCF\u4E2A\u8282\u70B9\u90FD\u5E26\u6709\u5404\u81EAhash\u7684trie\u6811\u7684root</code>\u3002</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//\u4E3A\u6BCF\u4E2Anode\u751F\u6210\u4E00\u4E2Ahash</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">hashRoot</span><span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">,</span> onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">hashNode</span><span class="token punctuation">(</span>emptyRoot<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	h <span class="token operator">:=</span> <span class="token function">newHasher</span><span class="token punctuation">(</span>onleaf<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">returnHasherToPool</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>
	<span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>root<span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//\u4E3A\u6BCF\u4E2A\u8282\u70B9\u751F\u6210\u4E00\u4E2A\u672A\u7F16\u7801\u7684hash</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u800C<code>hashRoot</code>\u7684\u6838\u5FC3\u65B9\u6CD5\u5C31\u662F <code>h.hash</code>\uFF0C\u5B83\u8FD4\u56DE\u4E86\u5934\u8282\u70B9\u7684<code>hash</code>\u4EE5\u53CA\u6BCF\u4E2A\u5B50\u8282\u70B9\u90FD\u5E26\u6709<code>hash</code>\u7684\u5934\u8282\u70B9\uFF08Trie.root\u6307\u5411\u5B83\uFF09\uFF0C\u5927\u81F4\u505A\u4E86\u4EE5\u4E0B\u51E0\u4EF6\u4E8B\uFF1A</p><p>\u2460\uFF1A<em>\u5982\u679C\u6211\u4EEC\u4E0D\u5B58\u50A8\u8282\u70B9\uFF0C\u800C\u53EA\u662F\u54C8\u5E0C\uFF0C\u5219\u4ECE\u7F13\u5B58\u4E2D\u83B7\u53D6\u6570\u636E</em></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">if</span> hash<span class="token punctuation">,</span> dirty <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hash <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> db <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> hash<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>dirty <span class="token punctuation">{</span>
			<span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">,</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span>
				<span class="token keyword">return</span> hash<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> hash<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2461\uFF1A<em>\u9012\u5F52\u8C03\u7528<code>h.hashChildren</code>\uFF0C\u6C42\u51FA\u6240\u6709\u7684\u5B50\u8282\u70B9\u7684<code>hash</code>\u503C\uFF0C\u518D\u628A\u539F\u6709\u7684\u5B50\u8282\u70B9\u66FF\u6362\u6210\u73B0\u5728\u5B50\u8282\u70B9\u7684<code>hash</code>\u503C</em></p><p><strong>2.1:\u5982\u679C\u8282\u70B9\u662F<code>shortNode</code></strong></p><p>\u9996\u5148\u628A<code>collapsed.Key\u4ECEHex Encoding</code> \u66FF\u6362\u6210 <code>Compact Encoding</code>, \u7136\u540E\u9012\u5F52\u8C03\u7528<code>hash</code>\u65B9\u6CD5\u8BA1\u7B97\u5B50\u8282\u70B9\u7684<code>hash</code>\u548C<code>cache</code>\uFF0C\u4ECE\u800C\u628A\u5B50\u8282\u70B9\u66FF\u6362\u6210\u4E86\u5B50\u8282\u70B9\u7684<code>hash</code>\u503C</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>collapsed<span class="token punctuation">,</span> cached <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		collapsed<span class="token punctuation">.</span>Key <span class="token operator">=</span> <span class="token function">hexToCompact</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
		cached<span class="token punctuation">.</span>Key <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">CopyBytes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>

		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			collapsed<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> cached<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> err <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> original<span class="token punctuation">,</span> original<span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> collapsed<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.2:\u8282\u70B9\u662FfullNode</strong></p><p>\u904D\u5386\u6BCF\u4E2A\u5B50\u8282\u70B9\uFF0C\u628A\u5B50\u8282\u70B9\u66FF\u6362\u6210\u5B50\u8282\u70B9\u7684<code>Hash</code>\u503C\uFF0C\u5426\u5219\u7684\u5316\u8FD9\u4E2A\u8282\u70B9\u6CA1\u6709<code>children</code>\u3002\u76F4\u63A5\u8FD4\u56DE\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>		collapsed<span class="token punctuation">,</span> cached <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				collapsed<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cached<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> db<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> original<span class="token punctuation">,</span> original<span class="token punctuation">,</span> err
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		cached<span class="token punctuation">.</span>Children<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> collapsed<span class="token punctuation">,</span> cached<span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2462\uFF1A<em>\u5B58\u50A8\u8282\u70B9n\u7684\u54C8\u5E0C\u503C\uFF0C\u5982\u679C\u6211\u4EEC\u6307\u5B9A\u4E86\u5B58\u50A8\u5C42\uFF0C\u5B83\u4F1A\u5199\u5BF9\u5E94\u7684\u952E/\u503C\u5BF9</em></p><p>store()\u65B9\u6CD5\u4E3B\u8981\u5C31\u505A\u4E86\u4E24\u4EF6\u4E8B\uFF1A</p><ul><li><code>rlp</code>\u5E8F\u5217\u5316<code>collapsed</code>\u8282\u70B9\u5E76\u5C06\u5176\u63D2\u5165db\u78C1\u76D8\u4E2D</li><li>\u751F\u6210\u5F53\u524D\u8282\u70B9\u7684<code>hash</code></li><li>\u5C06\u8282\u70B9\u54C8\u5E0C\u63D2\u5165<code>db</code></li></ul><p><strong>3.1\uFF1A\u7A7A\u6570\u636E\u6216\u8005hashNode\uFF0C\u5219\u4E0D\u5904\u7406</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> isHash <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span>hashNode<span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> isHash <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.2:\u751F\u6210\u8282\u70B9\u7684RLP\u7F16\u7801</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>h<span class="token punctuation">.</span>tmp<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment">// \u7F13\u5B58\u521D\u59CB\u5316</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> rlp<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">//\u5C06\u5F53\u524Dnode\u5E8F\u5217\u5316</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;encode error: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// Nodes smaller than 32 bytes are stored inside their parent \u7F16\u7801\u540E\u7684node\u957F\u5EA6\u5C0F\u4E8E32\uFF0C\u82E5force\u4E3Atrue\uFF0C\u5219\u53EF\u786E\u4FDD\u6240\u6709\u8282\u70B9\u90FD\u88AB\u7F16\u7801</span>
	<span class="token punctuation">}</span>
<span class="token comment">//\u957F\u5EA6\u8FC7\u5927\u7684\uFF0C\u5219\u90FD\u5C06\u88AB\u65B0\u8BA1\u7B97\u51FA\u6765\u7684hash\u53D6\u4EE3</span>
	hash<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//\u53D6\u51FA\u5F53\u524D\u8282\u70B9\u7684hash</span>
	<span class="token keyword">if</span> hash <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		hash <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">makeHashNode</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>tmp<span class="token punctuation">)</span> <span class="token comment">//\u751F\u6210\u54C8\u5E0Cnode</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.3:\u5C06Trie\u8282\u70B9\u5408\u5E76\u5230\u4E2D\u95F4\u5185\u5B58\u7F13\u5B58\u4E2D</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>hash <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">BytesToHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
		db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> h<span class="token punctuation">.</span>tmp<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		db<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// Track external references from account-&gt;storage trie</span>
		<span class="token comment">//\u8DDF\u8E2A\u5E10\u6237-&gt;\u5B58\u50A8Trie\u4E2D\u7684\u5916\u90E8\u5F15\u7528</span>
		<span class="token keyword">if</span> h<span class="token punctuation">.</span>onleaf <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">switch</span> n <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>shortNode<span class="token punctuation">:</span>
				<span class="token keyword">if</span> child<span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Val<span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  <span class="token comment">//\u6307\u5411\u7684\u662F\u5206\u652F\u8282\u70B9</span>
					h<span class="token punctuation">.</span><span class="token function">onleaf</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token comment">//\u7528\u4E8E\u7EDF\u8BA1\u5F53\u524D\u8282\u70B9\u7684\u4FE1\u606F\uFF0C\u6BD4\u5982\u5F53\u524D\u8282\u70B9\u6709\u51E0\u4E2A\u5B50\u8282\u70B9\uFF0C\u5F53\u524D\u6709\u6548\u7684\u8282\u70B9\u6570</span>
				<span class="token punctuation">}</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>fullNode<span class="token punctuation">:</span>
				<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> child<span class="token punctuation">,</span> ok <span class="token operator">:=</span> n<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>valueNode<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
						h<span class="token punctuation">.</span><span class="token function">onleaf</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u6B64\u4E3A\u6B62\u5C06\u8282\u70B9\u5199\u5165\u5230<code>Trie</code>\u7684\u5185\u5B58\u6570\u636E\u5E93\u5C31\u5DF2\u7ECF\u5B8C\u6210\u4E86\u3002</p><p><em>\u5982\u679C\u89C9\u5F97\u6587\u7AE0\u4E0D\u9519\u53EF\u4EE5\u5173\u6CE8\u516C\u4F17\u53F7\uFF1A<strong>Abel sun</strong>\uFF0C\u8BE6\u7EC6\u7684\u6240\u6709\u4EE5\u592A\u574A\u6E90\u7801\u5206\u6790\u6587\u7AE0\u5185\u5BB9\u4EE5\u53CA\u4EE3\u7801\u8D44\u6599\u90FD\u5728\u5176\u4E2D\u3002</em></p><h3 id="trie\u6811\u7F13\u5B58\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#trie\u6811\u7F13\u5B58\u673A\u5236" aria-hidden="true">#</a> Trie\u6811\u7F13\u5B58\u673A\u5236</h3><p><code>Trie</code>\u6811\u7684\u7ED3\u6784\u91CC\u9762\u6709\u4E24\u4E2A\u53C2\u6570\uFF0C \u4E00\u4E2A\u662F<code>cachegen</code>,\u4E00\u4E2A\u662F<code>cachelimit</code>\u3002\u8FD9\u4E24\u4E2A\u53C2\u6570\u5C31\u662F<code>cache</code>\u63A7\u5236\u7684\u53C2\u6570\u3002 <code>Trie</code>\u6811\u6BCF\u4E00\u6B21\u8C03\u7528<code>Commit</code>\u65B9\u6CD5\uFF0C\u4F1A\u5BFC\u81F4\u5F53\u524D\u7684<code>cachegen</code>\u589E\u52A01\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span>onleaf LeafCallback<span class="token punctuation">)</span> <span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span>
    t<span class="token punctuation">.</span>cachegen<span class="token operator">++</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E\u5728<code>Trie</code>\u6811\u63D2\u5165\u7684\u65F6\u5019\uFF0C\u4F1A\u628A\u5F53\u524D\u7684<code>cachegen</code>\u5B58\u653E\u5230\u8282\u70B9\u4E2D\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> value node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span><span class="token punctuation">.</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shortNode<span class="token punctuation">{</span>n<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Trie<span class="token punctuation">)</span> <span class="token function">newFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> nodeFlag <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nodeFlag<span class="token punctuation">{</span>dirty<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> gen<span class="token punctuation">:</span> t<span class="token punctuation">.</span>cachegen<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C <code>trie.cachegen - node.cachegen &gt; cachelimit</code>\uFF0C\u5C31\u53EF\u4EE5\u628A\u8282\u70B9\u4ECE\u5185\u5B58\u91CC\u9762\u62FF\u6389\u3002 \u4E5F\u5C31\u662F\u8BF4\u8282\u70B9\u7ECF\u8FC7\u51E0\u6B21<code>Commit</code>\uFF0C\u90FD\u6CA1\u6709\u4FEE\u6539\uFF0C\u90A3\u4E48\u5C31\u628A\u8282\u70B9\u4ECE\u5185\u5B58\u91CC\u9762\u5E72\u6389\u3002 \u53EA\u8981<code>trie</code>\u8DEF\u5F84\u4E0A\u65B0\u589E\u6216\u8005\u5220\u9664\u4E00\u4E2A\u8282\u70B9\uFF0C\u6574\u4E2A\u8DEF\u5F84\u7684\u8282\u70B9\u90FD\u9700\u8981\u91CD\u65B0\u5B9E\u4F8B\u5316\uFF0C\u4E5F\u5C31\u662F\u8282\u70B9\u4E2D\u7684<code>nodeFlag</code>\u88AB\u521D\u59CB\u5316\u4E86\u3002\u90FD\u9700\u8981\u91CD\u65B0\u66F4\u65B0\u5230<code>db</code>\u78C1\u76D8\u3002</p><p>\u62FF\u6389\u8282\u70B9\u8FC7\u7A0B\u5728 <code>hasher.hash</code>\u65B9\u6CD5\u4E2D\uFF0C \u8FD9\u4E2A\u65B9\u6CD5\u662F\u5728<code>commit</code>\u7684\u65F6\u5019\u8C03\u7528\u3002\u5982\u679C\u65B9\u6CD5\u7684<code>canUnload</code>\u65B9\u6CD5\u8C03\u7528\u8FD4\u56DE\u771F\uFF0C\u90A3\u4E48\u5C31\u62FF\u6389\u8282\u70B9\uFF0C\u5982\u679C\u53EA\u8FD4\u56DE\u4E86<code>hash</code>\u8282\u70B9\uFF0C\u800C\u6CA1\u6709\u8FD4\u56DE<code>node</code>\u8282\u70B9\uFF0C\u8FD9\u6837\u8282\u70B9\u5C31\u6CA1\u6709\u5F15\u7528\uFF0C\u4E0D\u4E45\u5C31\u4F1A\u88ABgc\u6E05\u9664\u6389\u3002 \u8282\u70B9\u88AB\u62FF\u6389\u4E4B\u540E\uFF0C\u4F1A\u7528\u4E00\u4E2A<code>hashNode</code>\u8282\u70B9\u6765\u8868\u793A\u8FD9\u4E2A\u8282\u70B9\u4EE5\u53CA\u5176\u5B50\u8282\u70B9\u3002 \u5982\u679C\u540E\u7EED\u9700\u8981\u4F7F\u7528\uFF0C\u53EF\u4EE5\u901A\u8FC7\u65B9\u6CD5\u628A\u8FD9\u4E2A\u8282\u70B9\u52A0\u8F7D\u5230\u5185\u5B58\u91CC\u9762\u6765\u3002</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>hasher<span class="token punctuation">)</span> <span class="token function">hash</span><span class="token punctuation">(</span>n node<span class="token punctuation">,</span> db <span class="token operator">*</span>Database<span class="token punctuation">,</span> force <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token operator">...</span><span class="token punctuation">.</span>
       <span class="token comment">// \u4ECE\u7F13\u5B58\u4E2D\u5378\u8F7D\u8282\u70B9\u3002\u5B83\u7684\u6240\u6709\u5B50\u8282\u70B9\u5C06\u5177\u6709\u8F83\u4F4E\u6216\u76F8\u7B49\u7684\u7F13\u5B58\u4E16\u4EE3\u53F7\u7801\u3002</span>
       cacheUnloadCounter<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53C2\u8003-\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003-\u603B\u7ED3" aria-hidden="true">#</a> \u53C2\u8003&amp;\u603B\u7ED3</h2><p>\u8FD9\u90E8\u5206\u91CD\u8981\u7684\u5185\u5BB9\u4E5F\u5C31\u4E0A\u9762\u8BB2\u8FF0\u7684\uFF0C\u4E3B\u8981\u96C6\u4E2D\u5728<code>Trie</code>\u4E0A\u9762\uFF0C\u5982\u679C\u6709\u4E0D\u5BF9\u7684\u5730\u65B9\uFF0C\u53EF\u4EE5\u53CA\u65F6\u6307\u6B63\u54E6\u3002</p>`,107),b={href:"https://mindcarver.cn/about/",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"/blockchainguide",-1);function h(g,f){const p=t("RouterLink"),o=t("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[a(p,{to:"/"},{default:i(()=>[s("\u4E0A\u7BC7")]),_:1}),s("\u4E3B\u8981\u4ECB\u7ECD\u4E86\u4EE5\u592A\u574A\u4E2D\u7684MPT\u6811\u7684\u539F\u7406\uFF0C\u8FD9\u7BC7\u4E3B\u8981\u4F1A\u5BF9MPT\u6811\u6D89\u53CA\u7684\u6E90\u7801\u8FDB\u884C\u62C6\u89E3\u5206\u6790\u3002"),d,s("\u6A21\u5757\u4E3B\u8981\u6709\u4EE5\u4E0B\u51E0\u4E2A\u6587\u4EF6\uFF1A")]),v,n("blockquote",null,[n("p",null,[n("a",b,[s("https://mindcarver.cn/about/"),a(o)])]),m])])}const x=e(k,[["render",h],["__file","14.etheric_fang_source_analysis_MPT_tree.html.vue"]]);export{x as default};
