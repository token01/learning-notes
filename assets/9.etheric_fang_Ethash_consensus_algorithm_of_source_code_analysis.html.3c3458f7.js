import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,b as s,d as t,e as c,r as i}from"./app.1ee57811.js";const l={},u=n("p",null,"浅谈以太坊源码分析之Ethash共识算法",-1),d={href:"https://github.com/ethereum/go-ethereum/tree/v1.9.9",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>目前以太坊中有两个共识算法的实现：<code>clique</code>和<code>ethash</code>。而<code>ethash</code>是目前以太坊主网（<code>Homestead</code>版本）的<code>POW</code>共识算法。</p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p><code>ethash</code>模块位于以太坊项目目录下的<code>consensus/ethash</code>目录下。</p><ul><li><strong>algorithm.go</strong> 实现了<code>Dagger-Hashimoto</code>算法的所有功能，比如生成<code>cache</code>和<code>dataset</code>、根据<code>Header</code>和<code>Nonce</code>计算挖矿哈希等。</li><li><strong>api.go</strong> 实现了供<code>RPC</code>使用的<code>api</code>方法。</li><li><strong>consensus.go</strong> 实现了以太坊共识接口的部分方法，包括<code>Verify</code>系列方法（<code>VerifyHeader</code>、<code>VerifySeal</code>等）、<code>Prepare</code>和<code>Finalize</code>、<code>CalcDifficulty</code>、<code>Author</code>、<code>SealHash</code>。</li><li><strong>ethash.go</strong> 实现了<code>cache</code>结构体和<code>dataset</code>结构体及它们各自的方法、<code>MakeCache</code>/<code>MakeDataset</code>函数、<code>Ethash</code>对象的<code>New</code>函数，和<code>Ethash</code>的内部方法。</li><li><strong>sealer.go</strong> 实现了共识接口的<code>Seal</code>方法，和<code>Ethash</code>的内部方法<code>mine</code>。这些方法实现了<code>ethash</code>的挖矿功能。</li></ul><h2 id="ethash-设计原理" tabindex="-1"><a class="header-anchor" href="#ethash-设计原理" aria-hidden="true">#</a> Ethash 设计原理</h2><h3 id="ethash设计目标" tabindex="-1"><a class="header-anchor" href="#ethash设计目标" aria-hidden="true">#</a> Ethash设计目标</h3><p>以太坊设计共识算法时，期望达到三个目的：</p><ol><li>抗<code>ASIC</code>性：为算法创建专用硬件的优势应尽可能小，让普通计算机用户也能使用CPU进行开采。 <ul><li>通过内存限制来抵制（<code>ASIC</code>使用矿机内存昂贵）</li><li>大量随机读取内存数据时计算速度就不仅仅受限于计算单元，更受限于内存的读出速度。</li></ul></li><li>轻客户端可验证性: 一个区块应能被轻客户端快速有效校验。</li><li>矿工应该要求存储完整的区块链状态。</li></ol><h3 id="哈希数据集" tabindex="-1"><a class="header-anchor" href="#哈希数据集" aria-hidden="true">#</a> 哈希数据集</h3><p><code>ethash</code>要计算哈希，需要先有一块数据集。这块数据集较大，初始大小大约有<code>1G</code>，每隔 3 万个区块就会更新一次，且每次更新都会比之前变大<code>8M</code>左右。计算哈希的数据源就是从这块数据集中来的；而决定使用数据集中的哪些数据进行哈希计算的，才是<code>header</code>的数据和<code>Nonce</code>字段。这部分是由<code>Dagger</code>算法实现的。</p><h4 id="dagger" tabindex="-1"><a class="header-anchor" href="#dagger" aria-hidden="true">#</a> Dagger</h4><p><code>Dagger</code>算法是用来生成数据集<code>Dataset</code>的，核心的部分就是<code>Dataset</code>的生成方式和组织结构。</p><p>可以把<code>Dataset</code>想成多个<code>item</code>（<strong>dataItem</strong>）组成的数组，每个<code>item</code>是<code>64</code>字节的byte数组（一条哈希）。<code>dataset</code>的初始大小约为<code>1G</code>，每隔3万个区块（一个<code>epoch</code>区间）就会更新一次，且每次更新都会比之前变大<code>8M</code>左右。</p><p><code>Dataset</code>的每个<code>item</code>是由一个缓存块（<code>cache</code>）生成的，缓存块也可以看做多个<code>item</code>（<strong>cacheItem</strong>）组成，缓存块占用的内存要比<code>dataset</code>小得多，它的初始大小约为<code>16M</code>。同<code>dataset</code>类似，每隔 3 万个区块就会更新一次，且每次更新都会比之前变大<code>128K</code>左右。</p><p>生成一条<code>dataItem</code>的程是：从缓存块中“随机”（这里的“随机”不是真的随机数，而是指事前不能确定，但每次计算得到的都是一样的值）选择一个<code>cacheItem</code>进行计算，得的结果参与下次计算，这个过程会循环 256 次。</p><p>缓存块是由<code>seed</code>生成的，而<code>seed</code>的值与块的高度有关。所以生成<code>dataset</code>的过程如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glm8arq9t7j30x80eytji.jpg" alt="image-20201213144908721" loading="lazy"></p><p><code>Dagger</code>还有一个关键的地方，就是确定性。即同一个<code>epoch</code>内，每次计算出来的<code>seed</code>、缓存、<code>dataset</code>都是相同的。否则对于同一个区块，挖矿的人和验证的人使用不同的<code>dataset</code>，就没法进行验证了。</p><hr><h3 id="hashimoto算法" tabindex="-1"><a class="header-anchor" href="#hashimoto算法" aria-hidden="true">#</a> Hashimoto算法</h3><p>是<code>Thaddeus Dryja</code>创造的。旨在通过<code>IO</code>限制来抵制矿机。在挖矿过程中，使内存读取限制条件，由于内存设备本身会比计算设备更加便宜以及普遍，在内存升级优化方面，全世界的大公司也都投入巨大，以使内存能够适应各种用户场景，所以有了随机访问内存的概念<code>RAM</code>，因此,现有的内存可能会比较接近最优的评估算法。<code>Hashimoto</code>算法使用区块链作为源数据，满足了上面的 1 和 3 的要求。</p><p>它的作用就是使用区块Header的哈希和Nonce字段、利用dataset数据，生成一个最终的哈希值。</p><hr><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h2><h3 id="生成哈希数据集" tabindex="-1"><a class="header-anchor" href="#生成哈希数据集" aria-hidden="true">#</a> 生成哈希数据集</h3><p><code>generate</code>函数位于<code>ethash.go</code>文件中，主要是为了生成<code>dataset</code>,其中包扩以下内容。</p><h4 id="生成cache-size" tabindex="-1"><a class="header-anchor" href="#生成cache-size" aria-hidden="true">#</a> 生成cache size</h4><p><code>cache size</code> 主要<em>某个特定块编号的ethash验证缓存的大小</em> *， <code>epochLength</code> 为 30000，如果<code>epoch</code> 小于 2048，则从已知的<code>epoch</code>返回相应的<code>cache size</code>，否则重新计算<code>epoch</code></p><p><code>cache</code>的大小是线性增长的，<code>size</code>的值等于(2<sup>24</sup> + 2<sup>17</sup> * epoch - 64)，用这个值除以 64 看结果是否是一个质数，如果不是，减去128 再重新计算，直到找到最大的质数为止。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>csize <span class="token operator">:=</span> <span class="token function">cacheSize</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>epoch<span class="token operator">*</span>epochLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">cacheSize</span><span class="token punctuation">(</span>block <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
	epoch <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>block <span class="token operator">/</span> epochLength<span class="token punctuation">)</span>
	<span class="token keyword">if</span> epoch <span class="token operator">&lt;</span> maxEpoch <span class="token punctuation">{</span>
		<span class="token keyword">return</span> cacheSizes<span class="token punctuation">[</span>epoch<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">calcCacheSize</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">calcCacheSize</span><span class="token punctuation">(</span>epoch <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
	size <span class="token operator">:=</span> cacheInitBytes <span class="token operator">+</span> cacheGrowthBytes<span class="token operator">*</span><span class="token function">uint64</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span> <span class="token operator">-</span> hashBytes
	<span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetUint64</span><span class="token punctuation">(</span>size <span class="token operator">/</span> hashBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ProbablyPrime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Always accurate for n &lt; 2^64</span>
		size <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> hashBytes
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> size
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成dataset-size" tabindex="-1"><a class="header-anchor" href="#生成dataset-size" aria-hidden="true">#</a> 生成dataset size</h4><p><code>dataset Size</code> 主要<em>某个特定块编号的ethash验证缓存的大小</em> , 类似上面生成<code>cache size</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>dsize <span class="token operator">:=</span> <span class="token function">datasetSize</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>epoch<span class="token operator">*</span>epochLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">datasetSize</span><span class="token punctuation">(</span>block <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
	epoch <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>block <span class="token operator">/</span> epochLength<span class="token punctuation">)</span>
	<span class="token keyword">if</span> epoch <span class="token operator">&lt;</span> maxEpoch <span class="token punctuation">{</span>
		<span class="token keyword">return</span> datasetSizes<span class="token punctuation">[</span>epoch<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">calcDatasetSize</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成-seed-种子" tabindex="-1"><a class="header-anchor" href="#生成-seed-种子" aria-hidden="true">#</a> 生成 seed 种子</h4><p>*seedHash是用于生成验证缓存和挖掘数据集的种子。*长度为 32。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>seed <span class="token operator">:=</span> <span class="token function">seedHash</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>epoch<span class="token operator">*</span>epochLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">seedHash</span><span class="token punctuation">(</span>block <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	seed <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> block <span class="token operator">&lt;</span> epochLength <span class="token punctuation">{</span>
		<span class="token keyword">return</span> seed
	<span class="token punctuation">}</span>
	keccak256 <span class="token operator">:=</span> <span class="token function">makeHasher</span><span class="token punctuation">(</span>sha3<span class="token punctuation">.</span><span class="token function">NewLegacyKeccak256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">int</span><span class="token punctuation">(</span>block<span class="token operator">/</span>epochLength<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token function">keccak256</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> seed<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> seed
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成cache" tabindex="-1"><a class="header-anchor" href="#生成cache" aria-hidden="true">#</a> 生成cache</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">generateCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> d<span class="token punctuation">.</span>epoch<span class="token punctuation">,</span> seed<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来分析<code>generateCache</code>的关键代码：</p><p>先了解一下<strong>hashBytes</strong>，在下面的计算中都是以此为单位，它的值为 64 ，相当于一个<code>keccak512</code>哈希的长度,下文以<strong>item</strong>称呼<code>[hashBytes]byte</code>。</p><p>①：初始化<code>cache</code></p><p>此循环用来初始化<code>cache</code>：先将<code>seed</code>的哈希填入<code>cache</code>的第一个<code>item</code>,随后使用前一个<code>item</code>的哈希，填充后一个<code>item</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> offset <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>hashBytes<span class="token punctuation">)</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> offset <span class="token operator">+=</span> hashBytes <span class="token punctuation">{</span>
		<span class="token function">keccak512</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>offset<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cache<span class="token punctuation">[</span>offset<span class="token operator">-</span>hashBytes<span class="token punctuation">:</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span>
		atomic<span class="token punctuation">.</span><span class="token function">AddUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>progress<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：对cache中数据按规则做异或</p><p>为对于每一个<code>item</code>（<code>srcOff</code>），“随机”选一个<code>item</code>（<code>xorOff</code>）与其进行异或运算；将运算结果的哈希写入<code>dstOff</code>中。这个运算逻辑将进行<code>cacheRounds</code>次。</p><p>两个需要注意的地方：</p><ul><li>一是<code>srcOff</code>是从尾部向头部变化的，而<code>dstOff</code>是从头部向尾部变化的。并且它俩是对应的，即当<code>srcOff</code>代表倒数第x个item时，<code>dstOff</code>则代表正数第x个item。</li><li>二是<code>xorOff</code>的选取。注意我们刚才的“随机”是打了引号的。<code>xorOff</code>的值看似随机，因为在给出<code>seed</code>之前，你无法知道xorOff的值是多少；但一旦<code>seed</code>的值确定了，那么每一次<code>xorOff</code>的值都是确定的。而seed的值是由区块的高度决定的。这也是同一个<code>epoch</code>内总是能得到相同<code>cache</code>数据的原因。</li></ul><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>for i := 0; i &lt; cacheRounds; i++ {
		for j := 0; j &lt; rows; j++ {
			var (
				srcOff = ((j - 1 + rows) % rows) * hashBytes
				dstOff = j * hashBytes
				xorOff = (binary.LittleEndian.Uint32(cache[dstOff:]) % uint32(rows)) * hashBytes
			)
			bitutil.XORBytes(temp, cache[srcOff:srcOff+hashBytes], cache[xorOff:xorOff+hashBytes])
			keccak512(cache[dstOff:], temp)

			atomic.AddUint32(&amp;progress, 1)
		}
	}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="生成dataset" tabindex="-1"><a class="header-anchor" href="#生成dataset" aria-hidden="true">#</a> 生成dataset</h4><p><code>dataset</code>大小的计算和<code>cache</code>类似，量级不同：2<sup>30</sup> + 2<sup>23</sup> * epoch - 128，然后每次减256寻找最大质数。</p><p>生成数据是一个循环，每次生成64个字节，主要的函数是<code>generateDatasetItem</code>：</p><p><code>generateDatasetItem</code>的数据来源就是<code>cache</code>数据，而最终的dataset值会存储在mix变量中。整个过程也是由多个循环构成。</p><p>①：初始化<code>mix</code>变量</p><p>根据cache值对<code>mix</code>变量进行初始化。其中<code>hashWords</code>代表的是一个<code>hash</code>里有多少个<code>word</code>值：一个<code>hash</code>的长度为<code>hashBytes</code>即64字节，一个<code>word</code>（uint32类型）的长度为 4 字节，因此<code>hashWords</code>值为 16。选取<code>cache</code>中的哪一项数据是由参数<code>index</code>和<code>i</code>变量决定的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	mix <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> hashBytes<span class="token punctuation">)</span>
	binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>mix<span class="token punctuation">,</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">%</span>rows<span class="token punctuation">)</span><span class="token operator">*</span>hashWords<span class="token punctuation">]</span><span class="token operator">^</span>index<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashWords<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>mix<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">%</span>rows<span class="token punctuation">)</span><span class="token operator">*</span>hashWords<span class="token operator">+</span><span class="token function">uint32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">keccak512</span><span class="token punctuation">(</span>mix<span class="token punctuation">,</span> mix<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：将<code>mix</code>转换成<code>[]uint32</code>类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>intMix <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> hashWords<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>intMix<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		intMix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">Uint32</span><span class="token punctuation">(</span>mix<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：将<code>cache</code>数据聚合进<code>intmix</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datasetParents<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		parent <span class="token operator">:=</span> <span class="token function">fnv</span><span class="token punctuation">(</span>index<span class="token operator">^</span>i<span class="token punctuation">,</span> intMix<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> rows
		<span class="token function">fnvHash</span><span class="token punctuation">(</span>intMix<span class="token punctuation">,</span> cache<span class="token punctuation">[</span>parent<span class="token operator">*</span>hashWords<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FNV</code>哈希算法，是一种不需要使用密钥的哈希算法。</p><p>这个算法很简单：a乘以FNV质数0x01000193，然后再和b异或。</p><p>首先用这个算法算出一个索引值，利用这个索引从<code>cache</code>中选出一个值（<code>data</code>），然后对<code>mix</code>中的每个字节都计算一次<code>FNV</code>，得到最终的哈希值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fnv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span><span class="token number">0x01000193</span> <span class="token operator">^</span> b
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">fnvHash</span><span class="token punctuation">(</span>mix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        mix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">0x01000193</span> <span class="token operator">^</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：将<code>intMix</code>又恢复成<code>mix</code>并计算<code>mix</code>的哈希返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> intMix <span class="token punctuation">{</span>
		binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>mix<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">keccak512</span><span class="token punctuation">(</span>mix<span class="token punctuation">,</span> mix<span class="token punctuation">)</span>
	<span class="token keyword">return</span> mix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>generateCache</code>和<code>generateDataset</code>是实现<code>Dagger</code>算法的核心函数，到此整个生成哈希数据集的的过程结束。</p><hr><h3 id="共识引擎核心函数" tabindex="-1"><a class="header-anchor" href="#共识引擎核心函数" aria-hidden="true">#</a> 共识引擎核心函数</h3><p>代码位于<code>consensus.go</code></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glnee6vhalj31py0lkgq4.jpg" alt="image-20201214150532321" loading="lazy"></p><p>①：<code>Author</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 返回coinbase, coinbase是打包第一笔交易的矿工的地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">Author</span><span class="token punctuation">(</span>header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> header<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<code>VerifyHeader</code></p><p>主要有两步检查，第一步检查<strong>header是否已知</strong>或者<strong>是未知的祖先</strong>，第二步是<code>ethash</code>的检查：</p><p>2.1 header.Extra 不能超过32字节</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Extra<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> params<span class="token punctuation">.</span>MaximumExtraDataSize <span class="token punctuation">{</span>  <span class="token comment">// 不超过32字节</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;extra-data too long: %d &gt; %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Extra<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>MaximumExtraDataSize<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 时间戳不能超过15秒，15秒以后的就被认定为未来的块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>uncle <span class="token punctuation">{</span>
		<span class="token keyword">if</span> header<span class="token punctuation">.</span>Time <span class="token operator">&gt;</span> <span class="token function">uint64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>allowedFutureBlockTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> consensus<span class="token punctuation">.</span>ErrFutureBlock
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.3 当前header的时间戳小于父块的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> header<span class="token punctuation">.</span>Time <span class="token operator">&lt;=</span> parent<span class="token punctuation">.</span>Time <span class="token punctuation">{</span> <span class="token comment">// 当前header的时间小于等于父块的</span>
		<span class="token keyword">return</span> errZeroBlockTime
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4 根据时间戳和父块的难度来验证块的难度</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>expected <span class="token operator">:=</span> ethash<span class="token punctuation">.</span><span class="token function">CalcDifficulty</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
	<span class="token keyword">if</span> expected<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid difficulty: have %v, want %v&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">,</span> expected<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.5验证<code>gas limit</code>小于2<sup>63</sup> -1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token builtin">cap</span> <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0x7fffffffffffffff</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> header<span class="token punctuation">.</span>GasLimit <span class="token operator">&gt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid gasLimit: have %v, max %v&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.6 确认<code>gasUsed</code>为&lt;= <code>gasLimit</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> header<span class="token punctuation">.</span>GasUsed <span class="token operator">&gt;</span> header<span class="token punctuation">.</span>GasLimit <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid gasUsed: have %d, gasLimit %d&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>GasUsed<span class="token punctuation">,</span> header<span class="token punctuation">.</span>GasLimit<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.7 验证块号是父块加1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> diff <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span> diff<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> consensus<span class="token punctuation">.</span>ErrInvalidNumber
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.8检查给定的块是否满足pow难度要求</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> seal <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> ethash<span class="token punctuation">.</span><span class="token function">VerifySeal</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<code>VerifyUncles</code></p><p>3.1叔叔块最多两个</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Uncles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxUncles <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errTooManyUncles
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2收集叔叔块和祖先块</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>number, parent := block.NumberU64()-1, block.ParentHash()
	for i := 0; i &lt; 7; i++ {
		ancestor := chain.GetBlock(parent, number)
		if ancestor == nil {
			break
		}
		ancestors[ancestor.Hash()] = ancestor.Header()
		for _, uncle := range ancestor.Uncles() {
			uncles.Add(uncle.Hash())
		}
		parent, number = ancestor.ParentHash(), number-1
	}
	ancestors[block.Hash()] = block.Header()
	uncles.Add(block.Hash())

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.3 确保叔块只被奖励一次且叔块有个有效的祖先</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>for _, uncle := range block.Uncles() {
		// Make sure every uncle is rewarded only once
		hash := uncle.Hash()
		if uncles.Contains(hash) {
			return errDuplicateUncle
		}
		uncles.Add(hash)

		// Make sure the uncle has a valid ancestry
		if ancestors[hash] != nil {
			return errUncleIsAncestor
		}
		if ancestors[uncle.ParentHash] == nil || uncle.ParentHash == block.ParentHash() {
			return errDanglingUncle
		}
		if err := ethash.verifyHeader(chain, uncle, ancestors[uncle.ParentHash], true, true); err != nil {
			return err
		}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：<code>Prepare</code></p><blockquote><p>初始化<code>header</code>的<code>Difficulty</code>字段</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>parent <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>ParentHash<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> parent <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> consensus<span class="token punctuation">.</span>ErrUnknownAncestor
	<span class="token punctuation">}</span>
	header<span class="token punctuation">.</span>Difficulty <span class="token operator">=</span> ethash<span class="token punctuation">.</span><span class="token function">CalcDifficulty</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：<code>Finalize</code>会执行交易后的所有状态修改（例如，区块奖励），但<strong>不会组装</strong>该区块。</p><p>5.1累积任何块和叔块的奖励</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">accumulateRewards</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> header<span class="token punctuation">,</span> uncles<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.2计算状态树的根哈希并提交到<code>header</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>header<span class="token punctuation">.</span>Root <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">IntermediateRoot</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEIP158</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥：<code>FinalizeAndAssemble</code> 运行任何交易后状态修改（例如，块奖励），并组装最终块。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func (ethash *Ethash) FinalizeAndAssemble(chain consensus.ChainReader, header *types.Header, state *state.StateDB, txs []*types.Transaction, uncles []*types.Header, receipts []*types.Receipt) (*types.Block, error) {
	accumulateRewards(chain.Config(), state, header, uncles)
	header.Root = state.IntermediateRoot(chain.Config().IsEIP158(header.Number))
	return types.NewBlock(header, txs, uncles, receipts), nil
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显就是比<code>Finalize</code>多了 <code>types.NewBlock</code></p><p>⑦：<code>SealHash</code>返回在<code>seal</code>之前块的哈希（会跟<code>seal</code>之后的块哈希不同）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">SealHash</span><span class="token punctuation">(</span>header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hasher <span class="token operator">:=</span> sha3<span class="token punctuation">.</span><span class="token function">NewLegacyKeccak256</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	rlp<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>hasher<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		header<span class="token punctuation">.</span>ParentHash<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>UncleHash<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Coinbase<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Root<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>TxHash<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>ReceiptHash<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Bloom<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>GasUsed<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Time<span class="token punctuation">,</span>
		header<span class="token punctuation">.</span>Extra<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	hasher<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> hash
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑧：<code>Seal</code>给定的输入块生成一个新的密封请求（<strong>挖矿</strong>），并将结果推送到给定的通道中。</p><p>注意，该方法将立即返回并将异步发送结果。 根据共识算法，可能还会返回多个结果。这部分会在下面的挖矿中具体分析，这里跳过。</p><hr><h3 id="挖矿细节" tabindex="-1"><a class="header-anchor" href="#挖矿细节" aria-hidden="true">#</a> 挖矿细节</h3><blockquote><p>大家在阅读本文时有任何疑问均可留言给我，我一定会及时回复。如果觉得写得不错可以关注最下方<strong>参考</strong>的 <code>github项目</code>，可以第一时间关注作者文章动态。</p></blockquote><p>挖矿的核心接口定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">Seal</span><span class="token punctuation">(</span>chain ChainReader<span class="token punctuation">,</span> block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> results <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> stop <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入到<code>seal</code>函数：</p><p>①：如果运行错误的<code>POW</code>，直接返回空的<code>nonce</code>和<code>MixDigest</code>，同时块也是空块。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> ethash<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PowMode <span class="token operator">==</span> ModeFake <span class="token operator">||</span> ethash<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PowMode <span class="token operator">==</span> ModeFullFake <span class="token punctuation">{</span>
		header <span class="token operator">:=</span> block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		header<span class="token punctuation">.</span>Nonce<span class="token punctuation">,</span> header<span class="token punctuation">.</span>MixDigest <span class="token operator">=</span> types<span class="token punctuation">.</span>BlockNonce<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> results <span class="token operator">&lt;-</span> block<span class="token punctuation">.</span><span class="token function">WithSeal</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			ethash<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Sealing result is not read by miner&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mode&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fake&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sealhash&quot;</span><span class="token punctuation">,</span> ethash<span class="token punctuation">.</span><span class="token function">SealHash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：共享<code>pow</code>的话，则转到它的共享对象执行<code>Seal</code>操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> ethash<span class="token punctuation">.</span>shared <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> ethash<span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">Seal</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> block<span class="token punctuation">,</span> results<span class="token punctuation">,</span> stop<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：获取种子源，并根据其生成<code>ethash</code>需要的种子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>f ethash<span class="token punctuation">.</span>rand <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 获得种子</span>
		seed<span class="token punctuation">,</span> err <span class="token operator">:=</span> crand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span>crand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			ethash<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		ethash<span class="token punctuation">.</span>rand <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>seed<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 给rand赋值</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：挖矿的核心工作交给<code>mine</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		pend<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> nonce <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> pend<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			ethash<span class="token punctuation">.</span><span class="token function">mine</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> id<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> abort<span class="token punctuation">,</span> locals<span class="token punctuation">)</span> <span class="token comment">// 真正执行挖矿的动作</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>ethash<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Int63</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：处理挖矿的结果</p><ul><li>外部意外中止，停止所有挖矿线程</li><li>其中一个线程挖到正确块，中止其他所有线程</li><li>ethash对象发生改变，停止当前所有操作，重启当前方法</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> result <span class="token operator">*</span>types<span class="token punctuation">.</span>Block
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>stop<span class="token punctuation">:</span>
			<span class="token function">close</span><span class="token punctuation">(</span>abort<span class="token punctuation">)</span>
		<span class="token keyword">case</span> result <span class="token operator">=</span> <span class="token operator">&lt;-</span>locals<span class="token punctuation">:</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> results <span class="token operator">&lt;-</span> result<span class="token punctuation">:</span> <span class="token comment">//其中一个线程挖到正确块，中止其他所有线程</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				ethash<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Sealing result is not read by miner&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mode&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sealhash&quot;</span><span class="token punctuation">,</span> ethash<span class="token punctuation">.</span><span class="token function">SealHash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token function">close</span><span class="token punctuation">(</span>abort<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ethash<span class="token punctuation">.</span>update<span class="token punctuation">:</span>
			<span class="token function">close</span><span class="token punctuation">(</span>abort<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> ethash<span class="token punctuation">.</span><span class="token function">Seal</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> block<span class="token punctuation">,</span> results<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				ethash<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to restart sealing after update&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上可以知道<code>seal</code>的核心工作是由<code>mine</code>函数完成的，重点介绍一下。</p><p><code>mine</code>函数其实也比较简单，它是<em>真正的<code>pow</code>矿工，用来搜索一个<code>nonce</code>值，<code>nonce</code>值开始于<code>seed</code>值，<code>seed</code>值是能最终产生正确的可匹配可验证的区块难度</em></p><p>①：从区块头中提取相关数据，放在全局变量域中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
		header  <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		hash    <span class="token operator">=</span> ethash<span class="token punctuation">.</span><span class="token function">SealHash</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		target  <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Div</span><span class="token punctuation">(</span>two256<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">)</span> <span class="token comment">// 这是用来验证的target</span>
		number  <span class="token operator">=</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		dataset <span class="token operator">=</span> ethash<span class="token punctuation">.</span><span class="token function">dataset</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：开始产生随机<code>nonce</code>，直到我们中止或找到一个好的<code>nonce</code></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>var (
		attempts = int64(0)
		nonce    = seed
	)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③： 聚集完整的<code>dataset</code>数据，为特定的header和nonce产生最终哈希值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">hashimotoFull</span><span class="token punctuation">(</span>dataset <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> nonce <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//定义一个lookup函数，用于在数据集中查找数据</span>
	lookup <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>index <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span> <span class="token punctuation">{</span>
		offset <span class="token operator">:=</span> index <span class="token operator">*</span> hashWords <span class="token comment">//hashWords是上面定义的常量值= 16</span>
		<span class="token keyword">return</span> dataset<span class="token punctuation">[</span>offset <span class="token punctuation">:</span> offset<span class="token operator">+</span>hashWords<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">hashimoto</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> lookup<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现实际上<code>hashimotoFull</code>函数做的工作就是将原始数据集进行了读取分割，然后传给<code>hashimoto</code>函数。接下来重点分析<code>hashimoto</code>函数：</p><p>3.1根据seed获取区块头</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	rows <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>size <span class="token operator">/</span> mixBytes<span class="token punctuation">)</span> ①
	seed <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> ②
	<span class="token function">copy</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> ③
	binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">PutUint64</span><span class="token punctuation">(</span>seed<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nonce<span class="token punctuation">)</span>④
	seed <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">Keccak512</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>⑤
	seedHead <span class="token operator">:=</span> binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">Uint32</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>⑥
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>计算数据集的行数</li><li>合并<code>header+nonce</code>到一个 40 字节的<code>seed</code></li><li>将区块头的<code>hash</code>拷贝到<code>seed</code>中</li><li>将<code>nonce</code>值填入<code>seed</code>的后（40-32=8）字节中去，（nonce本身就是<code>uint64</code>类型，是 64 位，对应 8 字节大小），正好把<code>hash</code>和<code>nonce</code>完整的填满了 40 字节的 seed</li><li><code>Keccak512</code>加密<code>seed</code></li><li>从<code>seed</code>中获取区块头</li></ol><p>3.2 从复制的种子开始混合</p><ul><li><code>mixBytes</code>常量= 128，<code>mix</code>的长度为 32，元素为<code>uint32</code>，是 32位，对应为 4 字节大小。所以<code>mix</code>总共大小为 4*32=128 字节大小</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mix <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> mixBytes<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		mix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">Uint32</span><span class="token punctuation">(</span>seed<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.3 混合随机数据集节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//与mix结构相同，长度相同</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopAccesses<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		parent <span class="token operator">:=</span> <span class="token function">fnv</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span>seedHead<span class="token punctuation">,</span> mix<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> rows
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mixBytes<span class="token operator">/</span>hashBytes<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>j<span class="token operator">*</span>hashWords<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>parent<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token function">fnvHash</span><span class="token punctuation">(</span>mix<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.4 压缩混合</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		mix<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fnv</span><span class="token punctuation">(</span><span class="token function">fnv</span><span class="token punctuation">(</span><span class="token function">fnv</span><span class="token punctuation">(</span>mix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	mix <span class="token operator">=</span> mix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span>

	digest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> common<span class="token punctuation">.</span>HashLength<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> mix <span class="token punctuation">{</span>
		binary<span class="token punctuation">.</span>LittleEndian<span class="token punctuation">.</span><span class="token function">PutUint32</span><span class="token punctuation">(</span>digest<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> digest<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span><span class="token function">Keccak256</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> digest<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终返回的是<code>digest</code>和<code>digest</code>与<code>seed</code>的哈希；而<code>digest</code>其实就是<code>mix</code>的<code>[]byte</code>形式。在前面<code>Ethash.mine</code>的代码中我们已经看到使用第二个返回值与<code>target</code>变量进行比较，以确定这是否是一个有效的哈希值。</p><hr><h3 id="验证pow" tabindex="-1"><a class="header-anchor" href="#验证pow" aria-hidden="true">#</a> 验证pow</h3><p>挖矿信息的验证有两部分：</p><ol><li>验证<code>Header.Difficulty</code>是否正确</li><li>验证<code>Header.MixDigest</code>和<code>Header.Nonce</code>是否正确</li></ol><p>①：验证<code>Header.Difficulty</code>的代码主要在<code>Ethash.verifyHeader</code>中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ethash <span class="token operator">*</span>Ethash<span class="token punctuation">)</span> <span class="token function">verifyHeader</span><span class="token punctuation">(</span>chain consensus<span class="token punctuation">.</span>ChainReader<span class="token punctuation">,</span> header<span class="token punctuation">,</span> parent <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> uncle <span class="token builtin">bool</span><span class="token punctuation">,</span> seal <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token operator">...</span>
  expected <span class="token operator">:=</span> ethash<span class="token punctuation">.</span><span class="token function">CalcDifficulty</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> header<span class="token punctuation">.</span>Time<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">)</span>

  <span class="token keyword">if</span> expected<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid difficulty: have %v, want %v&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Difficulty<span class="token punctuation">,</span> expected<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过区块高度和时间差作为参数来计算<code>Difficulty</code>值，然后与待验证的区块的<code>Header.Difficulty</code>字段进行比较，如果相等则认为是正确的。</p><p>②：<code>MixDigest</code>和<code>Nonce</code>的验证主要是在<code>Header.verifySeal</code>中：</p><p>验证的方式:使用<code>Header.Nonce</code>和头部哈希通过<code>hashimoto</code>重新计算一遍<code>MixDigest</code>和<code>result</code>哈希值,并且验证的节点是不需要dataset数据的。</p><hr><h2 id="总结-参考" tabindex="-1"><a class="header-anchor" href="#总结-参考" aria-hidden="true">#</a> 总结&amp;参考</h2>`,166),k={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"公众号：区块链技术栈 （推荐哦）",-1),m={href:"https://eth.wiki/concepts/ethash/design-rationale",target:"_blank",rel:"noopener noreferrer"},h={href:"https://eth.wiki/concepts/ethash/dag",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.vijaypradeep.com/blog/2017-04-28-ethereums-memory-hardness-explained/",target:"_blank",rel:"noopener noreferrer"};function g(f,y){const a=i("ExternalLinkIcon");return p(),o("div",null,[n("blockquote",null,[u,n("p",null,[s("代码分支："),n("a",d,[s("https://github.com/ethereum/go-ethereum/tree/v1.9.9"),t(a)])])]),r,n("blockquote",null,[n("p",null,[n("a",k,[s("https://github.com/blockchainGuide"),t(a)])]),v,n("p",null,[n("a",m,[s("https://eth.wiki/concepts/ethash/design-rationale"),t(a)])]),n("p",null,[n("a",h,[s("https://eth.wiki/concepts/ethash/dag"),t(a)])]),n("p",null,[n("a",b,[s("https://www.vijaypradeep.com/blog/2017-04-28-ethereums-memory-hardness-explained/"),t(a)])])])])}const H=e(l,[["render",g],["__file","9.etheric_fang_Ethash_consensus_algorithm_of_source_code_analysis.html.vue"]]);export{H as default};
