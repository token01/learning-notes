import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as o,a as s,b as n,d as e,e as p,r as i}from"./app.11a9ee6c.js";const l={},u=p('<blockquote><p>浅谈以太坊源码分析之EVM动态数据类型</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmm9mzi9m8j314y0u07wl.jpg" alt="image-20210113185500297" loading="lazy"></p><p>Solidity提供了在其他编程语言常见的数据类型。除了简单的值类型比如数字和结构体，还有一些其他数据类型，随着数据的增加可以进行动态扩展的动态类型。动态类型的3大类：</p><ul><li>映射(Mappings)：<code>mapping(bytes32 =&gt; uint256)</code>， <code>mapping(address =&gt; string)</code>等等</li><li>数组(Arrays)：<code>[]uint256</code>，<code>[]byte</code>等等</li><li>字节数组(Byte arrays)：只有两种类型：<code>string</code>，<code>bytes</code></li></ul><p>在本系列的第二篇文章中我们看见了固定大小的简单类型在内存中的表示方式。</p><ul><li>基本数值：<code>uint256</code>，<code>byte</code>等等</li><li>定长数组：<code>[10]uint8</code>，<code>[32]byte</code>，<code>bytes32</code></li><li>组合了上面类型的结构体</li></ul>',6),d={href:"https://www.jianshu.com/p/9df8d15418ed",target:"_blank",rel:"noopener noreferrer"},r=p(`<p>在本文中我们将会研究Solidity是如何支持更加复杂的数据结构的。在表面上看可能Solidity中的数组和映射比较熟悉，但是从它们的实现方式来看在本质上却有着不同的性能特征。</p><p>我们会从映射开始，这是三者当中最简单的。数组和字节数组其实就是拥有更加高级特征的映射。</p><h2 id="映射" tabindex="-1"><a class="header-anchor" href="#映射" aria-hidden="true">#</a> 映射</h2><p>让我们存储一个数值在<code>uint256 =&gt; uint256</code>映射中：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> uint256<span class="token punctuation">)</span> items<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      items<span class="token punctuation">[</span><span class="token number">0xC0FEFE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>solc <span class="token operator">--</span>bin <span class="token operator">--</span><span class="token keyword">asm</span> <span class="token operator">--</span>optimize c<span class="token operator">-</span>mapping<span class="token punctuation">.</span>sol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>汇编代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>tag_2<span class="token operator">:</span>
  <span class="token comment">// 不做任何事情，应该会被优化掉</span>
  <span class="token number">0xc0fefe</span>
  <span class="token number">0x0</span>
  swap1
  dup2
  mstore
  <span class="token number">0x20</span>
  mstore
  <span class="token comment">// 将0x42 存储在地址0x798...187c上</span>
  <span class="token number">0x42</span>
 <span class="token number">0x79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c</span>
  sstore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将EVM想成一个键-值( key-value)数据库，不过每个key都限制为32字节。与其直接使用key<code>0xC0FEFE</code>，不如使用key的哈希值<code>0x798...187c</code>，并且<code>0x42</code>存储在这里。哈希函数使用的是<code>keccak256</code>(SHA256)函数。</p><p>在这个例子中我们没有看见<code>keccak256</code>指令本身，因为优化器已经提前计算了结果并內联到了字节码中。在没什么作用的<code>mstore</code>指令中，我们依然可以看到计算的痕迹。</p><h2 id="计算地址" tabindex="-1"><a class="header-anchor" href="#计算地址" aria-hidden="true">#</a> 计算地址</h2>`,12),k=s("code",null,"0xC0FEFE",-1),m=s("code",null,"0x798...187c",-1),b={href:"https://link.jianshu.com?t=https://pypi.python.org/pypi/pysha3",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"keccak_256",-1),x=p(`<p>定义两个协助函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> binascii
<span class="token keyword">import</span> sha3
<span class="token comment">#将数值转换成32字节数组</span>
<span class="token keyword">def</span> <span class="token function">bytes32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token string">&#39;%064x&#39;</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>
<span class="token comment"># 计算32字节数组的 keccak256 哈希值</span>
<span class="token keyword">def</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sha3<span class="token punctuation">.</span>keccak_256<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将数值转换成32个字节：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bytes32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
b<span class="token string-literal"><span class="token string">&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01&#39;</span></span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bytes32<span class="token punctuation">(</span><span class="token number">0xC0FEFE</span><span class="token punctuation">)</span>
b<span class="token string-literal"><span class="token string">&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\xfe\\xfe&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>+</code>操作符，将两个字节数组连接起来：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bytes32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes32<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
b<span class="token string-literal"><span class="token string">&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>计算一些字节的 keccak256 哈希值：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以计算<code>0x798...187c</code>了。</p><p>存储变量<code>items</code>的位置是<code>0x0</code>（因为它是第一个存储变量）。连接key<code>0xc0fefe</code>和<code>items</code>的位置来获取地址：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># key = 0xC0FEFE, position = 0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes32<span class="token punctuation">(</span><span class="token number">0xC0FEFE</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为key计算存储地址的公式是：</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>keccak256(bytes32(key) + bytes32(position))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="两个映射" tabindex="-1"><a class="header-anchor" href="#两个映射" aria-hidden="true">#</a> 两个映射</h2><p>我们先把公式放在这里，后面数值存储时需要计算会用到该公式。</p><p>假设我们的合约有两个映射：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> uint256<span class="token punctuation">)</span> itemsA<span class="token punctuation">;</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> uint256<span class="token punctuation">)</span> itemsB<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      itemsA<span class="token punctuation">[</span><span class="token number">0xAAAA</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xAAAA</span><span class="token punctuation">;</span>
      itemsB<span class="token punctuation">[</span><span class="token number">0xBBBB</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xBBBB</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>itemsA</code>的位置是<code>0</code>，key为<code>0xAAAA</code>：</li></ul><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># key = 0xAAAA, position = 0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes32<span class="token punctuation">(</span><span class="token number">0xAAAA</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>itemsB</code>的位置为<code>1</code>，key为<code>0xBBBB</code>：</li></ul><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># key = 0xBBBB, position = 1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes32<span class="token punctuation">(</span><span class="token number">0xBBBB</span><span class="token punctuation">)</span> <span class="token operator">+</span> bytes32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用编译器来验证一下这些计算：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ solc <span class="token operator">--</span>bin <span class="token operator">--</span><span class="token keyword">asm</span> <span class="token operator">--</span>optimize  c<span class="token operator">-</span>mapping<span class="token operator">-</span><span class="token number">2.</span>sol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>汇编代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>tag_2<span class="token operator">:</span>
  <span class="token comment">// ... 忽略可能会被优化掉的内存操作</span>
  <span class="token number">0xaaaa</span>
  <span class="token number">0x839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3</span>
  sstore
  <span class="token number">0xbbbb</span>
  <span class="token number">0x34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395</span>
  sstore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟期望的结果一样。</p><h2 id="汇编代码中的keccak256" tabindex="-1"><a class="header-anchor" href="#汇编代码中的keccak256" aria-hidden="true">#</a> 汇编代码中的KECCAK256</h2><p>编译器可以提前计算key的地址是因为相关的值是常量。如果key使用的是变量，那么哈希就必须要在汇编代码中完成。现在我们无效化优化器，来看看在汇编代码中哈希是如何完成的。</p><p>事实证明很容易就能让优化器无效，只要引入一个间接的虚变量<code>i</code>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> uint256<span class="token punctuation">)</span> items<span class="token punctuation">;</span>
    <span class="token comment">//这个变量会造成常量的优化失败</span>
    uint256 i <span class="token operator">=</span> <span class="token number">0xC0FEFE</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量<code>items</code>的位置依然是<code>0x0</code>，所以我们应该期待地址与之前是一样的。</p><p>加上优化选项进行编译，但是这次不会提前计算哈希值：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>$ solc <span class="token operator">--</span>bin <span class="token operator">--</span><span class="token keyword">asm</span> <span class="token operator">--</span>optimize  c<span class="token operator">-</span>mapping<span class="token operator">--</span>no<span class="token operator">-</span>constant<span class="token operator">-</span>folding<span class="token punctuation">.</span>sol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释的汇编代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>tag_2<span class="token punctuation">:</span>
  <span class="token comment">// 加载\`i\` 到栈中</span>
  <span class="token function">sload</span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token number">0xC0FEFE</span><span class="token punctuation">]</span>
  <span class="token comment">// 将key\`0xC0FEFE\`存放在内存中的0x0位置上，为哈希做准备</span>
  <span class="token number">0x0</span>
    <span class="token punctuation">[</span><span class="token number">0x0</span> <span class="token number">0xC0FEFE</span><span class="token punctuation">]</span>
  swap1
    <span class="token punctuation">[</span><span class="token number">0xC0FEFE</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  dup2
    <span class="token punctuation">[</span><span class="token number">0x0</span> <span class="token number">0xC0FEFE</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  mstore
    <span class="token punctuation">[</span><span class="token number">0x0</span><span class="token punctuation">]</span>
    memory<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token number">0x00</span> <span class="token operator">=&gt;</span> <span class="token number">0xC0FEFE</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// 将位置 \`0x0\` 存储在内存中的 0x20 (32)位置上，为哈希做准备</span>
  <span class="token number">0x20</span> <span class="token comment">// 32</span>
    <span class="token punctuation">[</span><span class="token number">0x20</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  dup2
    <span class="token punctuation">[</span><span class="token number">0x0</span> <span class="token number">0x20</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  swap1
    <span class="token punctuation">[</span><span class="token number">0x20</span> <span class="token number">0x0</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  mstore
    <span class="token punctuation">[</span><span class="token number">0x0</span><span class="token punctuation">]</span>
    memory<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token number">0x00</span> <span class="token operator">=&gt;</span> <span class="token number">0xC0FEFE</span>
      <span class="token number">0x20</span> <span class="token operator">=&gt;</span> <span class="token number">0x0</span>
    <span class="token punctuation">}</span>
 <span class="token comment">// 从第0个字节开始，哈希在内存中接下来的0x40(64)个字节</span>
  <span class="token number">0x40</span> <span class="token comment">// 64</span>
    <span class="token punctuation">[</span><span class="token number">0x40</span> <span class="token number">0x0</span><span class="token punctuation">]</span>
  swap1
    <span class="token punctuation">[</span><span class="token number">0x0</span> <span class="token number">0x40</span><span class="token punctuation">]</span>
  keccak256
    <span class="token punctuation">[</span><span class="token number">0x798</span><span class="token range operator">..</span><span class="token punctuation">.</span>187c<span class="token punctuation">]</span>
  <span class="token comment">// 将0x42 存储在计算的地址上</span>
  <span class="token number">0x42</span>
    <span class="token punctuation">[</span><span class="token number">0x42</span> <span class="token number">0x798</span><span class="token range operator">..</span><span class="token punctuation">.</span>187c<span class="token punctuation">]</span>
  swap1
    <span class="token punctuation">[</span><span class="token number">0x798</span><span class="token range operator">..</span><span class="token punctuation">.</span>187c <span class="token number">0x42</span><span class="token punctuation">]</span>
  <span class="token class-name">sstore</span>
    store<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token number">0x798</span><span class="token range operator">..</span><span class="token punctuation">.</span>187c <span class="token operator">=&gt;</span> <span class="token number">0x42</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mstore</code>指令写入32个字节到内存中。内存操作便宜很多，只需要3 gas就可以读取和写入。前半部分的汇编代码就是通过将key和位置加载到相邻的内存块中来进行“连接”的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token number">0</span>                   <span class="token number">31</span>  <span class="token number">32</span>                 <span class="token number">63</span>
<span class="token punctuation">[</span>    key (<span class="token number">32</span> bytes)    <span class="token punctuation">]</span><span class="token punctuation">[</span> position (<span class="token number">32</span> bytes) <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后<code>keccak256</code>指令哈希内存中的数据。成本取决于被哈希的数据有多少：</p><ul><li>每个SHA3操作需要支付 30 gas</li><li>每个32字节的字需要支付 6 gas</li></ul><p>对于一个<code>uint256</code>类型key，gas的成本是42：<code>30 + 6 * 2</code>。</p><h2 id="映射大数值" tabindex="-1"><a class="header-anchor" href="#映射大数值" aria-hidden="true">#</a> 映射大数值</h2><p>每个存储槽只能存储32字节。如果我们尝试存储一个更大一点的结构体会怎么样？</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> Tuple<span class="token punctuation">)</span> tuples<span class="token punctuation">;</span>
    struct Tuple <span class="token punctuation">{</span>
      uint256 a<span class="token punctuation">;</span>
      uint256 b<span class="token punctuation">;</span>
      uint256 c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tuples<span class="token punctuation">[</span><span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0x1A</span><span class="token punctuation">;</span>
      tuples<span class="token punctuation">[</span><span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0x1B</span><span class="token punctuation">;</span>
      tuples<span class="token punctuation">[</span><span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">0x1C</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译，你会看见3个<code>sstore</code>指令：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>tag_2<span class="token operator">:</span>
  <span class="token comment">//忽略未优化的代码</span>
  <span class="token number">0x1a</span>
  <span class="token number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d</span>
  sstore
  <span class="token number">0x1b</span>
  <span class="token number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e</span>
  sstore
  <span class="token number">0x1c</span>
  <span class="token number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f</span>
  sstore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意计算的地址除了最后一个数字其他都是一样的。<code>Tulp</code>结构体成员是依次排列的(..7d, ..7e, ..7f)。</p><h2 id="映射不会打包" tabindex="-1"><a class="header-anchor" href="#映射不会打包" aria-hidden="true">#</a> 映射不会打包</h2><p>考虑到映射的设计方式，每项需要的最小存储空间是32字节，即使你实际只需要存储1个字节：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token parameter">uint256</span> <span class="token operator">=&gt;</span> uint8<span class="token punctuation">)</span> items<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      items<span class="token punctuation">[</span><span class="token number">0xA</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>
      items<span class="token punctuation">[</span><span class="token number">0xB</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xBB</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个数值大于32字节，那么你需要的存储空间会以32字节依次增加。</p><h2 id="动态数组是映射的升级" tabindex="-1"><a class="header-anchor" href="#动态数组是映射的升级" aria-hidden="true">#</a> 动态数组是映射的升级</h2><p>在典型语言中，数组只是连续存储在内存中一系列相同类型的元素。假设你有一个包含100个<code>uint8</code>类型的元素数组，那么这就会占用100个字节的内存。这种模式的话，将整个数组加载到CPU的缓存中然后循环遍历每个元素会便宜一点。</p><p>对于大多数语言而言，数组比映射都会便宜一些。不过在Solidity中，数组是更加昂贵的映射。数组里面的元素会按照顺序排列在存储器中：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>0x290d...e563
0x290d...e564
0x290d...e565
0x290d...e566
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是请记住，对于这些存储槽的每次访问实际上就像数据库中的key-value的查找一样。访问一个数组的元素跟访问一个映射的元素是没什么区别的。</p><p>思考一下<code>[]uint256</code>类型，它本质上与<code>mapping(uint256 =&gt; uint256)</code>是一样的，只不过后者多了一点特征，让它看起去就像数组一样。</p><ul><li><code>length</code>表示一共有多少个元素</li><li>边界检查。当读取或写入时索引值大于<code>length</code>就会报错</li><li>比映射更加复杂的存储打包行为</li><li>当数组变小时，自动清除未使用的存储槽</li><li><code>bytes</code>和<code>string</code>的特殊优化让短数组(小于32字节)存储更加高效</li></ul><h2 id="简单数组" tabindex="-1"><a class="header-anchor" href="#简单数组" aria-hidden="true">#</a> 简单数组</h2><p>看一下保存3个元素的数组：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// c-darray.sol</span>
pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    uint256<span class="token punctuation">[</span><span class="token punctuation">]</span> chunks<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xAA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xBB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xCC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60),g={href:"https://link.jianshu.com?t=https://remix.ethereum.org/",target:"_blank",rel:"noopener noreferrer"},h=p(`<p><img src="https:////upload-images.jianshu.io/upload_images/8388873-3f80ed93b21b374a.jpeg?imageMogr2/auto-orient/strip|imageView2/2/w/800/format/webp" alt="img" loading="lazy"></p><p>模拟的最后，我们可以看到有4个存储槽被使用了：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>key<span class="token punctuation">:</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000000</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span>
key<span class="token punctuation">:</span> <span class="token number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000aa</span>
key<span class="token punctuation">:</span> <span class="token number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000bb</span>
key<span class="token punctuation">:</span> <span class="token number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000cc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>chunks</code>变量的位置是<code>0x0</code>，用来存储数组的长度（<code>0x3</code>），哈希变量的位置来找到存储数组数据的地址：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># position = 0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个地址上数组的每个元素依次排列（<code>0x29..63</code>，<code>0x29..64</code>，<code>0x29..65</code>）。</p><h2 id="动态数据打包" tabindex="-1"><a class="header-anchor" href="#动态数据打包" aria-hidden="true">#</a> 动态数据打包</h2><p>所有重要的打包行为是什么样的？数组与映射比较，数组的一个优势就是打包。拥有4个元素的<code>uint128[]</code>数组元素刚刚好需要2个存储槽（再加1个存储槽用来存储长度）。</p><p>思考一下：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    uint128<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xBB</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xCC</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xDD</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Remix中运行这个代码，存储器的最后看起来像这样：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>key<span class="token punctuation">:</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000000</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000004</span>
key<span class="token punctuation">:</span> <span class="token number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x000000000000000000000000000000bb000000000000000000000000000000aa</span>
key<span class="token punctuation">:</span> <span class="token number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0x000000000000000000000000000000dd000000000000000000000000000000cc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有三个存储槽被使用了，跟预料的一样。长度再次存储在存储变量的<code>0x0</code>位置上。4个元素被打包放入两个独立的存储槽中。该数组的开始地址是变量位置的哈希值：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment"># position = 0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> keccak256<span class="token punctuation">(</span>bytes32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string-literal"><span class="token string">&#39;290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在的地址是每两个数组元素增加一次，看起来很好！</p><p>但是汇编代码本身优化的并不好。因为使用了两个存储槽，所以我们会希望优化器使用两个<code>sstore</code>指令来完成任务。不幸的是，由于边界检查(和一些其他因素)，所以没有办法将<code>sstore</code>指令优化掉。</p><p>使用4个<code>sstore</code>指令才能完成任务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/* <span class="token string">&quot;c-bytes--sstore-optimize-fail.sol&quot;</span>:105:116  s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> 0xAA */
sstore
/* <span class="token string">&quot;c-bytes--sstore-optimize-fail.sol&quot;</span>:126:137  s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> 0xBB */
sstore
/* <span class="token string">&quot;c-bytes--sstore-optimize-fail.sol&quot;</span>:147:158  s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> 0xCC */
sstore
/* <span class="token string">&quot;c-bytes--sstore-optimize-fail.sol&quot;</span>:168:179  s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> 0xDD */
sstore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节数组和字符串" tabindex="-1"><a class="header-anchor" href="#字节数组和字符串" aria-hidden="true">#</a> 字节数组和字符串</h3><p><code>bytes</code>和<code>string</code>是为字节和字符进行优化的特殊数组类型。如果数组的长度小于31字节，只需要1个存储槽来存储整个数组。长一点的字节数组跟正常数组的表示方式差不多。</p><p>看看短一点的字节数组：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// c-bytes--long.sol</span>
pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    bytes s<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xAA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xBB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0xCC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为数组只有3个字节（小于31字节），所以它只占用1个存储槽。在Remix中运行，存储看起来如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>key<span class="token punctuation">:</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000000</span>
<span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0xaabbcc0000000000000000000000000000000000000000000000000000000006</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数据<code>0xaabbcc...</code>从左到右的进行存储。后面的0是空数据。最后的<code>0x06</code>字节是数组的编码长度。公式是<code>长度=编码长度/2</code>，在这个例子中实际长度是<code>6/2=3</code>。</p><p><code>string</code>与<code>bytes</code>的原理一模一样。</p><h2 id="长字节数组" tabindex="-1"><a class="header-anchor" href="#长字节数组" aria-hidden="true">#</a> 长字节数组</h2><p>如果数据的长度大于31字节，字节数组就跟<code>[]byte</code>一样。来看一下长度为128字节的字节数组：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// c-bytes--long.sol</span>
pragma solidity <span class="token operator">^</span><span class="token number">0.4</span><span class="token number">.11</span><span class="token punctuation">;</span>
contract <span class="token constant">C</span> <span class="token punctuation">{</span>
    bytes s<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Remix中运行，可以看见使用了4个存储槽：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>0x0000...0000
0x0000...0101
0x290d...e563
0x0000...0001
0x290d...e564
0x0000...0002
0x290d...e565
0x0000...0003
0x290d...e566
0x0000...0004
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>0x0</code>的存储槽不再用来存储数据，整个存储槽现在存储编码的数组长度。要获得实际长度，使用<code>长度=（编码长度-1）/2</code>公式。在这个例子中长度是<code>（0x101 - 1）/2=128</code>。实际的字节被保存在<code>0x290d...e563</code>，并且存储槽是连续的。</p><p>字节数组的汇编代码相当多。除了正常的边界检查和数组恢复大小等，它还需要对长度进行编码/解码，以及注意长字节数组和短字节数组之间的转换。</p><blockquote><p>为什么要编码长度？因为编码之后，可以很容易的测试出来字节数组是长还是短。注意对于长数组而言编码长度总是奇数，而短数组的编码长度总是偶数。汇编代码只需要查看一下最后一位是否为0，为0就是偶数（短数组），非0就是奇数（长数组）。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>查看Solidity编译器的内部工作，可以看见熟悉的数据结构例如映射和数组与传统编程语言完全不同。</p><p>概括：</p><ul><li>数组跟映射一样，非高效</li><li>比映射的汇编代码更加复杂</li><li>小类型(<code>byte</code>，<code>uint8</code>，<code>string</code>)时存储比映射高效</li><li>汇编代码优化的不是很好。即使是打包，每个任务都会有一个<code>sstore</code>指令</li></ul><p>EVM的存储器就是一个键值数据库，跟git很像。如果你改变了任一东西，根节点的校验和也会改变。如果两个根节点拥有相同的校验和，存储的数据就能保证是一样的。</p><p>为了体会Solidity和EVM的奇特，可以想象一下在git仓库里数组里面的每个元素都是它自己的文件。当你改变数组里一个元素的值，实际上就相当于创建了一个提交。当你迭代一个数组时，你不能一次性的加载整个数组，你必须要到仓库中进行查找并分别找到每个文件。</p><p>不仅仅这样，每个文件都限制到32字节！因为我们需要将数据结构都分割成32字节的块，Solidity编译器的所有逻辑和优化都是很负责的，全部在汇编的时候完成。</p><p>不过32字节的限制是完全任意的。支持键值存储的可以使用key来存储任意类型的数值。也许未来我们添加新的EVM指令使用key来存储任意的字节数组。</p><p>不过现在，EVM存储器就是一个伪装成32字节数组的键值数据库。</p>`,43),y={href:"https://link.jianshu.com?t=https://github.com/ethereum/solidity/blob/3b07c4d38e40c52ee8a4d16e56e2afa1a0f27905/libsolidity/codegen/ArrayUtils.cpp#L624",target:"_blank",rel:"noopener noreferrer"},f={href:"https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7",target:"_blank",rel:"noopener noreferrer"};function _(C,A){const a=i("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("固定大小的存储变量都是尽可能的打包成32字节的块然后依次存放在存储器中的。（如果这看起来很陌生，请阅读本系列的第二篇文章： "),s("a",d,[n("固定长度数据类型的表示方法"),e(a)])]),r,s("p",null,[n("使用一些Python代码来把"),k,n("哈希成"),m,n("。如果你想要跟着做下去，你需要安装Python 3.6，或者安装"),s("a",b,[n("pysha3"),e(a)]),n(" 来获得"),v,n("哈希函数。")]),x,s("p",null,[n("数组访问的汇编代码难以追踪，使用"),s("a",g,[n("Remix"),e(a)]),n("调试器来运行合约：")]),h,s("blockquote",null,[s("p",null,[n("可以看看"),s("a",y,[n("ArrayUtils::resizeDynamicArray"),e(a)]),n(" 来了解一下当恢复数组大小时编译器的动作。正常情况下数据结构都会作为语言的标准库来完成的，但是在Solidity中嵌入到了编译器里面。")])]),s("blockquote",null,[s("p",null,[n("翻译自 "),s("a",f,[n("https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7"),e(a)])])])])}const j=t(l,[["render",_],["__file","21.etheric_fang_source_analysis_of_EVM_entry_dynamic_data_type.html.vue"]]);export{j as default};
