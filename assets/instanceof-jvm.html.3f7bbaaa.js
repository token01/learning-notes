import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as a,d as e,e as t,r as l}from"./app.7145ec97.js";const i={},r=n("p",null,[a("小二那天去面试，碰到了这个问题：“"),n("strong",null,"instanceof 关键字是如何实现的"),a("？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。")],-1),u=n("p",null,"我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。”",-1),d={href:"https://www.zhihu.com/question/21574535/answer/18998914",target:"_blank",rel:"noopener noreferrer"},k=t(`<p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.gif" alt="" loading="lazy"></p><hr><h2 id="场景一-月薪-3000-元一下的码农职位" tabindex="-1"><a class="header-anchor" href="#场景一-月薪-3000-元一下的码农职位" aria-hidden="true">#</a> 场景一：月薪 3000 元一下的码农职位</h2><p>用 Java 伪代码来表现instanceof关键字在Java语言规范所描述的运行时语义，是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// obj instanceof T</span>
<span class="token keyword">boolean</span> result<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">T</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token comment">// checkcast</span>
      result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用中文说就是：如果有表达式 <code>obj instanceof T</code>，那么如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</p><p>如果面试官说“这不是废话嘛”，进入场景二。</p><h2 id="场景二-月薪6000-8000的java研发职位" tabindex="-1"><a class="header-anchor" href="#场景二-月薪6000-8000的java研发职位" aria-hidden="true">#</a> 场景二：月薪6000-8000的Java研发职位</h2><p>JVM有一条名为 instanceof 的指令，而Java源码编译到Class文件时会把Java语言中的 instanceof 运算符映射到JVM的 instanceof 指令上。</p><p>javac是这样做的：</p>`,10),v=n("li",null,'instanceof 是javac能识别的一个关键字，对应到Token.INSTANCEOF的token类型。做词法分析的时候扫描到"instanceof"关键字就映射到了一个Token.INSTANCEOF token。',-1),m={href:"https://tobebetterjavaer.com/basic-extra-meal/instanceof.html",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"中途还得根据Java语言规范对instanceof运算符的编译时检查的规定把有问题的情况找出来。",-1),h=n("li",null,"到最后生成字节码的时候为JCTree.JCInstanceof节点生成instanceof字节码指令。",-1),f=t('<p>回答到这层面就已经能解决好些实际问题了，如果面试官还说，“这不还是废话嘛”，进入场景三。</p><h2 id="场景三-月薪10000的java高级研发职位" tabindex="-1"><a class="header-anchor" href="#场景三-月薪10000的java高级研发职位" aria-hidden="true">#</a> 场景三：月薪10000的Java高级研发职位</h2><p>先简单介绍一下instanceof的字节码：</p><ul><li>操作：确定对象是否为给定的类型</li><li>指令格式：instanceof|indexbyte1|indexbyte2</li><li>指令执行前后的栈顶状态： <ul><li>……，objectref=&gt;</li><li>……，result</li></ul></li></ul><p>再简单描述下：indexbyte1和indexbyte2用于构造对当前类的常量池的索引，objectref为reference类型，可以是某个类，数组的实例或者是接口。</p><p>基本的实现过程：对indexbyte1和indexbyte2构造的常量池索引进行解析，然后根据java规范判断解析的类是不是objectref的一个实例，最后在栈顶写入结果。</p><p>基本上就是根据规范来 YY 下实现，就能八九不离十蒙混过关了。</p><p>如果面试官还不满意，进入场景四。</p><h2 id="场景四-月薪10000以上的java资深研发职位" tabindex="-1"><a class="header-anchor" href="#场景四-月薪10000以上的java资深研发职位" aria-hidden="true">#</a> 场景四：月薪10000以上的Java资深研发职位</h2><p>这个岗位注重性能调优什么的，R 大说可以上论文了：</p>',10),_={href:"https://dl.acm.org/doi/10.1145/583810.583821",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>论文我也看不懂，所以这里就不 BB 了。（逃</p><p>篇论文描述了HotSpot VM做子类型判断的算法，这里简单补充一下JDK6至今的HotSpot VM实际采用的算法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">is_subtype_of</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">S</span> <span class="token operator">==</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token operator">==</span> <span class="token class-name">S</span><span class="token punctuation">[</span>off<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">!=</span> <span class="token operator">&amp;</span>cache<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">scan_secondary_subtype_array</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">S</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HotSpot VM的两个编译器，Client Compiler (C1) 与 Server Compiler (C2) 各自对子类型判断的实现有更进一步的优化。实际上在JVM里，instanceof的功能就实现了4份，VM runtime、解释器、C1、C2各一份。</p><p>VM runtime的：</p>`,5),y={href:"http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"分享的最后，musk简单来说一下。",-1),x=n("p",null,"这个问题涉及语法细节，涉及jvm实现，涉及编译器，还涉及一点点数据结构设计，比较考验一个 Java 程序员的内功，如果要回答到论文的程度，那真的是，面试官也得提前备好知识点，不然应聘者的回答啥也听不懂就挺尴尬的。",-1),g=n("p",null,"反正 R 大回答里的很多细节我都是第一次听，逃了逃了。。。。。。",-1),C=n("hr",null,null,-1);function J(T,S){const s=l("ExternalLinkIcon");return p(),c("div",null,[r,u,n("blockquote",null,[n("p",null,[a("作者：RednaxelaFX，整理：musk，链接："),n("a",d,[a("https://www.zhihu.com/question/21574535/answer/18998914"),e(s)])])]),k,n("ul",null,[v,n("li",null,[a("该编译器的抽象语法树节点有一个JCTree.JCInstanceOf类用于表示instanceof运算。做语法分析的时候解析到"),n("a",m,[a("instanceof运算符"),e(s)]),a("就会生成这个JCTree.JCInstanceof类型的节点。")]),b,h]),f,n("blockquote",null,[n("p",null,[n("a",_,[a("https://dl.acm.org/doi/10.1145/583810.583821"),e(s)])])]),j,n("blockquote",null,[n("p",null,[n("a",y,[a("http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp"),e(s)])])]),w,x,g,C])}const N=o(i,[["render",J],["__file","instanceof-jvm.html.vue"]]);export{N as default};
