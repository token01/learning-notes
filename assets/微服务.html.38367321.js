import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as s,a as t,b as e,d as n,e as r,r as a}from"./app.37c9a343.js";const d={},c=r('<h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务" aria-hidden="true">#</a> 微服务</h2><p>热点名词</p><ul><li>DevOps (Development Operations)</li><li>Service Mesh (服务网格)</li><li>Serverless 无服务器 <blockquote><p>可以理解成 FaaS（Function as a Service，函数即服务）<br> 代表产品：AWS Lambda<br> 其实，最初“无服务器”意在帮助开发者摆脱运行后端应用程序所需的服务器设备的设置和管理工作。这项技术的目标并不是为了实现真正意义上的“无服务器”，而是指由第三方供应商负责后端基础结构的维护，以服务的方式为开发者提供所需功能，例如数据库、消息，以及身份验证等。这种服务基础结构通常可以叫做后端即服务（Backend-as-a-Service，BaaS），或移动后端即服务（MobileBackend-as-a-service，MBaaS）。<br> 现在，无服务器架构是指大量依赖第三方服务(也叫做后端即服务，即“BaaS”)或暂存容器中运行的自定义代码(函数即服务，即“FaaS”)的应用程序，函数是无服务器架构中抽象语言运行时的最小单位，在这种架构中，我们并不看重运行一个函数需要多少CPU或RAM或任何其他资源，而是更看重运行函数所需的时间，我们也只为这些函数的运行时间付费。无服务器架构中函数可以多种方式触发，如定期运行函数的定时器、HTTP请求或某些相关服务中的某个事件。</p></blockquote></li></ul><blockquote><p>2014 年可以认为是微服务 1.0 的元年，当年有几个标志性事件，一是 Martin Fowler 在其博客上发表了”Microservices”一文，正式提出微服务架构风格；二是 Netflix 微服务架构经过多年大规模生产验证，最终抽象落地形成一整套开源的微服务基础组件，统称 NetflixOSS，Netflix 的成功经验开始被业界认可并推崇；三是 Pivotal 将 NetflixOSS 开源微服务组件集成到其 Spring 体系，推出 Spring Cloud 微服务开发技术栈。<br> 2017，微服务技术生态又发生了巨大变化，容器，PaaS，Cloud Native，gRPC，ServiceMesh，Serverless 等新技术新理念你方唱罢我登场，不知不觉我们又来到了微服务 2.0 时代。</p></blockquote><h2 id="spring-cloud-与-kubernetes-组件" tabindex="-1"><a class="header-anchor" href="#spring-cloud-与-kubernetes-组件" aria-hidden="true">#</a> Spring cloud 与 Kubernetes 组件</h2><p>分别使用Spring cloud Kubernetes微服务的实现组件，<em>好多也是可以共用的</em></p>',6),h=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}}),t("th",{style:{"text-align":"left"}},"Spring Cloud"),t("th",{style:{"text-align":"left"}},"Kubernetes")])],-1),u=t("tr",null,[t("td",{style:{"text-align":"left"}},"服务发现"),t("td",{style:{"text-align":"left"}},"Eureka , Consul , Nacos"),t("td",{style:{"text-align":"left"}},"kube-dns Services")],-1),_=t("tr",null,[t("td",{style:{"text-align":"left"}},"服务通讯"),t("td",{style:{"text-align":"left"}},"Ribbon , Feign"),t("td",{style:{"text-align":"left"}},"Thrift , grpc")],-1),g=t("td",{style:{"text-align":"left"}},"配置管理",-1),p={style:{"text-align":"left"}},f={href:"https://spring.io/projects/spring-cloud-config",target:"_blank",rel:"noopener noreferrer"},b={href:"https://spring.io/projects/spring-cloud-bus",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ctripcorp/apollo",target:"_blank",rel:"noopener noreferrer"},y=t("td",{style:{"text-align":"left"}},"ConfigMap",-1),S=t("tr",null,[t("td",{style:{"text-align":"left"}},"负载均衡"),t("td",{style:{"text-align":"left"}},"Ribbon RestTemplate"),t("td",{style:{"text-align":"left"}},"Services , Ingress")],-1),k=t("tr",null,[t("td",{style:{"text-align":"left"}},"网关"),t("td",{style:{"text-align":"left"}},"Zuul , Gateway"),t("td",{style:{"text-align":"left"}},"Kong")],-1),m=t("td",{style:{"text-align":"left"}},"链路跟踪",-1),v={style:{"text-align":"left"}},C={href:"https://github.com/jaegertracing/jaeger",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/dianping/cat",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/naver/pinpoint",target:"_blank",rel:"noopener noreferrer"},N=t("td",{style:{"text-align":"left"}},"OpenTracing",-1),T=t("tr",null,[t("td",{style:{"text-align":"left"}},"容错熔断器"),t("td",{style:{"text-align":"left"}},"Hystrix, Sentinel"),t("td",{style:{"text-align":"left"}})],-1),D=t("tr",null,[t("td",{style:{"text-align":"left"}},"安全模块"),t("td",{style:{"text-align":"left"}},"Security"),t("td",{style:{"text-align":"left"}})],-1),I=t("td",{style:{"text-align":"left"}},"分布式日志",-1),M=t("td",{style:{"text-align":"left"}},"ELK",-1),q={style:{"text-align":"left"}},A={href:"https://github.com/Yelp/elastalert",target:"_blank",rel:"noopener noreferrer"},L=t("tr",null,[t("td",{style:{"text-align":"left"}},"任务管理"),t("td",{style:{"text-align":"left"}},"Batch"),t("td",{style:{"text-align":"left"}},"Jobs")],-1),O=t("tr",null,[t("td",{style:{"text-align":"left"}},"分布式事务"),t("td",{style:{"text-align":"left"}},"seata"),t("td",{style:{"text-align":"left"}})],-1),w=t("p",null,"其他微服务DevOps相关优秀产品",-1),K={href:"https://github.com/pingcap/tidb",target:"_blank",rel:"noopener noreferrer"},F={href:"https://iotdb.apache.org/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/lindb/lindb",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/taosdata/TDengine",target:"_blank",rel:"noopener noreferrer"},j=t("li",null,[e("分布式数据访问 "),t("blockquote",null,[t("p",null,"shardingjdbc, MyCAT")])],-1),G=t("li",null,[e("任务调度系统 "),t("blockquote",null,[t("p",null,"xxl-job, elastic-job")])],-1),V={href:"https://github.com/sohutv/cachecloud",target:"_blank",rel:"noopener noreferrer"},J=t("br",null,null,-1),Z={href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"},H=t("li",null,[e("报表 "),t("blockquote",null,[t("p",null,"Grafana")])],-1),W=r('<p>各大网关</p><table><thead><tr><th></th><th>支持公司</th><th>实现语言</th><th>亮点</th><th>不足</th></tr></thead><tbody><tr><td>Nginx(2004)</td><td>Nginx Inc</td><td>C/Lua</td><td>高性能，成熟稳定</td><td>门槛高,偏运维,可编程弱</td></tr><tr><td>Zuul1(2012)</td><td>Netflix/Pivotal</td><td>Java</td><td>成熟,简单门槛低</td><td>门槛较高</td></tr><tr><td>Spring Cloud Gateway(2016)</td><td>Pivotal</td><td>Java</td><td>异步,配置灵活</td><td>早期产品</td></tr><tr><td>Envoy(2016)</td><td>Lyft</td><td>C++</td><td>高性能,可编程API/ServiceMesh集成</td><td>门槛较高</td></tr><tr><td>Kong(2014)</td><td>Kong Inc</td><td>OpenResty/Lua</td><td>高性能,可编程API</td><td>门槛较高</td></tr><tr><td>Traefik(2015)</td><td>Containous</td><td>Golang</td><td>云原生,可编程API/对接各种服务发现</td><td>生产案例不太多</td></tr></tbody></table><h4 id="优秀案例" tabindex="-1"><a class="header-anchor" href="#优秀案例" aria-hidden="true">#</a> 优秀案例</h4>',3),z={href:"https://dzone.com/articles/microservice-architecture-with-spring-cloud-and-do",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/sqshq/PiggyMetrics",target:"_blank",rel:"noopener noreferrer"},U=t("h2",{id:"负载均衡",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#负载均衡","aria-hidden":"true"},"#"),e(" 负载均衡")],-1),Y=t("ul",null,[t("li",null,"OSPF(开放式最短链路优先)是一个内部网关协议(Interior Gateway Protocol,简称IGP)。OSPF通过路由器之间通告网络接口的状态来建立链路状态数据库，生成最短路径树，OSPF会自动计算路由接口上的Cost值，但也可以通过手工指定该接口的Cost值，手工指定的优先于自动计算的值。OSPF计算的Cost，同样是和接口带宽成反比，带宽越高，Cost值越小。到达目标相同Cost值的路径，可以执行负载均衡，最多6条链路同时执行负载均衡。"),t("li",null,"LVS (Linux VirtualServer)，它是一种集群(Cluster)技术，采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。"),t("li",null,"Nginx实现负载均衡的方式主要有三种:轮询、加权轮询、ip hash轮询")],-1),X=t("h2",{id:"关键问题字",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#关键问题字","aria-hidden":"true"},"#"),e(" 关键问题字")],-1),$=t("ul",null,[t("li",null,"C10K ----> epoll")],-1);function tt(et,lt){const l=a("ExternalLinkIcon");return i(),s("div",null,[c,t("table",null,[h,t("tbody",null,[u,_,t("tr",null,[g,t("td",p,[t("a",f,[e("Config"),n(l)]),e(" , "),t("a",b,[e("Bus"),n(l)]),e(" ,Nacos Config , "),t("a",x,[e("Apollo"),n(l)])]),y]),S,k,t("tr",null,[m,t("td",v,[e("Sleuth , Zipkin, "),t("a",C,[e("Jaeger"),n(l)]),e(", "),t("a",P,[e("CAT"),n(l)]),e(", "),t("a",B,[e("Pinpoint"),n(l)])]),N]),T,D,t("tr",null,[I,M,t("td",q,[e("ELK, "),t("a",A,[e("ElastAlert"),n(l)])])]),L,O])]),w,t("ul",null,[t("li",null,[e("NewSQL "),t("blockquote",null,[t("p",null,[t("a",K,[e("TiDB"),n(l)])])])]),t("li",null,[e("时间序列数据库(TSDB) "),t("blockquote",null,[t("p",null,[t("a",F,[e("IoTDB"),n(l)]),e(", "),t("a",E,[e("LinDB"),n(l)]),e(" ,KariosDB, OpenTSDB, InfluxDB, Prometheus, "),t("a",R,[e("TDengine"),n(l)])])])]),j,G,t("li",null,[e("Redis 运维 "),t("blockquote",null,[t("p",null,[t("a",V,[e("Cachecloud"),n(l)]),e(" Redis 私有云平台"),J,e(" codis , "),t("a",Z,[e("twemproxy"),n(l)]),e(" proxy for redis Ansible")])])]),H]),W,t("p",null,[t("a",z,[e("Microservice Architectures With Spring Cloud and Docker"),n(l)])]),t("p",null,[t("a",Q,[e("Microservice Architecture with Spring Boot, Spring Cloud and Docker "),n(l)])]),U,Y,X,$])}const ot=o(d,[["render",tt],["__file","微服务.html.vue"]]);export{ot as default};
