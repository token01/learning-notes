import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as i,a as n,b as s,d as e,e as l,r as p}from"./app.1ed5bacd.js";const o={},c=l(`<h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><h2 id="七层模型" tabindex="-1"><a class="header-anchor" href="#七层模型" aria-hidden="true">#</a> 七层模型</h2><p>OSI（Open System Interconnection）7层<strong>参考</strong>模型</p><ol start="7"><li>应用层<br> 网络服务与最终用户的一个接口。<br> 协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</li><li>表示层<br> 数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）<br> 格式有，JPEG、ASCll、EBCDIC、加密格式等</li><li>会话层<br> 建立、管理、终止会话。（在五层模型里面已经合并到了应用层）<br> 对应主机进程，指本地主机与远程主机正在进行的会话</li><li><strong>传输层</strong><br> 定义传输数据的协议端口号，以及流控和差错校验。<br> 协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</li><li><strong>网络层</strong><br> 进行逻辑地址寻址，实现不同网络之间的路径选择。<br> 协议有：ICMP IGMP IP（IPV4 IPV6）</li><li><strong>数据链路层</strong><br> 建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）<br> 将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li><li>物理层<br> 建立、维护、断开物理连接。（由底层网络定义协议）</li></ol><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">9</span>&lt;&gt;</span> /dev/tcp/www.baidu.com/80
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;GET / HTTP/1.0<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;&amp;</span> <span class="token number">9</span>
<span class="token function">cat</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;&amp;</span> <span class="token number">9</span>

<span class="token function">netstat</span> <span class="token parameter variable">-natp</span> <span class="token comment"># t代表TCP</span>

tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-i</span> eth0 port <span class="token number">80</span> or arp

route <span class="token parameter variable">-n</span>
arp <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mtu" tabindex="-1"><a class="header-anchor" href="#mtu" aria-hidden="true">#</a> MTU</h2><p>以太网(Ethernet)数据帧的长度必须在46-1500字节之间，这是由以太网的物理特性决定的。这个1500字节被称为链路层的MTU(最大传输单元Maximum Transmission Unit)</p><p>回环(loopback)的MTU不受这个限制,但UDP最大理论长度65507</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lo0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">804</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,LOOPBACK,RUNNING,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">16384</span>
	<span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token number">120</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP<span class="token operator">&gt;</span>
	inet <span class="token number">127.0</span>.0.1 netmask 0xff000000
	inet6 ::1 prefixlen <span class="token number">128</span>
	inet6 fe80::1%lo0 prefixlen <span class="token number">64</span> scopeid 0x1
	nd6 <span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token number">20</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>PERFORMNUD,DAD<span class="token operator">&gt;</span>

en0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">886</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span>
	<span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token number">40</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>CHANNEL_IO<span class="token operator">&gt;</span>
	ether f8:ff:c2:2e:91:1d
	inet6 fe80::c1e:3f6b:4f59:1552%en0 prefixlen <span class="token number">64</span> secured scopeid 0x6
	inet <span class="token number">192.168</span>.0.101 netmask 0xffffff00 broadcast <span class="token number">192.168</span>.0.255
	nd6 <span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token number">20</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>PERFORMNUD,DAD<span class="token operator">&gt;</span>
	media: autoselect
	status: active
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于网络接口卡的制约，mtu的长度被限制在1500字节，这个长度指的是链路层的数据区。对于大于这个数值的分组可能被分片，否则无法发送，而分组交换的网络是不可靠的，存在着丢包。IP 协议的发送方不做重传。接收方只有在收到全部的分片后才能 reassemble并送至上层协议处理代码，否则在应用程序看来这些分组已经被丢弃。<br> 假定同一时刻网络丢包的概率是均等的，那么较大的IP datagram必然有更大的概率被丢弃，因为只要丢失了一个fragment，就导致整个IP datagram接收不到。不超过MTU的分组是不存在分片问题的。<br> MTU的值并不包括链路层的首部和尾部的18个字节。所以，这个1500字节就是网络层IP数据报的长度限制。因为IP数据报的首部为20字节，所以IP数据报的数据区长度最大为1480字节。而这个1480字节就是用来放TCP传来的TCP报文段或UDP传来的UDP数据报的。又因为UDP数据报的首部8字节,所以UDP数据报的数据区最大长度为1472字节。这个1472字节就是我们可以使用的字节数。 当我们发送的UDP数据大于1472的时候会怎样呢？这也就是说IP数据报大于1500字节，大于MTU。这个时候发送方IP层就需要分片(fragmentation)。把数据报分成若干片，使每一片都小于MTU。而接收方IP层则需要进行数据报的重组。而更严重的是，由于UDP的特性，当某一片数据传送中丢失时，接收方便无法重组数据报。将导致丢弃整个UDP数据报。因此，在普通的局域网环境下，将UDP的数据控制在1472字节以下为好。<br> 进行Internet编程时则不同，因为Internet上的路由器可能会将MTU设为不同的值。如果我们假定MTU为1500来发送数据的，而途经的某个网络的MTU值小于1500字节，那么系统将会使用一系列的机制来调整MTU值，使数据报能够顺利到达目的地。鉴于Internet上的标准MTU值为576字节，所以在进行Internet的UDP编程时，最好将UDP的数据长度控件在548字节(576-8-20)以内。</p></blockquote><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><ul><li>RTT（Round Trip Time）往返时间</li><li>RTO（Retransmission TimeOut） 重传超时时间</li><li>ARQ (Automatic Repeat-reQuest) 自动重传请求</li><li>MTU (Maximum Transmission Unit) 最大传输单元</li></ul><h2 id="可靠udp" tabindex="-1"><a class="header-anchor" href="#可靠udp" aria-hidden="true">#</a> 可靠UDP</h2>`,14),d={href:"https://github.com/skywind3000/kcp",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/dump247/udt-net",target:"_blank",rel:"noopener noreferrer"};function u(b,k){const a=p("ExternalLinkIcon");return r(),i("div",null,[c,n("ul",null,[n("li",null,[n("a",d,[s("KCP"),e(a)])]),n("li",null,[n("a",m,[s("UDT"),e(a)])])])])}const f=t(o,[["render",u],["__file","网络.html.vue"]]);export{f as default};
