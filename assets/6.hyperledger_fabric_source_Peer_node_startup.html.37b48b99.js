import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,b as s,d as t,e as c,r as i}from"./app.c2a49a29.js";const l={},u=n("p",null,"浅谈hyperledger fabric源码|Peer节点启动",-1),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"分支：v1.1.0",-1),k=c(`<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn1cycj35uj31c00u0gww.jpg" alt="b43356d6533644cca27da75d63f275fa" loading="lazy"></p><h2 id="启动流程概述" tabindex="-1"><a class="header-anchor" href="#启动流程概述" aria-hidden="true">#</a> 启动流程概述</h2><p>入口：peer/main.go:</p><p><code>main</code>()函数负责初始化<code>peer</code>主命令对象，注册子命令与初始化环境配置，解析用户输入子命令<code>start</code>并启动Peer节点，包括如下流程步骤：</p><ul><li>定义、注册命令与初始化基本配置。基于<code>Cobra</code>组件定义peer主命令对象<code>mainCmd</code>，并通过<code>Viper</code>组件调用<code>InitConfig</code>()函数，从本地<code>core.yaml</code>配置文件、环境变量、命令行选项等读取与解析<code>peer</code>命令的相关配置。同时，初始化主命令<code>mainCmd</code>的标志位选项 <code>version</code>、<code>logging-level</code>等，然后在主命令<code>mainCmd</code>上注册<code>version、node、chaincode、channel</code>等子命令，设置最大可用<code>CPU</code>核数与日志后端；</li><li>初始化本地<code>MSP</code>组件。通过<code>Viper</code>组件获取<code>MSP</code>组件的配置文件路径<code>mspMgrConfigDir</code>、<code>BCCSP</code>配置项<code>bccspConfig</code>、MSP名称ID即localMSPID、<code>MSP</code>组件类型<code>localMSPType</code>等，基于这4个参数构造本地<code>MSP</code>配置对象，接着创建默认的<code>bccspmsp</code>结构对象作为本地<code>MSP</code>组件，并解析<code>MSP</code>配置对象与初始化本地<code>MSP</code>组件；</li><li>执行mainCmd.Execute()方法启动<code>Peer</code>节点</li></ul><p>接下来将会分别对这几个关键部分进行细说。</p><h2 id="定义、注册命令与初始化基本配置" tabindex="-1"><a class="header-anchor" href="#定义、注册命令与初始化基本配置" aria-hidden="true">#</a> 定义、注册命令与初始化基本配置</h2><h3 id="定义主命令" tabindex="-1"><a class="header-anchor" href="#定义主命令" aria-hidden="true">#</a> 定义主命令</h3><p>代码分析 如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> mainCmd <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span> <span class="token comment">// 基于Cobra组件构造主命令</span>
	Use<span class="token punctuation">:</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 定义命令使用方法</span>
	<span class="token comment">//// 定义执行函数</span>
	PersistentPreRunE<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token comment">//检查CORE_LOGGING_LEVEL环境变量，覆盖所有其他日志设置值。否则，使用core.yaml文件中的配置值</span>
		<span class="token keyword">var</span> loggingSpec <span class="token builtin">string</span>
		<span class="token keyword">if</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;logging_level&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
			loggingSpec <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;logging_level&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 获取配置文件中的日志级别</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			loggingSpec <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;logging.level&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 获取配置文件中的日志级别</span>
		<span class="token punctuation">}</span>
		flogging<span class="token punctuation">.</span><span class="token function">InitFromSpec</span><span class="token punctuation">(</span>loggingSpec<span class="token punctuation">)</span> <span class="token comment">// 根据配置的日志级别初始化日志记录器</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	Run<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>cmd <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 定义执行函数</span>
		<span class="token keyword">if</span> versionFlag <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 打印peer程序版本信息</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			cmd<span class="token punctuation">.</span><span class="token function">HelpFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// 直接打印命令帮助信息</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册子命令" tabindex="-1"><a class="header-anchor" href="#注册子命令" aria-hidden="true">#</a> 注册子命令</h3><p>将几类子命令注册到主命令上，种类如下：</p><ul><li>channel通道子命令：用于创建应用通道、获取区块、Peer节点加入应用通道、获取节点所加入的应用通道列表、更新应用通道配置、签名配置交易文件、获取指定的应用通道信息等，包括<code>create、fetch、join、list、update、signconfigtx、getinfo</code>等子命令；</li><li>chaincode链码子命令：用于安装链码、实例化（部署）链码、调用链码、打包链码、查询链码、签名链码包、升级链码、获取通道链码列表等，包括<code>install、instantiate、invoke、package、query、signpackage、upgrade、list</code>等子命令；</li><li>node节点子命令：用于管理节点服务进程与查询服务状态，包括<code>start、status</code>等子命令；</li><li>logging日志子命令：用于获取、设置与恢复日志级别功能，包括<code>getlevel、setlevel、 revertlevels</code>等子命令；</li><li>version版本子命令：用于打印<code>Fabric</code>中的<code>Peer</code>节点服务器版本信息。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>viper<span class="token punctuation">.</span><span class="token function">SetEnvPrefix</span><span class="token punctuation">(</span>cmdRoot<span class="token punctuation">)</span>               <span class="token comment">// 设置环境变量前缀core</span>
	viper<span class="token punctuation">.</span><span class="token function">AutomaticEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// 查找匹配环境变量</span>
	replacer <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReplacer</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 创建替换符</span>
	viper<span class="token punctuation">.</span><span class="token function">SetEnvKeyReplacer</span><span class="token punctuation">(</span>replacer<span class="token punctuation">)</span>         <span class="token comment">// 设置环境变量替换符</span>
	<span class="token comment">// 定义命令行选项集合，对所有peer及其子命令都有效</span>
	mainFlags <span class="token operator">:=</span> mainCmd<span class="token punctuation">.</span><span class="token function">PersistentFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 设置绑定version与logging-level选项</span>
	mainFlags<span class="token punctuation">.</span><span class="token function">BoolVarP</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>versionFlag<span class="token punctuation">,</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;Display current version of fabric peer server&quot;</span><span class="token punctuation">)</span>
	mainFlags<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;logging-level&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Default logging level and overrides, see core.yaml for full syntax&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// Viper配置绑定命令行选项</span>
	viper<span class="token punctuation">.</span><span class="token function">BindPFlag</span><span class="token punctuation">(</span><span class="token string">&quot;logging_level&quot;</span><span class="token punctuation">,</span> mainFlags<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">&quot;logging-level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 注册子命令</span>
	mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// version子命令</span>
	mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// node子命令start、status</span>
	mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>chaincode<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// chaincode子命令install等</span>
	mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>clilogging<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// cli日志子命令 getlevel</span>
	mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// channel子命令 create等</span>
	<span class="token comment">// 加载配置文件core.yaml</span>
	err <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">InitConfig</span><span class="token punctuation">(</span>cmdRoot<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;peer.gomaxprocs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置最大可用的CPU核数</span>
	<span class="token comment">// setup system-wide logging backend based on settings from core.yaml</span>
	<span class="token comment">// 初始化系统日志后端</span>
	flogging<span class="token punctuation">.</span><span class="token function">InitBackend</span><span class="token punctuation">(</span>flogging<span class="token punctuation">.</span><span class="token function">SetFormat</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;logging.format&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logOutput<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化本地msp组件" tabindex="-1"><a class="header-anchor" href="#初始化本地msp组件" aria-hidden="true">#</a> 初始化本地MSP组件</h2><p><code>MSP</code>组件是管理本地成员身份的重要安全模块，封装了根<code>CA</code>证书、本地签名者实体等.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 初始化本地MSP组件对象</span>
	<span class="token keyword">var</span> mspMgrConfigDir <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">GetPath</span><span class="token punctuation">(</span><span class="token string">&quot;peer.mspConfigPath&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 获取MSP配置文件路径</span>
	<span class="token keyword">var</span> mspID <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;peer.localMspId&quot;</span><span class="token punctuation">)</span>             <span class="token comment">// 获取本地MSP名称</span>
	<span class="token keyword">var</span> mspType <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;peer.localMspType&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// 获取本地MSP组件类型</span>
	<span class="token keyword">if</span> mspType <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 默认设置MSP组件类型为FABRIC类型</span>
		mspType <span class="token operator">=</span> msp<span class="token punctuation">.</span><span class="token function">ProviderTypeToString</span><span class="token punctuation">(</span>msp<span class="token punctuation">.</span>FABRIC<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取BCCSP组件配置信息，初始化MSP组件对象</span>
	err <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">InitCrypto</span><span class="token punctuation">(</span>mspMgrConfigDir<span class="token punctuation">,</span> mspID<span class="token punctuation">,</span> mspType<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行主命令" tabindex="-1"><a class="header-anchor" href="#执行主命令" aria-hidden="true">#</a> 执行主命令</h2><p>函数如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> mainCmd<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来进入到<code>Execute()</code>函数中继续分析： /vendor/github.com/spf13/cobra/command.go/ExecuteC()</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">ExecuteC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cmd <span class="token operator">*</span>Command<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>Cobra</code>组件调用主命令<code>Execute</code>()方法，执行<code>peer node start</code>命令启动<code>Peer</code>节点。其中，<code>Cobra</code>组件解析完用户输入的命令行选项之后，依次执行节点启动命令nodeStartCmd对象中定义的所有相关的执行方法，并按照<code>cobra.Command</code>命令中定义的如下顺序来执行</p><ul><li>PersistentPreRunE()/PersistentPreRun()；</li><li>PreRunE()/PreRun()；</li><li>RunE()/Run()；</li><li>PostRunE()/PostRun()；</li><li>PersistentPostRunE()/PersistentPostRun();</li></ul><p>到这里为止节点命令开启执行，因为这部分主要是讲的节点启动，所以下面集中将节点启动命令执行的运行流程。</p><h2 id="节点启动命令执行" tabindex="-1"><a class="header-anchor" href="#节点启动命令执行" aria-hidden="true">#</a> 节点启动命令执行</h2><p>节点启动的命令可以根据以下代码路径查找：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mainCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
	nodeCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">startCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	nodeCmd<span class="token punctuation">.</span><span class="token function">AddCommand</span><span class="token punctuation">(</span><span class="token function">statusCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> nodeCmd
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里只讨论节点启动命令</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">startCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>cobra<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
<span class="token operator">...</span>
	<span class="token keyword">return</span> nodeStartCmd
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> nodeStartCmd <span class="token operator">=</span> <span class="token operator">&amp;</span>cobra<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
<span class="token operator">...</span>
		<span class="token keyword">return</span> <span class="token function">serve</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正式进入到serve函数讨论：</p><h3 id="初始化资源" tabindex="-1"><a class="header-anchor" href="#初始化资源" aria-hidden="true">#</a> 初始化资源</h3><p>①：<em>获取本地MSP组件类型并检查MSP组件类型</em></p><p>目前，<code>Hyperledger Fabric</code>支持<code>FABRIC</code>类型和<code>IDEMIX</code>类型两种<code>MSP</code>组件，默认采用基于<code>BCCSP</code>组件构建的<code>FABRIC</code>类型<code>MSP</code>组件.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mspType <span class="token operator">:=</span> mgmt<span class="token punctuation">.</span><span class="token function">GetLocalMSP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取本地MSP组件类型</span>
	<span class="token keyword">if</span> mspType <span class="token operator">!=</span> msp<span class="token punctuation">.</span>FABRIC <span class="token punctuation">{</span>              <span class="token comment">// 检查MSP组件类型</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported msp type &quot;</span> <span class="token operator">+</span> msp<span class="token punctuation">.</span><span class="token function">ProviderTypeToString</span><span class="token punctuation">(</span>mspType<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>初始化资源访问策略提供者</em></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>aclmgmt.RegisterACLProvider(nil)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：<em>初始化本地账本管理器</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ledgermgmt<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>peer<span class="token punctuation">.</span>ConfigTxProcessors<span class="token punctuation">)</span> 	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>core/ledger/ledgermgmt/ledger_mgmt.go/initialize</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initialize</span><span class="token punctuation">(</span>customTxProcessors customtx<span class="token punctuation">.</span>Processors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing ledger mgmt&quot;</span><span class="token punctuation">)</span>
	lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 设置Peer节点初始化标志位为true</span>
	initialized <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token comment">// 创建已打开的账本字典openedLedgers</span>
	openedLedgers <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>ledger<span class="token punctuation">.</span>PeerLedger<span class="token punctuation">)</span>
	<span class="token comment">// 初始化配置交易消息处理器字典，设置给全局变量processors字典</span>
	customtx<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>customTxProcessors<span class="token punctuation">)</span>
	cceventmgmt<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 初始化链码事件管理器</span>
	provider<span class="token punctuation">,</span> err <span class="token operator">:=</span> kvledger<span class="token punctuation">.</span><span class="token function">NewProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建本地Peer节点账本提供者</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Error in instantiating ledger provider: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	provider<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>kvLedgerStateListeners<span class="token punctuation">)</span> <span class="token comment">// 初始化状态监听器</span>
	ledgerProvider <span class="token operator">=</span> provider                   <span class="token comment">// 设置为全局默认的Peer节点账本提供者</span>
	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;ledger mgmt initialized&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正本提供者有以下几种：</p><ul><li><p>账本ID数据库（idStore类型）：提供存储账本ID（即链ID）与创世区块键值对的<code>LevelDB</code>数据库；</p></li><li><p>账本数据存储对象提供者（ledgerstorage.Provider类型）：创建账本数据存储对象，负责管理区块数据文件、隐私数据库、区块索引数据库等；</p></li><li><p>历史数据库提供者（HistoryDBProvider类型）：创建历史数据库，存储每个状态数据的历史信息；</p></li><li><p>状态数据库提供者（CommonStorageDBProvider类型）：创建状态数据库（<code>LevelDB</code>或<code>CouchDB</code>类型），存储世界状态（<code>world state</code>），包括有效交易的公有数据与隐私数据。</p></li></ul><p>④：<em>初始化服务器参数</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> chaincodeDevMode <span class="token punctuation">{</span>
		<span class="token comment">//设置链码模式</span>
		viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;chaincode.mode&quot;</span><span class="token punctuation">,</span> chaincode<span class="token punctuation">.</span>DevModeUserRunsChaincode<span class="token punctuation">)</span>

	<span class="token punctuation">}</span>
	<span class="token comment">// 读取配置并缓存Peer节点地址与端点</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">CacheConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取缓存的Peer端点</span>
	peerEndpoint<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">GetPeerEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> peerHost <span class="token builtin">string</span>
	<span class="token comment">// 获取Peer节点IP地址，注意IP地址与端口已经被分离</span>
	peerHost<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span>peerEndpoint<span class="token punctuation">.</span>Address<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建grpc服务器" tabindex="-1"><a class="header-anchor" href="#创建grpc服务器" aria-hidden="true">#</a> 创建GRPC服务器</h3><p>①：<em>创建gRPC服务器</em></p><p><code>serve()</code>函数创建了至少 3 个<code>gRPC</code>服务器（独立端口），用于注册<code>Peer</code>节点功能服务器，如下所示：</p><table><thead><tr><th>序号</th><th>端口</th><th>功能服务器</th><th>说明</th><th>服务接口</th></tr></thead><tbody><tr><td>1</td><td>7051</td><td>DeliverEvents事件服务器</td><td>处理区块请求消息</td><td>Deliver()</td></tr><tr><td></td><td>7051</td><td>Admin服务器</td><td>获取节点状态、维护日志等</td><td>GetStatus()</td></tr><tr><td></td><td>7051</td><td>Endorser背书服务器</td><td>提供背书服务</td><td>ProcessProposal()</td></tr><tr><td></td><td>7051</td><td>Gossip消息服务器</td><td>组织内节点分发数据与同步状态等</td><td>GossipStream()</td></tr><tr><td>2</td><td>7052</td><td>chaincodeSupport链码支持服务器</td><td>提供Peer节点链码支持服务</td><td>Register()</td></tr><tr><td>3</td><td>7053</td><td>EventHub事件服务器</td><td>提供订阅事件服务(1.3.0废弃)</td><td>Chat()</td></tr></tbody></table><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>serverConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">GetServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
peerServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">CreatePeerServer</span><span class="token punctuation">(</span>listenAddr<span class="token punctuation">,</span> serverConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>创建EventHub事件服务器</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">if</span> serverConfig<span class="token punctuation">.</span>SecOpts<span class="token punctuation">.</span>UseTLS <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		cs <span class="token operator">:=</span> comm<span class="token punctuation">.</span><span class="token function">GetCredentialSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建证书支持对象CredentialSupport结构对象</span>
		cs<span class="token punctuation">.</span>ServerRootCAs <span class="token operator">=</span> serverConfig<span class="token punctuation">.</span>SecOpts<span class="token punctuation">.</span>ServerRootCAs
		<span class="token comment">//// 获取gRPC客户端证书用于TLS连接认证</span>
		clientCert<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">GetClientCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 设置客户端证书</span>
		comm<span class="token punctuation">.</span><span class="token function">GetCredentialSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetClientCertificate</span><span class="token punctuation">(</span>clientCert<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//// 创建事件EventHub服务器（7053端口）</span>
	ehubGrpcServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createEventHubServer</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：<em>创建DeliverEvents事件服务器</em></p><p><code>serve()</code>函数检查如果开启了双向的<code>TLS</code>安全认证，则设置<code>mutualTLS</code>标志位为<code>true</code>，并定义获取资源策略检查器即<code>policyCheckerProvider</code>()函数。该函数将直接调用全局变量<code>aclProvider</code>对象的<code>CheckACL</code>()方法，检查签名消息在通道（channelID）上是否满足指定资源的访问控制权限策略。</p><p>接着，<code>serve</code>()函数调用<code>peer.NewDeliverEventsServer()</code>函数，基于<code>mutualTLS</code>、<code>policy-CheckerProvider</code>等参数创建<code>DeliverEvents</code>事件服务器<code>abServer</code>，提供<code>Deliver()</code>与<code>DeliverFiltered</code>()服务接口，分别用于处理请求正常区块与过滤区块的消息。</p><p>然后调用<code>pb.RegisterDeliverServer()</code>方法，将<code>DeliverEvents</code>事件服务器<code>abServer</code>注册到默认的<code>gRPC</code>服务器上（7051端口），以提供本地事件服务。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//// 检查是否开启了双向的TLS安全认证</span>
	mutualTLS <span class="token operator">:=</span> serverConfig<span class="token punctuation">.</span>SecOpts<span class="token punctuation">.</span>UseTLS <span class="token operator">&amp;&amp;</span> serverConfig<span class="token punctuation">.</span>SecOpts<span class="token punctuation">.</span>RequireClientCert
	<span class="token comment">//// 定义资源访问权限策略检查函数</span>
	policyCheckerProvider <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>resourceName <span class="token builtin">string</span><span class="token punctuation">)</span> deliver<span class="token punctuation">.</span>PolicyChecker <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>env <span class="token operator">*</span>cb<span class="token punctuation">.</span>Envelope<span class="token punctuation">,</span> channelID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> aclmgmt<span class="token punctuation">.</span><span class="token function">GetACLProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CheckACL</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> channelID<span class="token punctuation">,</span> env<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//创建DeliverEvents事件服务器，并注册到Peer节点gRPC服务器上（7051端口）</span>
	abServer <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">NewDeliverEventsServer</span><span class="token punctuation">(</span>mutualTLS<span class="token punctuation">,</span> policyCheckerProvider<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peer<span class="token punctuation">.</span>DeliverSupportManager<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	pb<span class="token punctuation">.</span><span class="token function">RegisterDeliverServer</span><span class="token punctuation">(</span>peerServer<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> abServer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：<em>创建ChaincodeSupport链码支持服务器</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//创建链码支持服务专用gRPC服务器与链码支持服务实例ChaincodeSupport（专用端口或7052端口）</span>
	ccSrv<span class="token punctuation">,</span> ccEndpoint<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createChaincodeServer</span><span class="token punctuation">(</span>ca<span class="token punctuation">,</span> peerHost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create chaincode server: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//将链码支持服务器实例ChaincodeSupoort对象注册到Peer节点gRPC服务器上</span>
	<span class="token comment">// 同时注册系统链码以支持部署调用系统链码</span>
	<span class="token function">registerChaincodeSupport</span><span class="token punctuation">(</span>ccSrv<span class="token punctuation">,</span> ccEndpoint<span class="token punctuation">,</span> ca<span class="token punctuation">)</span>
	<span class="token keyword">go</span> ccSrv<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//启动gRPC服务器提供链码支持服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：<em>创建Admin管理服务器与Endorser背书服务器</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">//创建Admin管理服务器与</span>
	pb<span class="token punctuation">.</span><span class="token function">RegisterAdminServer</span><span class="token punctuation">(</span>peerServer<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> core<span class="token punctuation">.</span><span class="token function">NewAdminServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 定义Gossip协议分发隐私数据函数</span>
	privDataDist <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>channel <span class="token builtin">string</span><span class="token punctuation">,</span> txID <span class="token builtin">string</span><span class="token punctuation">,</span> privateData <span class="token operator">*</span>rwset<span class="token punctuation">.</span>TxPvtReadWriteSet<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">GetGossipService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DistributePrivateData</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> txID<span class="token punctuation">,</span> privateData<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//创建新的EndorserServer背书节点服务器</span>
	serverEndorser <span class="token operator">:=</span> endorser<span class="token punctuation">.</span><span class="token function">NewEndorserServer</span><span class="token punctuation">(</span>privDataDist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>endorser<span class="token punctuation">.</span>SupportImpl<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	libConf <span class="token operator">:=</span> library<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> viperutil<span class="token punctuation">.</span><span class="token function">EnhancedExactUnmarshalKey</span><span class="token punctuation">(</span><span class="token string">&quot;peer.handlers&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>libConf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;could not load YAML config&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//// 创建消息过滤器列表</span>
	authFilters <span class="token operator">:=</span> library<span class="token punctuation">.</span><span class="token function">InitRegistry</span><span class="token punctuation">(</span>libConf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span>library<span class="token punctuation">.</span>Auth<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>authHandler<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span>
	<span class="token comment">// 将所有消息过滤器均构造成消息过滤器链，并返回第1个过滤器（Filter类型，实现了EndorserServer // 接口）</span>
	auth <span class="token operator">:=</span> authHandler<span class="token punctuation">.</span><span class="token function">ChainFilters</span><span class="token punctuation">(</span>serverEndorser<span class="token punctuation">,</span> authFilters<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token comment">// Register the Endorser server</span>
	<span class="token comment">//// 注册EndorserServer背书服务器到gRPC服务器</span>
	pb<span class="token punctuation">.</span><span class="token function">RegisterEndorserServer</span><span class="token punctuation">(</span>peerServer<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auth<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥：<em>创建Gossip消息服务器</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">//获取Bootstrap连接的初始节点地址列表，默认为127.0.0.1:7051</span>
	bootstrap <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetStringSlice</span><span class="token punctuation">(</span><span class="token string">&quot;peer.gossip.bootstrap&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">////获取本地MSP签名者身份实体 并序列化</span>
	serializedIdentity<span class="token punctuation">,</span> err <span class="token operator">:=</span> mgmt<span class="token punctuation">.</span><span class="token function">GetLocalSigningIdentityOrPanic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	messageCryptoService <span class="token operator">:=</span> peergossip<span class="token punctuation">.</span><span class="token function">NewMCS</span><span class="token punctuation">(</span> <span class="token comment">// 构造Gossip消息加密服务组件</span>
		peer<span class="token punctuation">.</span><span class="token function">NewChannelPolicyManagerGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 通道策略管理器获取组件</span>
		localmsp<span class="token punctuation">.</span><span class="token function">NewSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment">// 本地签名者</span>
		mgmt<span class="token punctuation">.</span><span class="token function">NewDeserializersManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 身份反序列化组件管理器</span>
	secAdv <span class="token operator">:=</span> peergossip<span class="token punctuation">.</span><span class="token function">NewSecurityAdvisor</span><span class="token punctuation">(</span>mgmt<span class="token punctuation">.</span><span class="token function">NewDeserializersManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// callback function for secure dial options for gossip service</span>
	<span class="token comment">//定义Gossip服务器回调函数，用于创建Gossip服务器安全配置的gRPC拨号连接选项</span>
	secureDialOpts <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>DialOption <span class="token punctuation">{</span>
		<span class="token keyword">var</span> dialOpts <span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>DialOption
		<span class="token comment">// set max send/recv msg sizes</span>
		dialOpts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dialOpts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithDefaultCallOptions</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">MaxCallRecvMsgSize</span><span class="token punctuation">(</span>comm<span class="token punctuation">.</span><span class="token function">MaxRecvMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			grpc<span class="token punctuation">.</span><span class="token function">MaxCallSendMsgSize</span><span class="token punctuation">(</span>comm<span class="token punctuation">.</span><span class="token function">MaxSendMsgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置最大发送和接收消息字节数</span>
		<span class="token comment">// set the keepalive options</span>
		kaOpts <span class="token operator">:=</span> comm<span class="token punctuation">.</span><span class="token function">DefaultKeepaliveOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取默认的心跳消息keepalive选项</span>
		<span class="token operator">...</span>
		<span class="token comment">//在gRPC通信拨号连接选项中设置心跳通信keepalive选项</span>
		dialOpts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dialOpts<span class="token punctuation">,</span> comm<span class="token punctuation">.</span><span class="token function">ClientKeepaliveOptions</span><span class="token punctuation">(</span>kaOpts<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> comm<span class="token punctuation">.</span><span class="token function">TLSEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 启用TLS安全认证，设置客户端TLS通信证书</span>
			dialOpts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dialOpts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>comm<span class="token punctuation">.</span><span class="token function">GetCredentialSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetPeerCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			dialOpts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dialOpts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 否则，关闭TLS安全认证</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> dialOpts
	<span class="token punctuation">}</span>

	<span class="token comment">// 检查gRPC服务器端是否启用TLS安全认证，获取并设置服务器端与客户端身份证书</span>
	<span class="token keyword">var</span> certs <span class="token operator">*</span>common2<span class="token punctuation">.</span>TLSCertificates
	<span class="token keyword">if</span> peerServer<span class="token punctuation">.</span><span class="token function">TLSEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		serverCert <span class="token operator">:=</span> peerServer<span class="token punctuation">.</span><span class="token function">ServerCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		clientCert<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">GetClientCertificate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;failed obtaining client certificates&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		certs <span class="token operator">=</span> <span class="token operator">&amp;</span>common2<span class="token punctuation">.</span>TLSCertificates<span class="token punctuation">{</span><span class="token punctuation">}</span>
		certs<span class="token punctuation">.</span>TLSServerCert<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serverCert<span class="token punctuation">)</span>
		certs<span class="token punctuation">.</span>TLSClientCert<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clientCert<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 创建Gossip消息服务器实例gossipServiceInstance</span>
	err <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">InitGossipService</span><span class="token punctuation">(</span>serializedIdentity<span class="token punctuation">,</span> peerEndpoint<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> peerServer<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> certs<span class="token punctuation">,</span>
		messageCryptoService<span class="token punctuation">,</span> secAdv<span class="token punctuation">,</span> secureDialOpts<span class="token punctuation">,</span> bootstrap<span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署系统链码与初始化现存通道的链结构" tabindex="-1"><a class="header-anchor" href="#部署系统链码与初始化现存通道的链结构" aria-hidden="true">#</a> 部署系统链码与初始化现存通道的链结构</h3><p>①：<em>部署系统链码</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">//部署系统链码</span>
	<span class="token function">initSysCCs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>初始化现存通道上的链结构</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//初始化现存通道上的链结构</span>
	peer<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>cid <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>core/peer/peer.go/Initialize</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Initialize</span><span class="token punctuation">(</span>init <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	nWorkers <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;peer.validatorPoolSize&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 获取交易验证线程数量</span>
	<span class="token keyword">if</span> nWorkers <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		nWorkers <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//// 设置信号量并发访问数量</span>
	validationWorkersSemaphore <span class="token operator">=</span> semaphore<span class="token punctuation">.</span><span class="token function">NewWeighted</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>nWorkers<span class="token punctuation">)</span><span class="token punctuation">)</span>

	chainInitializer <span class="token operator">=</span> init <span class="token comment">// 设置初始化函数</span>

	<span class="token keyword">var</span> cb <span class="token operator">*</span>common<span class="token punctuation">.</span>Block
	<span class="token keyword">var</span> ledger ledger<span class="token punctuation">.</span>PeerLedger
	<span class="token comment">//// 初始化账本管理器</span>
	ledgermgmt<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>ConfigTxProcessors<span class="token punctuation">)</span>
	<span class="token comment">//// 获取当前账本管理器下的账本ID列表</span>
	ledgerIds<span class="token punctuation">,</span> err <span class="token operator">:=</span> ledgermgmt<span class="token punctuation">.</span><span class="token function">GetLedgerIDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Error in initializing ledgermgmt: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cid <span class="token operator">:=</span> <span class="token keyword">range</span> ledgerIds <span class="token punctuation">{</span>
		peerLogger<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;Loading chain %s&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">)</span>
		<span class="token comment">//创建本地Peer节点账本</span>
		<span class="token keyword">if</span> ledger<span class="token punctuation">,</span> err <span class="token operator">=</span> ledgermgmt<span class="token punctuation">.</span><span class="token function">OpenLedger</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to load ledger %s(%s)&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Error while loading ledger %s with message %s. We continue to the next ledger rather than abort.&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//// 从指定通道账本中获取最新配置区块</span>
		<span class="token keyword">if</span> cb<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">getCurrConfigBlockFromLedger</span><span class="token punctuation">(</span>ledger<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to find config block on ledger %s(%s)&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Error while looking for config block on ledger %s with message %s. We continue to the next ledger rather than abort.&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// Create a chain if we get a valid ledger with config block</span>
		<span class="token comment">//// 在Peer节点上创建指定通道的链结构</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">createChain</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> ledger<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to load chain %s(%s)&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			peerLogger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Error reloading chain %s with message %s. We continue to the next chain rather than abort.&quot;</span><span class="token punctuation">,</span> cid<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 用自定义函数初始化通道链结构，如部署系统链码</span>
		<span class="token function">InitChain</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动grpc服务器与profile服务器" tabindex="-1"><a class="header-anchor" href="#启动grpc服务器与profile服务器" aria-hidden="true">#</a> 启动gRPC服务器与profile服务器</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 建立传递错误消息的通道</span>
	serve <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token comment">// 传递信号的通道</span>
	sigs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token comment">// 设置本进程信号通道的通知信号，包括中断/终止信号</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>sigs<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 设置本进程阻塞等待的特定通知信号</span>
		sig <span class="token operator">:=</span> <span class="token operator">&lt;-</span>sigs <span class="token comment">// 从sigs通道读取信号值，阻塞等待方式</span>
		logger<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;sig: %s&quot;</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span>
		serve <span class="token operator">&lt;-</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 利用goroutine 启动gRPC服务器（7051端口，注册了Admin管理服务器、Endorser背书服务器等）</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> grpcErr <span class="token builtin">error</span>
		<span class="token keyword">if</span> grpcErr <span class="token operator">=</span> peerServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> grpcErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 监听端口（7051）提供服务</span>
			grpcErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;grpc server exited with error: %s&quot;</span><span class="token punctuation">,</span> grpcErr<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;peer server exited&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		serve <span class="token operator">&lt;-</span> grpcErr <span class="token comment">// 若因发生错误而退出，则发送错误到serve通道</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">// 向进程文件中写入运行进程ID</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">writePid</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetPath</span><span class="token punctuation">(</span><span class="token string">&quot;peer.fileSystemPath&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;/peer.pid&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// Start the event hub server</span>
	<span class="token comment">// 启动基于专用事件监听端口的gRPC服务器（7053端口，已注册EventHub事件服务器）</span>
	<span class="token keyword">if</span> ehubGrpcServer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> ehubGrpcServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Start profiling http endpoint if enabled</span>
	<span class="token comment">// 如果打开profile使能标志位，则启动提供服务</span>
	<span class="token keyword">if</span> viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">&quot;peer.profile.enabled&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 启动go profile服务器，如果出错，则不会发送错误信息，只是记录到日志里</span>
			<span class="token comment">// 获取profile监听地址</span>
			profileListenAddress <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;peer.profile.listenAddress&quot;</span><span class="token punctuation">)</span>
			logger<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;Starting profiling server with listenAddress = %s&quot;</span><span class="token punctuation">,</span> profileListenAddress<span class="token punctuation">)</span>
			<span class="token keyword">if</span> profileErr <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>profileListenAddress<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> profileErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				logger<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;Error starting profiler: %s&quot;</span><span class="token punctuation">,</span> profileErr<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，Peer节点及其功能服务器启动完毕.</p><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,77),v={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function m(g,b){const a=i("ExternalLinkIcon");return p(),o("div",null,[n("blockquote",null,[u,n("p",null,[s("文章及代码："),n("a",r,[s("https://github.com/blockchainGuide/"),t(a)])]),d]),k,n("blockquote",null,[n("p",null,[n("a",v,[s("https://github.com/blockchainGuide/"),t(a)])])])])}const C=e(l,[["render",m],["__file","6.hyperledger_fabric_source_Peer_node_startup.html.vue"]]);export{C as default};
