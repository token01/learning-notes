import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,a as n,b as s,d as o,e as c,r as i}from"./app.11a9ee6c.js";const l={},u=c(`<blockquote><p>浅谈hyperledger fabric源码|Deliver区块分发</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0uq99cf2j31hc0u0k1k.jpg" alt="00a1ba6f145942b3fdb1a7b63964967e" loading="lazy"></p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>Orderer</code>排序服务器提供了区块分发服务接口，接收客户端提交的区块请求消息（<code>Envelope</code>类型，通道头部类型是<code>DELIVER_SEEK_INFO</code>、<code>CONFIG_UPDATE</code>等），根据该消息封装的区块搜索信息对象（<code>SeekInfo</code>类型），包括查找最旧区块SeekOldest类型、查找最新区块<code>SeekNewest</code>类型、查找指定位置区块<code>SeekSpecified</code>类型等，构造对应请求范围的范围查询结果迭代器，读取<code>Orderer</code>节点指定通道账本上的区块数据，同时，建立消息处理循环，基于该结果迭代器依次读取请求的区块数据结果，<strong>发送给组织的Leader主节点等请求节点。</strong></p><p><code>Orderer</code>节点启动时在本地<code>gRPC</code>服务器上注册了<code>Orderer</code>排序服务器，并创建了Deliver服务处理句柄。当客户端发起<code>Deliver</code>服务请求时，<code>Orderer</code>排序服务器就调用<code>Deliver()</code>方法处理消息请求。</p><h2 id="diliver消息服务处理" tabindex="-1"><a class="header-anchor" href="#diliver消息服务处理" aria-hidden="true">#</a> Diliver消息服务处理</h2><p>入口在<code>orderer/common/server/server.go/Deliver()</code>方法中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">Deliver</span><span class="token punctuation">(</span>srv ab<span class="token punctuation">.</span>AtomicBroadcast_DeliverServer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	policyChecker <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>env <span class="token operator">*</span>cb<span class="token punctuation">.</span>Envelope<span class="token punctuation">,</span> channelID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token comment">// 定义策略检查器</span>
		chain<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">GetChain</span><span class="token punctuation">(</span>channelID<span class="token punctuation">)</span> <span class="token comment">// 获取指定通道的链支持对象</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;channel %s not found&quot;</span><span class="token punctuation">,</span> channelID<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 创建消息过滤器</span>
		sf <span class="token operator">:=</span> msgprocessor<span class="token punctuation">.</span><span class="token function">NewSigFilter</span><span class="token punctuation">(</span>policies<span class="token punctuation">.</span>ChannelReaders<span class="token punctuation">,</span> chain<span class="token punctuation">)</span>
		<span class="token keyword">return</span> sf<span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token comment">// 过滤消息</span>
	<span class="token punctuation">}</span>
	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>deliverMsgTracer<span class="token punctuation">{</span>
		DeliverSupport<span class="token punctuation">:</span> <span class="token operator">&amp;</span>deliverHandlerSupport<span class="token punctuation">{</span>AtomicBroadcast_DeliverServer<span class="token punctuation">:</span> srv<span class="token punctuation">}</span><span class="token punctuation">,</span>
		msgTracer<span class="token punctuation">:</span> msgTracer<span class="token punctuation">{</span>
			debug<span class="token punctuation">:</span>    s<span class="token punctuation">.</span>debug<span class="token punctuation">,</span>
			function<span class="token punctuation">:</span> <span class="token string">&quot;Deliver&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Deliver服务消息处理</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>dh<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>deliver<span class="token punctuation">.</span><span class="token function">NewDeliverServer</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> policyChecker<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">sendProducer</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大概做了以下几件事：</p><ul><li>定义策略检查器：用于检查接收的区块请求消息必须满足指定通道上的访问控制权限策略的要求</li><li>获取指定通道的链支持对象</li><li>创建消息过滤器，过滤消息</li><li>Deliver服务消息处理区块请求</li></ul><p>我们来看是如何处理的，进入到<code>s.dh.Handle</code>:</p><blockquote><p>/common/deliver/deliver.go/Handle</p></blockquote><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func (ds *deliverHandler) Handle(srv *DeliverServer) error {
...
	// 等待消息请求并进行处理
	for {
		...
		envelope, err := srv.Recv() // 等待接收客户端发送的区块消息请求
	...
		// 从Orderer节点本地指定通道的区块账本中获取指定区块，并向客户端发送请求
		if err := ds.deliverBlocks(srv, envelope); err != nil {
			return err
		}
...
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不言而喻，直接进入到<code>deliverBlocks</code>,这部分的内容是最核心的，逐步分析如下：</p><p>①：<em>解析PayLoad,检查header和ChannelHeader的合法性</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>payload<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">UnmarshalPayload</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span>Payload<span class="token punctuation">)</span> <span class="token comment">// 解析消息负载</span>
<span class="token operator">...</span>
<span class="token keyword">if</span> payload<span class="token punctuation">.</span>Header <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 解析通道头部</span>
	chdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">UnmarshalChannelHeader</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ChannelHeader<span class="token punctuation">)</span>
err <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">validateChannelHeader</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> chdr<span class="token punctuation">)</span> <span class="token comment">// 验证通道头部合法性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：<em>从chains字典中获取指定通道（chainID）的链支持对象chain，并检查该对象是否存在错误信息</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chain<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ds<span class="token punctuation">.</span>sm<span class="token punctuation">.</span><span class="token function">GetChain</span><span class="token punctuation">(</span>chdr<span class="token punctuation">.</span>ChannelId<span class="token punctuation">)</span> <span class="token comment">// 获取指定通道的链支持对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：<em>创建访问控制对象,并</em>检查消息签名是否符合指定的通道读权限策略**</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>accessControl<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newSessionAC</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> envelope<span class="token punctuation">,</span> srv<span class="token punctuation">.</span>PolicyChecker<span class="token punctuation">,</span> chdr<span class="token punctuation">.</span>ChannelId<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>ExpiresAt<span class="token punctuation">)</span>
<span class="token operator">...</span>
err <span class="token operator">:=</span> accessControl<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：<em>解析区块搜索信息SeekInfo结构对象</em></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>seekInfo := &amp;ab.SeekInfo{}
if err = proto.Unmarshal(payload.Data, seekInfo); err != nil {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：<em>检查起始位置与结束位置的合法性</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> seekInfo<span class="token punctuation">.</span>Start <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> seekInfo<span class="token punctuation">.</span>Stop <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑥：<em>创建区块账本迭代器并获取起始区块号，同时设置起始位置</em></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>cursor, number := chain.Reader().Iterator(seekInfo.Start)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Iterator</code>根据<code>startPosition.Type</code>起始位置对象的类型计算起始区块号<code>startingBlockNumbe</code>,类型如下：</p><ul><li><p>SeekPosition_Oldest：搜索最旧的区块，将起始区块号<code>startingBlockNumber</code>设置为 0；</p></li><li><p>SeekPosition_Newest：搜索最新的区块，将起始区块号<code>startingBlockNumber</code>设置为当前通道账本的最新区块号<code>info.Height-1</code>，即账本高度减1；</p></li><li><p>SeekPosition_Specified：搜索指定位置的区块，将起始区块号<code>startingBlockNumber</code>设置为指定起始位置的区块号<code>start.Specified.Number</code>。</p></li></ul><p><code>Iterator</code> 方法的大致功能如下： <code>common/ledger/blockledger/file/impl.go/Iterator</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>fl <span class="token operator">*</span>FileLedger<span class="token punctuation">)</span> <span class="token function">Iterator</span><span class="token punctuation">(</span>startPosition <span class="token operator">*</span>ab<span class="token punctuation">.</span>SeekPosition<span class="token punctuation">)</span> <span class="token punctuation">(</span>blockledger<span class="token punctuation">.</span>Iterator<span class="token punctuation">,</span> <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> startingBlockNumber <span class="token builtin">uint64</span>
	<span class="token keyword">switch</span> start <span class="token operator">:=</span> startPosition<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 分析起始位置类型</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>SeekPosition_Oldest<span class="token punctuation">:</span> <span class="token comment">// 搜索最旧区块，区块号为0</span>
		startingBlockNumber <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>SeekPosition_Newest<span class="token punctuation">:</span> <span class="token comment">// 搜索最新区块</span>
		info<span class="token punctuation">,</span> err <span class="token operator">:=</span> fl<span class="token punctuation">.</span>blockStore<span class="token punctuation">.</span><span class="token function">GetBlockchainInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取区块链信息</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		newestBlockNumber <span class="token operator">:=</span> info<span class="token punctuation">.</span>Height <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 最新区块号</span>
		startingBlockNumber <span class="token operator">=</span> newestBlockNumber
	<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>SeekPosition_Specified<span class="token punctuation">:</span> <span class="token comment">// 搜索指定位置区块</span>
		startingBlockNumber <span class="token operator">=</span> start<span class="token punctuation">.</span>Specified<span class="token punctuation">.</span>Number
		height <span class="token operator">:=</span> fl<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> startingBlockNumber <span class="token operator">&gt;</span> height <span class="token punctuation">{</span> <span class="token comment">// 若超过高度，则报错</span>
			<span class="token keyword">return</span> <span class="token operator">&amp;</span>blockledger<span class="token punctuation">.</span>NotFoundErrorIterator<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>blockledger<span class="token punctuation">.</span>NotFoundErrorIterator<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 构造区块迭代器</span>
	iterator<span class="token punctuation">,</span> err <span class="token operator">:=</span> fl<span class="token punctuation">.</span>blockStore<span class="token punctuation">.</span><span class="token function">RetrieveBlocks</span><span class="token punctuation">(</span>startingBlockNumber<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">&amp;</span>blockledger<span class="token punctuation">.</span>NotFoundErrorIterator<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 构造账本区块迭代器</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>fileLedgerIterator<span class="token punctuation">{</span>ledger<span class="token punctuation">:</span> fl<span class="token punctuation">,</span> blockNumber<span class="token punctuation">:</span> startingBlockNumber<span class="token punctuation">,</span> commonIterator<span class="token punctuation">:</span> iterator<span class="token punctuation">}</span><span class="token punctuation">,</span> startingBlockNumber
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑦：循环读取区块数据，从本地区块账本中获取指定区块号范围内的区块数据，并依次顺序发送给请求客户端</p><p>7.1 未找到数据返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> seekInfo<span class="token punctuation">.</span>Behavior <span class="token operator">==</span> ab<span class="token punctuation">.</span>SeekInfo_FAIL_IF_NOT_READY <span class="token punctuation">{</span>
			<span class="token keyword">if</span> number <span class="token operator">&gt;</span> chain<span class="token punctuation">.</span><span class="token function">Reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token function">sendStatusReply</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Status_NOT_FOUND<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7.2 获取下一个数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>block<span class="token punctuation">,</span> status <span class="token operator">:=</span> <span class="token function">nextBlock</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> erroredChan<span class="token punctuation">)</span> <span class="token comment">// 从本地账本获取下一个区块</span>
<span class="token keyword">if</span> status <span class="token operator">!=</span> cb<span class="token punctuation">.</span>Status_SUCCESS <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>7.3 再次检查是否满足访问控制策略要求</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if err := accessControl.evaluate(); err != nil {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7.4 发送区块数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">sendBlockReply</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7.5 <em>循环结束，发送成功状态</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">sendStatusReply</span><span class="token punctuation">(</span>srv<span class="token punctuation">,</span> cb<span class="token punctuation">.</span>Status_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="deliver服务客户端" tabindex="-1"><a class="header-anchor" href="#deliver服务客户端" aria-hidden="true">#</a> Deliver服务客户端</h2><p>以<code>Leader</code>主节点为例，分析<code>Deliver</code>服务客户端从<code>Orderer</code>节点请求获取区块的流程。</p><h3 id="初始化deliver服务实例" tabindex="-1"><a class="header-anchor" href="#初始化deliver服务实例" aria-hidden="true">#</a> 初始化Deliver服务实例</h3><p>入口：<code>gossip/service/gossip_service.go/InitializeChannel</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>gossipServiceImpl<span class="token punctuation">)</span> <span class="token function">InitializeChannel</span><span class="token punctuation">(</span>chainID <span class="token builtin">string</span><span class="token punctuation">,</span> endpoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> support Support<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	g<span class="token punctuation">.</span>chains<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">NewGossipStateProvider</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> servicesAdapter<span class="token punctuation">,</span> coordinator<span class="token punctuation">)</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>deliveryService<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 检查是否已经存在Deliver服务实例</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		g<span class="token punctuation">.</span>deliveryService<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span>deliveryFactory<span class="token punctuation">.</span><span class="token function">Service</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> endpoints<span class="token punctuation">,</span> g<span class="token punctuation">.</span>mcs<span class="token punctuation">)</span> <span class="token comment">// 检查是否已经存在Deliver服务实例</span>
		<span class="token operator">...</span>
		<span class="token comment">// peer.gossip.useLeaderElection与peer.gossip.orgLeader是互斥的两个配置参数，</span>
		<span class="token comment">// 如果将两个都设置为true且没有被定义，则会引起Peer节点错误</span>
		<span class="token comment">// 启用Leader主节点动态选举机制</span>
		leaderElection <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">&quot;peer.gossip.useLeaderElection&quot;</span><span class="token punctuation">)</span>
		<span class="token comment">// 静态设置为组织Leader主节点</span>
		isStaticOrgLeader <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">&quot;peer.gossip.orgLeader&quot;</span><span class="token punctuation">)</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> leaderElection <span class="token punctuation">{</span> <span class="token comment">// 启用了动态Leader主节点选举机制</span>
			logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Delivery uses dynamic leader election mechanism, channel&quot;</span><span class="token punctuation">,</span> chainID<span class="token punctuation">)</span>
			g<span class="token punctuation">.</span>leaderElection<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">newLeaderElectionComponent</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">onStatusChangeFactory</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> support<span class="token punctuation">.</span>Committer<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> isStaticOrgLeader <span class="token punctuation">{</span>
			<span class="token comment">// 若静态指定了Leader主节点，则连接 Orderer节点请求区块数据</span>
			<span class="token comment">// 启动指定通道上的Deliver服务实例请求获取区块数据</span>
			g<span class="token punctuation">.</span>deliveryService<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">StartDeliverForChannel</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> support<span class="token punctuation">.</span>Committer<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先检查是否已经存在<code>Deliver</code>实例，然后根据<code>Leader</code>主节点动态选举机制还是静态指定了<code>Leader</code>主节点分别进入不同的分支，如果是静态指定了<code>Leader</code>主节点，则连接 <code>Orderer</code>节点请求区块数据,启动指定通道上的<code>Deliver</code>服务实例请求获取区块数据。接下来关注启动<code>Deliver</code>服务实例。</p><h3 id="启动deliver服务实例" tabindex="-1"><a class="header-anchor" href="#启动deliver服务实例" aria-hidden="true">#</a> 启动Deliver服务实例</h3><p>主要做了以下事：</p><p>①：<em>获取绑定指定通道的区块提供者</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> d<span class="token punctuation">.</span>blockProviders<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：<em>不存在区块提供者</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>client <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> ledgerInfo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>deliverServiceImpl<span class="token punctuation">)</span> <span class="token function">newClient</span><span class="token punctuation">(</span>chainID <span class="token builtin">string</span><span class="token punctuation">,</span> ledgerInfoProvider blocksprovider<span class="token punctuation">.</span>LedgerInfo<span class="token punctuation">)</span> <span class="token operator">*</span>broadcastClient <span class="token punctuation">{</span>
	requester <span class="token operator">:=</span> <span class="token operator">&amp;</span>blocksRequester<span class="token punctuation">{</span> <span class="token comment">//定义区块请求者blocksRequester结构对象</span>
		tls<span class="token punctuation">:</span>     comm<span class="token punctuation">.</span><span class="token function">TLSEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		chainID<span class="token punctuation">:</span> chainID<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//定义broadcastSetup()方法</span>
	broadcastSetup <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>bd blocksprovider<span class="token punctuation">.</span>BlocksDeliverer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> requester<span class="token punctuation">.</span><span class="token function">RequestBlocks</span><span class="token punctuation">(</span>ledgerInfoProvider<span class="token punctuation">)</span> <span class="token comment">// 请求区块数据</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token comment">//创建connProducer对象</span>
	connProd <span class="token operator">:=</span> comm<span class="token punctuation">.</span><span class="token function">NewConnectionProducer</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token function">ConnFactory</span><span class="token punctuation">(</span>chainID<span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Endpoints<span class="token punctuation">)</span>
	<span class="token comment">//// 创建broadcastClient客户端</span>
	bClient <span class="token operator">:=</span> <span class="token function">NewBroadcastClient</span><span class="token punctuation">(</span>connProd<span class="token punctuation">,</span> d<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>ABCFactory<span class="token punctuation">,</span> broadcastSetup<span class="token punctuation">,</span> backoffPolicy<span class="token punctuation">)</span>
	requester<span class="token punctuation">.</span>client <span class="token operator">=</span> bClient <span class="token comment">// 设置到区块请求者对象的客户端</span>
	<span class="token keyword">return</span> bClient
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.1 创建Deliver服务实例上的 broadcastClient客户端</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>client <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> ledgerInfo<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2 创建指定通道关联的区块提供者</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>d<span class="token punctuation">.</span>blockProviders<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span> <span class="token operator">=</span> blocksprovider<span class="token punctuation">.</span><span class="token function">NewBlocksProvider</span><span class="token punctuation">(</span>chainID<span class="token punctuation">,</span> client<span class="token punctuation">,</span> d<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Gossip<span class="token punctuation">,</span> d<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>CryptoSvc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.3 启动goroutine开始从Orderer节点请求获取区块，并发送到组织内其他Peer节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			d<span class="token punctuation">.</span>blockProviders<span class="token punctuation">[</span>chainID<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">DeliverBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 请求获取区块数据</span>
			<span class="token function">finalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是调用区块提供者对象的<code>DeliverBlocks()</code>方法，向<code>Orderer</code>节点发送消息请求的区块数据。</p><h3 id="请求获取区块数据" tabindex="-1"><a class="header-anchor" href="#请求获取区块数据" aria-hidden="true">#</a> 请求获取区块数据</h3><p>入口在：<code>core/deliverservice/blocksprovider/blocksprovider.go/DeliverBlocks()</code>,具体分析如下：</p><p>①：接收消息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② ：根据消息类型进行处理</p><p>大致有以下几种消息类型：</p><ul><li>DeliverResponse_Status:用于描述<code>Deliver</code>服务请求执行状态。</li><li>DeliverResponse_Block：包含请求获取的区块数据。</li></ul><p>2.1 DeliverResponse_Status分支</p><p>如果DeliverBlocks()方法接收到Status_SUCCESS状态，则说明本次区块请求处理成功，表示已经接收完毕区块请求消息指定范围内的区块数据。除此以外的其他状态消息都是非成功的执行状态消息，包括Status_BAD_REQUEST、Status_FORBIDDEN等</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> t<span class="token punctuation">.</span>Status <span class="token operator">==</span> common<span class="token punctuation">.</span>Status_SUCCESS <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> t<span class="token punctuation">.</span>Status <span class="token operator">==</span> common<span class="token punctuation">.</span>Status_BAD_REQUEST <span class="token operator">||</span> t<span class="token punctuation">.</span>Status <span class="token operator">==</span> common<span class="token punctuation">.</span>Status_FORBIDDEN <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> t<span class="token punctuation">.</span>Status <span class="token operator">==</span> common<span class="token punctuation">.</span>Status_BAD_REQUEST <span class="token punctuation">{</span>
				b<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				b<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 DeliverResponse_Block分支</p><p>2.2.1 <em>获取区块号</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>seqNum <span class="token operator">:=</span> t<span class="token punctuation">.</span>Block<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2.2<em>获取经过序列化的区块字节数组</em></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>marshaledBlock, err := proto.Marshal(t.Block)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2.3<em>验证区块</em></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>err := b.mcs.VerifyBlock(gossipcommon.ChainID(b.chainID), seqNum, marshaledBlock);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2.4<em>获取通道Peer节点数量</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>numberOfPeers <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>gossip<span class="token punctuation">.</span><span class="token function">PeersOfChannel</span><span class="token punctuation">(</span>gossipcommon<span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>chainID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2.5<em>创建消息负载和Gossip消息</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>payload <span class="token operator">:=</span> <span class="token function">createPayload</span><span class="token punctuation">(</span>seqNum<span class="token punctuation">,</span> marshaledBlock<span class="token punctuation">)</span> 
gossipMsg <span class="token operator">:=</span> <span class="token function">createGossipMsg</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>chainID<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2.6<em>添加消息负载到本地消息负载缓冲区，等待提交账本</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">:=</span> b<span class="token punctuation">.</span>gossip<span class="token punctuation">.</span><span class="token function">AddPayload</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>chainID<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2.7<em>通过Gossip消息协议发送区块消息到组织内的其他节点</em></p><p>基于<code>Gossip</code>消息协议将<code>DataMsg</code>类型数据消息（只含有区块数据）分发到组织内的其他<code>Peer</code>节点上，并保存到该节点的消息存储器上。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>b.gossip.Gossip(gossipMsg)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,88),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"微信公众号：区块链技术栈",-1);function k(v,m){const a=i("ExternalLinkIcon");return t(),p("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("https://github.com/blockchainGuide/"),o(a)]),s(" (文章图片代码资料)")]),d])])}const h=e(l,[["render",k],["__file","5.fabric_source_Deliver_block_istribution.html.vue"]]);export{h as default};
