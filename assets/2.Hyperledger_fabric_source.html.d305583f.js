import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as t,a as n,b as o,d as p,e as c,r as i}from"./app.c2a49a29.js";const l={},u=c(`<blockquote><p>浅谈hyperledger fabric源码|Order节点启动</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmytqt8ef1g30zk0m7dn6.gif" alt="207f698ab0d8c69266fb6fe4c8f85def" loading="lazy"></p><h2 id="orderer节点启动流程" tabindex="-1"><a class="header-anchor" href="#orderer节点启动流程" aria-hidden="true">#</a> Orderer节点启动流程</h2><p>节点启动开始在<code>/orderer/common/server/main.go</code>:</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func Main() {
	fullCmd := kingpin.MustParse(app.Parse(os.Args[1:]))  // 解析用户命令行
	...
	conf, err := config.Load() //  加载orderer.yaml配置文件
	...
	initializeLoggingLevel(conf) //初始化日志级别
	initializeLocalMsp(conf) //初始化本地MSP组件

	prettyPrintStruct(conf) // 打印配置信息
	Start(fullCmd, conf) // 启动Orderer排序服务器
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要做了以下几件事：</p><ul><li>解析用户命令行</li><li>加载orderer.yaml配置文件</li><li>初始化日志级别</li><li>初始化本地MSP组件</li><li>打印配置信息</li><li>启动Orderer排序服务器</li></ul><p>接下来将会展开的去讲上面比较重要的一些内容。</p><h2 id="加载orderer-yaml配置文件" tabindex="-1"><a class="header-anchor" href="#加载orderer-yaml配置文件" aria-hidden="true">#</a> 加载orderer.yaml配置文件</h2><p>是由<code>config.Load()</code>开启的，进入到<code>/orderer/common/localconfig/config.go/Load()</code></p><p>①：初始化viper</p><p>调用<code>InitViper()</code>函数设置配置文件路径，并默认在<code>$FABRIC_CFG_PATH</code>（如<code>/etc/hyperledger/fabric</code>）路径下查找配置文件，找不到文件时再依次查找当前目录、默认开发配置目录 （<code>$GOPATH/src/github.com/hyperledger/fabric/sampleconfig</code>）和系统默认配置路径 （<code>/etc/hyperledger/fabric</code>）。接着开启匹配系统环境变量的模式，即为Viper组件配置项（以.分割的格式）添加指定前缀“ORDERER_”，转换为大写字母形式，再将“.”替换为<code>_</code>。这样，Viper组件就能在查找配置项时，与以“ORDERER_”前缀开头的环境变量进行匹配，获取其在环境变量中的配置值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>config <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cf<span class="token punctuation">.</span><span class="token function">InitViper</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> configName<span class="token punctuation">)</span>
	config<span class="token punctuation">.</span><span class="token function">SetEnvPrefix</span><span class="token punctuation">(</span>Prefix<span class="token punctuation">)</span>
	config<span class="token punctuation">.</span><span class="token function">AutomaticEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	replacer <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReplacer</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span>
	config<span class="token punctuation">.</span><span class="token function">SetEnvKeyReplacer</span><span class="token punctuation">(</span>replacer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：加载Orderer.yaml配置文件</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：解析配置文件成Orderer配置对象</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> uconf TopLevel
err <span class="token operator">=</span> viperutil<span class="token punctuation">.</span><span class="token function">EnhancedExactUnmarshal</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uconf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此配置对象为TopLevel型，结构体如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> TopLevel <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	General    General    <span class="token comment">//通用配置对象</span>
	FileLedger FileLedger <span class="token comment">//文本账本配置对象</span>
	RAMLedger  RAMLedger  <span class="token comment">//RAM账本配置对象</span>
	Kafka      Kafka      <span class="token comment">// Kafka共识组件配置对象</span>
	Debug      Debug      <span class="token comment">// 调试信息配置对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：检查Orderer配置对象conf配置项并设置默认值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>uconf<span class="token punctuation">.</span><span class="token function">completeInitialization</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">ConfigFileUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="初始化日志与本地msp组件" tabindex="-1"><a class="header-anchor" href="#初始化日志与本地msp组件" aria-hidden="true">#</a> 初始化日志与本地MSP组件</h2><p>①：初始化日志</p><p><code>initializeLoggingLevel</code>设置<code>Orderer</code>节点上的日志后端输出流、输出格 式与默认日志级别（<code>INFO</code>级别）。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initializeLoggingLevel</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>config<span class="token punctuation">.</span>TopLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flogging<span class="token punctuation">.</span><span class="token function">InitBackend</span><span class="token punctuation">(</span>flogging<span class="token punctuation">.</span><span class="token function">SetFormat</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>LogFormat<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stderr<span class="token punctuation">)</span>
	flogging<span class="token punctuation">.</span><span class="token function">InitFromSpec</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：初始化本地MSP组件</p><p>首先加载本地的<code>MSP</code>组件，根据MSP配置文件路径、<code>BCCSP</code>密码服务组件配置、<code>MSP</code>名称初始化本地<code>MSP</code>组件 。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initializeLocalMsp</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>config<span class="token punctuation">.</span>TopLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	err <span class="token operator">:=</span> mspmgmt<span class="token punctuation">.</span><span class="token function">LoadLocalMsp</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>LocalMSPDir<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>BCCSP<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>LocalMSPID<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地<code>MSP</code>组件默认使用<code>bccspmsp</code>类型对象。该类型的<code>MSP</code>组件是基于<code>BCCSP</code>组件提供密码套件服务的，封装了<code>MSP</code>组件（通常对应于一个组织）信任的相关证书列表（包含根<code>CA</code>证书、中间<code>CA</code>证书等）、<code>MSP</code>名称、签名者身份实体与管理员身份实体列表等。MSP组件的关键内容后面会有专门去讲解。</p><h2 id="启动orderer排序节点" tabindex="-1"><a class="header-anchor" href="#启动orderer排序节点" aria-hidden="true">#</a> 启动Orderer排序节点</h2><p>启动函数在<code>/orderer/common/server/main.go/Start()函数</code>中，接下来一步步的解析：</p><p>①：创建本地MSP签名者实体 signer</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>signer <span class="token operator">:=</span> localmsp<span class="token punctuation">.</span><span class="token function">NewSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②：初始化TLS认证的安全服务器配置项和gRPC服务器</p><p>本地gRPC服务器grpcServer默认端口为7050</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>serverConfig <span class="token operator">:=</span> <span class="token function">initializeServerConfig</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>       
grpcServer <span class="token operator">:=</span> <span class="token function">initializeGrpcServer</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> serverConfig<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>③：设置TLS连接认证的回调函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tlsCallback <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>bundle <span class="token operator">*</span>channelconfig<span class="token punctuation">.</span>Bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> grpcServer<span class="token punctuation">.</span><span class="token function">MutualTLSRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 检测是否需要认证TLS客户端证书</span>
			logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Executing callback to update root CAs&quot;</span><span class="token punctuation">)</span>
			<span class="token function">updateTrustedRoots</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> caSupport<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span> <span class="token comment">//执行回调函数更新根CA证书</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：创建多通道注册管理器</p><p>多通道注册管理器<code>Registrar</code>对象，用于注册<code>Orderer</code>节点上的所有通道（包括系统通道和应用通道），负责维护通道配置、账本等重要资源。</p><p>多通道注册管理器<code>Registrar</code>对象相当于<code>Orderer</code>节点上的“资源管理器”，为每个通道创建关联的共识组件链对象，负责交易排序、打包出块、提交账本以及通道管理等工作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>manager <span class="token operator">:=</span> <span class="token function">initializeMultichannelRegistrar</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> signer<span class="token punctuation">,</span> tlsCallback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initializeMultichannelRegistrar</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>config<span class="token punctuation">.</span>TopLevel<span class="token punctuation">,</span> signer crypto<span class="token punctuation">.</span>LocalSigner<span class="token punctuation">,</span>
	callbacks <span class="token operator">...</span><span class="token keyword">func</span><span class="token punctuation">(</span>bundle <span class="token operator">*</span>channelconfig<span class="token punctuation">.</span>Bundle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>multichannel<span class="token punctuation">.</span>Registrar <span class="token punctuation">{</span>
	lf<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">createLedgerFactory</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token comment">//创建通道的账本工厂对象</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>lf<span class="token punctuation">.</span><span class="token function">ChainIDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token function">initializeBootstrapChannel</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> lf<span class="token punctuation">)</span> <span class="token comment">//初始化系统通道</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Not bootstrapping because of existing chains&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//创建并设置共识组件字典</span>
	consenters <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>consensus<span class="token punctuation">.</span>Consenter<span class="token punctuation">)</span>
	consenters<span class="token punctuation">[</span><span class="token string">&quot;solo&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> solo<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	consenters<span class="token punctuation">[</span><span class="token string">&quot;kafka&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> kafka<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Kafka<span class="token punctuation">)</span> <span class="token comment">//// Kafka类型共识组件</span>
	<span class="token keyword">return</span> multichannel<span class="token punctuation">.</span><span class="token function">NewRegistrar</span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> consenters<span class="token punctuation">,</span> signer<span class="token punctuation">,</span> callbacks<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.1 创建通道的账本工厂对象</p><p>代码路径<code>/orderer/common/server/util.go</code>，大概做了以下几件事：</p><ul><li>获取<code>Orderer</code>节点上的区块账本存储目录ld，包括默认目录<code>/var/hyperledger/production/orderer</code>或临时目录中的子目录<code>hyperledger-fabric-ordererledger</code>+随机数后缀（默认目录不存在时使用）</li><li>创建基于文件的区块账本工厂对象lf（<code>fileLedgerFactory</code>类型）</li><li>在区块账本目录下建立以chains命名的子目录（<code>/var/hyperledger/production/orderer/chains</code>），由每个通道账本的区块数据存储对象负责在<code>chains</code>子目录下创建维护以通道ID（即链ID）命名的通道账本子目录，用于保存该通道账本的所有区块数据文件。其中，区块数据文件名都是以<code>blockfile_num</code>命名，<code>num</code>是6位区块文件编号，左侧不足位数用0补齐。</li></ul><p>4.2 初始化系统通道</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initializeBootstrapChannel</span><span class="token punctuation">(</span>conf <span class="token operator">*</span>config<span class="token punctuation">.</span>TopLevel<span class="token punctuation">,</span> lf blockledger<span class="token punctuation">.</span>Factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">switch</span> conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>GenesisMethod <span class="token punctuation">{</span> <span class="token comment">// 分析创世区块的生成方式</span>
	<span class="token keyword">case</span> <span class="token string">&quot;provisional&quot;</span><span class="token punctuation">:</span> <span class="token comment">// 根据配置文件生成创世区块</span>
		genesisBlock <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>genesisconfig<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>GenesisProfile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GenesisBlockForChannel</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>SystemChannel<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">:</span> <span class="token comment">// 根据创世区块文件生成创世区块</span>
		genesisBlock <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>GenesisFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GenesisBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
	<span class="token punctuation">}</span>

	chainID<span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">GetChainIDFromBlock</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span> <span class="token comment">// 从创世区块中解析获取通道ID</span>
	<span class="token operator">...</span>
	gl<span class="token punctuation">,</span> err <span class="token operator">:=</span> lf<span class="token punctuation">.</span><span class="token function">GetOrCreate</span><span class="token punctuation">(</span>chainID<span class="token punctuation">)</span> <span class="token comment">// 创建系统通道的区块账本对象</span>
	<span class="token operator">...</span>
	err <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>genesisBlock<span class="token punctuation">)</span> <span class="token comment">// 添加区块到系统通道账本上</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：创建Orderer排序服务器</p><p><code>Orderer</code>排序服务器，提供<code>Orderer</code>服务与管理所有通道资源及其账本、共识组件等。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>server <span class="token operator">:=</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>manager<span class="token punctuation">,</span> signer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>conf<span class="token punctuation">.</span>Debug<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>General<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>TimeWindow<span class="token punctuation">,</span> mutualTLS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>r <span class="token operator">*</span>multichannel<span class="token punctuation">.</span>Registrar<span class="token punctuation">,</span> <span class="token boolean">_</span> crypto<span class="token punctuation">.</span>LocalSigner<span class="token punctuation">,</span> debug <span class="token operator">*</span>localconfig<span class="token punctuation">.</span>Debug<span class="token punctuation">,</span> timeWindow time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> mutualTLS <span class="token builtin">bool</span><span class="token punctuation">)</span> ab<span class="token punctuation">.</span>AtomicBroadcastServer <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token operator">&amp;</span>server<span class="token punctuation">{</span>
		dh<span class="token punctuation">:</span>        deliver<span class="token punctuation">.</span><span class="token function">NewHandlerImpl</span><span class="token punctuation">(</span>deliverSupport<span class="token punctuation">{</span>Registrar<span class="token punctuation">:</span> r<span class="token punctuation">}</span><span class="token punctuation">,</span> timeWindow<span class="token punctuation">,</span> mutualTLS<span class="token punctuation">)</span><span class="token punctuation">,</span>
		bh<span class="token punctuation">:</span>        broadcast<span class="token punctuation">.</span><span class="token function">NewHandlerImpl</span><span class="token punctuation">(</span>broadcastSupport<span class="token punctuation">{</span>Registrar<span class="token punctuation">:</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		debug<span class="token punctuation">:</span>     debug<span class="token punctuation">,</span>
		Registrar<span class="token punctuation">:</span> r<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>bh：Broadcast</code>服务处理句柄（<code>deliverHandler</code>类型）。该对象实现了<code>Broadcast</code>交易广播服务的<code>Handle(srv ab.AtomicBroadcast_BroadcastServer)</code>消息处理接口，负责接收客户端提交的普通交易消息与配置交易消息，并分别进行处理，过滤后转发给通道绑定的共识组件链对象进行处理；</p></li><li><p><code>dh：Deliver</code>服务处理句柄（<code>handlerImpl</code>类型）。该对象实现了<code>Deliver</code>区块分发服务的<code>Handle(srv*DeliverServer)</code>消息处理接口，负责接收客户端提交的区块请求消息，从<code>Orderer</code>节点区块账本中读取指定的区块数据，并返回给请求节点。如果请求的指定区块还没有生成，则默认阻塞等待直到该区块创建和提交完毕；</p></li><li><p><code>Registrar：Orderer</code>节点的多通道注册管理器（<code>Registrar</code>类型）。该对象封装了<code>Orderer</code>节点上所有通道的链支持对象字典<code>chains</code>、共识组件字典<code>consenters</code>、区块账本工厂对象<code>ledgerFactory</code>、系统通道链支持对象与ID、本地签名者实体<code>signer</code>等，用于管理通道配置、区块账本对象、共识组件等核心资源，相当于<code>Orderer</code>节点上的“资源管理器”。</p></li></ul><p>⑥：解析执行子命令</p><ul><li>start子命令：启动<code>profile</code>服务与<code>Orderer</code>排序服务器，支持<code>go tool pprof</code>命令查看与分析程序性能瓶颈</li><li>benchmark子命令：用于启动测试服务器</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> cmd <span class="token punctuation">{</span> <span class="token comment">//分析命令类型</span>
	<span class="token keyword">case</span> start<span class="token punctuation">.</span><span class="token function">FullCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// &quot;start&quot; command // start启动子命令</span>
		logger<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">&quot;Starting %s&quot;</span><span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">GetVersionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token function">initializeProfilingService</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token comment">// goroutine启动go profile服务</span>
		ab<span class="token punctuation">.</span><span class="token function">RegisterAtomicBroadcastServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Beginning to serve requests&quot;</span><span class="token punctuation">)</span>
		grpcServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动gRPC服务器提供Orderer服务</span>
	<span class="token keyword">case</span> benchmark<span class="token punctuation">.</span><span class="token function">FullCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// &quot;benchmark&quot; command // &quot;benchmark&quot; 测试用例子命令</span>
		logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Starting orderer in benchmark mode&quot;</span><span class="token punctuation">)</span>
		benchmarkServer <span class="token operator">:=</span> performance<span class="token punctuation">.</span><span class="token function">GetBenchmarkServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		benchmarkServer<span class="token punctuation">.</span><span class="token function">RegisterService</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
		benchmarkServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,58),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=i("ExternalLinkIcon");return e(),t("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[o("https://github.com/blockchainGuide/"),p(s)])])])])}const b=a(l,[["render",d],["__file","2.Hyperledger_fabric_source.html.vue"]]);export{b as default};
