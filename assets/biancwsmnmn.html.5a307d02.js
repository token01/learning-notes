import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as g,c as a,a as p,b as o,d as n,e as i,r as e}from"./app.7b6c8628.js";const s={},r=i('<p><strong>面向失败编程</strong>是编程中最难的事情。</p><p>话说程序员小林的某一天：起床-&gt;吃饭-&gt;坐地铁-&gt;到公司-&gt;敲代码-&gt;回家-&gt;玩游戏-&gt;睡觉。</p><p>这一天的另一个版本：起床-&gt;吃饭-&gt;坐地铁-&gt;到公司-&gt;突然要 24 小时健康码-&gt;进不了公司-&gt;坐地铁回去-&gt;地铁停运了-&gt;上厕所-&gt;踩到屎滑倒-&gt;摔成脑震荡。</p><p>第二个版本充满意外，貌似有些极端，但你我天天在新闻上看到类似的事情，说明它其实每天都在发生。</p><p>程序也是如此。</p><p>程序员小林给公司开发的某个系统，用户量暴涨；三年后公司上市了，小林喜迎白富美。</p><p>另一个版本：上线后第二天被 SQL 注入删库了，造成大量投诉；小林被老板痛骂一顿后，卷铺盖走人了。</p><p>程序的世界充满意外，你我的每一行代码几乎都是 bug。</p><p>写出可用的系统很容易，但写出健壮的系统很难。</p><h3 id="一个-简单-的例子" tabindex="-1"><a class="header-anchor" href="#一个-简单-的例子" aria-hidden="true">#</a> 一个”简单“的例子</h3><p>我们通过储值卡消费这个例子来看看如此”简单“的案例到底存在多少让人眼花缭乱的失败场景。</p><p>假设我们给某个加油站开发个储值卡系统，用户可以往里面充钱，可以用储值卡加油消费，类似你在理发店、洗脚店开的那种充值卡。</p><p>我们看看车主加油消费的场景——而且只看这个场景中的”储值卡扣款“这一个结点。</p><p>正常流程（简化版）大致是这样的：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032877-918840117.png" alt="image-20220420094234062" loading="lazy"></p><p>流程很简单，加油员加完油后，用户掏出手机扫码进入付款页面，输入油枪、金额，选储值卡支付，输完密码后点提交；后端创建订单后调卡服务的扣款接口执行扣款（传入卡号、订单号、金额）；卡服务扣款成功后返回告知用户付款成功。</p><p>”这个需求大概要几天开发？“产品经理问小林。</p><p>”五天。“小林觉得五天绰绰有余。</p><p>”三天吧，这周我们就要上线。“</p><p>”那就三天。“小林觉得其实三天足够——不就一两个接口调用嘛，卡服务是现成的。</p><p>于是小林撸起袖子开始敲代码。进展比预想得要顺利，两天就敲完了（多少加了点班），一天测试完成，第四天就上线了！</p><p>某天夜里，小林正在撸猫时，运营同学打来电话：某车主的卡被莫名其妙扣款了！</p><p>事情是这样的：车主鲁某加了 3000 元的油，选择用储值卡支付，结果系统提示扣款失败，于是鲁某换微信付款成功，开车走人了。</p><p>蹊跷的是：鲁某十分钟后收到消息说卡扣掉了 3000 元！</p><p>明明说支付失败，怎么扣了 3000？于是鲁某打电话找油站闹。</p><p>小林赶紧排查日志，发现<strong>上图中地第 3 步（调卡服务的扣款接口）超时了，于是业务系统告知前端扣款失败</strong>。</p><p>调卡服务扣款接口超时，业务系统能直接返回失败给前端吗？</p><p>不能！</p><p><strong>因为接口超时并不能说明卡服务那边实际上到底有没有扣成功</strong>（有可能卡服务处理成功了，但返回的时候网络出问题；也有可能卡系统负载高，业务系统等待超时从而断开连接）。</p><p>我们看看上面的异常是怎么发生的：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032652-912788247.png" alt="image-20220420111711176" loading="lazy"></p><p>第四步超时后，业务后台直接告知车主支付失败，但实际上卡系统仍然在扣款！</p><p>那怎么办？告诉车主”请您稍后查看支付结果？“</p><p>怎么可能！</p><p>一个想法是超时后业务系统调卡服务的查询接口，看看这笔订单实际是否支付成功。</p><p>问题是，如果查询接口调用也超时呢（卡系统负载高的情况下这个概率很大）？</p><p>另外，查询接口返回没有扣款成功就能直接告诉用户扣款失败吗？</p><p>不能！</p><p>因为查询接口查数据库的时候，数据库里面没有记录，但有可能前面发起的那个扣款逻辑仍然在执行，稍后仍然会发生扣款。</p><p>既然怕查询的时候扣款逻辑仍然在执行，那我们能不能等一会（比如五分钟）再查结果呢（等那个可能的扣款执行流跑完）？</p><p>也不能！</p><p>因为车主在那等着呢！难道手机上一直在那转圈，跟车主说现在负载高，请先喝杯茶，让子弹飞一会？</p><p>因为必须要立即告知用户处理结果，所以这种情况下（扣款超时且未查到扣款记录）只能告诉用户扣款失败。</p><p>只不过，在告知用户之前，业务系统需要先撤销本次扣款申请，告诉储值卡系统本次扣款流程不能执行了（回滚本次事务）。</p><p>于是小林做了如下优化：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032636-1770812664.png" alt="image-20220420114150613" loading="lazy"></p><p>现在系统健壮多了，很久没出现上次的问题了，小林又跑去撸猫了。</p><p>某天深夜，小林又接到运营同学电话：上次的问题重现了！</p><p>尼玛，见鬼了！</p><p>小林又跑去查日志，发现确实是扣款接口超时了，但撤销接口调成功了（虽然调了几次才成功）——那为毛还扣了钱啊？</p><p>想了半天，小林终于发现了问题：和前面提到的查询问题一样，撤销的时候同样无法保证那个该死的扣款流程已经跑完了啊！这次是因为撤销逻辑确实执行了，但执行的时候扣款逻辑还在跑（还没写库）！</p><p>所以撤销接口必须考虑两种情况：</p><ol><li>撤销的时候，扣款已经发生了——此时能正确撤销；</li><li>撤销的时候，扣款还没发生，但扣款流程正在执行——此时撤销会失败，稍后钱仍然会被扣掉；</li></ol><p>于是小林就想：既然扣款超时后立即调撤销接口有可能因时序问题导致撤销失败，那我把撤销操作做成异步调度不就行了嘛——在一段时间内（比如五分钟）如果因未找到记录而撤销失败，就稍后重试。</p><p>小林的撤销逻辑是这样的：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032651-1838918260.png" alt="image-20220420143256054" loading="lazy"></p><p>原本由业务系统同步调撤销接口，现在改成走调度系统异步撤销，业务系统投递撤销任务完成后立马返回结果给客户端。</p><p>因为有异步重试机制，撤销总是能成功（除了实际中几乎不会发生的极端情况），因而这次一定能保证不会意外扣钱！</p><p>小林同学抱着如释重负的心态继续撸猫。</p><p>然而，安稳日子没过几天，一个雷电交加的夜晚，手机再次响起：车主储值卡消费的钱莫名其妙给人家退回去了！油站打电话要我们赔偿！</p><p>小林赶紧查日志，发现场景是这样的：车主王某用储值卡支付 1000 元油款，失败了；十几秒后车主再次用储值卡发起支付，成功了。</p><p>支付最终成功了，莫非人工退钱了？没看到任何退款记录啊？</p><p>抓耳挠腮，百思不得其解。小林只能打电话给储值卡系统负责人小李。</p><p>小李一顿查日志，最终发现这笔钱是被调度系统调撤销接口给撤销了！</p><p>小林如梦方醒，才知道之前自己自鸣得意地犯了个天大的错误。</p><p>本次消费，业务系统共向储值卡系统发起了两次扣款申请——<strong>虽然都是同一笔订单的扣款，却是两个独立的事务</strong>。</p><p>小林（以及储值卡系统）的错误在于，撤销操作是作用在订单上，而不是事务上。</p><p>在本次事故中，第一次扣款超时后，业务系统投递了撤销任务；而后车主又对该笔订单（订单号相同）发起了第二次扣款，成功了；与此同时，调度系统第一次撤销失败（卡系统未找到消费记录，或者接口超时），一段时间后又发起第二次撤销——而这个时候，车主已经完成了第二次扣款且成功了，于是这次的撤销便作用在这个成功的扣款上（储值卡系统的扣款和撤销接口都是根据订单号来的，它能保证同一笔订单不会重复扣款，但撤销的时候无法区分扣款是哪次发起的）。</p><p>我们画下流程：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032630-1781175288.png" alt="image-20220420152519360" loading="lazy"></p><p>如图，第二次的扣款被调度系统撤销了。</p><p>小林和小李这才发现<strong>需要给扣款和撤销接口增加事务编号</strong>。</p><p>之前扣款接口主要参数是 card_no、order_code、amount，现在变成 card_no、order_code、trans_id、amount。</p><p>之前撤销接口参数是 order_code，现在变成 order_code、trans_id。</p><p>通过 trans_id 将扣款和撤销绑定到同一个操作事务上，只会撤销相应 trans_id 的扣款操作。</p><p>trans_id 由客户端根据当前时间毫秒数生成（后面会说为啥取毫秒时间戳），它不一定需要全局唯一，只需要针对同一个订单是唯一的即可。</p><p>加了事务的概念后，小林和小李发现压根不需要通过调度系统不断尝试，只要保证撤销接口调成功就能保证对应的扣款事务一定能够被撤销（或者阻止执行）。</p><p>现在撤销接口做两件事：</p><ol><li>写入一条撤销记录；</li><li>试图撤销掉已经产生的扣款；</li></ol><p>撤销逻辑如下：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032593-203950863.png" alt="image-20220420205541356" loading="lazy"></p><p>再看看扣款的逻辑。</p><p>扣款记录表大致长这样子：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032847-1446149878.png" alt="image-20220420184516421" loading="lazy"></p><p>扣款逻辑如下：</p><ol><li>先检查是否存在对该扣款事务的撤销记录，如果存在，则拒绝处理；不存在则继续；</li><li>再检查是否存在该订单的扣款记录：</li></ol><p>2.1 如果不存在，则走正常扣款流程；</p><p>2.2 如果存在记录，则要比较事务编号：如果已存在的那条事务编号小于当前的，则用当前的事务编号覆盖，否则不做任何处理（后面会解释这么做的原因）；</p><p>流程图如下：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220423192133909-244591209.png" alt="" loading="lazy"></p><p>现在我们看看当撤销流程执行时，被撤销的扣款事务处于不同状态下的情况：</p><ol><li>扣款事务执行失败。此时压根不会产生扣款；</li><li>扣款事务已经执行完毕，产生了实际扣款。此时撤销流程会撤销掉这笔扣款；</li><li>扣款事务正在执行中，还没有写库，但稍后会写库。扣款事务实际写库之前，会先检查是否存在对该事务的撤销记录，因为先前撤销流程已经写入了一条对该事务的撤销记录，扣款事务此时会查到撤销记录，从而阻止本次扣款事务写库（本次事务主动回滚）。</li></ol><p>由于撤销的时候是按事务编号来的，所以不会撤销别的事务的扣款。</p><p>现在我们解释下为何要用当前时间的毫秒时间戳作为事务编号。</p><p>回到上面车主王某的场景。王某第一次用卡支付超时，于是他决定重试。该场景中，卡系统接收到同一笔订单的两次扣款事务以及一次撤销事务。假如两次事务都尝试写库，那么当后面的事务（不一定是第二次扣款的那个）尝试写库时，肯定已经存在一条扣款记录，此时后面这个事务要如何做？</p><ol><li>用后者的事务编号替换掉前者的。</li><li>不做任何处理。</li></ol><blockquote><p>两次事务的执行逻辑完全相同，产生的扣款记录数据也是完全相同的——除了事务编号和扣款时间。</p></blockquote><p>这里的关键是，<strong>我们无法确定第一次扣款、第二次扣款、对第一次扣款的撤销这三个请求写库的先后顺序</strong>。</p><p>所以，如果采用方案 1，替换事务编号，那么当第二次的提交先写库时，后面事务（第一次提交的扣款请求）的替换会导致事务编号变成了待撤销的那个，因而很可能会被撤销掉，这就会导致用户付的钱莫名其妙被退回了。</p><p>如果采用方案 2，不做任何处理，那么当第一次的提交先写库时，事务编号就一直是待撤销的那个，也会被撤销掉，导致用户付的钱莫名其妙被退回。</p><p>也就是说，无脑替换或不替换都是有问题的。</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032842-1060919890.png" alt="image-20220420220641797" loading="lazy"></p><p><em>第一次扣款事务先写库的情况</em></p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032649-874208200.png" alt="image-20220420221122078" loading="lazy"></p><p><em>第二次扣款事务先写库的情况</em></p><p>实际的业务场景是，对于同一笔订单，无论发出多少次扣款请求，只允许一次成功，而且这次成功的扣款不能被误撤销。有很多方案可以实现这一点，不过有些方案需要增加额外表，有些则需要为同一笔订单维护多条扣款记录，这些都会带来额外的复杂性。</p><p>我们采取事务序列号（毫秒时间戳）的方式来保证扣款事务的时序性，只允许后面覆盖前面的，不允许反过来覆盖。其基于这样的事实：用户如果对同一笔订单发出多次扣款请求，那一定是前面扣款失败了，因而业务系统会为前面那些失败的扣款发出撤销请求，所以只要保证仅允许后面覆盖前面的事务，就不会造成误撤销（因为唯有最后那个扣款事务不会存在撤销请求。感兴趣的可参照上面的图示推演一下）。</p><blockquote><p>这里说的事务是指一次扣款处理流，不是指数据库事务。</p></blockquote><h3 id="所以呢" tabindex="-1"><a class="header-anchor" href="#所以呢" aria-hidden="true">#</a> 所以呢？</h3><p>我不想编程了，说真的，这么个简单的扣款场景就扯出这么多幺蛾子，太难了！</p><p>现实中比这复杂的场景多得是。</p><p>程序员到底是怎么活下来的？</p><p>答案是，他们的一生是在没完没了的 bug 中度过的。</p><p>90% 以上的 bug 都是因为对失败场景考虑不周导致。</p><p>如果把现实看成事件流，那么事件流中的绝大多数节点都有不止一个出口分支（典型的是”正常“和”异常“）。2022 年 4 月 30 日晚，小林同学可能躺在床上玩游戏，也可能躺在 ICU。</p><p>系统（特别是业务系统）是对现实世界业务的反映，每个节点同样存在多种可能。</p><p>典型的业务流分析步骤是这样的：</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220421092032841-805463935.png" alt="image-20220420225002673" loading="lazy"></p><p>几乎所有的结点都要考虑失败场景，而对于一些失败场景的补偿措施仍然可能失败，如此递归，最终由自动补偿系统（如漏单检测/补偿系统）或人工处理来兜底。</p><p>失败的一大重要根源是分布式。</p><p>不要提什么单体架构，做 web 开发的，自入行第一天起就面对分布式系统。</p><p>典型的分布式是前后端交互。自 ajax 出世以来，前后端接口交互成为常态，接口失败也是每个程序员都会遇到的问题。很大部分的前后端交互失败的场景没有得到很好地处理（特别是超时），比如没有去重，导致重复写入数据。</p><p>自从微服务横行以来，后端开发人员无不被分布式事务搞得焦头烂额。业界也总结了些解决方案，比如两阶段提交、SAGA、TCC 等，但真正实现起来都不简单，一个看似简单的业务都会搞得很复杂。所以业界又搞了些现成的开源方案如 seata、DTM。</p><h3 id="还有救吗" tabindex="-1"><a class="header-anchor" href="#还有救吗" aria-hidden="true">#</a> 还有救吗？</h3><p>好消息是，不是所有的系统都需要那么高的可靠性保证，也不是所有的失败场景都要做补偿处理。</p><p>你可能是在一家初创公司，别说系统一分钟不可用了，就是库被删了估计也没事。</p><p>你做的系统可能只是给内部人员用用，凡是遇到失败就抛异常，大不了人工去修复数据也是可以的。</p><p>这些情况下，很可能你并不需要去开发高可用系统，他们更讲究效率，把正常流程码出来基本就完事了。</p><p>讲究点可用性的，稍微把代码写好点，服务器配置堆高点，业务流程设计上注意点，基本也能规避大部分祭天性的问题。</p><p>等你公司真的发展成 BAT 那种了，是真正拼刀工的时候，万分之一概率的异常场景可能就会让系统天天宕机，账户天天少钱。那时候各种方案、架构、分析都要拿到桌面上来了。</p><p>所以，面向失败编程诚然很难，但不代表你必须得天天面对着失败抓耳挠腮，<strong>你需要评估你所负责的系统在成本、效率、健壮性上应做怎样的取舍</strong>。</p><p><img src="https://img2022.cnblogs.com/blog/1997761/202204/1997761-20220422101501383-874386105.png" alt="" loading="lazy"></p>',132),c={href:"https://www.cnblogs.com/linvanda/p/16172767.html",target:"_blank",rel:"noopener noreferrer"};function m(d,b){const l=e("ExternalLinkIcon");return g(),a("div",null,[r,p("blockquote",null,[p("p",null,[o("转载链接："),p("a",c,[o("https://www.cnblogs.com/linvanda/p/16172767.html"),n(l)]),o("，整理：musk")])])])}const u=t(s,[["render",m],["__file","biancwsmnmn.html.vue"]]);export{u as default};
