import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as e,a as n,b as a,d as t,e as c,r as l}from"./app.1ee57811.js";const i={},u=c(`<blockquote><p>浅谈以太坊源码分析之blockChain分析</p></blockquote><h2 id="blockchain关键元素" tabindex="-1"><a class="header-anchor" href="#blockchain关键元素" aria-hidden="true">#</a> blockchain关键元素</h2><ul><li><code>db</code>：持久化到底层数据储存，即<code>leveldb</code>；</li><li><code>genesisBlock</code>：创始区块</li><li><code>currentBlock</code>：当前区块，<code>blockchain</code>中并不是储存链所有的<code>block</code>，而是通过<code>currentBlock</code>向前回溯直到<code>genesisBlock</code>，这样就构成了区块链</li><li><code>bodyCache</code>、<code>bodyRLPCache</code>、<code>blockCache</code>、<code>futureBlocks</code>：区块链中的缓存结构，用于加快区块链的读取和构建；</li><li><code>hc</code>：<code>headerchain</code>区块头链，由<code>blockchain</code>额外维护的另一条链，由于<code>Header</code>和<code>Block</code>的储存空间是有很大差别的，但同时<code>Block</code>的<code>Hash</code>值就是<code>Header</code>（RLP）的<code>Hash</code>值，所以维护一个<code>headerchain</code>可以用于快速延长链，验证通过后再下载<code>blockchain</code>，或者可以与<code>blockchain</code>进行相互验证；</li><li><code>processor</code>：执行区块链交易的接口，收到一个新的区块时，要对区块中的所有交易执行一遍，一方面是验证，一方面是更新世界状态；</li><li><code>validator</code>：验证数据有效性的接口</li><li><code>futureBlocks</code>：收到的区块时间大于当前头区块时间15s而小于30s的区块，可作为当前节点待处理的区块。</li></ul><hr><h2 id="函数介绍" tabindex="-1"><a class="header-anchor" href="#函数介绍" aria-hidden="true">#</a> 函数介绍</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// BadBlocks 处理客户端从网络上获取的最近的bad block列表</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">BadBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// addBadBlock 把bad block放入缓存</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">addBadBlock</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// CurrentBlock取回主链的当前头区块，这个区块是从blockchian的内部缓存中取得</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// CurrentHeader检索规范链的当前头区块header。从HeaderChain的内部缓存中检索标头。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">CurrentHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// CurrentFastBlock取回主链的当前fast-sync头区块，这个区块是从blockchian的内部缓存中取得</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">CurrentFastBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 将活动链或其子集写入给定的编写器.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Export</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">ExportN</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> first <span class="token builtin">uint64</span><span class="token punctuation">,</span> last <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// FastSyncCommitHead快速同步，将当前头块设置为特定hash的区块。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">FastSyncCommitHead</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// GasLimit返回当前头区块的gas limit</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GasLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Genesis 取回genesis区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Genesis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 通过hash从数据库或缓存中取到一个区块体(transactions and uncles)或RLP数据</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBody</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Body <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBodyRLP</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> rlp<span class="token punctuation">.</span>RawValue <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// GetBlock 通过hash和number取到区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBlock</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// GetBlockByHash 通过hash取到区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBlockByHash</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// GetBlockByNumber 通过number取到区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBlockByNumber</span><span class="token punctuation">(</span>number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Block <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 获取给定hash和number区块的header</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetHeader</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// 获取给定hash的区块header</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetHeaderByHash</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// 获取给定number的区块header</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetHeaderByNumber</span><span class="token punctuation">(</span>number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// HasBlock检验hash对应的区块是否完全存在数据库中</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">HasBlock</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// 检查给定hash和number的区块的区块头是否存在数据库</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">HasHeader</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// HasState检验state trie是否完全存在数据库中</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">HasState</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// HasBlockAndState检验hash对应的block和state trie是否完全存在数据库中</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">HasBlockAndState</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 获取给定hash的区块的总难度</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetTd</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> number <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 获取从给定hash的区块到genesis区块的所有hash</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBlockHashesFromHash</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> max <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// GetReceiptsByHash 在特定的区块中取到所有交易的收据</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetReceiptsByHash</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> types<span class="token punctuation">.</span>Receipts <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// GetBlocksFromHash 取到特定hash的区块及其n-1个父区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetBlocksFromHash</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>blocks <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// GetUnclesInChain 取回从给定区块到向前回溯特定距离到区块上的所有叔区块</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">GetUnclesInChain</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// insert 将新的头块注入当前块链。 该方法假设该块确实是真正的头。</span>
<span class="token comment">// 如果它们较旧或者它们位于不同的侧链上，它还会将头部标题和头部快速同步块重置为同一个块。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// InsertChain尝试将给定批量的block插入到规范链中，否则，创建一个分叉。 如果返回错误，它将返回失败块的索引号以及描述错误的错误。</span>
<span class="token comment">//插入完成后，将触发所有累积的事件。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">InsertChain</span><span class="token punctuation">(</span>chain types<span class="token punctuation">.</span>Blocks<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// insertChain将执行实际的链插入和事件聚合。 </span>
<span class="token comment">// 此方法作为单独方法存在的唯一原因是使用延迟语句使锁定更清晰。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">insertChain</span><span class="token punctuation">(</span>chain types<span class="token punctuation">.</span>Blocks<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Log<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// InsertHeaderChain尝试将给定的headerchain插入到本地链中，可能会创建一个重组</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">InsertHeaderChain</span><span class="token punctuation">(</span>chain <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> checkFreq <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// InsertReceiptChain 使用交易和收据数据来完成已经存在的headerchain</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">InsertReceiptChain</span><span class="token punctuation">(</span>blockChain types<span class="token punctuation">.</span>Blocks<span class="token punctuation">,</span> receiptChain <span class="token punctuation">[</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>Receipts<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//loadLastState从数据库加载最后一个已知的链状态。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">loadLastState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Processor 返回当前current processor.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Processor <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Reset重置清除整个区块链，将其恢复到genesis state.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// ResetWithGenesisBlock 清除整个区块链, 用特定的genesis state重塑，被Reset所引用</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">ResetWithGenesisBlock</span><span class="token punctuation">(</span>genesis <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// repair尝试通过回滚当前块来修复当前的区块链，直到找到具有关联状态的块。</span>
<span class="token comment">// 用于修复由崩溃/断电或简单的非提交尝试导致的不完整的数据库写入。</span>
<span class="token comment">//此方法仅回滚当前块。 当前标头和当前快速块保持不变。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">repair</span><span class="token punctuation">(</span>head <span class="token operator">*</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// reorgs需要两个块、一个旧链以及一个新链，并将重新构建块并将它们插入到新的规范链中，并累积潜在的缺失事务并发布有关它们的事件</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">reorg</span><span class="token punctuation">(</span>oldBlock<span class="token punctuation">,</span> newBlock <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// Rollback 旨在从数据库中删除不确定有效的链片段</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Rollback</span><span class="token punctuation">(</span>chain <span class="token punctuation">[</span><span class="token punctuation">]</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token comment">// SetReceiptsData 计算收据的所有非共识字段</span>
<span class="token keyword">func</span> <span class="token function">SetReceiptsData</span><span class="token punctuation">(</span>config <span class="token operator">*</span>params<span class="token punctuation">.</span>ChainConfig<span class="token punctuation">,</span> block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> receipts types<span class="token punctuation">.</span>Receipts<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// SetHead将本地链回滚到指定的头部。</span>
<span class="token comment">// 通常可用于处理分叉时重选主链。对于Header，新Header上方的所有内容都将被删除，新的头部将被设置。</span>
<span class="token comment">// 但如果块体丢失，则会进一步回退（快速同步后的非归档节点）。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">SetHead</span><span class="token punctuation">(</span>head <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// SetProcessor设置状态修改所需要的processor</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">SetProcessor</span><span class="token punctuation">(</span>processor Processor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// SetValidator 设置用于验证未来区块的validator</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">SetValidator</span><span class="token punctuation">(</span>validator Validator<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// State 根据当前头区块返回一个可修改的状态</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// StateAt 根据特定时间点返回新的可变状态</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">StateAt</span><span class="token punctuation">(</span>root common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// Stop 停止区块链服务，如果有正在import的进程，它会使用procInterrupt来取消。</span>
<span class="token comment">// it will abort them using the procInterrupt.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// TrieNode从memory缓存或storage中检索与trie节点hash相关联的数据。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">TrieNode</span><span class="token punctuation">(</span>hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// Validator返回当前validator.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Validator <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// WriteBlockWithoutState仅将块及其元数据写入数据库，但不写入任何状态。 这用于构建竞争方叉，直到超过规范总难度。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">WriteBlockWithoutState</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> td <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// WriteBlockWithState将块和所有关联状态写入数据库。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">WriteBlockWithState</span><span class="token punctuation">(</span>block <span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> receipts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Receipt<span class="token punctuation">,</span> state <span class="token operator">*</span>state<span class="token punctuation">.</span>StateDB<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// writeHeader将标头写入本地链，因为它的父节点已知。 如果新插入的报头的总难度变得大于当前已知的TD，则重新路由规范链</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">writeHeader</span><span class="token punctuation">(</span>header <span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment">// 处理未来区块链</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>BlockChain<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="blockchain初始化" tabindex="-1"><a class="header-anchor" href="#blockchain初始化" aria-hidden="true">#</a> blockchain初始化</h2><p>主要步骤：</p><p>①：创建一个新的headerChain结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span>hc<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">NewHeaderChain</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> chainConfig<span class="token punctuation">,</span> engine<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>getProcInterrupt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>根据number（0）获取genesisHeader</li><li>从rawdb中读取HeadBlock并存储在currentHeader中</li></ol><p>②：获取genesisBlock</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span>genesisBlock <span class="token operator">=</span> bc<span class="token punctuation">.</span><span class="token function">GetBlockByNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③：如果链不为空，则用老的链数据初始化链</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> bc<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		rawdb<span class="token punctuation">.</span><span class="token function">InitDatabaseFromFreezer</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>db<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：加载最新的状态数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">loadLastState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：检查区块哈希的当前状态，并确保链中没有任何坏块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> hash <span class="token operator">:=</span> <span class="token keyword">range</span> BadHashes <span class="token punctuation">{</span>
		<span class="token keyword">if</span> header <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">GetHeaderByHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> header <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			headerByNumber <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">GetHeaderByNumber</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> headerByNumber <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> headerByNumber<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Found bad hash, rewinding chain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>ParentHash<span class="token punctuation">)</span>
				bc<span class="token punctuation">.</span><span class="token function">SetHead</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
				log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Chain rewind was successful, resuming normal operation&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥：定时处理future block</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> bc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">-</span><span class="token operator">&gt;</span>procFutureBlocks
		<span class="token operator">-</span><span class="token operator">&gt;</span>InsertChain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说做了以下几件事：</p><ol><li>配置<code>cacheConfig</code>，创建各种lru缓存</li><li>初始化<code>triegc</code></li><li>初始化<code>stateDb</code>：<strong>state.NewDatabase(db)</strong></li><li>初始化区块和状态验证：<strong>NewBlockValidator()</strong></li><li>初始化状态处理器：<strong>NewStateProcessor()</strong></li><li>初始化区块头部链：<strong>NewHeaderChain()</strong></li><li>查找创世区块：<strong>bc.genesisBlock = bc.GetBlockByNumber(0)</strong></li><li>加载最新的状态数据：<strong>bc.loadLastState()</strong></li><li>检查区块哈希的当前状态，并确保链中没有任何坏块</li><li><code>go bc.update()</code> 定时处理<code>future block</code></li></ol><h2 id="加载区块链状态" tabindex="-1"><a class="header-anchor" href="#加载区块链状态" aria-hidden="true">#</a> 加载区块链状态</h2><p>①：从数据库中恢复headblock，如果空的话，触发reset chain</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>head <span class="token operator">:=</span> rawdb<span class="token punctuation">.</span><span class="token function">ReadHeadBlockHash</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>db<span class="token punctuation">)</span>
	<span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Empty database, resetting chain&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> bc<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：确保整个head block是可以获取的，若为空，则触发reset chain</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>currentBlock <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">GetBlockByHash</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
	<span class="token keyword">if</span> currentBlock <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// Corrupt or empty database, init from scratch</span>
		log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Head block missing, resetting chain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
		<span class="token keyword">return</span> bc<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：从stateDb中打开最新区块的状态trie，如果打开失败调用bc.repair(&amp;currentBlock)方法进行修复。修复方法就是从当前区块一个个的往前面找，直到找到好的区块，然后赋值给currentBlock。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> state<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>currentBlock<span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bc<span class="token punctuation">.</span>stateCache<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// Dangling block without a state associated, init from scratch</span>
		log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Head state missing, repairing chain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> currentBlock<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span> currentBlock<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">repair</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>currentBlock<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		rawdb<span class="token punctuation">.</span><span class="token function">WriteHeadBlockHash</span><span class="token punctuation">(</span>bc<span class="token punctuation">.</span>db<span class="token punctuation">,</span> currentBlock<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：存储当前的headblock和设置当前的headHeader以及头部快速块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bc<span class="token punctuation">.</span>currentBlock<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>currentBlock<span class="token punctuation">)</span>
<span class="token operator">...</span><span class="token punctuation">.</span>
bc<span class="token punctuation">.</span>hc<span class="token punctuation">.</span><span class="token function">SetCurrentHeader</span><span class="token punctuation">(</span>currentHeader<span class="token punctuation">)</span>
<span class="token operator">...</span>
bc<span class="token punctuation">.</span>currentFastBlock<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>currentBlock<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,51),k={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/blockchainGuide",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const s=l("ExternalLinkIcon");return o(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",k,[a("https://mindcarver.cn"),t(s)])]),n("p",null,[n("a",r,[a("https://github.com/blockchainGuide"),t(s)])])])])}const g=p(i,[["render",d],["__file","11.etheric_fang_blockChain_analysis_source_code_analysis.html.vue"]]);export{g as default};
