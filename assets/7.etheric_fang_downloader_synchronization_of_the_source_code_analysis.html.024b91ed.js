import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c,a as n,b as s,d as e,e as o,r as l}from"./app.11a9ee6c.js";const i={},u=o('<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p><code>downloader</code> 模块的代码位于 <code>eth/downloader</code> 目录下。主要的功能代码分别是：</p><ul><li><p><code>downloader.go</code> ：实现了区块同步逻辑</p></li><li><p><code>peer.go</code> ：对区块各个阶段的组装，下面的各个<code>FetchXXX</code> 就是很依赖这个模块。</p></li><li><p><code>queue.go</code> ：对<code>eth/peer.go</code>的封装</p></li><li><p><code>statesync.go</code> ：同步<code>state</code>对象</p></li></ul><h2 id="同步模式" tabindex="-1"><a class="header-anchor" href="#同步模式" aria-hidden="true">#</a> 同步模式</h2><h3 id="full-sync" tabindex="-1"><a class="header-anchor" href="#full-sync" aria-hidden="true">#</a> full sync</h3><p>full 模式会在数据库中保存所有区块数据，同步时从远程节点同步 header 和 body 数据，而state 和 receipt 数据则是在本地计算出来的。</p><p>在 full 模式下，downloader 会同步区块的 header 和 body 数据组成一个区块，然后通过 blockchain 模块的 <code>BlockChain.InsertChain</code> 向数据库中插入区块。在 <code>BlockChain.InsertChain</code> 中，会逐个计算和验证每个块的 <code>state</code> 和 <code>recepit</code> 等数据，如果一切正常就将区块数据以及自己计算得到的 <code>state</code>、<code>recepit</code> 数据一起写入到数据库中。</p><h3 id="fast-sync" tabindex="-1"><a class="header-anchor" href="#fast-sync" aria-hidden="true">#</a> fast sync</h3><p><code>fast</code> 模式下，<code>recepit</code> 不再由本地计算，而是和区块数据一样，直接由 <code>downloader</code> 从其它节点中同步；<code>state</code> 数据并不会全部计算和下载，而是选一个较新的区块（称之为 <code>pivot</code>）的 <code>state</code> 进行下载，以这个区块为分界，之前的区块是没有 <code>state</code> 数据的，之后的区块会像 <code>full</code> 模式下一样在本地计算 <code>state</code>。因此在 <code>fast</code> 模式下，同步的数据除了 <code>header</code> 和 body，还有 <code>receipt</code>，以及 <code>pivot</code> 区块的 <code>state</code>。</p><p>因此 <code>fast</code> 模式忽略了大部分 <code>state</code> 数据，并且使用网络直接同步 <code>receipt</code> 数据的方式替换了 full 模式下的本地计算，所以比较快。</p><h3 id="light-sync" tabindex="-1"><a class="header-anchor" href="#light-sync" aria-hidden="true">#</a> light sync</h3><p>light 模式也叫做轻模式，它只对区块头进行同步，而不同步其它的数据。</p><p>SyncMode:</p><ul><li>FullSync:从完整区块同步整个区块链历史</li><li>FastSync:快速下载标题，仅在链头处完全同步</li><li>LightSync:仅下载标题，然后终止</li></ul><h2 id="区块下载流程" tabindex="-1"><a class="header-anchor" href="#区块下载流程" aria-hidden="true">#</a> 区块下载流程</h2>',15),d=n("strong",null,"所有区块链相关文章合集",-1),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"同时希望结识更多区块链圈子的人，可以star上面项目，持续更新",-1),v=o(`<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glwzmv4zyej30zh0u0dps.jpg" alt="image-20201222221031797" loading="lazy"></p><p>首先根据<code>Synchronise</code>开始区块同步，通过<code>findAncestor</code>找到指定节点的共同祖先，并在此高度进行同步，同时开启多个<code>goroutine</code>同步不同的数据：<code>header</code>、<code>receipt</code>、<code>body</code>。假如同步高度为 100 的区块，必须先<code>header</code>同步成功同步完成才可以唤醒<code>body</code>和<code>receipts</code>的同步。</p><p>而每个部分的同步大致都是由<code>FetchParts</code>来完成的，里面包含了各个<code>Chan</code>的配合，也会涉及不少的回调函数，总而言之多读几遍每次都会有不同的理解。接下来就逐步分析这些关键内容。</p><hr><h2 id="synchronise" tabindex="-1"><a class="header-anchor" href="#synchronise" aria-hidden="true">#</a> synchronise</h2><p>①：确保对方的TD高于我们自己的TD</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>currentBlock <span class="token operator">:=</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 td <span class="token operator">:=</span> pm<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetTd</span><span class="token punctuation">(</span>currentBlock<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentBlock<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 pHead<span class="token punctuation">,</span> pTd <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> pTd<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：开启<code>downloader</code>的同步</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pm<span class="token punctuation">.</span>downloader<span class="token punctuation">.</span><span class="token function">Synchronise</span><span class="token punctuation">(</span>peer<span class="token punctuation">.</span>id<span class="token punctuation">,</span> pHead<span class="token punctuation">,</span> pTd<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入函数：主要做了以下几件事：</p><ol><li><code>d.synchronise(id, head, td, mode)</code> ：同步过程</li><li>错误日志输出， 并删除此<code>peer</code>。</li></ol><p>进入到<code>d.synchronise</code>，走到最后一步<code>d.syncWithPeer(p, hash, td)</code>真正开启同步。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">synchronise</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">,</span> hash common<span class="token punctuation">.</span>Hash<span class="token punctuation">,</span> td <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> mode SyncMode<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">syncWithPeer</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> td<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>syncWithPeer大概做了以下几件事：</p><ol><li>查找祖先<code>findAncestor</code></li><li>开启单独<code>goroutine</code>分别运行以下几个函数： <ul><li>fetchHeaders</li><li>processHeaders</li><li>fetchbodies</li><li>fetchReceipts</li><li>processFastSyncContent</li><li>processFullSyncContent</li></ul></li></ol><p>接下来的文章，以及整个<code>Downloader</code>模块主要内容就是围绕这几个部分进行展开。</p><hr><h2 id="findancestor" tabindex="-1"><a class="header-anchor" href="#findancestor" aria-hidden="true">#</a> findAncestor</h2><p>同步首要的是<strong>确定同步区块的区间</strong>：顶部为远程节点的最高区块，底部为两个节点都拥有的相同区块的最高高度（祖先区块）。<code>findAncestor</code>就是用来找祖先区块。函数分析如下：</p><p>①：确定本地高度和远程节点的最高高度</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
  floor        <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 底部</span>
  localHeight  <span class="token builtin">uint64</span>  <span class="token comment">// 本地最高高度</span>
  remoteHeight <span class="token operator">=</span> remoteHeader<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 远程节点最高高度</span>
 <span class="token punctuation">)</span>
<span class="token keyword">switch</span> d<span class="token punctuation">.</span>mode <span class="token punctuation">{</span>
 <span class="token keyword">case</span> FullSync<span class="token punctuation">:</span>
  localHeight <span class="token operator">=</span> d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">case</span> FastSync<span class="token punctuation">:</span>
  localHeight <span class="token operator">=</span> d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">CurrentFastBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">default</span><span class="token punctuation">:</span>
  localHeight <span class="token operator">=</span> d<span class="token punctuation">.</span>lightchain<span class="token punctuation">.</span><span class="token function">CurrentHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：计算同步的高度区间和间隔</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>from<span class="token punctuation">,</span> count<span class="token punctuation">,</span> skip<span class="token punctuation">,</span> max <span class="token operator">:=</span> <span class="token function">calculateRequestSpan</span><span class="token punctuation">(</span>remoteHeight<span class="token punctuation">,</span> localHeight<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>from</code>:：表示从哪个高度开始获取区块</li><li><code>count</code>：表示从远程节点获取多少个区块</li><li><code>skip</code>：表示间隔，比如<code>skip</code> 为 2 ，获取第一个高度为 5，则第二个就是 8</li><li><code>max</code>：表示最大高度</li></ul><p>③：发送获取<code>header</code>的请求</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> p<span class="token punctuation">.</span>peer<span class="token punctuation">.</span><span class="token function">RequestHeadersByNumber</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> skip<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：处理上面请求接收到的<code>header</code> :<code>case packet := &lt;-d.headerCh</code></p><ol><li>丢弃掉不是来自我们请求节的内容</li><li>确保返回的<code>header</code>数量不为空</li><li>验证返回的<code>headers</code>的高度是我们所请求的</li><li>检查是否找到共同祖先</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//----①</span>
<span class="token keyword">if</span> packet<span class="token punctuation">.</span><span class="token function">PeerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> p<span class="token punctuation">.</span>id <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Received headers from incorrect peer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">PeerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
   <span class="token punctuation">}</span>
<span class="token comment">//-----②</span>
headers <span class="token operator">:=</span> packet<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>headerPack<span class="token punctuation">)</span><span class="token punctuation">.</span>headers
   <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Empty head header set&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
      <span class="token punctuation">}</span>
<span class="token comment">//-----③</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> headers <span class="token punctuation">{</span>
    expectNumber <span class="token operator">:=</span> from <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">int64</span><span class="token punctuation">(</span>skip<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> number <span class="token operator">:=</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> number <span class="token operator">!=</span> expectNumber <span class="token punctuation">{</span> <span class="token comment">// 验证这些返回的header是否是我们上面请求的headers</span>
     p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Head headers broke chain ordering&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">&quot;requested&quot;</span><span class="token punctuation">,</span> expectNumber<span class="token punctuation">,</span> <span class="token string">&quot;received&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errInvalidChain
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token comment">//-----④</span>
<span class="token comment">// 检查是否找到共同祖先</span>
   finished <span class="token operator">=</span> <span class="token boolean">true</span>
   <span class="token comment">//注意这里是从headers最后一个元素开始查找，也就是高度最高的区块。</span>
   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
    <span class="token comment">// 跳过不在我们请求的高度区间内的区块</span>
    <span class="token keyword">if</span> headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> from <span class="token operator">||</span> headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> max <span class="token punctuation">{</span>
     <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// //检查我们本地是否已经有某个区块了，如果有就算是找到了共同祖先，</span>
    <span class="token comment">//并将共同祖先的哈希和高度设置在number和hash变量中。</span>
    h <span class="token operator">:=</span> headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    n <span class="token operator">:=</span> headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        
        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：如果通过固定间隔法找到了共同祖先则返回祖先，会对其高度与 <code>floor</code> 变量进行验证, <code>floor</code> 变量代表的是共同祖先的高度的最小值,如果找到共同祖先的高度比这个值还小，就认为是两个节点之间分叉太大了，不再允许进行同步。如果一切正常，就返回找到的共同祖先的高度 <code>number</code> 变量。</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if hash != (common.Hash{}) {
        if int64(number) &lt;= floor {
            return 0, errInvalidAncestor
        }
        return number, nil
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑥：如果固定间隔法没有找到祖先则通过二分法来查找祖先，这部分可以思想跟二分法算法类似，有兴趣的可以细看。</p><hr><h2 id="queue详解" tabindex="-1"><a class="header-anchor" href="#queue详解" aria-hidden="true">#</a> queue详解</h2><p><code>queue</code>对象和<code>Downloader</code>对象是相互作用的，<code>Downloader</code>的很多功能离不开他，接下来我们介绍一下这部分内容，但是本节，<strong>可以先行跳过</strong>，等到了阅读下面的关于<code>Queue</code>调用的一些函数部分再回过来阅读这部分讲解。</p><h3 id="queue结构体" tabindex="-1"><a class="header-anchor" href="#queue结构体" aria-hidden="true">#</a> queue结构体</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> queue <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  mode SyncMode <span class="token comment">// 同步模式</span>
  
  <span class="token comment">// header处理相关</span>
  headerHead      common<span class="token punctuation">.</span>Hash   <span class="token comment">//最后一个排队的标头的哈希值以验证顺序</span>
  headerTaskPool  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header  <span class="token comment">//待处理的标头检索任务，将起始索引映射到框架标头</span>
  headerTaskQueue <span class="token operator">*</span>prque<span class="token punctuation">.</span>Prque  <span class="token comment">//骨架索引的优先级队列，以获取用于的填充标头</span>
  headerPeerMiss <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//已知不可用的对等头批处理集</span>
  headerPendPool <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchRequest <span class="token comment">//当前挂起的头检索操作</span>
  headerResults <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header <span class="token comment">//结果缓存累积完成的头</span>
  headerProced <span class="token builtin">int</span> <span class="token comment">//从结果中拿出来已经处理的header</span>
  headerContCh <span class="token keyword">chan</span> <span class="token builtin">bool</span> <span class="token comment">//header下载完成时通知的频道</span>
  
  blockTaskPool  <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header <span class="token comment">//待处理的块（body）检索任务，将哈希映射到header</span>
  blockTaskQueue <span class="token operator">*</span>prque<span class="token punctuation">.</span>Prque <span class="token comment">//标头的优先级队列,以用于获取块（bodies）</span>
  blockPendPool <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchRequest <span class="token comment">//当前的正在处理的块（body)检索操作</span>
  blockDonePool <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//已经完成的块（body)</span>
  
 receiptTaskPool <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header <span class="token comment">//待处理的收据检索任务，将哈希映射到header</span>
 receiptTaskQueue <span class="token operator">*</span>prque<span class="token punctuation">.</span>Prque <span class="token comment">//标头的优先级队列,以用于获取收据</span>
 receiptPendPool <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchRequest <span class="token comment">//当前的正在处理的收据检索操作</span>
 receiptDonePool <span class="token keyword">map</span><span class="token punctuation">[</span>common<span class="token punctuation">.</span>Hash<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//已经完成的收据</span>
 
 resultCache <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchResult <span class="token comment">//下载但尚未交付获取结果</span>
 resultOffset <span class="token builtin">uint64</span> <span class="token comment">//区块链中第一个缓存的获取结果的偏移量</span>
 resultSize common<span class="token punctuation">.</span>StorageSize <span class="token comment">// 块的近似大小</span>

 lock   <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex
 active <span class="token operator">*</span>sync<span class="token punctuation">.</span>Cond
 closed <span class="token builtin">bool</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主要细分功能" tabindex="-1"><a class="header-anchor" href="#主要细分功能" aria-hidden="true">#</a> 主要细分功能</h3><h4 id="数据下载开始安排任务" tabindex="-1"><a class="header-anchor" href="#数据下载开始安排任务" aria-hidden="true">#</a> 数据下载开始安排任务</h4><ul><li><code>ScheduleSkeleton</code>:<em>将一批<code>header</code>检索任务添加到队列中，以填充已检索的<code>header skeleton</code></em></li><li><code>Schedule</code>:<em>用来准备对一些 <code>body</code> 和 <code>receipt</code> 数据的下载</em></li></ul><h4 id="数据下载中的各类状态" tabindex="-1"><a class="header-anchor" href="#数据下载中的各类状态" aria-hidden="true">#</a> 数据下载中的各类状态</h4><ul><li><p><code>pending</code></p><p><code>pending</code>表示待检索的XXX请求的数量，包括了：<code>PendingHeaders</code>、<code>PendingBlocks</code>、<code>PendingReceipts</code>，分别都是对应取<code>XXXTaskQueue</code>的长度。</p></li><li><p><code>InFlight</code></p><p><code>InFlight</code>表示是否有正在获取XXX的请求，包括：<code>InFlightHeaders</code>、<code>InFlightBlocks</code>、<code>InFlightReceipts</code>，都是通过判断<code>len(q.receiptPendPool) &gt; 0</code> 来确认。</p></li><li><p><code>ShouldThrottle</code></p><p><code>ShouldThrottle</code>表示检查是否应该限制下载XXX，包括:<code>ShouldThrottleBlocks</code>、<code>ShouldThrottleReceipts</code>，主要是为了防止下载过程中本地内存占用过大。</p></li><li><p><code>Reserve</code></p><p><code>Reserve</code>通过构造一个 <code>fetchRequest</code> 结构并返回，向调用者提供指定数量的待下载的数据的信息（<code>queue</code> 内部会将这些数据标记为「正在下载」）。调用者使用返回的 <code>fetchRequest</code> 数据向远程节点发起新的获取数据的请求。包括：<code>ReserveHeaders</code>、<code>ReserveBodies</code>、<code>ReserveReceipts</code>。</p></li><li><p><code>Cancel</code></p><p><code>Cance</code>用来撤消对 <code>fetchRequest</code> 结构中的数据的下载（<code>queue</code> 内部会将这些数据重新从「正在下载」的状态更改为「等待下载」）。包括：<code>CancelHeaders</code>、<code>CancelBodies</code>、<code>CancelReceipts</code>。</p></li><li><p><code>expire</code></p><p><code>expire</code>检查正在执行中的请求是否超过了超时限制，包括：<code>ExpireHeaders</code>、<code>ExpireBodies</code>、<code>ExpireReceipts</code>。</p></li><li><p><code>Deliver</code></p><p>当有数据下载成功时，调用者会使用 <code>deliver</code> 功能用来通知 <code>queue</code> 对象。包括：<code>DeliverHeaders</code>、<code>DeliverBodies</code>、<code>DeliverReceipts</code>。</p></li></ul><h4 id="数据下载完成获取区块数据" tabindex="-1"><a class="header-anchor" href="#数据下载完成获取区块数据" aria-hidden="true">#</a> 数据下载完成获取区块数据</h4><ul><li><code>RetrieveHeaders</code> 在填充 <code>skeleton</code> 完成后，<code>queue.RetrieveHeaders</code> 用来获取整个 <code>skeleton</code> 中的所有 <code>header</code>。</li><li><code>Results</code><code>queue.Results</code> 用来获取当前的 <code>header</code>、<code>body</code> 和 <code>receipt</code>（只在 <code>fast</code> 模式下） 都已下载成功的区块（并将这些区块从 <code>queue</code> 内部移除）</li></ul><hr><h3 id="函数实现" tabindex="-1"><a class="header-anchor" href="#函数实现" aria-hidden="true">#</a> 函数实现</h3><h4 id="scheduleskeleton" tabindex="-1"><a class="header-anchor" href="#scheduleskeleton" aria-hidden="true">#</a> ScheduleSkeleton</h4><p>queue.ScheduleSkeleton主要是为了填充skeleton，它的参数是要下载区块的起始高度和所有 <code>skeleton</code> 区块头，最核心的内容则是下面这段循环：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token function">ScheduleSkeleton</span><span class="token punctuation">(</span>from <span class="token builtin">uint64</span><span class="token punctuation">,</span> skeleton <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> skeleton <span class="token punctuation">{</span>
        index <span class="token operator">:=</span> from <span class="token operator">+</span> <span class="token function">uint64</span><span class="token punctuation">(</span>i<span class="token operator">*</span>y<span class="token punctuation">)</span>
        q<span class="token punctuation">.</span>headerTaskPool<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> header
        q<span class="token punctuation">.</span>headerTaskQueue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设已确定需要下载的区块高度区间是从 10 到 46，<code>MaxHeaderFetch</code> 的值为 10，那么这个高度区块就会被分成 3 组：10 - 19，20 - 29，30 - 39，而 skeleton 则分别由高度为 19、29、39 的区块头组成。循环中的 <code>index</code> 变量实际上是每一组区块中的第一个区块的高度（比如 10、20、30），<code>queue.headerTaskPool</code> 实际上是一个<strong>每一组区块中第一个区块的高度到最后一个区块的 header 的映射</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>headerTaskPool <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">10</span><span class="token punctuation">:</span> headerOf_19<span class="token punctuation">,</span>
 <span class="token number">20</span><span class="token punctuation">:</span> headerOf_20<span class="token punctuation">,</span>
 <span class="token number">30</span><span class="token punctuation">:</span> headerOf_39<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="reserveheaders" tabindex="-1"><a class="header-anchor" href="#reserveheaders" aria-hidden="true">#</a> ReserveHeaders</h4><p><code>reserve</code> 用来获取可下载的数据。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>reserve  <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>peerConnection<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>fetchRequest<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> d<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">ReserveHeaders</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token function">ReserveHeaders</span><span class="token punctuation">(</span>p <span class="token operator">*</span>peerConnection<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>fetchRequest <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> q<span class="token punctuation">.</span>headerPendPool<span class="token punctuation">[</span>p<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span> <span class="token comment">//①</span>
  <span class="token operator">...</span>
  send<span class="token punctuation">,</span> skip <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">for</span> send <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q<span class="token punctuation">.</span>headerTaskQueue<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  from<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> q<span class="token punctuation">.</span>headerTaskQueue<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> q<span class="token punctuation">.</span>headerPeerMiss<span class="token punctuation">[</span>p<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> q<span class="token punctuation">.</span>headerPeerMiss<span class="token punctuation">[</span>p<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>from<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    skip <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>skip<span class="token punctuation">,</span> from<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  send <span class="token operator">=</span> from<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token comment">// ②</span>
 <span class="token punctuation">}</span>
  
 <span class="token operator">...</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> from <span class="token operator">:=</span> <span class="token keyword">range</span> skip <span class="token punctuation">{</span>
  q<span class="token punctuation">.</span>headerTaskQueue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span> <span class="token comment">// ③</span>
  <span class="token operator">...</span>
  request <span class="token operator">:=</span> <span class="token operator">&amp;</span>fetchRequest<span class="token punctuation">{</span>
  Peer<span class="token punctuation">:</span> p<span class="token punctuation">,</span>
  From<span class="token punctuation">:</span> send<span class="token punctuation">,</span>
  Time<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
 q<span class="token punctuation">.</span>headerPendPool<span class="token punctuation">[</span>p<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> request <span class="token comment">// ④</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①：根据<code>headerPendPool</code>来判断远程节点是否正在下载数据信息。</p><p>②：从<code>headerTaskQueue</code>取出值作为本次请求的起始高度，赋值给<code>send</code>变量，在这个过程中会排除headerPeerMiss所记录的节点下载数据失败的信息。</p><p>③：将失败的任务再重新写回<code>task queue</code></p><p>④：利用<code>send</code>变量构造<code>fetchRequest</code>结构，此结构是用来作为<code>FetchHeaders</code>来使用的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fetch <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>peerConnection<span class="token punctuation">,</span> req <span class="token operator">*</span>fetchRequest<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">FetchHeaders</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>From<span class="token punctuation">,</span> MaxHeaderFetch<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<code>ReserveHeaders</code>会从任务队列里选择最小的起始高度并构造<code>fetchRequest</code>传递给<code>fetch</code>获取数据。</p><hr><h4 id="deliverheaders" tabindex="-1"><a class="header-anchor" href="#deliverheaders" aria-hidden="true">#</a> DeliverHeaders</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>deliver <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>packet dataPack<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   pack <span class="token operator">:=</span> packet<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>headerPack<span class="token punctuation">)</span>
   <span class="token keyword">return</span> d<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">DeliverHeaders</span><span class="token punctuation">(</span>pack<span class="token punctuation">.</span>peerID<span class="token punctuation">,</span> pack<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> d<span class="token punctuation">.</span>headerProcCh<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①：如果发现下载数据的节点没有在 <code>queue.headerPendPool</code> 中，就直接返回错误；否则就继续处理，并将节点记录从 <code>queue.headerPendPool</code> 中删除。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>request <span class="token operator">:=</span> q<span class="token punctuation">.</span>headerPendPool<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
 <span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errNoFetchesPending
 <span class="token punctuation">}</span>
 headerReqTimer<span class="token punctuation">.</span><span class="token function">UpdateSince</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>
 <span class="token function">delete</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>headerPendPool<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：验证<code>headers</code></p><p>包括三方面验证：</p><ol><li>检查起始区块的高度和哈希</li><li>检查高度的连接性</li><li>检查哈希的连接性</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> accepted <span class="token punctuation">{</span>
  <span class="token comment">//检查起始区块的高度和哈希</span>
  <span class="token keyword">if</span> headers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> request<span class="token punctuation">.</span>From <span class="token punctuation">{</span>
   <span class="token operator">...</span>
   accepted <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> headers<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> target <span class="token punctuation">{</span>
   <span class="token operator">...</span>
   accepted <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> accepted <span class="token punctuation">{</span>
  <span class="token keyword">for</span> i<span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> headers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   hash <span class="token operator">:=</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 检查高度的连接性</span>
   <span class="token keyword">if</span> want <span class="token operator">:=</span> request<span class="token punctuation">.</span>From <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">uint64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> want <span class="token punctuation">{</span>
    <span class="token operator">...</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> header<span class="token punctuation">.</span>ParentHash <span class="token punctuation">{</span> <span class="token comment">// 检查哈希的连接性</span>
    <span class="token operator">...</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③： 将无效数据存入<code>headerPeerMiss</code>，并将这组区块起始高度重新放入<code>headerTaskQueue</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">!</span>accepted <span class="token punctuation">{</span>
 <span class="token operator">...</span>
  miss <span class="token operator">:=</span> q<span class="token punctuation">.</span>headerPeerMiss<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
  <span class="token keyword">if</span> miss <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   q<span class="token punctuation">.</span>headerPeerMiss<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   miss <span class="token operator">=</span> q<span class="token punctuation">.</span>headerPeerMiss<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  miss<span class="token punctuation">[</span>request<span class="token punctuation">.</span>From<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  q<span class="token punctuation">.</span>headerTaskQueue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>From<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>From<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;delivery not accepted&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：保存数据，并通知<code>headerProcCh</code>处理新的<code>header</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> ready <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  process <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> ready<span class="token punctuation">)</span>
  <span class="token function">copy</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> q<span class="token punctuation">.</span>headerResults<span class="token punctuation">[</span>q<span class="token punctuation">.</span>headerProced<span class="token punctuation">:</span>q<span class="token punctuation">.</span>headerProced<span class="token operator">+</span>ready<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">select</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> headerProcCh <span class="token operator">&lt;-</span> process<span class="token punctuation">:</span>
   q<span class="token punctuation">.</span>headerProced <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：发送消息给.<code>headerContCh</code>，通知<code>skeleton</code> 都被下载完了</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>headerTaskPool<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  q<span class="token punctuation">.</span>headerContCh <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DeliverHeaders</code> 会对数据进行检验和保存，并发送 channel 消息给 <code>Downloader.processHeaders</code> 和 <code>Downloader.fetchParts</code>的 <code>wakeCh</code> 参数。</p><hr><h4 id="schedule" tabindex="-1"><a class="header-anchor" href="#schedule" aria-hidden="true">#</a> Schedule</h4><p><code>processHeaders</code>在处理<code>header</code>数据的时候，会调用<code>queue.Schedule</code> 为下载 <code>body</code> 和 <code>receipt</code> 作准备。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>inserts <span class="token operator">:=</span> d<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> origin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func (q *queue) Schedule(headers []*types.Header, from uint64) []*types.Header {
 inserts := make([]*types.Header, 0, len(headers))
 for _, header := range headers {
    //校验
    ...
  q.blockTaskPool[hash] = header
  q.blockTaskQueue.Push(header, -int64(header.Number.Uint64()))

  if q.mode == FastSync {
   q.receiptTaskPool[hash] = header
   q.receiptTaskQueue.Push(header, -int64(header.Number.Uint64()))
  }
  inserts = append(inserts, header)
  q.headerHead = hash
  from++
 }
 return inserts
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数主要就是将信息写入到body和receipt队列，等待调度。</p><hr><h4 id="reservebody-receipt" tabindex="-1"><a class="header-anchor" href="#reservebody-receipt" aria-hidden="true">#</a> ReserveBody&amp;Receipt</h4><p>在 <code>queue</code> 中准备好了 <strong>body</strong> 和 <strong>receipt</strong> 相关的数据， <code>processHeaders</code>最后一段，是唤醒下载Bodyies和Receipts的关键代码，会通知 <code>fetchBodies</code> 和 <code>fetchReceipts</code> 可以对各自的数据进行下载了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>bodyWakeCh<span class="token punctuation">,</span> d<span class="token punctuation">.</span>receiptWakeCh<span class="token punctuation">}</span> <span class="token punctuation">{</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">:</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>fetchXXX</code> 会调用<code>fetchParts</code>，逻辑类似上面的的，<code>reserve</code>最终则会调用<code>reserveHeaders</code>，<code>deliver</code> 最终调用的是 <code>queue.deliver</code>.</p><p>先来分析<code>reserveHeaders</code>：</p><p>①：如果没有可处理的任务，直接返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> taskQueue<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：如果参数给定的节点正在下载数据，返回</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> pendPool<span class="token punctuation">[</span>p<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：计算 queue 对象中的缓存空间还可以容纳多少条数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>space <span class="token operator">:=</span> q<span class="token punctuation">.</span><span class="token function">resultSlots</span><span class="token punctuation">(</span>pendPool<span class="token punctuation">,</span> donePool<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：从 「task queue」 中依次取出任务进行处理</p><p>主要实现以下功能：</p><ul><li>计算当前 header 在 <code>queue.resultCache</code> 中的位置，然后填充 <code>queue.resultCache</code> 中相应位置的元素</li><li>处理空区块的情况，若为空不下载。</li><li>处理远程节点缺少这个当前区块数据的情况，如果发现这个节点曾经下载当前数据失败过，就不再让它下载了。</li></ul><p>注意：<code>resultCache</code> 字段用来记录所有正在被处理的数据的处理结果，它的元素类型是 <code>fetchResult</code> 。它的 <code>Pending</code> 字段代表当前区块还有几类数据需要下载。这里需要下载的数据最多有两类：body 和 receipt，<code>full</code> 模式下只需要下载 <code>body</code> 数据，而 <code>fast</code> 模式要多下载一个 <code>receipt</code> 数据。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> proc <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> proc <span class="token operator">&lt;</span> space <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>send<span class="token punctuation">)</span> <span class="token operator">&lt;</span> count <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>taskQueue<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> proc<span class="token operator">++</span> <span class="token punctuation">{</span>
  header <span class="token operator">:=</span> taskQueue<span class="token punctuation">.</span><span class="token function">PopItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Header<span class="token punctuation">)</span>
  hash <span class="token operator">:=</span> header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  index <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int64</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>resultOffset<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> index <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>resultCache<span class="token punctuation">)</span> <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token operator">...</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> q<span class="token punctuation">.</span>resultCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   components <span class="token operator">:=</span> <span class="token number">1</span>
   <span class="token keyword">if</span> q<span class="token punctuation">.</span>mode <span class="token operator">==</span> FastSync <span class="token punctuation">{</span>
    components <span class="token operator">=</span> <span class="token number">2</span>
   <span class="token punctuation">}</span>
   q<span class="token punctuation">.</span>resultCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>fetchResult<span class="token punctuation">{</span>
    Pending<span class="token punctuation">:</span> components<span class="token punctuation">,</span>
    Hash<span class="token punctuation">:</span>    hash<span class="token punctuation">,</span>
    Header<span class="token punctuation">:</span>  header<span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token function">isNoop</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   donePool<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token function">delete</span><span class="token punctuation">(</span>taskPool<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>

   space<span class="token punctuation">,</span> proc <span class="token operator">=</span> space<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> proc<span class="token operator">-</span><span class="token number">1</span>
   q<span class="token punctuation">.</span>resultCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>Pending<span class="token operator">--</span>
   progress <span class="token operator">=</span> <span class="token boolean">true</span>
   <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token function">Lacks</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   skip <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>skip<span class="token punctuation">,</span> header<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   send <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>send<span class="token punctuation">,</span> header<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是构造 <code>fetchRequest</code> 结构并返回。</p><hr><h4 id="deliverbodies-receipts" tabindex="-1"><a class="header-anchor" href="#deliverbodies-receipts" aria-hidden="true">#</a> DeliverBodies&amp;Receipts</h4><p><code>body</code> 或 <code>receipt</code> 数据都已经通过 <code>reserve</code> 操作构造了 <code>fetchRequest</code> 结构并传给 <code>fetch</code>，接下来就是等待数据的到达,数据下载成功后，会调用 <code>queue</code> 对象的 <code>deliver</code> 方法进行传递，包括 <code>queue.DeliverBodies</code> 和 <code>queue.DeliverReceipts</code>。这两个方法都以不同的参数调用了 <code>queue.deliver</code> 方法:</p><p>①：如果下载的数据数量为 0，则把所有此节点此次下载的数据标记为「缺失」</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> results <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> request<span class="token punctuation">.</span>Headers <span class="token punctuation">{</span>
   request<span class="token punctuation">.</span>Peer<span class="token punctuation">.</span><span class="token function">MarkLacking</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：循环处理数据，通过调用<code>reconstruct</code> 填充 <code>resultCache[index]</code> 中的相应的字段</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> request<span class="token punctuation">.</span>Headers <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">reconstruct</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> i<span class="token punctuation">,</span> q<span class="token punctuation">.</span>resultCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   failure <span class="token operator">=</span> err
   <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：验证<code>resultCache</code> 中的数据，其对应的 <code>request.Headers</code> 中的 <code>header</code> 都应为 nil，若不是则说明验证未通过，需要假如到task queue重新下载</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> header <span class="token operator">:=</span> <span class="token keyword">range</span> request<span class="token punctuation">.</span>Headers <span class="token punctuation">{</span>
  <span class="token keyword">if</span> header <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   taskQueue<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">int64</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④：如果有数据被验证通过且写入 <code>queue.resultCache</code> 中了（<code>accepted</code> &gt; 0），发送 <code>queue.active</code> 消息。<code>Results</code> 会等待这这个信号。</p><hr><h4 id="results" tabindex="-1"><a class="header-anchor" href="#results" aria-hidden="true">#</a> Results</h4><p>当(header、body、receipt)都下载完，就要将区块写入到数据库了，<code>queue.Results</code> 就是用来返回所有目前已经下载完成的数据，它在 <code>Downloader.processFullSyncContent</code> 和 <code>Downloader.processFastSyncContent</code> 中被调用。代码比较简单就不多说了。</p><p>到此为止<code>queue</code>对象就分析的差不多了。</p><hr><h2 id="同步headers" tabindex="-1"><a class="header-anchor" href="#同步headers" aria-hidden="true">#</a> 同步headers</h2><p>继续回到<code>syncWithPeer</code>函数中，来讲下面比较关键的几个点。</p><h3 id="fetchheaders" tabindex="-1"><a class="header-anchor" href="#fetchheaders" aria-hidden="true">#</a> fetchHeaders</h3><p>同步<code>headers</code> 是是由函数<code>fetchHeaders</code>来完成的。</p><p><code>fetchHeaders</code>的大致思想：</p><p>同步<code>header</code>的数据会被填充到<code>skeleton</code>，每次从远程节点获取区块数据最大为<code>MaxHeaderFetch</code>（192），所以要获取的区块数据如果大于192 ，会被分成组，每组<code>MaxHeaderFetch</code>，剩余的不足192个的不会填充进<code>skeleton</code>，具体步骤如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glszpqzeuwj313u0msq73.jpg" alt="image-20201219111103965" loading="lazy"></p><p>此种方式可以<strong>避免从同一节点下载过多错误数据</strong>，如果我们连接到了一个恶意节点，它可以创造一个链条很长且<code>TD</code>值也非常高的区块链数据。如果我们的区块从 0 开始全部从它那同步，也就下载了一些根本不被别人承认的数据。如果我只从它那同步 <code>MaxHeaderFetch</code> 个区块，然后发现这些区块无法正确填充我之前的 <code>skeleton</code>（可能是 <code>skeleton</code> 的数据错了，或者用来填充 <code>skeleton</code> 的数据错了），就会丢掉这些数据。</p><p>接下来查看下代码如何实现：</p><p>①：发起获取<code>header</code>的请求</p><p>如果是下载<code>skeleton</code>，则会从高度 <code>from+MaxHeaderFetch-1</code> 开始（包括），每隔 <code>MaxHeaderFetch-1</code> 的高度请求一个 <code>header</code>，最多请求 <code>MaxSkeletonSize</code> 个。如果不是的话，则要获取完整的<code>headers</code> 。</p><p>②：等待并处理<code>headerCh</code>中的<code>header</code>数据</p><p>2.1 确保远程节点正在返回我们需要填充<code>skeleton</code>所需的<code>header</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> packet<span class="token punctuation">.</span><span class="token function">PeerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> p<span class="token punctuation">.</span>id <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Received skeleton from incorrect peer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;peer&quot;</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">PeerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 如果<code>skeleton</code>已经下载完毕，则需要继续填充<code>skeleton</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> packet<span class="token punctuation">.</span><span class="token function">Items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> skeleton <span class="token punctuation">{</span>
    skeleton <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token function">getHeaders</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.3 整个<code>skeleton</code>填充完成，并且没有要获取的<code>header</code>了，要通知<code>headerProcCh</code>全部完成</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> packet<span class="token punctuation">.</span><span class="token function">Items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token comment">//下载pivot时不要中止标头的提取</span>
    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">.</span>committed<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pivot <span class="token operator">&lt;=</span> from <span class="token punctuation">{</span>
     p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;No headers, waiting for pivot commit&quot;</span><span class="token punctuation">)</span>
     <span class="token keyword">select</span> <span class="token punctuation">{</span>
     <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>fsHeaderContCheck<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token function">getHeaders</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
      <span class="token keyword">continue</span>
     <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
      <span class="token keyword">return</span> errCanceled
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//完成Pivot操作（或不进行快速同步），并且没有头文件，终止该过程</span>
    p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;No more headers available&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> d<span class="token punctuation">.</span>headerProcCh <span class="token operator">&lt;-</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
     <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
     <span class="token keyword">return</span> errCanceled
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4 当<code>header</code>有数据并且是在获取<code>skeleton</code>的时候，调用<code>fillHeaderSkeleton</code>填充<code>skeleton</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> skeleton <span class="token punctuation">{</span>
    filled<span class="token punctuation">,</span> proced<span class="token punctuation">,</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">fillHeaderSkeleton</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Skeleton chain invalid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
     <span class="token keyword">return</span> errInvalidChain
    <span class="token punctuation">}</span>
    headers <span class="token operator">=</span> filled<span class="token punctuation">[</span>proced<span class="token punctuation">:</span><span class="token punctuation">]</span>
    from <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>proced<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.5 如果当前处理的不是 <code>skeleton</code>，表明区块同步得差不多了，处理尾部的一些区块</p><p>判断本地的主链高度与新收到的 header 的最高高度的高度差是否在 <code>reorgProtThreshold</code> 以内，如果不是，就将高度最高的 <code>reorgProtHeaderDelay</code> 个 header 丢掉。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> head<span class="token operator">+</span><span class="token function">uint64</span><span class="token punctuation">(</span>reorgProtThreshold<span class="token punctuation">)</span> <span class="token operator">&lt;</span> headers<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      delay <span class="token operator">:=</span> reorgProtHeaderDelay
      <span class="token keyword">if</span> delay <span class="token operator">&gt;</span> n <span class="token punctuation">{</span>
       delay <span class="token operator">=</span> n
      <span class="token punctuation">}</span>
      headers <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span>delay<span class="token punctuation">]</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.6 如果还有 <code>header</code> 未处理，发给 <code>headerProcCh</code> 进行处理，<code>Downloader.processHeaders</code> 会等待这个 channel 的消息并进行处理；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> d<span class="token punctuation">.</span>headerProcCh <span class="token operator">&lt;-</span> headers<span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
     <span class="token keyword">return</span> errCanceled
    <span class="token punctuation">}</span>
    from <span class="token operator">+=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">getHeaders</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.7 如果没有发送标头，或者所有标头等待 <code>fsHeaderContCheck</code> 秒，再次调用 <code>getHeaders</code> 请求区块</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">Trace</span><span class="token punctuation">(</span><span class="token string">&quot;All headers delayed, waiting&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>fsHeaderContCheck<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token function">getHeaders</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
     <span class="token keyword">continue</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
     <span class="token keyword">return</span> errCanceled
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,144),m={href:"https://github.com/ethereum/go-ethereum/commit/6ee3b26f447459d3f3a316dbb572e461a273e193#diff-c2fa15e758e986688c646459d8970a50",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/ethereum/go-ethereum/pull/17839",target:"_blank",rel:"noopener noreferrer"},h={href:"https://yangzhe.me/2019/03/24/ethereum-blockchain/",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>要想发生 「reorg」 操作，就需要有新区块加入。在以太坊主网上，新产生一个区块的间隔是 10 秒到 20 秒左右。一般情况下，如果仅仅是区块数据，它的同步速度还是很快的，每次下载也有最大数量的限制。所以在新产生一个区块的这段时间里，足够同步完成一组区块数据而对方节点不会发生 「reorg」 操作。但是注意刚才说的「仅仅是区块数据」的同步较快，<strong>state 数据的同步就非常慢了</strong>。简单来说在完成同步之前可能会有多个 「pivot」 区块，这些区块的 state 数据会从网络上下载，这就大大拖慢了整个区块的同步速度，使得本地在同步一组区块的同时对方发生 「reorg」 操作的机率大大增加。</p><p>作者认为这种情况下发生的 「reorg」 操作是由新产生的区块的竞争引起的，所以最新的几个区块是「不稳定的」，如果本次同步的区块数量较多（也就是我们同步时消耗的时间比较长）（在这里「本次同步的区数数量较多」的表现是新收到的区块的最高高度与本地数据库中的最高高度的差距大于 <code>reorgProtThreshold</code>），那么在同步时可以先避免同步最新区块，这就是 <code>reorgProtThreshold</code> 和 <code>reorgProtHeaderDelay</code> 这个变量的由来。</p><p>至此，<code>Downloader.fetchHeaders</code> 方法就结束了，所有的区块头也就同步完成了。在上面我们提到填充<code>skeleton</code>的时候，是由<code>fillHeaderSkeleton</code>函数来完成，接下来就要细讲填充<code>skeleton</code>的细节。</p><hr><h3 id="fillheaderskeleton" tabindex="-1"><a class="header-anchor" href="#fillheaderskeleton" aria-hidden="true">#</a> fillHeaderSkeleton</h3><p>首先我们知道以太坊在同步区块时，先确定要下载的区块的高度区间，然后将这个区间按 <code>MaxHeaderFetch</code> 切分成很多组，每一组的最后一个区块组成了 「skeleton」（最后一组不满 <code>MaxHeaderFetch</code> 个区块不算作一组）。不清楚的可以查看上面的图。</p><p>①：将一批<code>header</code>检索任务添加到队列中，以填充<code>skeleton</code>。</p><p>这个函数参照上面<strong>queue详解</strong>的分析</p><blockquote><p>func (q *queue) ScheduleSkeleton(from uint64, skeleton []*types.Header) {}</p></blockquote><p>②：调用<code>fetchParts</code> 获取<code>headers</code>数据</p><p><code>fetchParts</code>是很核心的函数，下面的<code>Fetchbodies</code>和<code>FetchReceipts</code>都会调用。先来大致看一下<code>fetchParts</code>的结构：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">fetchParts</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">for</span> <span class="token punctuation">{</span>
  <span class="token keyword">select</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
  <span class="token keyword">case</span> packet <span class="token operator">:=</span> <span class="token operator">&lt;-</span>deliveryCh<span class="token punctuation">:</span>
  <span class="token keyword">case</span> cont <span class="token operator">:=</span> <span class="token operator">&lt;-</span>wakeCh<span class="token punctuation">:</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>update<span class="token punctuation">:</span>
  <span class="token operator">...</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简化下来就是这 5 个<code>channel</code>在处理，前面 4 个<code>channel</code>负责循环等待消息，<code>update</code>用来等待其他 4 个<code>channel</code>的通知来处理逻辑，先分开分析一个个的<code>channel</code>。</p><p>2.1 deliveryCh 传递下载的数据</p><p><code>deliveryCh</code> 作用就是传递下载的数据，当有数据被真正下载下来时，就会给这个 <code>channel</code> 发消息将数据传递过来。这个 channel 对应的分别是：<code>d.headerCh</code>、<code>d.bodyCh</code>、<code>d.receiptCh</code>，而这三个 <code>channel</code> 分别在以下三个方法中被写入数据：<code>DeliverHeaders</code>、<code>DeliverBodies</code>、<code>DeliverReceipts</code>。 看下<code>deliveryCh</code>如何处理数据：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> packet <span class="token operator">:=</span> <span class="token operator">&lt;-</span>deliveryCh<span class="token punctuation">:</span>
   <span class="token keyword">if</span> peer <span class="token operator">:=</span> d<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Peer</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">PeerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> peer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    accepted<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">deliver</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token comment">//传递接收到的数据块并检查链有效性</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> errInvalidChain <span class="token punctuation">{</span>
     <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> errStaleDelivery <span class="token punctuation">{</span>
     <span class="token function">setIdle</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> accepted<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> packet<span class="token punctuation">.</span><span class="token function">Items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
     <span class="token operator">...</span>
    <span class="token keyword">case</span> err <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
    <span class="token operator">...</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">select</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> update <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
   <span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>收到下载数据后判断节点是否有效，如果节点没有被移除，则会通过<code>deliver</code>传递接收到的下载数据。如果没有任何错误，则通知<code>update</code>处理。</p><p>要注意<code>deliver</code>是一个回调函数，它调用了 queue 对象的 Deliver 方法：<code>queue.DeliverHeaders</code>、<code>queue.DeliverBodies</code>、<code>queue.DeliverReceipts</code>，在收到下载数据就会调用此回调函数（<strong>queue相关函数分析参照queue详解部分</strong>）。</p><p>在上面处理错误部分，有一个<code>setIdle</code>函数，它也是回调函数，其实现都是调用了 <code>peerConnection</code> 对象的相关方法：<code>SetHeadersIdle</code>、<code>SetBodiesIdle</code>、<code>SetReceiptsIdle</code>。它这个函数是指某些节点针对某类数据是空闲的，比如<code>header</code>、<code>bodies</code>、<code>receipts</code>，如果需要下载这几类数据，就可以从空闲的节点下载这些数据。</p><p>2.2 <code>wakeCh</code> 唤醒<code>fetchParts</code> ，下载新数据或下载已完成</p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>case cont := &lt;-wakeCh:
   if !cont {
    finished = true
   }
   select {
   case update &lt;- struct{}{}:
   default:
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们通过调用fetchParts传递的参数知道，<code>wakeCh</code> 的值其实是 <code>queue.headerContCh</code>。在 <code>queue.DeliverHeaders</code> 中发现所有需要下戴的 header 都下载完成了时，才会发送 false 给这个 channel。<code>fetchParts</code> 在收到这个消息时，就知道没有 header 需要下载了。代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token function">DeliverHeaders</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>headerTaskPool<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        q<span class="token punctuation">.</span>headerContCh <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样如此，<code>body</code>和<code>receipt</code>则是<code>bodyWakeCh</code>和<code>receiptWakeCh</code>，在 <code>processHeaders</code> 中，如果所有 <code>header</code> 已经下载完成了，那么发送 <code>false</code> 给这两个 <code>channel</code>，通知它们没有新的 <code>header</code> 了。 <code>body</code> 和 <code>receipt</code> 的下载依赖于 <code>header</code>,需要 <code>header</code> 先下载完成才能下载，所以对于下戴 <code>body</code> 或 <code>receipt</code> 的 <code>fetchParts</code> 来说，收到这个 <code>wakeCh</code> 就代表不会再有通知让自己下载数据了.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">processHeaders</span><span class="token punctuation">(</span>origin <span class="token builtin">uint64</span><span class="token punctuation">,</span> pivot <span class="token builtin">uint64</span><span class="token punctuation">,</span> td <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        <span class="token keyword">select</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> headers <span class="token operator">:=</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>headerProcCh<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>bodyWakeCh<span class="token punctuation">,</span> d<span class="token punctuation">.</span>receiptWakeCh<span class="token punctuation">}</span> <span class="token punctuation">{</span>
                    <span class="token keyword">select</span> <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token boolean">false</span><span class="token punctuation">:</span>
                    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
      <span class="token operator">...</span>
            <span class="token punctuation">}</span>
            <span class="token operator">...</span>
            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>bodyWakeCh<span class="token punctuation">,</span> d<span class="token punctuation">.</span>receiptWakeCh<span class="token punctuation">}</span> <span class="token punctuation">{</span>
                <span class="token keyword">select</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">:</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.3 ticker 负责周期性的激活 <code>update</code>进行消息处理</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
   <span class="token keyword">select</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> update <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
   <span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4 <code>update</code> （处理此前几个<code>channel</code>的数据）(<strong>重要</strong>)</p><p>2.4.1 判断是否有效节点，并获取超时数据的信息</p><p>获取超时数据的节点ID和数据数量，如果大于两个的话，就将这个节点设置为空闲状态(<code>setIdle</code>)，小于两个的话直接断开节点连接。</p><p><code>expire</code> 是一个回调函数，会返回当前所有的超时数据信息。这个函数的实际实现都是调用了 <code>queue</code> 对象的 <code>Expire</code> 方法：<code>ExpireHeaders</code>、<code>ExpireBodies</code>、<code>ExpireReceipts</code>,此函数会统计当前正在下载的数据中，起始时间与当前时间的差距超过给定阈值（<code>downloader.requestTTL</code> 方法的返回值）的数据，并将其返回。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> d<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> errNoPeers
   <span class="token punctuation">}</span>
<span class="token keyword">for</span> pid<span class="token punctuation">,</span> fails <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> peer <span class="token operator">:=</span> d<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Peer</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span> peer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> fails <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token function">setIdle</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token operator">...</span>
      <span class="token keyword">if</span> d<span class="token punctuation">.</span>dropPeer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       d<span class="token punctuation">.</span><span class="token function">dropPeer</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
       <span class="token operator">...</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4.2 处理完超时数据，判断是否还有下载的数据</p><p>如果没有其他可下载的内容，请等待或终止，这里<code>pending()</code>和<code>inFlight()</code>都是回调函数，<code>pending</code>分别对应了<code>queue.PendingHeaders</code>、<code>queue.PendingBlocks</code>、<code>queue.PendingReceipts</code>,用来返回各自要下载的任务数量。<code>inFlight()</code>分别对应了<code>queue.InFlightHeaders</code>、<code>queue.InFlightBlocks</code>、<code>queue.InFlightReceipts</code>,用来返回正在下载的数据数量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token function">pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">inFlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> finished <span class="token punctuation">{</span>
    <span class="token operator">...</span>
     <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">break</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4.3 使用空闲节点，调用<code>fetch</code>函数发送数据请求</p><p><code>Idle()</code>回调函数在上面已经提过了，<code>throttle()</code>回调函数则分别对<code>queue.ShouldThrottleBlocks</code>、<code>queue.ShouldThrottleReceipts</code>,用来表示是否应该下载<code>bodies</code>或者<code>receipts</code>。</p><p><code>reserve</code>函数分别对应<code>queue.ReserveHeaders</code>、<code>queue.ReserveBodies</code>、<code>queue.ReserveReceipts</code>,用来从从下载任务中选取一些可以下载的任务，并构造一个 <code>fetchRequest</code> 结构。它还返回一个 <code>process</code> 变量，标记着是否有空的数据正在被处理。比如有可能某区块中未包含任何一条交易，因此它的 <code>body</code> 和 <code>receipt</code> 都是空的，这种数据其实是不需要下载的。在 <code>queue</code> 对象的 <code>Reserve</code> 方法中，会对这种情况进行识别。如果遇到空的数据，这些数据会被直接标记为下载成功。在方法返回时，就将是否发生过「直接标记为下载成功」的情况返回。</p><p><code>capacity</code>回调函数分别对应<code>peerConnection.HeaderCapacity</code>、<code>peerConnection.BlockCapacity</code>、<code>peerConnection.ReceiptCapacity</code>,用来决定下载需要请求数据的个数。</p><p><code>fetch</code>回调函数分别对应<code>peer.FetchHeaders</code>、<code>peer.Fetchbodies</code>、<code>peer.FetchReceipts</code>,用来发送获取各类数据的请求。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>progressed<span class="token punctuation">,</span> throttled<span class="token punctuation">,</span> running <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">inFlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   idles<span class="token punctuation">,</span> total <span class="token operator">:=</span> <span class="token function">idle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> idles <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token operator">...</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token function">pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
     <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    request<span class="token punctuation">,</span> progress<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">reserve</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> <span class="token function">capacity</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> progress <span class="token punctuation">{</span>
     progressed <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
        <span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>From <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token operator">!</span>progressed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>throttled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>running <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>idles<span class="token punctuation">)</span> <span class="token operator">==</span> total <span class="token operator">&amp;&amp;</span> <span class="token function">pending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> errPeersUnavailable
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来概括这段代码就是：使用空闲节点下载数据，判断是否需要暂停，或者数据是否已经下载完成；之后选取数据进行下载；最后，如果没有遇到空块需要下载、且没有暂停下载和所有有效节点都空闲和确实有数据需要下载，但下载没有运行起来，就返回 <code>errPeersUnavailable</code> 错误。</p><p>到此为止<code>fetchParts</code>函数就分析的差不多了。里面涉及的跟<code>queue.go</code>相关的一些函数都在<strong>queue详解</strong>小节里介绍了。</p><hr><h3 id="processheaders" tabindex="-1"><a class="header-anchor" href="#processheaders" aria-hidden="true">#</a> processHeaders</h3><p>通过<code>headerProcCh</code>接收<code>header</code>数据，并处理的过程是在<code>processHeaders</code>函数中完成的。整个处理过程集中在：<code>case headers := &lt;-d.headerProcCh中</code>:</p><p>①：如果<code>headers</code>的长度为0 ，则会有以下操作：</p><p>1.1 通知所有人<code>header</code>已经处理完毕</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>bodyWakeCh<span class="token punctuation">,</span> d<span class="token punctuation">.</span>receiptWakeCh<span class="token punctuation">}</span> <span class="token punctuation">{</span>
     <span class="token keyword">select</span> <span class="token punctuation">{</span>
     <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token boolean">false</span><span class="token punctuation">:</span>
     <span class="token keyword">case</span> <span class="token operator">&lt;-</span>d<span class="token punctuation">.</span>cancelCh<span class="token punctuation">:</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.2 若没有检索到任何<code>header</code>，说明他们的<code>TD</code>小于我们的，或者已经通过我们的<code>fetcher</code>模块进行了同步。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> d<span class="token punctuation">.</span>mode <span class="token operator">!=</span> LightSync <span class="token punctuation">{</span>
     head <span class="token operator">:=</span> d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">CurrentBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token keyword">if</span> <span class="token operator">!</span>gotHeaders <span class="token operator">&amp;&amp;</span> td<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">GetTd</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> head<span class="token punctuation">.</span><span class="token function">NumberU64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errStallingPeer
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.3 如果是<code>fast</code>或者<code>light</code> 同步，确保传递了<code>header</code></p><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>if d.mode == FastSync || d.mode == LightSync {
     head := d.lightchain.CurrentHeader()
     if td.Cmp(d.lightchain.GetTd(head.Hash(), head.Number.Uint64())) &gt; 0 {
      return errStallingPeer
     }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：如果<code>headers</code>的长度大于 0</p><p>2.1 如果是fast或者light 同步，调用**ightchain.InsertHeaderChain()**写入<code>header</code>到<code>leveldb</code>数据库；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> d<span class="token punctuation">.</span>mode <span class="token operator">==</span> FastSync <span class="token operator">||</span> d<span class="token punctuation">.</span>mode <span class="token operator">==</span> LightSync <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
  d<span class="token punctuation">.</span>lightchain<span class="token punctuation">.</span><span class="token function">InsertHeaderChain</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> frequency<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 如果是<code>fast</code>或者<code>full sync</code>模式，则调用 d.queue.Schedule进行内容(body和receipt)检索。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> d<span class="token punctuation">.</span>mode <span class="token operator">==</span> FullSync <span class="token operator">||</span> d<span class="token punctuation">.</span>mode <span class="token operator">==</span> FastSync <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  inserts <span class="token operator">:=</span> d<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> origin<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：如果找到更新的块号，则要发信号通知新任务</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> d<span class="token punctuation">.</span>syncStatsChainHeight <span class="token operator">&lt;</span> origin <span class="token punctuation">{</span>
    d<span class="token punctuation">.</span>syncStatsChainHeight <span class="token operator">=</span> origin <span class="token operator">-</span> <span class="token number">1</span>
   <span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>bodyWakeCh<span class="token punctuation">,</span> d<span class="token punctuation">.</span>receiptWakeCh<span class="token punctuation">}</span> <span class="token punctuation">{</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">:</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此处理<code>Headers</code>的分析就完成了。</p><hr><h2 id="同步bodies" tabindex="-1"><a class="header-anchor" href="#同步bodies" aria-hidden="true">#</a> 同步bodies</h2><p>同步<code>bodies</code> 则是由<code>fetchBodies</code>函数完成的。</p><h3 id="fetchbodies" tabindex="-1"><a class="header-anchor" href="#fetchbodies" aria-hidden="true">#</a> fetchBodies</h3><p>同步bodies的过程跟同步header类似，大致讲下步骤：</p><ol><li>调用<code>fetchParts</code></li><li><code>ReserveBodies</code>()从<code>bodyTaskPool</code>中取出要同步的<code>body</code>；</li><li>调用<code>fetch</code>，也就是调用这里的<code>FetchBodies</code>从节点获取<code>body</code>，发送<code>GetBlockBodiesMsg</code>消息；</li><li>收到<code>bodyCh</code>的数据后，调用<code>deliver</code>函数，将Transactions和<code>Uncles</code>写入<code>resultCache</code>。</li></ol><hr><h2 id="同步receipts" tabindex="-1"><a class="header-anchor" href="#同步receipts" aria-hidden="true">#</a> 同步Receipts</h2><h3 id="fetchreceipts" tabindex="-1"><a class="header-anchor" href="#fetchreceipts" aria-hidden="true">#</a> fetchReceipts</h3><p>同步<code>receipts</code>的过程跟同步<code>header</code>类似，大致讲下步骤：</p><ol><li>调用<code>fetchParts</code>()</li><li><code>ReserveBodies</code>()从<code>ReceiptTaskPool</code>中取出要同步的<code>Receipt</code></li><li>调用这里的<code>FetchReceipts</code>从节点获取<code>receipts</code>，发送<code>GetReceiptsMsg</code>消息；</li><li>收到<code>receiptCh</code>的数据后，调用<code>deliver</code>函数，将<code>Receipts</code>写入<code>resultCache</code>。</li></ol><hr><h2 id="同步状态" tabindex="-1"><a class="header-anchor" href="#同步状态" aria-hidden="true">#</a> 同步状态</h2><p>这里我们讲两种模式下的状态同步：</p><ul><li><strong>fullSync</strong>: <code>processFullSyncContent</code>，<code>full</code>模式下<code>Receipts</code>没有缓存到<code>resultCache</code>中，直接先从缓存中取出<code>body</code>数据，然后执行交易生成状态，最后写入区块链。</li><li><strong>fastSync</strong>:<code>processFastSyncContent</code>：fast模式的Receipts、Transaction、Uncles都在resultCache中，所以还需要下载&quot;state&quot;，进行校验，再写入区块链。</li></ul><p>接下来大致的讨论下这两种方式。</p><h3 id="processfullsynccontent" tabindex="-1"><a class="header-anchor" href="#processfullsynccontent" aria-hidden="true">#</a> processFullSyncContent</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">processFullSyncContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">for</span> <span class="token punctuation">{</span>
  results <span class="token operator">:=</span> d<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Results</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">importBlockResults</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">...</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Downloader<span class="token punctuation">)</span> <span class="token function">importBlockResults</span><span class="token punctuation">(</span>results <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>fetchResult<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token operator">...</span>
 <span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
 blocks <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>types<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> result <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">{</span>
  blocks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">NewBlockWithHeader</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Header<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithBody</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Transactions<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Uncles<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> index<span class="token punctuation">,</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span>blockchain<span class="token punctuation">.</span><span class="token function">InsertChain</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接从<code>result</code>中获取数据并生成<code>block</code>，直接插入区块链中，就结束了。</p><hr><h3 id="processfastsynccontent" tabindex="-1"><a class="header-anchor" href="#processfastsynccontent" aria-hidden="true">#</a> processFastSyncContent</h3><p>fast模式同步状态内容比较多，大致也就如下几部分，我们开始简单分析以下。</p><p>①：下载最新的区块状态</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>sync <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">syncState</span><span class="token punctuation">(</span>latest<span class="token punctuation">.</span>Root<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们直接用一张图来表示整个大致流程：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxk6y6zhjj31180jstcl.jpg" alt="image-20201223100153241" loading="lazy"></p><p>具体的代码读者自己翻阅，大致就是这么个简单过程。</p><p>②：计算出pivot块</p><p><code>pivot</code>为<code>latestHeight - 64</code>，调用<code>splitAroundPivot</code>()方法以pivot为中心，将<code>results</code>分为三个部分：<code>beforeP</code>，<code>P</code>，<code>afterP</code>；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pivot <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> height <span class="token operator">:=</span> latest<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token function">Uint64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> height <span class="token operator">&gt;</span> <span class="token function">uint64</span><span class="token punctuation">(</span>fsMinFullBlocks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pivot <span class="token operator">=</span> height <span class="token operator">-</span> <span class="token function">uint64</span><span class="token punctuation">(</span>fsMinFullBlocks<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>P<span class="token punctuation">,</span> beforeP<span class="token punctuation">,</span> afterP <span class="token operator">:=</span> <span class="token function">splitAroundPivot</span><span class="token punctuation">(</span>pivot<span class="token punctuation">,</span> results<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③： 对<code>beforeP</code>的部分调用<code>commitFastSyncData</code>，将<code>body</code>和<code>receipt</code>都写入区块链</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>d<span class="token punctuation">.</span><span class="token function">commitFastSyncData</span><span class="token punctuation">(</span>beforeP<span class="token punctuation">,</span> sync<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④：对<strong>P</strong>的部分更新状态信息为<code>P block</code>的状态，把<strong>P</strong>对应的<strong>result</strong>（包含<strong>body</strong>和<strong>receipt</strong>）调用<strong>commitPivotBlock</strong>插入本地区块链中，并调用<strong>FastSyncCommitHead</strong>记录这个<strong>pivot</strong>的<strong>hash</strong>值，存在<strong>downloader</strong>中，标记为快速同步的最后一个区块<strong>hash</strong>值；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">commitPivotBlock</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⑤：对<code>afterP</code>调用<code>d.importBlockResults</code>，将<code>body</code>插入区块链，而不插入<code>receipt</code>。因为是最后 64 个区块，所以此时数据库中只有<code>header</code>和<code>body</code>，没有<code>receipt</code>和状态，要通过<code>fullSync</code>模式进行最后的同步。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">importBlockResults</span><span class="token punctuation">(</span>afterP<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此为止整个Downloader同步完成了。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,101),f={href:"https://mindcarver.cn",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/ethereum/go-ethereum/pull/1889",target:"_blank",rel:"noopener noreferrer"},w={href:"https://yangzhe.me/2019/05/09/ethereum-downloader/#fetchparts",target:"_blank",rel:"noopener noreferrer"};function q(P,x){const a=l("ExternalLinkIcon");return t(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("图片只是大概的描述一下，实际还是要结合代码，"),d,s("，"),n("a",r,[s("https://github.com/blockchainGuide/"),e(a)])]),k]),v,n("p",null,[s("这段代码后来才加上的，其 commit 的记录在"),n("a",m,[s("这里"),e(a)]),s("，而 「pull request」 在"),n("a",b,[s("这里"),e(a)]),s("。从 「pull request」 中作者的解释我们可以了解这段代码的逻辑和功能：这个修改主要是为了解决经常出现的 「invalid hash chain」 错误，出现这个错误的原因是因为在我们上一次从远程节点获取到一些区块并将它们加入到本地的主链的过程中，远程节点发生了 reorg 操作（参见"),n("a",h,[s("这篇文章"),e(a)]),s("里关于「主链与侧链」的介绍 ）；当我们再次根据高度请求新的区块时，对方返回给我们的是它的新的主链上的区块，而我们没有这个链上的历史区块，因此在本地写入区块时就会返回 「invalid hash chain」 错误。")]),g,n("blockquote",null,[n("p",null,[n("a",f,[s("https://mindcarver.cn"),e(a)])]),n("p",null,[n("a",y,[s("https://github.com/ethereum/go-ethereum/pull/1889"),e(a)])]),n("p",null,[n("a",w,[s("https://yangzhe.me/2019/05/09/ethereum-downloader/#fetchparts"),e(a)])])])])}const R=p(i,[["render",q],["__file","7.etheric_fang_downloader_synchronization_of_the_source_code_analysis.html.vue"]]);export{R as default};
