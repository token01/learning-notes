import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as t,e,r as l}from"./app.7b6c8628.js";const i={},u=e(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>编程喵🐱实战项目中需要做一个定时发布文章的功能，于是我就很自然地想到了 Quartz，这是一个老而弥坚的开源任务调度框架。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-39e31fbf-5546-4627-9d49-651beeb961c1.png" alt="" loading="lazy"></p><p>记得我在 14 年开发大宗期货交易平台的时候就用到了它，每天凌晨定时需要统计一波交易数据，生成日报报表，「配合 Cron 表达式」（上一节有讲）用起来非常自洽。</p><p>可惜后来平台稳定了，新的政策出来了，直接把大宗期货交易灭了。于是我发财的机会也随着破灭了。想想都觉得可惜，哈哈哈。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-573fa3b6-551b-418d-9616-3066bb4f75d2.png" alt="" loading="lazy"></p><p>时光荏苒，Quartz 发展到现在，已经可以和 Spring Boot 项目无缝衔接了，用起来也比之前在 Spring 项目中更丝滑。</p><h3 id="关于-quartz" tabindex="-1"><a class="header-anchor" href="#关于-quartz" aria-hidden="true">#</a> 关于 Quartz</h3><p>Quartz 是一款功能强大的开源的任务调度框架，在 GitHub 上已经累计有 5k+ 的 star 了。小到单机应用，大到分布式，都可以整合 Quartz。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-ea2d0b63-4b99-4654-a03d-45023a741e88.png" alt="" loading="lazy"></p><p>在使用 Quartz 之前，让我们先来搞清楚 4 个核心概念：</p><ul><li>Job：任务，要执行的具体内容。</li><li>JobDetail：任务详情，Job 是它要执行的内容，同时包含了这个任务调度的策略和方案。</li><li>Trigger：触发器，可以通过 Cron 表达式来指定任务执行的时间。</li><li>Scheduler：调度器，可以注册多个 JobDetail 和 Trigger，用来调度、暂停和删除任务。</li></ul><h3 id="整合-quartz" tabindex="-1"><a class="header-anchor" href="#整合-quartz" aria-hidden="true">#</a> 整合 Quartz</h3><p>Quartz 存储任务的方式有两种，一种是使用内存，另外一种是使用数据库。内存在程序重启后就丢失了，所以我们这次使用数据库的方式来进行任务的持久化。</p><p>第一步，在 pom.xml 文件中添加 Quartz 的 starter。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;
    &lt;version&gt;2.6.7&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 application.yml 添加 Quartz 相关配置，配置说明直接看注释。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring:
  quartz:
    job-store-type: jdbc # 默认为内存 memory 的方式，这里我们使用数据库的形式
    wait-for-jobs-to-complete-on-shutdown: true # 关闭时等待任务完成
    overwrite-existing-jobs: true # 可以覆盖已有的任务
    jdbc:
      initialize-schema: never # 是否自动使用 SQL 初始化 Quartz 表结构
    properties: # quartz原生配置
      org:
        quartz:
          scheduler:
            instanceName: scheduler # 调度器实例名称
            instanceId: AUTO # 调度器实例ID自动生成
          # JobStore 相关配置
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 使用完全兼容JDBC的驱动
            tablePrefix: QRTZ_ # Quartz 表前缀
            useProperties: false # 是否将JobDataMap中的属性转为字符串存储
          # 线程池相关配置
          threadPool:
            threadCount: 25 # 线程池大小。默认为 10 。
            threadPriority: 5 # 线程优先级
            class: org.quartz.simpl.SimpleThreadPool # 指定线程池实现类，对调度器提供固定大小的线程池
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quartz 默认使用的是内存的方式来存储任务，为了持久化，我们这里改为 JDBC 的形式，并且指定 <code>spring.quartz.jdbc.initialize-schema=never</code>，这样我们可以手动创建数据表。因为该值的另外两个选项ALWAYS和EMBEDDED都不太符合我们的要求：</p><ul><li>ALWAYS：每次都初始化</li><li>EMBEDDED：只初始化嵌入式数据库，比如说 H2、HSQL</li></ul><p>那手动创建数据表的 SQL 语句去哪里找呢？</p>`,21),r={href:"https://github.com/quartz-scheduler/quartz/tree/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>为了方便小伙伴们下载，我把它放在了本教程的源码里面了：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-407d9133-7487-444e-83dd-d11524bfd748.png" alt="" loading="lazy"></p><p>如果使用 Intellij IDEA 旗舰版的话，首次打开 SQL 文件的时候会提示你指定数据源。在上图中，我配置了本地的 MySQL 数据库，导入成功后可以在数据库中查看到以下数据表：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-277dc414-4d2d-4a68-91d5-10332998c8bf.png" alt="" loading="lazy"></p><p>Quartz数据库核心表如下：</p><table><thead><tr><th>Table Name</th><th>Description</th></tr></thead><tbody><tr><td>QRTZ_CALENDARS</td><td>存储Quartz的Calendar信息</td></tr><tr><td>QRTZ_CRON_TRIGGERS</td><td>存储CronTrigger，包括Cron表达式和时区信息</td></tr><tr><td>QRTZ_FIRED_TRIGGERS</td><td>存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</td></tr><tr><td>QRTZ_PAUSED_TRIGGER_GRPS</td><td>存储已暂停的Trigger组的信息</td></tr><tr><td>QRTZ_SCHEDULER_STATE</td><td>存储少量的有关Scheduler的状态信息，和别的Scheduler实例</td></tr><tr><td>QRTZ_LOCKS</td><td>存储程序的悲观锁的信息</td></tr><tr><td>QRTZ_JOB_DETAILS</td><td>存储每一个已配置的Job的详细信息</td></tr><tr><td>QRTZ_JOB_LISTENERS</td><td>存储有关已配置的JobListener的信息</td></tr><tr><td>QRTZ_SIMPLE_TRIGGERS</td><td>存储简单的Trigger，包括重复次数、间隔、以及已触的次数</td></tr><tr><td>QRTZ_BLOG_TRIGGERS</td><td>Trigger作为Blob类型存储</td></tr><tr><td>QRTZ_TRIGGER_LISTENERS</td><td>存储已配置的TriggerListener的信息</td></tr><tr><td>QRTZ_TRIGGERS</td><td>存储已配置的Trigger的信息</td></tr></tbody></table><p>剩下的就是对 Quartz 的 scheduler、jobStore 和 threadPool 配置。</p><p>第三步，创建任务调度的接口 IScheduleService，定义三个方法，分别是通过 Cron 表达式来调度任务、指定时间来调度任务，以及取消任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IScheduleService</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 通过 Cron 表达式来调度任务
     */</span>
    <span class="token class-name">String</span> <span class="token function">scheduleJob</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> jobBeanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 指定时间来调度任务
     */</span>
    <span class="token class-name">String</span> <span class="token function">scheduleFixTimeJob</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> jobBeanClass<span class="token punctuation">,</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 取消定时任务
     */</span>
    <span class="token class-name">Boolean</span> <span class="token function">cancelScheduleJob</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步，创建任务调度业务实现类 ScheduleServiceImpl，通过Scheduler、CronTrigger、JobDetail的API来实现对应的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IScheduleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultGroup <span class="token operator">=</span> <span class="token string">&quot;default_group&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">scheduleJob</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> jobBeanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> cron<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> jobName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fastUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>jobBeanClass<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> defaultGroup<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建触发器，指定任务执行时间</span>
        <span class="token class-name">CronTrigger</span> cronTrigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> defaultGroup<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调度器进行任务调度</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;任务调度执行失败{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> jobName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">scheduleFixTimeJob</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span> jobBeanClass<span class="token punctuation">,</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//日期转CRON表达式</span>
        <span class="token class-name">String</span> startCron <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d %d %d ? %d&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">minute</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">dayOfMonth</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobBeanClass<span class="token punctuation">,</span> startCron<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">cancelScheduleJob</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 暂停触发器</span>
            scheduler<span class="token punctuation">.</span><span class="token function">pauseTrigger</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TriggerKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> defaultGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 移除触发器中的任务</span>
            scheduler<span class="token punctuation">.</span><span class="token function">unscheduleJob</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TriggerKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> defaultGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 删除任务</span>
            scheduler<span class="token punctuation">.</span><span class="token function">deleteJob</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> defaultGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;任务取消失败{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> success<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步，定义好要执行的任务，继承 QuartzJobBean 类，实现 executeInternal 方法，这里只定义一个定时发布文章的任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublishPostJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IScheduleService</span> scheduleService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IPostsService</span> postsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JobDataMap</span> jobDataMap <span class="token operator">=</span> jobDetail<span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> data <span class="token operator">=</span> jobDataMap<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;定时发布文章操作：{}&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取文章的 ID后获取文章，更新文章为发布的状态，还有发布的时间</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> postsService<span class="token punctuation">.</span><span class="token function">updatePostByScheduler</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//完成后删除触发器和任务</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务执行成功，开始清除定时任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scheduleService<span class="token punctuation">.</span><span class="token function">cancelScheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第六步，发布文章的接口里 PostsServiceImpl 添加定时发布的任务调度方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostsServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostsMapper</span><span class="token punctuation">,</span> <span class="token class-name">Posts</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IPostsService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleScheduledAfter</span><span class="token punctuation">(</span><span class="token class-name">Posts</span> posts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文章已经保存为草稿了，并且拿到了文章 ID</span>
        <span class="token comment">// 调用定时任务</span>
        <span class="token class-name">String</span> jobName <span class="token operator">=</span> scheduleService<span class="token punctuation">.</span><span class="token function">scheduleFixTimeJob</span><span class="token punctuation">(</span><span class="token class-name">PublishPostJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> posts<span class="token punctuation">.</span><span class="token function">getPostDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> posts<span class="token punctuation">.</span><span class="token function">getPostsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务{}开始执行&quot;</span><span class="token punctuation">,</span> jobName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，我们现在启动服务，通过Swagger 来测试一下，注意设置文章的定时发布时间。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-12f8b138-33db-4faa-b31f-1d1b3fa5afe9.png" alt="" loading="lazy"></p><p>查看 Quartz 的数据表 qrtz_cron_triggers，发现任务已经添加进来了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-0acacdc6-3cf3-4042-a784-388bb10f0368.png" alt="" loading="lazy"></p><p>qrtz_job_details 表里也可以查看具体的任务详情。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-ef1bd1b0-0f13-4dde-a84b-a1ae20b78430.png" alt="" loading="lazy"></p><p>文章定时发布的时间到了之后，在日志里也可以看到 Quartz 的执行日志。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/quartz-45abe530-05fe-498b-b32a-0d2bc5bd6996.png" alt="" loading="lazy"></p><p>再次查看 Quartz 数据表 qrtz_cron_triggers 和 qrtz_job_details 的时候，也会发现定时任务已经清除了。</p><p>整体上来说，Spring Boot 整合 Quartz还是非常丝滑的，配置少，步骤清晰，比 Spring Task 更强大，既能针对内存也能持久化，所以大家在遇到定时任务的时候完全可以尝试一把。</p><p>完整的功能在编程喵实战项目中已经实现了，可以把编程喵导入到本地尝试一下。</p><h3 id="业务梳理" tabindex="-1"><a class="header-anchor" href="#业务梳理" aria-hidden="true">#</a> 业务梳理</h3><p>简单来梳理一下编程喵定时发布文章的业务。</p><p>1）用户在发布文章的时候可以选择定时发布，如果选择定时发布，那么就要设置定时发布的时间，暂时规定至少十分钟以后可以定时。</p><p>2）当管理端用户选择了定时发布，那么在保存文章的时候，文章状态要先设置为草稿状态，对前端用户是不可见的状态。</p><hr>`,31),k={href:"https://tobebetterjavaer.com/zhishixingqiu/",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"编程喵",-1),m=n("h3",{id:"源码路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码路径","aria-hidden":"true"},"#"),s(" 源码路径")],-1),b={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/itwanger/codingmore-learning/tree/main/codingmore-quartz",target:"_blank",rel:"noopener noreferrer"},h=n("hr",null,null,-1);function f(S,j){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("GitHub 地址："),n("a",r,[s("https://github.com/quartz-scheduler/quartz/tree/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore"),t(a)])])]),d,n("p",null,[s("更多内容，只针对《Java 程序员进阶之路》星球用户开放，需要的小伙伴可以"),n("a",k,[s("戳链接🔗"),t(a)]),s("加入我们的星球，一起学习，一起卷。。"),v,s("🐱是一个 Spring Boot+Vue 的前后端分离项目，融合了市面上绝大多数流行的技术要点。通过学习实战项目，你可以将所学的知识通过实践进行检验、你可以拓宽自己的技术边界，你可以掌握一个真正的实战项目是如何从 0 到 1 的。")]),m,n("blockquote",null,[n("ul",null,[n("li",null,[s("编程喵："),n("a",b,[s("https://github.com/itwanger/coding-more"),t(a)])]),n("li",null,[s("codingmore-quartz："),n("a",g,[s("https://github.com/itwanger/codingmore-learning"),t(a)])])])]),h])}const _=p(i,[["render",f],["__file","quartz.html.vue"]]);export{_ as default};
