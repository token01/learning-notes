import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.d3a29ae6.js";const p="/assets/mrs_excel.180a9e43.png",e={},o=t(`<h1 id="_10-倍程序员-⭐脚本的魅力-内含-js-写爬虫、python-骚操作等实用代码" tabindex="-1"><a class="header-anchor" href="#_10-倍程序员-⭐脚本的魅力-内含-js-写爬虫、python-骚操作等实用代码" aria-hidden="true">#</a> [10 倍程序员] ⭐脚本的魅力，内含 js 写爬虫、python 骚操作等实用代码</h1><h2 id="零、内容简介" tabindex="-1"><a class="header-anchor" href="#零、内容简介" aria-hidden="true">#</a> 零、内容简介</h2><p>将脚本用好能给工作带来事半功倍的效果，本文的内容主要涉及三个脚本工具：<code>js</code>、<code>awk</code>、<code>python</code>， 主题如下：</p><ul><li>使用 <code>js</code> 在浏览器控制台写爬虫。</li><li>使用 <code>shell</code> 统计数据。</li><li>使用 <code>python</code> 进行 <code>redis</code>、<code>rabbitmq</code> 运维。</li><li>使用 <code>python</code> 生成 <code>mysql 数据字典</code>。</li></ul><p>话不多说，直接进入主题。</p><h2 id="一、使用-js-在浏览器控制台写爬虫" tabindex="-1"><a class="header-anchor" href="#一、使用-js-在浏览器控制台写爬虫" aria-hidden="true">#</a> 一、使用 js 在浏览器控制台写爬虫</h2><h3 id="_1-1-抓取数据" tabindex="-1"><a class="header-anchor" href="#_1-1-抓取数据" aria-hidden="true">#</a> 1.1 抓取数据</h3><p>使用 js 在浏览器控制台写爬虫的优势是不需要模拟浏览器请求、登录信息、基本不会被反爬虫技术禁止访问等，劣势是数据不易保存，如果爬虫是一次性的，且抓取的数据不多，使用 js 可以在几分钟就写好爬虫，至于获取的数据可以采取复制为 json 的方式导出，json 数据可以再进一步转换为易于阅读的 excel 等数据，读完这个章节你将掌握如何把复杂 json 转换为 excel 平面数据。</p><p>下面以获取某网站 gitlab 合并请求数据为例讲解整个数据抓取流程。</p><p>需求是获取所有 gitlab 项目的合并请求数据，项目 id 列表事先已经知道，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 项目id</span>

<span class="token keyword">var</span> mrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数据结果</span>

<span class="token keyword">function</span> <span class="token function">mr</span><span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> ids<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span>
      <span class="token string">&quot;https://xxx.com/gitlab/projects/&quot;</span> <span class="token operator">+</span>
        ids<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span>
        <span class="token string">&quot;/getMergeRequests?order_by=updated_at&amp;page=1&amp;per_page=100&amp;state=all&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;same-origin&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          mrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>r<span class="token punctuation">.</span>result<span class="token punctuation">.</span>merge_requests<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mr</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为了让请求串行执行，所以这里采用回调递归调用</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">mr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开始抓取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>短短几行代码就完成了数据的抓取，整个编码过程只需要 <code>5</code> 分钟左右。</p><p>抓取之后，数据都存储在 mrs 变量中，直接在控制台输入 <code>mrs</code> ，右键选择拷贝 json 数据，新建一个 <code>mrs.json</code> 文件将其保存起来即可。</p><h3 id="_1-2-转换数据" tabindex="-1"><a class="header-anchor" href="#_1-2-转换数据" aria-hidden="true">#</a> 1.2 转换数据</h3><p>接下来将 json 数据转换为 excel。</p><p>方案 1，使用 <code>pandas</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas
pandas<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span><span class="token string">&quot;mrs.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">&quot;mrs.xlsx&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数据结构是下面这类简单 json 使用这两行脚本即可。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;标题&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;内容&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若数据结构较复杂，列表对象中含有子对象，例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;标题&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;内容&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;detail&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;createBy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时需要编码展开子对象，我们这里使用方案 2。</p><p>方案 2，使用 excel 导入 + <code>Power Query M 公式语言</code>转换数据。</p><ol><li><p>首先导入 JSON 数据。</p><p><img src="`+p+`" alt="excel导入" loading="lazy"></p></li><li><p>在 Power Query 的高级编辑器中，修改 <code>Power Query M 公式语言</code> 脚本展开 json 数据。</p></li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">let</span> responseJson <span class="token operator">=</span> Json<span class="token punctuation">.</span><span class="token function">Document</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Contents</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\mrs.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
headers <span class="token operator">=</span>
 <span class="token keyword">let</span>
 allHeaders <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token function">Transform</span><span class="token punctuation">(</span>responseJson<span class="token punctuation">,</span> Record<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 uniqueHeaders <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span>allHeaders<span class="token punctuation">)</span>
 <span class="token keyword">in</span>
 uniqueHeaders<span class="token punctuation">,</span>
 testTable <span class="token operator">=</span> Table<span class="token punctuation">.</span><span class="token function">FromRecords</span><span class="token punctuation">(</span>responseJson<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> MissingField<span class="token punctuation">.</span>UseNull<span class="token punctuation">)</span>
 <span class="token keyword">in</span>
 testTable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了数据的转换，后续再生成数据图表或导入数据库都非常方便。</p><p>这部分内容的重点在于要灵活使用各种工具以快速得到想要的结果。</p><h2 id="二、使用-shell-统计数据" tabindex="-1"><a class="header-anchor" href="#二、使用-shell-统计数据" aria-hidden="true">#</a> 二、使用 shell 统计数据</h2><p>需求：在上百个 Java 代码仓库中统计单元测试方法的数量。</p><p>我们以这个例子来看看 <code>awk</code> 的用法。</p><p>说明：这个统计方法只是简单查看单元测试方法数量，不涉及单元测试覆盖率等。</p><p>步骤如下：</p><ol><li><p>首先本地含有所有的代码仓库，cd 到代码仓库根目录。</p></li><li><p>使用以下命令统计每个仓库的单元测试方法数量。</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*Test.java&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;@Test[^a-z]&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> / <span class="token string">&#39;{count[$3]++;} END {for(i in count) {print i,count[i]}}&#39;</span> <span class="token operator">|</span> clip.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：该命令运行在 <code>WSL</code>，所以可以在管道命令中包含 windows 命令。</p><p>命令说明：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*Test.java&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;@Test[^a-z]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到所有 Test.java 结尾的文件，在文件中查找仅包含 @Test 的行，这一步的输出结果如下：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>./project/repository1/module/src/.../xxx.java: @Test
./project/repository2/module/src/.../xxx.java: @Test
./project/repository3/module/src/.../xxx.java: @Test
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这个数据模式，再使用 awk 编写脚本进行数据分析。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span> / <span class="token string">&#39;{count[$3]++;} END {for(i in count) {print i,count[i]}}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>awk 脚本中指定 / 为分隔符，第三位为仓库名称，使用仓库名称进行分组，最后输出仓库名称和分组数量。</p><p>输出结果：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>repository1 5
repository2 10
repository3 7
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们利用管道 <code>| clip.exe</code> 将其拷贝到剪切板，再导入 excel 即可。</p><h2 id="三、使用-python-进行-redis、rabbitmq-运维" tabindex="-1"><a class="header-anchor" href="#三、使用-python-进行-redis、rabbitmq-运维" aria-hidden="true">#</a> 三、使用 python 进行 redis、rabbitmq 运维</h2><h3 id="_3-1-扫描-redis" tabindex="-1"><a class="header-anchor" href="#_3-1-扫描-redis" aria-hidden="true">#</a> 3.1 扫描 redis</h3><p>当 redis 内存过期速度赶不上内存增长，会导致 redis 内存占用越来越大，我们可以调整 redis 清理频率，也可以手动扫描 redis 来触发内存清理。</p><p>使用 python 执行以下代码即可，真是 <code>人生苦短，我用 python</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> redis
r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> r<span class="token punctuation">.</span>scan<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> r<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-rabbitmq-消息队列转发" tabindex="-1"><a class="header-anchor" href="#_3-2-rabbitmq-消息队列转发" aria-hidden="true">#</a> 3.2 rabbitmq 消息队列转发</h3><p>rabbitmq 上有消息队列转发的插件，但如果是云服务，通常无法使用该插件，此时用 python 写点转发脚本也是易事。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pika

connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;ip&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5672</span><span class="token punctuation">,</span> virtual_host<span class="token operator">=</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">&#39;account&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">backcall</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 转发</span>
    channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;exchange&#39;</span><span class="token punctuation">,</span> routing_key<span class="token operator">=</span><span class="token string">&#39;routing_key&#39;</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">)</span>

channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span><span class="token string">&#39;原队列&#39;</span><span class="token punctuation">,</span>backcall<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span>
connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、使用-python-生成-mysql-数据字典" tabindex="-1"><a class="header-anchor" href="#四、使用-python-生成-mysql-数据字典" aria-hidden="true">#</a> 四、使用 python 生成 mysql 数据字典</h2><p>生成数据字典的工具有很多，但往往生成的数据字典不易修改，试试用 python 生成 markdown 格式的数据字典如何？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector
<span class="token keyword">import</span> importlib
<span class="token keyword">import</span> sys


<span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>database_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    生成数据库字典表
    &quot;&quot;&quot;</span>
    importlib<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>

    <span class="token comment"># 使用前修改配置</span>
    conn <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
        host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
        port<span class="token operator">=</span><span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span>
        user<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        use_pure<span class="token operator">=</span><span class="token boolean">True</span>
    <span class="token punctuation">)</span>

    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
        <span class="token string">&quot;SELECT TABLE_NAME, TABLE_COMMENT FROM information_schema.TABLES WHERE table_type=&#39;BASE TABLE&#39; AND TABLE_SCHEMA=&#39;%s&#39;&quot;</span> <span class="token operator">%</span> database_name
    <span class="token punctuation">)</span>

    tables <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>

    markdown_table_header <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;\\n\\n\\n### %s (%s) \\n| 序号 | 字段名称 | 数据类型 | 是否为空 | 字段说明 |\\n| :--: |----| ---- | ---- | ---- |\\n&quot;&quot;&quot;</span>
    markdown_table_row <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;| %s | %s | %s | %s | %s |&quot;&quot;&quot;</span>

    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dict/&#39;</span><span class="token operator">+</span>database_name <span class="token operator">+</span> <span class="token string">&#39;.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> table <span class="token keyword">in</span> tables<span class="token punctuation">:</span>

        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>
            <span class="token string">&quot;SELECT ORDINAL_POSITION, COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_COMMENT &quot;</span>
            <span class="token string">&quot;FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;%s&#39; AND TABLE_NAME=&#39;%s&#39;&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
                database_name<span class="token punctuation">,</span> table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

        tmp_table <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> markdown_table_header <span class="token operator">%</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> remove_newline<span class="token punctuation">(</span>table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> col <span class="token keyword">in</span> tmp_table<span class="token punctuation">:</span>
            colf <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>
            colf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># mysql 高级版本需要解码，代码有点丑，临时性的，能用就行</span>
            colf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            p <span class="token operator">+=</span> <span class="token punctuation">(</span>remove_newline<span class="token punctuation">(</span>markdown_table_row <span class="token operator">%</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>colf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>p<span class="token punctuation">)</span>

    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">remove_newline</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    去除文本中的换行符号
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    conn <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
        host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
        port<span class="token operator">=</span><span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span>
        user<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        use_pure<span class="token operator">=</span><span class="token boolean">True</span>
    <span class="token punctuation">)</span>

    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SHOW DATABASES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dbs <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> db <span class="token keyword">in</span> dbs<span class="token punctuation">:</span>
        generate<span class="token punctuation">(</span>db<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、后记" tabindex="-1"><a class="header-anchor" href="#五、后记" aria-hidden="true">#</a> 五、后记</h2><p>本篇文章内容比较杂，这些脚本不能说非常优美，但写起来确实是非常的高效，能够快速地完成需求，当我们把这些工具掌握的同时，偶尔发挥下想象力，必然能够体会到编程的乐趣和代码的魅力。</p>`,58),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(e,[["render",i],["__file","script.html.vue"]]);export{k as default};
