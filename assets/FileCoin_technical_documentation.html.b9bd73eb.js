import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as i,a as n,b as s,d as e,e as t,r as c}from"./app.c2a49a29.js";const l={},u={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},r=t('<h1 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h1><p>Filecoin是一个基于区块链机制的分布式存储网络。Filecoin矿工可以选择为网络提供存储容量，从而通过定期生成加密证明来获得Filecoin加密货币(FIL)的单位，证明他们正在提供指定的容量。此外，Filecoin允许各方通过Filecoin区块链上的共享分类账记录的交易来交换Filecoin货币。然而，Filecoin并没有使用工作量证明来维护链上的共识，而是使用了存储证明本身:一个矿工在共识协议中的能力与它提供的存储量成比例。</p><p>Filecoin区块链不仅维护Filecoin交易和账户的分类账本，还实现了Filecoin VM，这是一个可复制的状态机，在网络上的参与者之间执行各种加密合约和市场机制。这些合约包括存储交易，客户向矿工支付FIL货币，以换取存储客户请求的特定文件数据。通过Filecoin VM的分布式实现，存储交易和其他记录在链上的合约机制将随着时间的推移继续处理，而不需要原始各方(如请求数据存储的客户端)的进一步交互。</p><h2 id="_1-2-架构图" tabindex="-1"><a class="header-anchor" href="#_1-2-架构图" aria-hidden="true">#</a> 1.2 架构图</h2><p>Actor状态图：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7sf9164mj31r10u0jza.jpg" alt="image-20210201094233728" loading="lazy"></p><h2 id="_1-3-关键内容" tabindex="-1"><a class="header-anchor" href="#_1-3-关键内容" aria-hidden="true">#</a> 1.3 关键内容</h2><ul><li><strong>Data structures</strong>是带有语义标记的数据成员(例如，结构、接口或枚举)的集合。</li><li><strong>Function</strong>是不依赖于外部状态的计算过程(例如，数学函数或不引用全局变量的编程语言函数)</li><li><strong>Components</strong>是一组功能，在实现结构中被表示为单个软件单元。根据语言和特定组件的选择，这可能对应于单个软件模块、运行主循环的线程或进程、磁盘支持的数据库或各种其他设计选择。例如，ChainSync是一个组件:它可以被实现为一个进程或线程运行单个指定的主循环，它等待网络消息，并通过记录和/或转发块数据来响应。</li><li><strong>api</strong>是将消息传递给组件的接口。一个给定子协议的客户端视图，例如向一个miner节点的Storage Provider组件请求在存储市场中存储文件，可能需要执行一系列的API请求。</li><li><strong>Nodes</strong>是与协议交互的完整的软件和硬件系统。一个节点可能会不断地运行上述几个组件，参与多个子系统，并在本地和/或通过网络公开api，这取决于节点配置。术语“完整节点”是指运行上述所有组件并支持规范中详细描述的所有api的系统。</li><li><strong>Subsystems</strong>是整个Filecoin协议的概念划分，要么是按照完整的协议(如存储市场或检索市场)，要么是按照功能(如VM - Virtual Machine)。它们不一定对应于任何特定的节点或软件组件。</li><li><strong>Actor</strong>是体现在Filecoin VM状态中的虚拟实体。协议参与者类似于智能合约的参与者;参与者携带FIL货币余额，并可以通过VM的操作与其他参与者交互，但并不一定对应于任何特定的节点或软件组件。</li></ul><h2 id="_1-4-filecoin-vm" tabindex="-1"><a class="header-anchor" href="#_1-4-filecoin-vm" aria-hidden="true">#</a> 1.4 FileCoin VM</h2><p>Filecoin的大多数用户所面对的功能(支付、存储市场、能量表等)是通过Filecoin虚拟机(Filecoin VM)管理的。该网络生成一系列区块，并同意哪个区块链是正确的。每个块包含一系列称为消息的状态转换，以及应用这些消息后的当前全局状态检查点。</p><p>这里的全局状态由一组参与者（<strong>Actor</strong>）组成，每个参与者都有自己的私有状态。</p><p>一个参与者是Filecoin等价于以太坊的智能合约，它本质上是Filecoin网络中的一个“对象”，具有状态和一组可以用来与之交互的方法。每个参与者都有一个Filecoin balance，一个状态指针，一个代码CID(告诉系统参与者是什么类型的参与者)，以及一个nonce(跟踪参与者发送的消息数量)。</p><p>在参与者上调用方法有两种途径。首先，要作为系统的外部参与者(也就是使用Filecoin的普通用户)调用方法，您必须向网络发送一个签名消息，并向包含您的消息的矿工支付费用。消息上的签名必须与一个帐户相匹配，该帐户有足够的Filecoin来支付消息的执行费用。这里的费用相当于比特币和以太坊的交易费用，它与处理消息所做的工作成比例(比特币按字节为消息定价，以太坊使用“gas”的概念。我们也用gas)。</p><p>其次，参与者可以在调用其方法之一的过程中调用另一个参与者的方法。然而，唯一可能发生这种情况的时候是某个参与者被外部用户消息调用的结果(注意:用户调用的参与者可能调用另一个参与者，然后调用另一个参与者，在执行能够承受的层次上尽可能多)。</p><p>具体实现请参见虚拟机子系统。</p><h2 id="_1-5-系统分解" tabindex="-1"><a class="header-anchor" href="#_1-5-系统分解" aria-hidden="true">#</a> 1.5 系统分解</h2><h3 id="_1-5-1-系统是什么-如何工作" tabindex="-1"><a class="header-anchor" href="#_1-5-1-系统是什么-如何工作" aria-hidden="true">#</a> 1.5.1 系统是什么，如何工作</h3><p>Filecoin将功能解耦并模块化到松散连接的系统中。每个系统都增加了重要的功能，通常是为了实现一组重要且紧密相关的目标。</p><p>例如，区块链系统提供了块、Tipset和链等结构，并提供了块同步、块传播、块验证、链选择和链访问等功能。这与文件、片段、片段准备和数据传输是分开的。这两个系统都与市场分离，市场提供订单、交易、市场可见性和交易结算。</p><h4 id="_1-5-1-1-为什么系统解耦有用" tabindex="-1"><a class="header-anchor" href="#_1-5-1-1-为什么系统解耦有用" aria-hidden="true">#</a> 1.5.1.1 为什么系统解耦有用?</h4><p>理由如下：</p><ul><li>**实施边界：**可以构建仅实施一部分系统的Filecoin实施。这对于<em>实现多样性</em>特别有用：我们需要许多安全关键系统（例如，区块链）的实现，但不需要许多可以分离的系统实现。</li><li>**运行时解耦：**系统解耦使构建和运行将系统隔离到单独程序甚至单独物理计算机中的Filecoin节点变得更加容易。</li><li>**安全隔离：**某些系统比其他系统需要更高的操作安全性。系统解耦使实现能够满足其安全性和功能性需求。一个很好的例子是将区块链处理与数据传输分开。</li><li>**可伸缩性：**系统和各种用例可能会为不同的操作员带来不同的性能要求。系统解耦使运营商更容易沿着系统边界扩展其部署。</li></ul><h4 id="_1-5-1-2-filecoin-节点不需要所有系统" tabindex="-1"><a class="header-anchor" href="#_1-5-1-2-filecoin-节点不需要所有系统" aria-hidden="true">#</a> 1.5.1.2 FileCoin 节点不需要所有系统</h4><ul><li>**实施边界：**可以构建仅实施一部分系统的Filecoin实施。这对于<em>实现多样性</em>特别有用：我们需要许多安全关键系统（例如，区块链）的实现，但不需要许多可以分离的系统实现。</li><li>**运行时解耦：**系统解耦使构建和运行将系统隔离到单独程序甚至单独物理计算机中的Filecoin节点变得更加容易。</li><li>**安全隔离：**某些系统比其他系统需要更高的操作安全性。系统解耦使实现能够满足其安全性和功能性需求。一个很好的例子是将区块链处理与数据传输分开。</li><li>**可伸缩性：**系统和各种用例可能会为不同的操作员带来不同的性能要求。系统解耦使运营商更容易沿着系统边界扩展其部署。</li></ul><h4 id="_1-5-1-3-分离系统" tabindex="-1"><a class="header-anchor" href="#_1-5-1-3-分离系统" aria-hidden="true">#</a> 1.5.1.3 分离系统</h4><blockquote><p>我们如何确定一个系统与另一个系统属于什么功能？</p></blockquote><p>在系统之间划定界限是将紧密相关的功能与无关部分分开的技术。从某种意义上说，我们寻求将紧密集成的组件保留在同一系统中，并远离其他无关的组件。有时这很简单，边界自然是来自数据结构或功能。例如，很容易观察到，客户和矿工彼此协商交易与VM执行非常无关。</p><p>有时这比较困难，并且需要整理，添加或删除抽象。例如，<code>StoragePowerActor</code>和和以前<code>StorageMarketActor</code>是单个<code>Actor</code>。这导致了整个<code>StorageDeal</code>生产<code>StorageMarket</code>市场，存储市场，部门密封，PoSt生成等功能之间的巨大耦合。纠结这两组相关功能需要将一个参与者分成两个。</p><h4 id="_1-5-1-4-在系统内部分解" tabindex="-1"><a class="header-anchor" href="#_1-5-1-4-在系统内部分解" aria-hidden="true">#</a> 1.5.1.4 在系统内部分解</h4><p>系统本身分解为较小的子单元。这些有时称为“子系统”，以避免与更大的一流系统混淆。子系统本身可能会进一步崩溃。此处的命名未严格执行，因为这些细分与协议和实现工程方面的问题相比，与用户功能更相关。</p><h3 id="_1-5-2-实现系统" tabindex="-1"><a class="header-anchor" href="#_1-5-2-实现系统" aria-hidden="true">#</a> 1.5.2 实现系统</h3><h4 id="_1-5-2-1-系统要求" tabindex="-1"><a class="header-anchor" href="#_1-5-2-1-系统要求" aria-hidden="true">#</a> 1.5.2.1 系统要求</h4><p>为了更轻松地将功能分离到系统中，Filecoin协议假定了一组可用于所有系统的功能。此功能可以通过各种方式的实现来实现，并且应将此处的指南作为建议（应该）。</p><p>本文档中定义的所有系统都要求具备以下条件：</p><ul><li>仓库： <ul><li>**本地的<code>IpldStore</code>。**用于数据结构（小型结构化对象）的一定数量的持久本地存储。系统期望使用IpldStore进行初始化，在该系统中存储它们希望在崩溃中持续存在的数据结构。</li><li>**用户配置值。**少量用户可编辑的配置值。这些应该使最终用户易于访问，查看和编辑。</li><li>**本地，安全<code>KeyStore</code>。**用于生成和使用加密密钥的工具，必须对Filecoin节点保密。系统不应直接访问密钥，而应通过<code>KeyStore</code>提供加密，解密，签名，SigVerify等功能的抽象（即）进行访问。</li></ul></li><li>**本地的<code>FileStore</code>。**某些文件的持久本地存储（大字节数组）。系统期望使用存储大文件的FileStore进行初始化。某些系统（例如Markets）可能需要存储和删除大量较小的文件（1MB-10GB）。其他系统（例如存储挖掘）可能需要存储和删除大量大文件（1GB-1TB）。</li><li>**网络。**大多数系统需要访问网络，才能连接到其他Filecoin节点中的对应系统。系统期望使用可<code>libp2p.Node</code>在其上安装自己的协议的进行初始化。</li><li>**时钟。**有些系统需要访问当前的网络时间，而有些系统的漂移容差较低。系统期望使用一个时钟来初始化，以从中得知网络时间。一些系统（如区块链）需要很少的时钟漂移，并且需要<em>安全的</em>时间。</li></ul><p>为此，我们使用<code>FilecoinNode</code>数据结构，该数据结构在初始化时传递给所有系统。</p><h4 id="_1-5-2-2系统限制" tabindex="-1"><a class="header-anchor" href="#_1-5-2-2系统限制" aria-hidden="true">#</a> 1.5.2.2系统限制</h4><p>此外，系统必须遵守以下限制：</p><ul><li>**随机崩溃。**Filecoin节点可能随时崩溃。通过崩溃，系统必须是安全且一致的。这主要是通过限制持久状态的使用，通过Ipld数据结构持久化这种状态，以及通过使用检查状态的初始化例程以及可能纠正错误来实现的。</li><li>**隔离。**系统必须通过定义良好的隔离接口进行通信。他们不得在共享内存空间上构建关键功能。（注意：为了提高性能，共享内存抽象可用于为IpldStore，FileStore和libp2p供电，但是系统本身不应该需要它。）它还显着简化了协议，并使其更易于理解，分析，调试和更改。</li><li>**无法直接访问主机操作系统文件系统或磁盘。**系统无法直接访问磁盘，而是通过FileStore和IpldStore抽象来进行。这将为最终用户（尤其是存储矿工和大量数据的客户端）提供高度的可移植性和灵活性，这需要能够轻松替换其Filecoin节点访问本地存储的方式。</li><li>**不能直接访问主机OS网络堆栈或TCP / IP。**系统无法直接访问网络-它们通过libp2p库进行访问。不得有任何其他类型的网络访问。这提供了跨平台和网络协议的高度可移植性，使Filecoin节点（及其所有关键系统）可以使用各种协议（例如蓝牙，LAN等）在多种设置下运行。</li></ul><h1 id="_2-系统" tabindex="-1"><a class="header-anchor" href="#_2-系统" aria-hidden="true">#</a> 2. 系统</h1><p>在本节中，我们将逐一详细说明所有系统组件，以提高其复杂性和/或与其他系统组件的相互依赖性。组件之间的交互仅在适当的地方简要讨论，但总体工作流程在“简介”部分给出。特别是，在本节中，我们讨论：</p><ul><li>Filecoin节点：参与Filecoin网络的不同类型的节点，以及这些节点运行的重要部分和过程，例如密钥库和IPLD存储，以及libp2p的网络接口。</li><li>文件和数据：Filecoin的数据单位，例如“部门”和“碎片”。</li><li>虚拟机：Filecoin VM的子组件，例如参与者，即在Filecoin区块链上运行的智能合约和状态树。</li><li>区块链：Filecoin区块链的主要构建块，例如消息和块的结构，消息池，以及节点首次加入网络时如何同步区块链。</li><li>令牌：钱包所需的组件。</li><li>存储挖掘：存储挖掘的详细信息，存储能力共识以及存储矿工如何证明存储（不涉及证明的细节，这将在后面讨论）。</li><li>市场：存储和检索市场，主要是脱链的过程，但对于分散存储市场的平稳运行非常重要。</li></ul>',42),d={id:"_2-1-filecoin节点",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_2-1-filecoin节点","aria-hidden":"true"},"#",-1),v={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[s("本节首先讨论Filecoin节点的概念。尽管在Filecoin的Lotus实现中不像在其他区块链网络中那样严格定义不同的节点类型，但是不同类型的节点应该实现不同的属性和功能。简而言之，基于节点提供的"),n("em",null,"服务"),s("集对其进行定义。")],-1),b=n("p",null,"在本节中，我们还将讨论与在Filecoin节点中存储系统文件有关的问题。请注意，在本节中，通过存储，我们不是指节点为在网络中进行挖掘而提交的存储，而是指它需要可用于密钥和IPLD数据的本地存储库。",-1),h=n("p",null,"在本节中，我们还将讨论网络接口以及节点之间如何查找和连接，如何使用libp2p交互和传播消息以及如何设置节点的时钟。",-1),f={id:"_2-1-1节点类型",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_2-1-1节点类型","aria-hidden":"true"},"#",-1),g={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types",target:"_blank",rel:"noopener noreferrer"},y=t("<p>Filecoin网络中的节点主要根据其提供的服务进行标识。因此，节点的类型取决于节点提供的服务。Filecoin网络中的一组基本服务包括：</p><ul><li>链验证</li><li>仓储市场客户</li><li>存储市场提供商</li><li>检索市场客户</li><li>检索市场提供者</li><li>仓储采矿</li></ul><p>参与Filecoin网络的任何节点都应至少提供<em>链验证</em>服务。根据节点在链验证之上提供的额外服务，它会获得相应的功能和节点类型“标签”。</p><p>可以使用主机中的存储库（目录）以一对一关系实现节点-即，一个存储库属于单个节点。也就是说，一台主机可以通过具有相应的存储库来实现多个Filecoin节点。</p><p>Filecoin实现可以支持以下子系统或节点类型：</p><ul><li><strong>链验证器节点：<strong>这是节点加入Filecoin网络所需的最低功能。除非实现以下所述的</strong>客户端节点</strong>功能，否则这种类型的节点无法在网络中发挥积极作用。链验证器节点首次加入网络时必须同步链（ChainSync），以达成当前共识。从那时起，该节点必须不断获取链中的任何附加内容（即，接收最新的块）并验证它们是否达到共识状态。</li><li><strong>客户端节点：<strong>这种类型的节点建立在</strong>Chain Verifier节点</strong>之上，并且必须由Filecoin网络上构建的任何应用程序来实现。可以将其视为基于Filecoin的应用程序（例如交易所或分散存储应用程序）的主要基础结构节点（至少就与区块链的交互而言）。该节点应实现<em>存储市场和检索市场客户</em>服务。客户端节点应与存储和检索市场进行交互，并能够通过数据传输模块进行数据传输。</li><li><strong>Retrieval Miner Node（检索矿工节点）：<strong>此节点类型扩展了</strong>Chain Verifier节点</strong>以添加<em>检索矿工</em>功能，即参与了检索市场。这样，此节点类型需要实现<em>检索市场提供者</em>服务，并能够通过数据传输模块进行数据传输。</li><li>**Storage Miner Node：**这种类型的节点必须实现验证，创建和添加块以扩展区块链所需的所有必需功能。它应实施链验证，存储挖掘和存储市场提供商服务，并能够通过数据传输模块进行数据传输。</li></ul>",6),w={id:"_2-1-1-1节点接口",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#_2-1-1-1节点接口","aria-hidden":"true"},"#",-1),C={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.node-interface",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/filecoin-project/lotus/blob/master/node/repo/interface.go",target:"_blank",rel:"noopener noreferrer"},F={id:"_2-1-1-2链验证器节点",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_2-1-1-2链验证器节点","aria-hidden":"true"},"#",-1),P={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.chain-verifier-node",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ChainVerifierNode <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  FilecoinNode

  systems<span class="token punctuation">.</span>Blockchain
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={href:"https://github.com/filecoin-project/lotus/blob/master/node/impl/full.go",target:"_blank",rel:"noopener noreferrer"},E={id:"_2-1-1-3客户端节点",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#_2-1-1-3客户端节点","aria-hidden":"true"},"#",-1),I={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.client-node",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ClientNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  FilecoinNode

  systems<span class="token punctuation">.</span>Blockchain
  markets<span class="token punctuation">.</span>StorageMarketClient
  markets<span class="token punctuation">.</span>RetrievalMarketClient
  markets<span class="token punctuation">.</span>DataTransfers
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://github.com/filecoin-project/lotus/blob/master/node/impl/client/client.go",target:"_blank",rel:"noopener noreferrer"},D={id:"_2-1-1-4存储矿工节点",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_2-1-1-4存储矿工节点","aria-hidden":"true"},"#",-1),V={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.storage-miner-node",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StorageMinerNode <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  FilecoinNode

  systems<span class="token punctuation">.</span>Blockchain
  systems<span class="token punctuation">.</span>Mining
  markets<span class="token punctuation">.</span>StorageMarketProvider
  markets<span class="token punctuation">.</span>DataTransfers
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={href:"https://github.com/filecoin-project/lotus/blob/master/node/impl/storminer.go",target:"_blank",rel:"noopener noreferrer"},j={id:"_2-1-1-5检索矿工节点",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#_2-1-1-5检索矿工节点","aria-hidden":"true"},"#",-1),O={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.retrieval-miner-node",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RetrievalMinerNode <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  FilecoinNode

  blockchain<span class="token punctuation">.</span>Blockchain
  markets<span class="token punctuation">.</span>RetrievalMarketProvider
  markets<span class="token punctuation">.</span>DataTransfers
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z={id:"_2-1-1-6中继节点",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#_2-1-1-6中继节点","aria-hidden":"true"},"#",-1),Z={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.relayer-node",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> RelayerNode <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  FilecoinNode

  blockchain<span class="token punctuation">.</span>MessagePool
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q={id:"_2-1-1-7节点配置",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_2-1-1-7节点配置","aria-hidden":"true"},"#",-1),X={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.node_types.node-configuration",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/filecoin-project/lotus/blob/master/node/config/def.go",target:"_blank",rel:"noopener noreferrer"},$={id:"_2-1-2节点存储库",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_2-1-2节点存储库","aria-hidden":"true"},"#",-1),sn={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,"Filecoin节点存储库只是系统和链数据的本地存储。它是任何功能性Filecoin节点需要在本地存储以便正确运行的数据的抽象。",-1),en=n("p",null,[s("该存储库可供节点的系统和子系统访问，并且可以从节点的存储区分开"),n("code",null,"FileStore"),s("。")],-1),tn=n("p",null,"该存储库存储节点的密钥，有状态对象的IPLD数据结构以及节点配置设置。",-1),on={href:"https://github.com/filecoin-project/lotus/blob/master/node/repo/fsrepo.go",target:"_blank",rel:"noopener noreferrer"},pn={id:"_2-1-2-1密钥库",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#_2-1-2-1密钥库","aria-hidden":"true"},"#",-1),ln={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository.key_store",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,[s("这"),n("code",null,"Key Store"),s("是任何完整Filecoin节点中的基本抽象，用于存储与给定矿工的地址（请参阅下面的实际定义）和不同的工作程序（矿工应该选择运行多个工作程序）关联的密钥对。")],-1),rn=n("p",null,"节点安全性在很大程度上取决于保持这些密钥的安全性。为此，我们强烈建议：1）将密钥与所有子系统分开，2）根据其他子系统的要求使用单独的密钥存储来签署请求，以及3）保留未用作冷库中挖掘的那些密钥。",-1),dn=n("p",null,"Filecoin存储矿工依赖三个主要组成部分：",-1),kn=t("<li>在调用<code>registerMiner()</code>Storage Power Consensus子系统后，<strong>将存储矿工</strong><em><strong>参与者*****地址</strong>唯一地分配给给定的存储矿工</em><em>参与者****地址</em>*。实际上，存储矿工本身没有地址，而是由与其绑定的参与者的地址来标识的。这是给定存储矿工的唯一标识符，其电源和其他密钥将与之关联。该<code>actor value</code>指定一个已经创建的矿工演员的地址。</li><li><strong>所有者密钥对</strong>由矿工在注册之前提供，并且其公钥与矿工地址相关。所有者密钥对可用于管理矿工和提取资金。</li>",2),vn=n("strong",null,"工人密钥对",-1),mn={href:"https://spec.filecoin.io/#section-algorithms.crypto.vrf",target:"_blank",rel:"noopener noreferrer"},bn=n("p",null,"多个存储矿工参与者可以共享一个所有者公共密钥，也可以共享一个工人公共密钥。",-1),hn={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_mining.storage_miner_actor",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,[s("密钥安全在Filecoin中至关重要，每个区块链中的密钥也是如此。"),n("strong",null,"无法安全地存储和使用密钥或将私钥暴露给对手可能会导致对手有权使用矿工的资金。")],-1),_n={id:"_2-1-2-2ipld商店",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#_2-1-2-2ipld商店","aria-hidden":"true"},"#",-1),yn={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository.ipldstore",target:"_blank",rel:"noopener noreferrer"},wn=n("p",null,"星际链接数据（IPLD）是一组库，这些库允许跨不同分布式系统和协议的内容寻址数据结构互操作。它为原始密码哈希提供了一种基本的“通用语言”，使数据结构可以在两个独立的协议之间被可验证地引用和检索。例如，用户可以在以太坊交易或智能合约中引用IPFS目录。",-1),xn=n("p",null,"Filecoin节点的IPLD存储是用于散列链接数据的本地存储。",-1),Cn=n("p",null,"IPLD基本上由三层组成：",-1),Sn=n("ul",null,[n("li",null,"块层，着重于块格式和寻址，块如何广告或自描述其编解码器"),n("li",null,"数据模型层，它定义了一组必须包含在任何实现中的必需类型-下文将详细讨论。"),n("li",null,"模式层，它允许扩展数据模型以与更复杂的结构进行交互，而无需自定义转换抽象。")],-1),Fn={href:"https://github.com/ipld/specs",target:"_blank",rel:"noopener noreferrer"},qn={id:"_2-1-2-2-1数据模型",tabindex:"-1"},Pn=n("a",{class:"header-anchor",href:"#_2-1-2-2-1数据模型","aria-hidden":"true"},"#",-1),An={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository.ipldstore.the-data-model",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/ipld/specs/blob/master/data-model-layer/data-model.md",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/multiformats/cid",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://docs.ipfs.io/guides/concepts/merkle-dag/",target:"_blank",rel:"noopener noreferrer"},In={href:"https://github.com/ipld/specs/blob/master/block-layer/codecs/dag-cbor.md",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/ipld/specs/blob/master/block-layer/codecs/dag-json.md",target:"_blank",rel:"noopener noreferrer"},Mn={id:"_2-1-2-2-2-filecoin中的ipld",tabindex:"-1"},Dn=n("a",{class:"header-anchor",href:"#_2-1-2-2-2-filecoin中的ipld","aria-hidden":"true"},"#",-1),Gn={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository.ipldstore.ipld-in-filecoin",target:"_blank",rel:"noopener noreferrer"},Vn=n("p",null,"Filecoin网络中有两种方式使用IPLD：",-1),Ln=n("ul",null,[n("li",null,"所有系统数据结构都使用DAG-CBOR（IPLD编解码器）存储。DAG-CBOR是CBOR的更严格子集，具有预定义的标记方案，旨在存储，检索和遍历散列链接的数据DAG。与CBOR相比，DAG-CBOR可以保证确定性。"),n("li",null,"Filecoin网络上存储的文件和数据也使用各种IPLD编解码器（不一定是DAG-CBOR）进行存储。")],-1),Nn=n("p",null,"IPLD在数据上方提供了一致且一致的抽象，从而使Filecoin可以构建复杂的多块数据结构（例如HAMT和AMT）并与之交互。Filecoin使用DAG-CBOR编解码器对其数据结构进行序列化和反序列化，并使用IPLD数据模型与该数据进行交互，并在此模型上构建了各种工具。IPLD选择器还可用于寻址链接数据结构中的特定节点。",-1),jn={id:"_2-1-2-2-2-1ipldstores",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#_2-1-2-2-2-1ipldstores","aria-hidden":"true"},"#",-1),On={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.repository.ipldstore.ipldstores",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,"Filecoin网络主要依赖于两个不同的IPLD GraphStore：",-1),zn=n("li",null,[s("一种"),n("code",null,"ChainStore"),s("存储区块链的数据，包括块头，相关消息等。")],-1),Wn=n("code",null,"StateStore",-1),Zn=n("code",null,"stateTree",-1),Kn={href:"https://spec.filecoin.io/#section-systems.filecoin_vm",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://spec.filecoin.io/#section-systems.filecoin_vm",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"ChainStore",-1),Xn={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"StateStore",-1),$n=n("code",null,"ChainStore",-1),ns={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"ParentState",-1),es=n("h3",{id:"_2-1-3-网络接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-3-网络接口","aria-hidden":"true"},"#"),s(" 2.1.3 网络接口")],-1),ts=n("p",null,[s("Filecoin节点使用libp2p网络堆栈的几种协议来进行对等方发现，对等方路由以及块和消息传播。Libp2p是用于点对点网络的模块化网络堆栈。它包括多种协议和机制，可实现高效，安全和有弹性的对等通信。Libp2p节点彼此之间打开连接，并在同一连接上安装不同的协议或流。在最初的握手中，节点交换它们各自支持的协议，所有与Filecoin相关的协议都将安装在"),n("code",null,"/fil/..."),s("协议标识符下。")],-1),os={href:"https://github.com/libp2p/specs",target:"_blank",rel:"noopener noreferrer"},ps=n("strong",null,"Graphsync：",-1),is={href:"https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://github.com/libp2p/specs/tree/master/pubsub/gossipsub",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"fil/blocks/<network-name>",-1),us=n("code",null,"fil/msgs/<network-name>",-1),rs=n("strong",null,"Kademlia DHT：",-1),ds={href:"https://github.com/libp2p/go-libp2p-kad-dht",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,"fil/<network-name>/kad/1.0.0",-1),vs=n("li",null,"**引导程序列表：**这是新节点在加入网络后尝试连接的节点列表。引导节点列表及其地址由用户（即应用程序）定义。",-1),ms=n("li",null,"**对等交换：**此协议是在Kademlia DHT上面讨论的对等发现过程的实现。通过与DHT进行接口，它使对等点可以找到网络中其他对等点的信息和地址，并为要连接的对等点创建和发出查询。",-1),bs={id:"_2-1-4时钟",tabindex:"-1"},hs=n("a",{class:"header-anchor",href:"#_2-1-4时钟","aria-hidden":"true"},"#",-1),fs={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.clock",target:"_blank",rel:"noopener noreferrer"},_s=n("p",null,"Filecoin假定系统参与者之间的时钟同步较弱。也就是说，系统依赖于参与者可以访问全局同步时钟（允许某些有界偏移）。",-1),gs=n("p",null,"Filecoin依靠此系统时钟来确保共识。具体来说，时钟是支持验证规则所必需的，验证规则可防止块生产者使用协议的时间戳来挖掘具有未来时间戳的块并更频繁地运行领导者选举。",-1),ys={id:"_2-1-4-1时钟用途",tabindex:"-1"},ws=n("a",{class:"header-anchor",href:"#_2-1-4-1时钟用途","aria-hidden":"true"},"#",-1),xs={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.clock.clock-uses",target:"_blank",rel:"noopener noreferrer"},Cs=n("p",null,"使用Filecoin系统时钟：",-1),Ss={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block.block-syntax-validation",target:"_blank",rel:"noopener noreferrer"},Fs=n("li",null,"通过同步节点以放置来自未来纪元的数据块",-1),qs={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus",target:"_blank",rel:"noopener noreferrer"},Ps=n("p",null,"为了允许矿工执行上述操作，系统时钟必须：",-1),As={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block.block-semantic-validation",target:"_blank",rel:"noopener noreferrer"},Bs={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block.block-semantic-validation",target:"_blank",rel:"noopener noreferrer"},Es=n("li",null,[s("设置节点初始化的时期数等于 "),n("code",null,"epoch = Floor[(current_time - genesis_time) / epoch_time]")],-1),Ts=n("p",null,[s("预计其他子系统将从"),n("code",null,"NewRound()"),s("时钟子系统注册到事件。")],-1),Is={id:"_2-1-4-2时钟要求",tabindex:"-1"},Rs=n("a",{class:"header-anchor",href:"#_2-1-4-2时钟要求","aria-hidden":"true"},"#",-1),Ms={href:"https://spec.filecoin.io/#section-systems.filecoin_nodes.clock.clock-requirements",target:"_blank",rel:"noopener noreferrer"},Ds=n("p",null,"用作Filecoin协议一部分的时钟应保持同步，且偏移小于1秒，以便进行适当的验证。",-1),Gs={href:"https://www.hindawi.com/journals/jcnc/2008/583162/",target:"_blank",rel:"noopener noreferrer"},Vs=n("strong",null,[n("code",null,"pool.ntp.org")],-1),Ls={href:"https://www.ntppool.org/en/use.html",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"time.cloudflare.com:1234",-1),js={href:"https://www.cloudflare.com/time/",target:"_blank",rel:"noopener noreferrer"},Hs=n("code",null,"time.google.com",-1),Os={href:"https://developers.google.com/time",target:"_blank",rel:"noopener noreferrer"},Us=n("code",null,"time.nist.gov",-1),zs={href:"https://tf.nist.gov/tf-cgi/servers.cgi",target:"_blank",rel:"noopener noreferrer"},Ws=n("li",null,"较大的采矿作业可能会考虑使用具有GPS参考和/或频率稳定的外部时钟的本地NTP / PTP服务器，以改善计时功能。",-1),Zs=n("p",null,"采矿业务有强烈的动机来防止时钟向前倾斜一个纪元以上，以防止块状提交被拒绝。同样，他们有动机防止时钟偏离一个以上的时间，以避免将自己与网络中的同步节点分开。",-1),Ks={id:"_2-2文件和数据",tabindex:"-1"},Qs=n("a",{class:"header-anchor",href:"#_2-2文件和数据","aria-hidden":"true"},"#",-1),Js={href:"https://spec.filecoin.io/#section-systems.filecoin_files",target:"_blank",rel:"noopener noreferrer"},Xs=n("p",null,[s("Filecoin的主要目的是存储客户的文件和数据。本节详细介绍与处理文件，分块，编码，图形表示"),n("code",null,"Pieces"),s("，，存储抽象等相关的数据结构和工具。")],-1),Ys={id:"_2-2-1文件",tabindex:"-1"},$s=n("a",{class:"header-anchor",href:"#_2-2-1文件","aria-hidden":"true"},"#",-1),na={href:"https://spec.filecoin.io/#section-systems.filecoin_files.file",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},aa=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Path is an opaque locator for a file (e.g. in a unix-style filesystem).</span>
<span class="token keyword">type</span> Path <span class="token builtin">string</span>

<span class="token comment">// File is a variable length data container.</span>
<span class="token comment">// The File interface is modeled after a unix-style file, but abstracts the</span>
<span class="token comment">// underlying storage system.</span>
<span class="token keyword">type</span> File <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   Path
    <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">int</span>
    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token builtin">error</span>

    <span class="token comment">// Read reads from File into buf, starting at offset, and for size bytes.</span>
    <span class="token function">Read</span><span class="token punctuation">(</span>offset <span class="token builtin">int</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">,</span> buf Bytes<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>size <span class="token builtin">int</span><span class="token punctuation">,</span> e <span class="token builtin">error</span><span class="token punctuation">}</span>

    <span class="token comment">// Write writes from buf into File, starting at offset, and for size bytes.</span>
    <span class="token function">Write</span><span class="token punctuation">(</span>offset <span class="token builtin">int</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">,</span> buf Bytes<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>size <span class="token builtin">int</span><span class="token punctuation">,</span> e <span class="token builtin">error</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ea={id:"_2-2-1-1filestore-文件的本地存储",tabindex:"-1"},ta=n("a",{class:"header-anchor",href:"#_2-2-1-1filestore-文件的本地存储","aria-hidden":"true"},"#",-1),oa={href:"https://spec.filecoin.io/#section-systems.filecoin_files.file.filestore",target:"_blank",rel:"noopener noreferrer"},pa=n("p",null,[s("的"),n("code",null,"FileStore"),s("是用来指任何底层系统或设备，其将Filecoin其数据存储到一个抽象。它基于Unix文件系统语义，并包含的概念"),n("code",null,"Paths"),s("。在这里使用这种抽象是为了确保Filecoin的实现使最终用户可以轻松地使用适合他们需求的基础替换底层存储系统。最简单的版本"),n("code",null,"FileStore"),s("只是主机操作系统的文件系统。")],-1),ia={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},ca=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// FileStore is an object that can store and retrieve files by path.</span>
<span class="token keyword">type</span> FileStore <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token function">Open</span><span class="token punctuation">(</span>p Path<span class="token punctuation">)</span>           union <span class="token punctuation">{</span>f File<span class="token punctuation">,</span> e <span class="token builtin">error</span><span class="token punctuation">}</span>
    <span class="token function">Create</span><span class="token punctuation">(</span>p Path<span class="token punctuation">)</span>         union <span class="token punctuation">{</span>f File<span class="token punctuation">,</span> e <span class="token builtin">error</span><span class="token punctuation">}</span>
    <span class="token function">Store</span><span class="token punctuation">(</span>p Path<span class="token punctuation">,</span> f File<span class="token punctuation">)</span>  <span class="token builtin">error</span>
    <span class="token function">Delete</span><span class="token punctuation">(</span>p Path<span class="token punctuation">)</span>         <span class="token builtin">error</span>

    <span class="token comment">// maybe add:</span>
    <span class="token comment">// Copy(SrcPath, DstPath)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),la={id:"_2-2-1-1-1变化的用户需求",tabindex:"-1"},ua=n("a",{class:"header-anchor",href:"#_2-2-1-1-1变化的用户需求","aria-hidden":"true"},"#",-1),ra={href:"https://spec.filecoin.io/#section-systems.filecoin_files.file.filestore.varying-user-needs",target:"_blank",rel:"noopener noreferrer"},da=n("p",null,[s("Filecoin用户的需求差异很大，许多用户（尤其是矿工）将在Filecoin的下方和周围实施复杂的存储架构。"),n("code",null,"FileStore"),s("这里的抽象是为了使这些变化的需求易于满足。Filecoin协议中的所有文件和扇区本地数据存储都是通过此"),n("code",null,"FileStore"),s("接口定义的，这使实现易于实现可交换，并且使最终用户可以轻松选择所选择的系统。")],-1),ka={id:"_2-2-1-1-2实施实例",tabindex:"-1"},va=n("a",{class:"header-anchor",href:"#_2-2-1-1-2实施实例","aria-hidden":"true"},"#",-1),ma={href:"https://spec.filecoin.io/#section-systems.filecoin_files.file.filestore.implementation-examples",target:"_blank",rel:"noopener noreferrer"},ba=t("<p>该<code>FileStore</code>接口可以由多种后备数据存储系统来实现。例如：</p><ul><li>主机操作系统文件系统</li><li>任何Unix / Posix文件系统</li><li>RAID支持的文件系统</li><li>联网的分布式文件系统（NFS，HDFS等）</li><li>IPFS</li><li>资料库</li><li>NAS系统</li><li>原始串行或块设备</li><li>原始硬盘驱动器（hdd扇区等）</li></ul><p>实现应实现对主机OS文件系统的支持。实现可以实现对其他存储系统的支持。</p>",3),ha={id:"_2-2-2文件币片",tabindex:"-1"},fa=n("a",{class:"header-anchor",href:"#_2-2-2文件币片","aria-hidden":"true"},"#",-1),_a={href:"https://spec.filecoin.io/#section-systems.filecoin_files.piece",target:"_blank",rel:"noopener noreferrer"},ga=t('<p>该<em>Filecoin片</em>是主要的<em>谈判单位</em>为用户存储Filecoin网络上的数据。Filecoin Piece<em>不是存储单位</em>，它没有特定大小，但是受<em>Sector</em>大小的限制。Filecoin片段的大小可以任意，但是如果片段大于矿工支持的扇区的大小，则必须将其拆分成更多的片段，以使每个片段都适合一个扇区。</p><p>A<code>Piece</code>是代表a的全部或一部分的对象，<code>File</code>由<code>Storage Clients</code>和<code>Storage Miners</code>在中使用<code>Deals</code>。<code>Storage Clients</code>租用<code>Storage Miners</code>存放<code>Pieces</code>。</p><p>Piece数据结构用于证明存储任意IPLD图和客户端数据。该图显示了一个部件及其证明树的详细组成，包括完整的和带宽优化的部件数据结构。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7ulf31hej31900pmn9l.jpg" alt="image-20210201105729280" loading="lazy"></p>',4),ya={id:"_2-2-2-1数据表示",tabindex:"-1"},wa=n("a",{class:"header-anchor",href:"#_2-2-2-1数据表示","aria-hidden":"true"},"#",-1),xa={href:"https://spec.filecoin.io/#section-systems.filecoin_files.piece.data-representation",target:"_blank",rel:"noopener noreferrer"},Ca=n("p",null,[s("重要的是要强调，提交给Filecoin网络的数据在经过转换之后才变成"),n("code",null,"StorageProvider"),s("存储数据的格式。")],-1),Sa=n("p",null,"从用户开始准备要存储在Filecoin中的文件到提供者生成存储在一个部门中的所有作品标识符的过程，下面是过程。",-1),Fa=n("p",null,"前三个步骤在客户端进行。",-1),qa=n("li",null,[s("当客户想要在Filecoin网络中存储文件时，他们首先生成文件的IPLD DAG。表示DAG根节点的哈希是IPFS样式的CID，称为"),n("em",null,"有效负载CID"),s("。")],-1),Pa=n("em",null,"Filecoin Piece",-1),Aa={href:"https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md#summary",target:"_blank",rel:"noopener noreferrer"},Ba=n("em",null,"有效载荷CID",-1),Ea=n("li",null,[s("生成的.car文件用额外的零位"),n("em",null,"填充"),s("，以使该文件形成二进制Merkle树。为了获得干净的二进制Merkle树，.car文件的大小必须为2（^ 2）的幂。填充过程称为"),n("code",null,"Fr32 padding"),s("，将每256位中的254位中的两（2）个零位加到输入文件中。下一步，填充过程获取过程的输出，"),n("code",null,"Fr32 padding"),s("并找到其上方的大小，从而得到2的幂。"),n("code",null,"Fr32 padding"),s("下一个2的幂次方的结果之间的差距用零填充。")],-1),Ta=t("<p>为了说明这些步骤背后的原因，重要的是了解<code>StorageClient</code>和之间的总体谈判过程<code>StorageProvider</code>。CID或CommP是客户与存储提供商协商并同意的交易中包含的内容。达成协议后，客户端将文件发送给提供者（使用GraphSync）。提供者必须从接收到的文件中构造出CAR文件，并从其一侧导出Piece CID。为了避免客户向商定的文件发送不同的文件，提供者生成的件CID必须与先前协商的交易中包含的文件CID相同。</p><p>以下步骤在<code>StorageProvider</code>一侧进行（除了步骤4，也可以在客户端进行）。</p><ol><li>一旦<code>StorageProvider</code>接收到来自客户端的文件，他们就会从Piece的哈希值（填充的.car文件）中计算出Merkle根。干净的二叉树Merkle树的结果根是<strong>Piece CID</strong>。这也称为<em>CommP</em>或<em>计件承诺</em>，如前所述，必须与交易中包含的<em>承诺</em>相同。</li><li>该部分与其他交易的数据一起包含在一个部门中。在<code>StorageProvider</code>随后计算所有部门内件梅克尔根。该树的根是<em>CommD</em>（又称<em>数据承诺</em>或<code>UnsealedSectorCID</code>）。</li><li>所述<code>StorageProvider</code>然后密封该扇区并且将所得梅克尔根的根是<em>CommRLast</em>。</li><li>特别是复制证明（PoRep），特别是SDR，会生成另一个名为<em>CommC的</em>Merkle根哈希，以证明已正确执行了承诺为<em>CommD</em>的数据的复制。</li><li>最后，<em>CommR</em>（或<em>复制承诺</em>）是CommC的哈希。CommRLast。</li></ol><p><strong>重要笔记：</strong></p><ul><li><code>Fr32</code>是字段元素的32位表示形式（在我们的情况下为BLS12-381的算术字段）。为了格式正确，类型值<code>Fr32</code>必须<em>实际上</em>适合该字段，但是类型系统不强制执行该值。它是不变量，必须正确使用才能保留。在所谓的情况下<code>Fr32 padding</code>，两个零位被插入到一个“需要”最多254位才能表示的数字之后。这保证了结果将为<code>Fr32</code>，而不管初始254位的值如何。这是一种“保守”技术，因为对于某些初始值，实际上只需要一点零填充。</li><li>上面的步骤2和3是特定于Lotus实现的。可以通过不同的方式来实现相同的结果，例如，无需使用<code>Fr32</code>位填充。但是，任何实现都必须确保对初始IPLD DAG进行了序列化和填充，以便提供干净的二叉树，因此，从所得数据斑点中计算出Merkle根时，将得到相同的<strong>Piece CID</strong>。只要是这种情况，实现可能会偏离上面的前三个步骤。</li><li>最后，重要的是添加与<em>有效载荷CID</em>（在上面的前两个步骤中讨论过）和数据检索过程有关的注释。检索交易根据<em>有效负载CID</em>进行协商。达成检索协议后，检索矿工将开始将未密封和“未CAR&#39;ed”的文件发送给客户端。传输从IPLD Merkle树的根节点开始，这样客户端可以从传输开始就验证<em>有效负载CID</em>，并验证他们接收的文件是他们在交易中协商的文件，而不是随机位。</li></ul>",5),Ia={id:"_2-2-2-2件商店",tabindex:"-1"},Ra=n("a",{class:"header-anchor",href:"#_2-2-2-2件商店","aria-hidden":"true"},"#",-1),Ma={href:"https://spec.filecoin.io/#section-systems.filecoin_files.piece.piecestore",target:"_blank",rel:"noopener noreferrer"},Da=n("code",null,"PieceStore",-1),Ga={href:"https://github.com/filecoin-project/go-fil-markets/blob/master/storagemarket",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://github.com/filecoin-project/go-fil-markets/blob/master/retrievalmarket",target:"_blank",rel:"noopener noreferrer"},La={href:"https://github.com/filecoin-project/go-fil-markets/tree/master/piecestore",target:"_blank",rel:"noopener noreferrer"},Na={id:"_2-2-3filecoin中的数据传输",tabindex:"-1"},ja=n("a",{class:"header-anchor",href:"#_2-2-3filecoin中的数据传输","aria-hidden":"true"},"#",-1),Ha={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer",target:"_blank",rel:"noopener noreferrer"},Oa=n("p",null,[s("的"),n("em",null,"数据传输协议"),s("是用于传输的全部或一部分的协议"),n("code",null,"Piece"),s("跨越网络时处理是制成。数据传输模块的总体目标是使其成为底层传输介质的抽象，通过该底层传输介质在Filecoin网络中不同各方之间传输数据。当前，用于实际进行数据传输的底层介质或协议是GraphSync。这样，可以将数据传输协议视为协商协议。")],-1),Ua=n("p",null,[s("数据传输协议既用于存储又用于检索交易。在这两种情况下，数据传输请求都是由客户端发起的。这样做的主要原因是，客户端通常比NAT落后很多，因此从其端开始任何数据传输更加方便。对于存储交易，数据传输请求将作为"),n("em",null,"推送请求"),s("启动，以将数据发送到存储提供商。在“检索交易”的情况下，数据传输请求作为"),n("em",null,"拉取请求"),s("启动，以由存储提供商检索数据。")],-1),za=n("p",null,"发起数据传输的请求包括凭证或令牌（不要与付款渠道凭证混淆），该凭证或令牌指向双方之前已达成的特定交易。这样一来，存储提供商便可以识别请求并将其链接到已同意的交易，而不会忽略该请求。如下所述，检索交易的情况可能略有不同，在此情况下，交易提议和数据传输请求都可以一次发送。",-1),Wa={id:"_2-2-3-1模组",tabindex:"-1"},Za=n("a",{class:"header-anchor",href:"#_2-2-3-1模组","aria-hidden":"true"},"#",-1),Ka={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer.modules",target:"_blank",rel:"noopener noreferrer"},Qa=n("p",null,"该图显示了数据传输及其模块如何与存储和检索市场相匹配。特别要注意，如何将来自市场的数据传输请求验证器插入“数据传输”模块，但其代码属于市场系统。",-1),Ja=n("p",null,[n("img",{src:"https://tva1.sinaimg.cn/large/008eGmZEgy1gn7unqn5ipj31980pan1w.jpg",alt:"image-20210201105943338",loading:"lazy"})],-1),Xa={id:"_2-2-3-2术语",tabindex:"-1"},Ya=n("a",{class:"header-anchor",href:"#_2-2-3-2术语","aria-hidden":"true"},"#",-1),$a={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer.terminology",target:"_blank",rel:"noopener noreferrer"},ne=t("<li><strong>推送请求</strong>：将数据发送给另一方的请求-通常由客户端发起，主要是在发生存储交易的情况下。</li><li>提取<strong>请求</strong>：请求对方发送数据的请求-通常由客户发起，主要是在“检索交易”的情况下。</li><li><strong>请求者</strong>：发起数据传输请求的一方（无论是推还是拉）-通常至少在Filecoin中当前实现的客户端，以克服NAT遍历问题。</li><li><strong>响应者</strong>：接收数据传输请求的一方-通常是存储提供者。</li><li><strong>数据传输凭证或令牌</strong>：围绕存储或检索相关数据的包装，可以识别和验证向另一方的传输请求。</li><li><strong>请求验证器</strong>：仅当响应者可以验证请求是否直接绑定到现有存储或检索交易时，数据传输模块才启动传输。验证不由数据传输模块本身执行。取而代之的是，请求验证器检查数据传输凭单以确定是否响应请求或不理会请求。</li><li><strong>运输者</strong>：协商和确认请求后，实际的转移由双方的运输者管理。传输器是数据传输模块的一部分，但与协商过程隔离。它可以访问基础可验证的传输协议，并使用它来发送数据和跟踪进度。</li><li><strong>订户</strong>：一个外部组件，通过订阅数据传输事件（例如进度或完成）来监视数据传输的进度。</li>",8),se=n("strong",null,"GraphSync",-1),ae={href:"https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md",target:"_blank",rel:"noopener noreferrer"},ee={id:"_2-2-3-3请求阶段",tabindex:"-1"},te=n("a",{class:"header-anchor",href:"#_2-2-3-3请求阶段","aria-hidden":"true"},"#",-1),oe={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer.request-phases",target:"_blank",rel:"noopener noreferrer"},pe=n("p",null,"任何数据传输都有两个基本阶段：",-1),ie=n("ol",null,[n("li",null,"协商：请求者和响应者通过使用数据传输凭证验证传输来同意传输。"),n("li",null,"传输：协商阶段完成后，实际上就传输了数据。用于进行传输的默认协议是Graphsync。")],-1),ce={href:"https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md#extensions",target:"_blank",rel:"noopener noreferrer"},le={href:"https://github.com/ipld/specs/blob/master/block-layer/graphsync/graphsync.md#extensions",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"push",-1),re=n("code",null,"/fil/datatransfer/1.0.0",-1),de=t('<p>值得注意的是，在取回的情况下，提供者可以接受交易和数据传输请求，但是可以暂停取回本身以执行启封过程。在开始实际的数据传输之前，存储提供商必须解封所有请求的数据。此外，存储提供商可以选择在开始开封过程之前暂停检索流程，以请求开封付款请求。存储供应商可以选择要求支付这笔款项，以支付不可思议的计算成本，并避免成为行为不端的客户的受害者。</p><h4 id="_2-2-3-4-流程示例" tabindex="-1"><a class="header-anchor" href="#_2-2-3-4-流程示例" aria-hidden="true">#</a> 2.2.3.4 流程示例</h4><h5 id="_2-2-3-4-1-推流" tabindex="-1"><a class="header-anchor" href="#_2-2-3-4-1-推流" aria-hidden="true">#</a> 2.2.3.4.1 推流</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7urnqsigj31cs0owjuk.jpg" alt="image-20210201110343745" loading="lazy"></p><ol><li>当请求者想要将数据发送给另一方时，它会发起“推”传输。</li><li>请求者的数据传输模块将把推送请求与数据传输凭证一起发送给响应者。</li><li>响应者的数据传输模块通过验证器验证数据传输请求，该验证器是响应者提供的依赖项。</li><li>响应者的数据传输模块通过发出GraphSync请求来启动传输。</li><li>请求者接收GraphSync请求，验证它是否识别出数据传输并开始发送数据。</li><li>响应者接收数据并可以产生进度指示。</li><li>响应者完成接收数据，并通知所有侦听器。</li></ol><p>推送流程非常适合存储交易，在存储交易中，一旦提供者表明他们打算接受并发布客户的交易建议，客户便会立即启动数据传输。</p><h4 id="_2-2-3-5-拉流-单程往返" tabindex="-1"><a class="header-anchor" href="#_2-2-3-5-拉流-单程往返" aria-hidden="true">#</a> 2.2.3.5 拉流-单程往返</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7usyj977j31a40pmtbe.jpg" alt="image-20210201110446569" loading="lazy"></p>',8),ke={id:"_2-2-3-6协议",tabindex:"-1"},ve=n("a",{class:"header-anchor",href:"#_2-2-3-6协议","aria-hidden":"true"},"#",-1),me={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer.protocol",target:"_blank",rel:"noopener noreferrer"},be=n("p",null,"可以通过数据传输协议（libp2p协议类型）在网络上协商数据传输。",-1),he=n("p",null,"使用数据传输协议作为独立的libp2p通讯机制并不是硬性要求-只要双方都实现了可以与对方通信的数据传输子系统，任何传输机制（包括离线机制）都是可以接受的。",-1),fe={id:"_2-2-3-7数据结构",tabindex:"-1"},_e=n("a",{class:"header-anchor",href:"#_2-2-3-7数据结构","aria-hidden":"true"},"#",-1),ge={href:"https://spec.filecoin.io/#section-systems.filecoin_files.data_transfer.data-structures",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://spec.filecoin.io/#example-data-transfer-types",target:"_blank",rel:"noopener noreferrer"},we=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> datatransfer

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">&quot;fmt&quot;</span>

 <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>
 <span class="token string">&quot;github.com/ipld/go-ipld-prime&quot;</span>
 <span class="token string">&quot;github.com/libp2p/go-libp2p-core/peer&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/go-data-transfer/encoding&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">//go:generate cbor-gen-for ChannelID</span>

<span class="token comment">// TypeIdentifier is a unique string identifier for a type of encodable object in a</span>
<span class="token comment">// registry</span>
<span class="token keyword">type</span> TypeIdentifier <span class="token builtin">string</span>

<span class="token comment">// EmptyTypeIdentifier means there is no voucher present</span>
<span class="token keyword">const</span> EmptyTypeIdentifier <span class="token operator">=</span> <span class="token function">TypeIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// Registerable is a type of object in a registry. It must be encodable and must</span>
<span class="token comment">// have a single method that uniquely identifies its type</span>
<span class="token keyword">type</span> Registerable <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 encoding<span class="token punctuation">.</span>Encodable
 <span class="token comment">// Type is a unique string identifier for this voucher type</span>
 <span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> TypeIdentifier
<span class="token punctuation">}</span>

<span class="token comment">// Voucher is used to validate</span>
<span class="token comment">// a data transfer request against the underlying storage or retrieval deal</span>
<span class="token comment">// that precipitated it. The only requirement is a voucher can read and write</span>
<span class="token comment">// from bytes, and has a string identifier type</span>
<span class="token keyword">type</span> Voucher Registerable

<span class="token comment">// VoucherResult is used to provide option additional information about a</span>
<span class="token comment">// voucher being rejected or accepted</span>
<span class="token keyword">type</span> VoucherResult Registerable

<span class="token comment">// TransferID is an identifier for a data transfer, shared between</span>
<span class="token comment">// request/responder and unique to the requester</span>
<span class="token keyword">type</span> TransferID <span class="token builtin">uint64</span>

<span class="token comment">// ChannelID is a unique identifier for a channel, distinct by both the other</span>
<span class="token comment">// party&#39;s peer ID + the transfer ID</span>
<span class="token keyword">type</span> ChannelID <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Initiator peer<span class="token punctuation">.</span>ID
 Responder peer<span class="token punctuation">.</span>ID
 ID        TransferID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ChannelID<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s-%s-%d&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Initiator<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Responder<span class="token punctuation">,</span> c<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// OtherParty returns the peer on the other side of the request, depending</span>
<span class="token comment">// on whether this peer is the initiator or responder</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c ChannelID<span class="token punctuation">)</span> <span class="token function">OtherParty</span><span class="token punctuation">(</span>thisPeer peer<span class="token punctuation">.</span>ID<span class="token punctuation">)</span> peer<span class="token punctuation">.</span>ID <span class="token punctuation">{</span>
 <span class="token keyword">if</span> thisPeer <span class="token operator">==</span> c<span class="token punctuation">.</span>Initiator <span class="token punctuation">{</span>
  <span class="token keyword">return</span> c<span class="token punctuation">.</span>Responder
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> c<span class="token punctuation">.</span>Initiator
<span class="token punctuation">}</span>

<span class="token comment">// Channel represents all the parameters for a single data transfer</span>
<span class="token keyword">type</span> Channel <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 <span class="token comment">// TransferID returns the transfer id for this channel</span>
 <span class="token function">TransferID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> TransferID

 <span class="token comment">// BaseCID returns the CID that is at the root of this data transfer</span>
 <span class="token function">BaseCID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid

 <span class="token comment">// Selector returns the IPLD selector for this data transfer (represented as</span>
 <span class="token comment">// an IPLD node)</span>
 <span class="token function">Selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ipld<span class="token punctuation">.</span>Node

 <span class="token comment">// Voucher returns the voucher for this data transfer</span>
 <span class="token function">Voucher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Voucher

 <span class="token comment">// Sender returns the peer id for the node that is sending data</span>
 <span class="token function">Sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> peer<span class="token punctuation">.</span>ID

 <span class="token comment">// Recipient returns the peer id for the node that is receiving data</span>
 <span class="token function">Recipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> peer<span class="token punctuation">.</span>ID

 <span class="token comment">// TotalSize returns the total size for the data being transferred</span>
 <span class="token function">TotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span>

 <span class="token comment">// IsPull returns whether this is a pull request</span>
 <span class="token function">IsPull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

 <span class="token comment">// ChannelID returns the ChannelID for this request</span>
 <span class="token function">ChannelID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ChannelID

 <span class="token comment">// OtherPeer returns the counter party peer for this channel</span>
 <span class="token function">OtherPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> peer<span class="token punctuation">.</span>ID
<span class="token punctuation">}</span>

<span class="token comment">// ChannelState is channel parameters plus it&#39;s current state</span>
<span class="token keyword">type</span> ChannelState <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 Channel

 <span class="token comment">// SelfPeer returns the peer this channel belongs to</span>
 <span class="token function">SelfPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> peer<span class="token punctuation">.</span>ID

 <span class="token comment">// Status is the current status of this channel</span>
 <span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Status

 <span class="token comment">// Sent returns the number of bytes sent</span>
 <span class="token function">Sent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span>

 <span class="token comment">// Received returns the number of bytes received</span>
 <span class="token function">Received</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span>

 <span class="token comment">// Message offers additional information about the current status</span>
 <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

 <span class="token comment">// Vouchers returns all vouchers sent on this channel</span>
 <span class="token function">Vouchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Voucher

 <span class="token comment">// VoucherResults are results of vouchers sent on the channel</span>
 <span class="token function">VoucherResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>VoucherResult

 <span class="token comment">// LastVoucher returns the last voucher sent on the channel</span>
 <span class="token function">LastVoucher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Voucher

 <span class="token comment">// LastVoucherResult returns the last voucher result sent on the channel</span>
 <span class="token function">LastVoucherResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> VoucherResult

 <span class="token comment">// ReceivedCids returns the cids received so far on the channel</span>
 <span class="token function">ReceivedCids</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cid<span class="token punctuation">.</span>Cid

 <span class="token comment">// Queued returns the number of bytes read from the node and queued for sending</span>
 <span class="token function">Queued</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xe={href:"https://spec.filecoin.io/#example-data-transfer-statuses",target:"_blank",rel:"noopener noreferrer"},Ce=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> datatransfer

<span class="token comment">// Status is the status of transfer for a given channel</span>
<span class="token keyword">type</span> Status <span class="token builtin">uint64</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
 <span class="token comment">// Requested means a data transfer was requested by has not yet been approved</span>
 Requested Status <span class="token operator">=</span> <span class="token boolean">iota</span>

 <span class="token comment">// Ongoing means the data transfer is in progress</span>
 Ongoing

 <span class="token comment">// TransferFinished indicates the initiator is done sending/receiving</span>
 <span class="token comment">// data but is awaiting confirmation from the responder</span>
 TransferFinished

 <span class="token comment">// ResponderCompleted indicates the initiator received a message from the</span>
 <span class="token comment">// responder that it&#39;s completed</span>
 ResponderCompleted

 <span class="token comment">// Finalizing means the responder is awaiting a final message from the initator to</span>
 <span class="token comment">// consider the transfer done</span>
 Finalizing

 <span class="token comment">// Completing just means we have some final cleanup for a completed request</span>
 Completing

 <span class="token comment">// Completed means the data transfer is completed successfully</span>
 Completed

 <span class="token comment">// Failing just means we have some final cleanup for a failed request</span>
 Failing

 <span class="token comment">// Failed means the data transfer failed</span>
 Failed

 <span class="token comment">// Cancelling just means we have some final cleanup for a cancelled request</span>
 Cancelling

 <span class="token comment">// Cancelled means the data transfer ended prematurely</span>
 Cancelled

 <span class="token comment">// InitiatorPaused means the data sender has paused the channel (only the sender can unpause this)</span>
 InitiatorPaused

 <span class="token comment">// ResponderPaused means the data receiver has paused the channel (only the receiver can unpause this)</span>
 ResponderPaused

 <span class="token comment">// BothPaused means both sender and receiver have paused the channel seperately (both must unpause)</span>
 BothPaused

 <span class="token comment">// ResponderFinalizing is a unique state where the responder is awaiting a final voucher</span>
 ResponderFinalizing

 <span class="token comment">// ResponderFinalizingTransferFinished is a unique state where the responder is awaiting a final voucher</span>
 <span class="token comment">// and we have received all data</span>
 ResponderFinalizingTransferFinished

 <span class="token comment">// ChannelNotFoundError means the searched for data transfer does not exist</span>
 ChannelNotFoundError
<span class="token punctuation">)</span>

<span class="token comment">// Statuses are human readable names for data transfer states</span>
<span class="token keyword">var</span> Statuses <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>Status<span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
 <span class="token comment">// Requested means a data transfer was requested by has not yet been approved</span>
 Requested<span class="token punctuation">:</span>                           <span class="token string">&quot;Requested&quot;</span><span class="token punctuation">,</span>
 Ongoing<span class="token punctuation">:</span>                             <span class="token string">&quot;Ongoing&quot;</span><span class="token punctuation">,</span>
 TransferFinished<span class="token punctuation">:</span>                    <span class="token string">&quot;TransferFinished&quot;</span><span class="token punctuation">,</span>
 ResponderCompleted<span class="token punctuation">:</span>                  <span class="token string">&quot;ResponderCompleted&quot;</span><span class="token punctuation">,</span>
 Finalizing<span class="token punctuation">:</span>                          <span class="token string">&quot;Finalizing&quot;</span><span class="token punctuation">,</span>
 Completing<span class="token punctuation">:</span>                          <span class="token string">&quot;Completing&quot;</span><span class="token punctuation">,</span>
 Completed<span class="token punctuation">:</span>                           <span class="token string">&quot;Completed&quot;</span><span class="token punctuation">,</span>
 Failing<span class="token punctuation">:</span>                             <span class="token string">&quot;Failing&quot;</span><span class="token punctuation">,</span>
 Failed<span class="token punctuation">:</span>                              <span class="token string">&quot;Failed&quot;</span><span class="token punctuation">,</span>
 Cancelling<span class="token punctuation">:</span>                          <span class="token string">&quot;Cancelling&quot;</span><span class="token punctuation">,</span>
 Cancelled<span class="token punctuation">:</span>                           <span class="token string">&quot;Cancelled&quot;</span><span class="token punctuation">,</span>
 InitiatorPaused<span class="token punctuation">:</span>                     <span class="token string">&quot;InitiatorPaused&quot;</span><span class="token punctuation">,</span>
 ResponderPaused<span class="token punctuation">:</span>                     <span class="token string">&quot;ResponderPaused&quot;</span><span class="token punctuation">,</span>
 BothPaused<span class="token punctuation">:</span>                          <span class="token string">&quot;BothPaused&quot;</span><span class="token punctuation">,</span>
 ResponderFinalizing<span class="token punctuation">:</span>                 <span class="token string">&quot;ResponderFinalizing&quot;</span><span class="token punctuation">,</span>
 ResponderFinalizingTransferFinished<span class="token punctuation">:</span> <span class="token string">&quot;ResponderFinalizingTransferFinished&quot;</span><span class="token punctuation">,</span>
 ChannelNotFoundError<span class="token punctuation">:</span>                <span class="token string">&quot;ChannelNotFoundError&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Se={href:"https://spec.filecoin.io/#example-data-transfer-manager",target:"_blank",rel:"noopener noreferrer"},Fe=t(`<p>管理器是数据传输子系统的所有实现所呈现的核心接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Manager <span class="token keyword">interface</span> <span class="token punctuation">{</span>

 <span class="token comment">// Start initializes data transfer processing</span>
 <span class="token function">Start</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// OnReady registers a listener for when the data transfer comes on line</span>
 <span class="token function">OnReady</span><span class="token punctuation">(</span>ReadyFunc<span class="token punctuation">)</span>

 <span class="token comment">// Stop terminates all data transfers and ends processing</span>
 <span class="token function">Stop</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// RegisterVoucherType registers a validator for the given voucher type</span>
 <span class="token comment">// will error if voucher type does not implement voucher</span>
 <span class="token comment">// or if there is a voucher type registered with an identical identifier</span>
 <span class="token function">RegisterVoucherType</span><span class="token punctuation">(</span>voucherType Voucher<span class="token punctuation">,</span> validator RequestValidator<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// RegisterRevalidator registers a revalidator for the given voucher type</span>
 <span class="token comment">// Note: this is the voucher type used to revalidate. It can share a name</span>
 <span class="token comment">// with the initial validator type and CAN be the same type, or a different type.</span>
 <span class="token comment">// The revalidator can simply be the sampe as the original request validator,</span>
 <span class="token comment">// or a different validator that satisfies the revalidator interface.</span>
 <span class="token function">RegisterRevalidator</span><span class="token punctuation">(</span>voucherType Voucher<span class="token punctuation">,</span> revalidator Revalidator<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// RegisterVoucherResultType allows deserialization of a voucher result,</span>
 <span class="token comment">// so that a listener can read the metadata</span>
 <span class="token function">RegisterVoucherResultType</span><span class="token punctuation">(</span>resultType VoucherResult<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// RegisterTransportConfigurer registers the given transport configurer to be run on requests with the given voucher</span>
 <span class="token comment">// type</span>
 <span class="token function">RegisterTransportConfigurer</span><span class="token punctuation">(</span>voucherType Voucher<span class="token punctuation">,</span> configurer TransportConfigurer<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// open a data transfer that will send data to the recipient peer and</span>
 <span class="token comment">// transfer parts of the piece that match the selector</span>
 <span class="token function">OpenPushDataChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> to peer<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> voucher Voucher<span class="token punctuation">,</span> baseCid cid<span class="token punctuation">.</span>Cid<span class="token punctuation">,</span> selector ipld<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>ChannelID<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

 <span class="token comment">// open a data transfer that will request data from the sending peer and</span>
 <span class="token comment">// transfer parts of the piece that match the selector</span>
 <span class="token function">OpenPullDataChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> to peer<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> voucher Voucher<span class="token punctuation">,</span> baseCid cid<span class="token punctuation">.</span>Cid<span class="token punctuation">,</span> selector ipld<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>ChannelID<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

 <span class="token comment">// send an intermediate voucher as needed when the receiver sends a request for revalidation</span>
 <span class="token function">SendVoucher</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chid ChannelID<span class="token punctuation">,</span> voucher Voucher<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// close an open channel (effectively a cancel)</span>
 <span class="token function">CloseDataTransferChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chid ChannelID<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// pause a data transfer channel (only allowed if transport supports it)</span>
 <span class="token function">PauseDataTransferChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chid ChannelID<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// resume a data transfer channel (only allowed if transport supports it)</span>
 <span class="token function">ResumeDataTransferChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chid ChannelID<span class="token punctuation">)</span> <span class="token builtin">error</span>

 <span class="token comment">// get status of a transfer</span>
 <span class="token function">TransferChannelStatus</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> x ChannelID<span class="token punctuation">)</span> Status

 <span class="token comment">// get notified when certain types of events happen</span>
 <span class="token function">SubscribeToEvents</span><span class="token punctuation">(</span>subscriber Subscriber<span class="token punctuation">)</span> Unsubscribe

 <span class="token comment">// get all in progress transfers</span>
 <span class="token function">InProgressChannels</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>ChannelID<span class="token punctuation">]</span>ChannelState<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

 <span class="token comment">// RestartDataTransferChannel restarts an existing data transfer channel</span>
 <span class="token function">RestartDataTransferChannel</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> chid ChannelID<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),qe={id:"_2-2-4数据格式和序列化",tabindex:"-1"},Pe=n("a",{class:"header-anchor",href:"#_2-2-4数据格式和序列化","aria-hidden":"true"},"#",-1),Ae={href:"https://spec.filecoin.io/#section-systems.filecoin_files.serialization",target:"_blank",rel:"noopener noreferrer"},Be=n("p",null,"Filecoin试图利用所需的数据格式更少，并采用规范化的序列化规则，以通过简单性提高协议安全性，并实现Filecoin协议实现之间的互操作性。",-1),Ee={href:"https://github.com/filecoin-project/specs/issues/621",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://github.com/filecoin-project/specs/issues/621",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://github.com/filecoin-project/specs/issues/615",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://github.com/filecoin-project/specs/issues/615",target:"_blank",rel:"noopener noreferrer"},Me={id:"_2-2-4-1资料格式",tabindex:"-1"},De=n("a",{class:"header-anchor",href:"#_2-2-4-1资料格式","aria-hidden":"true"},"#",-1),Ge={href:"https://spec.filecoin.io/#section-systems.filecoin_files.serialization.data-formats",target:"_blank",rel:"noopener noreferrer"},Ve=n("p",null,"Filecoin内存中的数据类型通常很简单。实现应支持两种整数类型：Int（表示本机64位整数）和BigInt（表示任意长度），并避免处理浮点数以最大程度地减少跨编程语言和实现的互操作性问题。",-1),Le={href:"https://spec.filecoin.io/#section-algorithms.crypto.randomness",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://spec.filecoin.io/#section-algorithms.crypto.randomness",target:"_blank",rel:"noopener noreferrer"},je={id:"_2-2-4-2序列化",tabindex:"-1"},He=n("a",{class:"header-anchor",href:"#_2-2-4-2序列化","aria-hidden":"true"},"#",-1),Oe={href:"https://spec.filecoin.io/#section-systems.filecoin_files.serialization.serialization",target:"_blank",rel:"noopener noreferrer"},Ue=n("p",null,[n("code",null,"Serialization"),s("Filecoin中的数据可确保用于序列化内存中数据的一致格式，以进行传输和存储中传输。序列化对于Filecoin协议实现之间的协议安全性和互操作性至关重要，从而可以跨Filecoin节点进行一致的状态更新。")],-1),ze={href:"https://tools.ietf.org/html/rfc7049",target:"_blank",rel:"noopener noreferrer"},We={href:"https://tools.ietf.org/html/rfc7049#section-2.1",target:"_blank",rel:"noopener noreferrer"},Ze=n("p",null,"为了说明起见，内存映射将以按预定顺序列出的键和值的CBOR数组表示。序列化格式的近期更新将涉及适当地标记字段，以确保随着协议的发展而进行适当的序列化/反序列化。",-1),Ke={id:"_2-3虚拟机",tabindex:"-1"},Qe=n("a",{class:"header-anchor",href:"#_2-3虚拟机","aria-hidden":"true"},"#",-1),Je={href:"https://spec.filecoin.io/#section-systems.filecoin_vm",target:"_blank",rel:"noopener noreferrer"},Xe=n("p",null,"Filecoin区块链中的Actor等同于以太坊虚拟机中的智能合约。",-1),Ye=n("p",null,"Filecoin虚拟机（VM）是负责执行所有参与者代码的系统组件。在Filecoin VM上执行参与者（即链上执行）会产生汽油费用。",-1),$e=n("p",null,[s("在Filecoin VM上应用（即执行）的任何操作都将以"),n("em",null,"状态树"),s("的形式产生输出（如下所述）。最新的"),n("em",null,"状态树"),s("是Filecoin区块链中当前的真相来源。该"),n("em",null,"国树"),s("是由CID，其存储在IPLD店鉴定。")],-1),nt={id:"_2-3-1vm-actor接口",tabindex:"-1"},st=n("a",{class:"header-anchor",href:"#_2-3-1vm-actor接口","aria-hidden":"true"},"#",-1),at={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.actor",target:"_blank",rel:"noopener noreferrer"},et=t("<p>如上所述，Actor是以太坊虚拟机中智能合约的Filecoin等效项。因此，Actor是系统的核心组件。Filecoin区块链当前状态的任何更改都必须通过参与者方法调用来触发。</p><p>本小节描述Actor与Filecoin虚拟机之间的<em>接口</em>。这意味着下面描述的大多数内容并不严格属于VM。相反，逻辑位于VM和Actors逻辑之间的接口上。</p><p>总共共有十一（11）种类型的<em>内置</em>Actor，但并非所有类型都与VM交互。一些Actor不会调用对区块链的StateTree的更改，因此不需要与VM的接口。我们稍后将在“系统参与者”小节中讨论所有系统参与者的详细信息。</p><p>该<em>演员地址</em>是通过散列发送者的公钥和创建随机数生成稳定的地址。在整个链重组中应该保持稳定。该<em>演员ID地址</em>，另一方面，是紧凑的，但可以在链重新组织的情况下更改自动递增地址。话虽如此，演员创建后应该使用<em>演员地址</em>。</p>",4),tt={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},ot=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> builtin

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 addr <span class="token string">&quot;github.com/filecoin-project/go-address&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Addresses for singleton system actors.</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
 <span class="token comment">// Distinguished AccountActor that is the source of system implicit messages.</span>
 SystemActorAddr           <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
 InitActorAddr             <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
 RewardActorAddr           <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
 CronActorAddr             <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
 StoragePowerActorAddr     <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
 StorageMarketActorAddr    <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
 VerifiedRegistryActorAddr <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
 <span class="token comment">// Distinguished AccountActor that is the destination of all burnt funds.</span>
 BurntFundsActorAddr <span class="token operator">=</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> FirstNonSingletonActorId <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">func</span> <span class="token function">mustMakeAddress</span><span class="token punctuation">(</span>id <span class="token builtin">uint64</span><span class="token punctuation">)</span> addr<span class="token punctuation">.</span>Address <span class="token punctuation">{</span>
 address<span class="token punctuation">,</span> err <span class="token operator">:=</span> addr<span class="token punctuation">.</span><span class="token function">NewIDAddress</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> address
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该<code>ActorState</code>结构由参与者的余额（根据该参与者持有的令牌）以及一组用于查询，检查链状态并与之交互的状态方法组成。</p>`,2),pt={id:"_2-3-2状态树",tabindex:"-1"},it=n("a",{class:"header-anchor",href:"#_2-3-2状态树","aria-hidden":"true"},"#",-1),ct={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.state_tree",target:"_blank",rel:"noopener noreferrer"},lt=n("p",null,"状态树是对Filecoin区块链应用的任何操作的执行输出。链上（即VM）状态数据结构是将地址绑定到参与者状态的映射（以散列阵列映射Trie-HAMT的形式）。VM在每次执行actor方法时都会调用当前的State Tree函数。",-1),ut={href:"https://spec.filecoin.io/#example-statetree",target:"_blank",rel:"noopener noreferrer"},rt=t(`<p>StateTree存储参与者的ID。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> StateTree <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 root        adt<span class="token punctuation">.</span>Map
 version     types<span class="token punctuation">.</span>StateTreeVersion
 info        cid<span class="token punctuation">.</span>Cid
 Store       cbor<span class="token punctuation">.</span>IpldStore
 lookupIDFun <span class="token keyword">func</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>

 snaps <span class="token operator">*</span>stateSnaps
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),dt={id:"_2-3-3vm消息-actor方法调用",tabindex:"-1"},kt=n("a",{class:"header-anchor",href:"#_2-3-3vm消息-actor方法调用","aria-hidden":"true"},"#",-1),vt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.message",target:"_blank",rel:"noopener noreferrer"},mt=n("p",null,"消息是两个参与者之间进行通信的单位，因此是状态变化的根本原因。一条消息结合了：",-1),bt=n("ul",null,[n("li",null,"从发送方转移到接收方的令牌金额，以及"),n("li",null,"具有在接收方上调用的参数的方法（可选/在适用的情况下）。")],-1),ht=n("p",null,"演员代码可以在处理收到的消息时向其他演员发送其他消息。消息是同步处理的，也就是说，参与者在恢复控制之前等待发送的消息完成。",-1),ft=n("p",null,[s("消息的处理消耗了计算和存储单位，两者均以gas表示。消息的"),n("em",null,"气体限制"),s("为处理该消息提供了所需的计算上限。消息的发件人以其确定的汽油价格来支付消息执行所消耗的气体单位（包括所有嵌套的消息）。区块生产者选择要包含在区块中的消息，并根据每个消息的汽油价格和消耗量获得奖励，从而形成市场。")],-1),_t={id:"_2-3-3-1消息语法验证",tabindex:"-1"},gt=n("a",{class:"header-anchor",href:"#_2-3-3-1消息语法验证","aria-hidden":"true"},"#",-1),yt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.message.message-syntax-validation",target:"_blank",rel:"noopener noreferrer"},wt=t(`<p>语法无效的消息不得传输，保留在消息池中或包含在块中。如果收到无效消息，则应将其丢弃，并且不要进一步传播。</p><p>当单独发送时（在包含在块中之前）<code>SignedMessage</code>，无论使用哪种签名方案，都将消息打包为 。有效的签名邮件的序列化总大小不大于<code>message.MessageMaxSize</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedMessage <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Message   Message
 Signature crypto<span class="token punctuation">.</span>Signature
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法上有效的<code>UnsignedMessage</code>：</p><ul><li>具有格式正确的非空<code>To</code>地址，</li><li>具有格式正确的非空<code>From</code>地址，</li><li>具有<code>Value</code>不小于零且不大于令牌总供给（<code>2e9 * 1e18</code>），并且</li><li>具有非负数<code>GasPrice</code>，</li><li>具有<code>GasLimit</code>至少等于与消息的序列化字节关联的气体消耗的值，</li><li>具有<code>GasLimit</code>不大于区块气体限制网络参数的值。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 <span class="token comment">// Version of this message (has to be non-negative)</span>
 Version <span class="token builtin">uint64</span>

 <span class="token comment">// Address of the receiving actor.</span>
 To   address<span class="token punctuation">.</span>Address
 <span class="token comment">// Address of the sending actor.</span>
 From address<span class="token punctuation">.</span>Address

 CallSeqNum <span class="token builtin">uint64</span>

 <span class="token comment">// Value to transfer from sender&#39;s to receiver&#39;s balance.</span>
 Value BigInt

 <span class="token comment">// GasPrice is a Gas-to-FIL cost</span>
 GasPrice BigInt
 <span class="token comment">// Maximum Gas to be spent on the processing of this message</span>
 GasLimit <span class="token builtin">int64</span>

 <span class="token comment">// Optional method to invoke on receiver, zero for a plain value transfer.</span>
 Method abi<span class="token punctuation">.</span>MethodNum
 <span class="token comment">//Serialized parameters to the method.</span>
 Params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该有几个功能可以从中提取信息<code>Message struct</code>，例如发件人和收件人地址，要转移的值，执行消息所需的资金以及消息的CID。</p><p>假定消息最终应包含在一个块中并添加到区块链中，则应检查消息的发送者和接收者的消息有效性，该值（应为非负值，并且始终小于循环供应），天然气价格（该价格又应为非负数）且<code>BlockGasLimit</code>该价格不应大于该区块的天然气限额。</p>`,8),xt={id:"_2-3-3-2消息语义验证",tabindex:"-1"},Ct=n("a",{class:"header-anchor",href:"#_2-3-3-2消息语义验证","aria-hidden":"true"},"#",-1),St={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.message.message-semantic-validation",target:"_blank",rel:"noopener noreferrer"},Ft=t(`<p>语义验证是指需要消息本身之外的信息的验证。</p><p>语义上有效的<code>SignedMessage</code>必须带有签名，该签名可验证有效载荷是否已被<code>From</code>地址标识的帐户执行者的公钥签名。请注意，当<code>From</code>地址是ID地址时，必须在块所标识的父状态下的发送帐户参与者的状态下查找公钥。</p><p>注意：发送方必须<em>以</em>包含消息<em>的块</em>所<em>标识的父级状态</em>存在。这意味着单个块包含创建新帐户actor的消息和来自同一actor的消息是无效的。来自该参与者的第一条消息必须等到下一个纪元。消息池可能会排除来自参与者的，尚未处于链状状态的消息。</p><p>消息没有进一步的语义验证，可能导致包含该消息的块无效。每个语法有效且正确签名的消息都可以包含在一个块中，并会从执行中产生一个收据。其中<code>MessageReceipt sturct</code>包括以下内容：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MessageReceipt <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 ExitCode exitcode<span class="token punctuation">.</span>ExitCode
 Return   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
 GasUsed  <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，消息可能无法执行到完成，在这种情况下，它不会触发所需的状态更改。</p><p>这种“无消息语义验证”策略的原因是，在消息<em>作为提示集的一部分</em>执行之前，将不知道消息将应用于的状态。块生产者不知道在提示集中是否有另一个块会在它之前，因此从声明的父状态更改了该块消息将应用到的状态。</p>`,7),qt={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},Pt=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> types

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">&quot;bytes&quot;</span>
 <span class="token string">&quot;encoding/json&quot;</span>
 <span class="token string">&quot;fmt&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/go-state-types/abi&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/big&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/lotus/build&quot;</span>
 block <span class="token string">&quot;github.com/ipfs/go-block-format&quot;</span>
 <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>
 xerrors <span class="token string">&quot;golang.org/x/xerrors&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/go-address&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> MessageVersion <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">type</span> ChainMsg <span class="token keyword">interface</span> <span class="token punctuation">{</span>
 <span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid
 <span class="token function">VMMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message
 <span class="token function">ToStorageBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
 <span class="token comment">// FIXME: This is the *message* length, this name is misleading.</span>
 <span class="token function">ChainLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Version <span class="token builtin">uint64</span>

 To   address<span class="token punctuation">.</span>Address
 From address<span class="token punctuation">.</span>Address

 Nonce <span class="token builtin">uint64</span>

 Value abi<span class="token punctuation">.</span>TokenAmount

 GasLimit   <span class="token builtin">int64</span>
 GasFeeCap  abi<span class="token punctuation">.</span>TokenAmount
 GasPremium abi<span class="token punctuation">.</span>TokenAmount

 Method abi<span class="token punctuation">.</span>MethodNum
 Params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> address<span class="token punctuation">.</span>Address <span class="token punctuation">{</span>
 <span class="token keyword">return</span> m<span class="token punctuation">.</span>From
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> address<span class="token punctuation">.</span>Address <span class="token punctuation">{</span>
 <span class="token keyword">return</span> m<span class="token punctuation">.</span>To
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">ValueReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abi<span class="token punctuation">.</span>TokenAmount <span class="token punctuation">{</span>
 <span class="token keyword">return</span> m<span class="token punctuation">.</span>Value
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">DecodeMessage</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Message<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> msg Message
 <span class="token keyword">if</span> err <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token function">UnmarshalCBOR</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> msg<span class="token punctuation">.</span>Version <span class="token operator">!=</span> MessageVersion <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;decoded message had incorrect version (%d)&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Version<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 buf <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">MarshalCBOR</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">ChainLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
 ser<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">ToStorageBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>Block<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 data<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>

 c<span class="token punctuation">,</span> err <span class="token operator">:=</span> abi<span class="token punctuation">.</span>CidBuilder<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> block<span class="token punctuation">.</span><span class="token function">NewBlockWithCid</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid <span class="token punctuation">{</span>
 b<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">ToStorageBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to marshal message: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// I think this is maybe sketchy, what happens if we try to serialize a message with an undefined address in it?</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> mCid <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 <span class="token operator">*</span>RawMessage
 CID cid<span class="token punctuation">.</span>Cid
<span class="token punctuation">}</span>

<span class="token keyword">type</span> RawMessage Message

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mCid<span class="token punctuation">{</span>
  RawMessage<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">*</span>RawMessage<span class="token punctuation">)</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span>
  CID<span class="token punctuation">:</span>        m<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">RequiredFunds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> BigInt <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">BigMul</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">,</span> <span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>GasLimit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">VMMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Message <span class="token punctuation">{</span>
 <span class="token keyword">return</span> m
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">Equals</span><span class="token punctuation">(</span>o <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">EqualCall</span><span class="token punctuation">(</span>o <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 m1 <span class="token operator">:=</span> <span class="token operator">*</span>m
 m2 <span class="token operator">:=</span> <span class="token operator">*</span>o

 m1<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span> m2<span class="token punctuation">.</span>GasLimit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
 m1<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">,</span> m2<span class="token punctuation">.</span>GasFeeCap <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 m1<span class="token punctuation">.</span>GasPremium<span class="token punctuation">,</span> m2<span class="token punctuation">.</span>GasPremium <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>m1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">ValidForBlockInclusion</span><span class="token punctuation">(</span>minGas <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Version <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Version&#39; unsupported&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>To <span class="token operator">==</span> address<span class="token punctuation">.</span>Undef <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;To&#39; address cannot be empty&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>From <span class="token operator">==</span> address<span class="token punctuation">.</span>Undef <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;From&#39; address cannot be empty&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>TotalFilecoinInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; field cannot be greater than total filecoin supply&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasPremium&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasPremium&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; less than &#39;GasPremium&#39;&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasLimit <span class="token operator">&gt;</span> build<span class="token punctuation">.</span>BlockGasLimit <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasLimit&#39; field cannot be greater than a block&#39;s gas limit&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// since prices might vary with time, this is technically semantic validation</span>
 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasLimit <span class="token operator">&lt;</span> minGas <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasLimit&#39; field cannot be less than the cost of storing a message on chain %d &lt; %d&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span> minGas<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> TestGasLimit <span class="token operator">=</span> <span class="token number">100e6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),At={id:"_2-3-4vm运行时环境-在vm内部",tabindex:"-1"},Bt=n("a",{class:"header-anchor",href:"#_2-3-4vm运行时环境-在vm内部","aria-hidden":"true"},"#",-1),Et={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.runtime",target:"_blank",rel:"noopener noreferrer"},Tt={id:"_2-3-4-1收据",tabindex:"-1"},It=n("a",{class:"header-anchor",href:"#_2-3-4-1收据","aria-hidden":"true"},"#",-1),Rt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.runtime.receipts",target:"_blank",rel:"noopener noreferrer"},Mt=t(`<p>甲<code>MessageReceipt</code>包含一个顶层消息执行的结果。每个语法有效且正确签名的消息都可以包含在一个块中，并会从执行中产生一个收据。</p><p>语法有效的收据具有：</p><ul><li>一个非负<code>ExitCode</code>，</li><li><code>Return</code>仅当退出代码为零时，才为非空值；并且</li><li>非负数<code>GasUsed</code>。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MessageReceipt <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 ExitCode exitcode<span class="token punctuation">.</span>ExitCode
 Return   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
 GasUsed  <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Dt={id:"_2-3-4-2vm-runtime-演员界面",tabindex:"-1"},Gt=n("a",{class:"header-anchor",href:"#_2-3-4-2vm-runtime-演员界面","aria-hidden":"true"},"#",-1),Vt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.runtime.vmruntime-actors-interface",target:"_blank",rel:"noopener noreferrer"},Lt=n("code",null,"vm/runtime",-1),Nt={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/runtime/runtime.go",target:"_blank",rel:"noopener noreferrer"},jt={id:"_2-3-4-3vm-runtime-虚拟机实施",tabindex:"-1"},Ht=n("a",{class:"header-anchor",href:"#_2-3-4-3vm-runtime-虚拟机实施","aria-hidden":"true"},"#",-1),Ot={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.runtime.vmruntime-vm-implementation",target:"_blank",rel:"noopener noreferrer"},Ut=n("code",null,"vm/runtime",-1),zt={href:"https://github.com/filecoin-project/lotus/blob/master/chain/vm/runtime.go",target:"_blank",rel:"noopener noreferrer"},Wt={id:"_2-3-4-4退出码",tabindex:"-1"},Zt=n("a",{class:"header-anchor",href:"#_2-3-4-4退出码","aria-hidden":"true"},"#",-1),Kt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.runtime.exit-codes",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://github.com/filecoin-project/go-state-types/blob/master/exitcode/common.go",target:"_blank",rel:"noopener noreferrer"},Jt={id:"_2-3-5煤气费",tabindex:"-1"},Xt=n("a",{class:"header-anchor",href:"#_2-3-5煤气费","aria-hidden":"true"},"#",-1),Yt={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.gas_fee",target:"_blank",rel:"noopener noreferrer"},$t={id:"_2-3-5-1概要",tabindex:"-1"},no=n("a",{class:"header-anchor",href:"#_2-3-5-1概要","aria-hidden":"true"},"#",-1),so={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.gas_fee.summary",target:"_blank",rel:"noopener noreferrer"},ao=t("<p>与许多区块链的传统情况一样，Gas是衡量链上消息操作要执行多少消耗的存储和/或计算资源的度量单位。在较高级别上，它的工作方式如下：消息发送者指定他们愿意支付的最高金额，以便消息被执行并包含在块中。这是根据总的天然气单位数（<code>GasLimit</code>）（通常期望高于实际<code>GasUsed</code>单位）和每单位天然气的价格（或费用<code>GasFeeCap</code>）来指定的。</p><p>传统上，<code>GasUsed * GasFeeCap</code>去生产矿工作为奖励。该产品的结果被视为消息包含的优先费用，也就是说，消息以降序排列，而消息最高的消息<code>GasUsed * GasFeeCap</code>被优先考虑，因为它们会向矿工返回更多的利润。</p><p>但是，已经观察到，<code>GasUsed * GasFee</code>出于一些原因，这种（支付）策略对于块生产矿工是有问题的。首先，一个生产区块的矿工可能免费包含一条非常昂贵的消息（就所需的链资源而言），在这种情况下，链本身需要承担成本。其次，消息发送者可以任意设置高价，但对于低成本消息（同样以链资源而言），这会导致DoS漏洞。</p><p>为了克服这种情况，Filecoin区块链定义了一个<code>BaseFee</code>，每个消息都会对其进行刻录。理由是，考虑到天然气是衡量链上资源消耗的一种手段，与将其奖励给矿工相比，将其燃烧是有意义的。这样，避免了来自矿工的费用操纵。它<code>BaseFee</code>是动态的，会根据网络拥塞情况自动调整。这一事实使网络可以抵御垃圾邮件攻击。鉴于在SPAM攻击期间网络负载会增加，因此，攻击者无法将SPAM消息的完整块长时间保留<code>BaseFee</code>。</p><p>最后，<code>GasPremium</code>是发件人包括的优先费，以激励矿工选择最有利可图的消息。换句话说，如果消息发件人希望更快地包含其消息，则可以设置更高的<code>GasPremium</code>。</p>",5),eo={id:"_2-3-5-2参量",tabindex:"-1"},to=n("a",{class:"header-anchor",href:"#_2-3-5-2参量","aria-hidden":"true"},"#",-1),oo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.gas_fee.parameters",target:"_blank",rel:"noopener noreferrer"},po=t("<ul><li><code>GasUsed</code>是执行一条消息所消耗的资源（或气体单位）数量的度量。每种气体单位都以attoFIL进行测量，因此<code>GasUsed</code>是代表能耗单位的数字。<code>GasUsed</code>与消息是正确执行还是失败无关。</li><li><code>BaseFee</code>是每次执行消息时要燃烧（发送到不可恢复的地址）的每单位天然气的设定价格（以attoFIL /天然气单位计量）。的值<code>BaseFee</code>是动态的，并根据当前的网络拥塞参数进行调整。例如，当网络超出5B气体限制使用量时，<code>BaseFee</code>增加，而当气体限制使用量下降到5B以下时，情况相反。的<code>BaseFee</code>施加到每个块应被包括在块本身。应该有可能<code>BaseFee</code>从链的顶部获得电流值。的<code>BaseFee</code>每单位适用<code>GasUsed</code>，因此，气体的总量烧制的消息是<code>BaseFee * GasUsed</code>。请注意，<code>BaseFee</code>每条消息都会产生，但是同一块中所有消息的值都相同。</li><li><code>GasLimit</code>以气体为单位进行测量，并由消息发送者设置。它对应允许消息执行在链上消耗的气体量（即气体单位数）施加了硬性限制。消息触发的每个基本操作都会消耗气体，而消息用尽的消息将失败。当消息失败时，由于执行此消息而对状态进行的所有修改都将恢复为先前的状态。与消息执行是否成功无关，矿工将获得他们执行消息所消耗的资源的奖励（见<code>GasPremium</code>下文）。</li><li><code>GasFeeCap</code>是消息发件人愿意为每单位天然气支付的最高价格（以attoFIL / gas单位衡量）。再加上<code>GasLimit</code>，则<code>GasFeeCap</code>是设置一个发件人将一个消息FIL支付的最高金额：发件人是保证信息绝不会令他们超过<code>GasLimit * GasFeeCap</code>attoFIL（不包括任何溢价，该信息包含其收件人）。</li><li><code>GasPremium</code>是消息发送者愿意支付的每单位天然气价格（以attoFIL / gas计量）（在顶部<code>BaseFee</code>）以“提示”将包含该消息的矿工。一条消息通常可以<code>GasLimit * GasPremium</code>有效地使它的矿工attoFIL <code>GasPremium = GasFeeCap - BaseFee</code>。请注意，与相对于<code>GasPremium</code>应用于<code>GasLimit</code>，<code>GasUsed</code>以使矿工的消息选择更加直接。</li></ul>",1),io={href:"https://spec.filecoin.io/#example-computegasoverestimationburn",target:"_blank",rel:"noopener noreferrer"},co=t(`<p>ComputeGasOverestimationBurn计算要退款的燃气量和要燃烧的燃气量结果是（退款，燃烧）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ComputeGasOverestimationBurn</span><span class="token punctuation">(</span>gasUsed<span class="token punctuation">,</span> gasLimit <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> gasUsed <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> gasLimit
 <span class="token punctuation">}</span>

 <span class="token comment">// over = gasLimit/gasUsed - 1 - 0.1</span>
 <span class="token comment">// over = min(over, 1)</span>
 <span class="token comment">// gasToBurn = (gasLimit - gasUsed) * over</span>

 <span class="token comment">// so to factor out division from \`over\`</span>
 <span class="token comment">// over*gasUsed = min(gasLimit - (11*gasUsed)/10, gasUsed)</span>
 <span class="token comment">// gasToBurn = ((gasLimit - gasUsed)*over*gasUsed) / gasUsed</span>
 over <span class="token operator">:=</span> gasLimit <span class="token operator">-</span> <span class="token punctuation">(</span>gasOveruseNum<span class="token operator">*</span>gasUsed<span class="token punctuation">)</span><span class="token operator">/</span>gasOveruseDenom
 <span class="token keyword">if</span> over <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> gasLimit <span class="token operator">-</span> gasUsed<span class="token punctuation">,</span> <span class="token number">0</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// if we want sharper scaling it goes here:</span>
 <span class="token comment">// over *= 2</span>

 <span class="token keyword">if</span> over <span class="token operator">&gt;</span> gasUsed <span class="token punctuation">{</span>
  over <span class="token operator">=</span> gasUsed
 <span class="token punctuation">}</span>

 <span class="token comment">// needs bigint, as it overflows in pathological case gasLimit &gt; 2^32 gasUsed = gasLimit / 2</span>
 gasToBurn <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>gasLimit <span class="token operator">-</span> gasUsed<span class="token punctuation">)</span>
 gasToBurn <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>gasToBurn<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>over<span class="token punctuation">)</span><span class="token punctuation">)</span>
 gasToBurn <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Div</span><span class="token punctuation">(</span>gasToBurn<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>gasUsed<span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token keyword">return</span> gasLimit <span class="token operator">-</span> gasUsed <span class="token operator">-</span> gasToBurn<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gasToBurn<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),lo={href:"https://spec.filecoin.io/#example-computenextbasefee",target:"_blank",rel:"noopener noreferrer"},uo=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ComputeNextBaseFee</span><span class="token punctuation">(</span>baseFee types<span class="token punctuation">.</span>BigInt<span class="token punctuation">,</span> gasLimitUsed <span class="token builtin">int64</span><span class="token punctuation">,</span> noOfBlocks <span class="token builtin">int</span><span class="token punctuation">,</span> epoch abi<span class="token punctuation">.</span>ChainEpoch<span class="token punctuation">)</span> types<span class="token punctuation">.</span>BigInt <span class="token punctuation">{</span>
 <span class="token comment">// deta := gasLimitUsed/noOfBlocks - build.BlockGasTarget</span>
 <span class="token comment">// change := baseFee * deta / BlockGasTarget</span>
 <span class="token comment">// nextBaseFee = baseFee + change</span>
 <span class="token comment">// nextBaseFee = max(nextBaseFee, build.MinimumBaseFee)</span>

 <span class="token keyword">var</span> delta <span class="token builtin">int64</span>
 <span class="token keyword">if</span> epoch <span class="token operator">&gt;</span> build<span class="token punctuation">.</span>UpgradeSmokeHeight <span class="token punctuation">{</span>
  delta <span class="token operator">=</span> gasLimitUsed <span class="token operator">/</span> <span class="token function">int64</span><span class="token punctuation">(</span>noOfBlocks<span class="token punctuation">)</span>
  delta <span class="token operator">-=</span> build<span class="token punctuation">.</span>BlockGasTarget
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  delta <span class="token operator">=</span> build<span class="token punctuation">.</span>PackingEfficiencyDenom <span class="token operator">*</span> gasLimitUsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>noOfBlocks<span class="token punctuation">)</span> <span class="token operator">*</span> build<span class="token punctuation">.</span>PackingEfficiencyNum<span class="token punctuation">)</span>
  delta <span class="token operator">-=</span> build<span class="token punctuation">.</span>BlockGasTarget
 <span class="token punctuation">}</span>

 <span class="token comment">// cap change at 12.5% (BaseFeeMaxChangeDenom) by capping delta</span>
 <span class="token keyword">if</span> delta <span class="token operator">&gt;</span> build<span class="token punctuation">.</span>BlockGasTarget <span class="token punctuation">{</span>
  delta <span class="token operator">=</span> build<span class="token punctuation">.</span>BlockGasTarget
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> delta <span class="token operator">&lt;</span> <span class="token operator">-</span>build<span class="token punctuation">.</span>BlockGasTarget <span class="token punctuation">{</span>
  delta <span class="token operator">=</span> <span class="token operator">-</span>build<span class="token punctuation">.</span>BlockGasTarget
 <span class="token punctuation">}</span>

 change <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>baseFee<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span>
 change <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Div</span><span class="token punctuation">(</span>change<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>BlockGasTarget<span class="token punctuation">)</span><span class="token punctuation">)</span>
 change <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Div</span><span class="token punctuation">(</span>change<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>BaseFeeMaxChangeDenom<span class="token punctuation">)</span><span class="token punctuation">)</span>

 nextBaseFee <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>baseFee<span class="token punctuation">,</span> change<span class="token punctuation">)</span>
 <span class="token keyword">if</span> big<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>nextBaseFee<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>MinimumBaseFee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  nextBaseFee <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>MinimumBaseFee<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> nextBaseFee
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ro={id:"_2-3-5-3注释与含义",tabindex:"-1"},ko=n("a",{class:"header-anchor",href:"#_2-3-5-3注释与含义","aria-hidden":"true"},"#",-1),vo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.gas_fee.notes--implications",target:"_blank",rel:"noopener noreferrer"},mo=t("<ul><li>的值<code>GasFeeCap</code>应始终高于网络的<code>BaseFee</code>。如果消息的<code>GasFeeCap</code>低于<code>BaseFee</code>，则其余部分来自矿工（作为罚款）。由于矿工选择的消息的价格低于<code>BaseFee</code>网络费用（即，不包括网络费用），因此对矿工施加此罚款。然而，矿工可能要选择一个消息，其<code>GasFeeCap</code>比小<code>BaseFee</code>，如果同一个发件人在邮件池，其另一条消息<code>GasFeeCap</code>比要大得多<code>BaseFee</code>。回想一下，如果存在多个矿工，则矿工应该从消息池中选择发件人的所有消息。理由是增加第二条消息的费用将弥补第一条消息的损失。</li><li>如果<code>BaseFee + GasPremium</code>&gt; <code>GasFeeCap</code>，则矿工可能不会获得全部<code>GasLimit * GasPremium</code>作为奖励。</li><li>一条消息的花费不得超过<code>GasFeeCap * GasLimit</code>。从该金额中，网络首先<code>BaseFee</code>被支付（烧掉）。之后，最多<code>GasLimit * GasPremium</code>将给予矿工作为奖励。</li><li>耗尽气体的消息失败，并显示“耗尽气体”退出代码。<code>GasUsed * BaseFee</code>仍将被烧毁（在这种情况下<code>GasUsed = GasLimit</code>），而矿工仍将得到奖励<code>GasLimit * GasPremium</code>。这是假定<code>GasFeeCap &gt; BaseFee + GasPremium</code>。</li><li>较低的价格<code>GasFeeCap</code>可能会导致消息滞留在消息池中，因为对于任何矿工来说，选择它并将其包含在一个块中，在利润方面都不够吸引人。发生这种情况时，将有一个更新程序，以<code>GasFeeCap</code>使消息对矿工更具吸引力。发送者可以将新消息推送到消息池（默认情况下，该消息池将传播到其他矿工的消息池），其中：i）旧消息和新消息的标识符相同（例如，相同<code>Nonce</code>），并且ii）<code>GasPremium</code>更新并增加至少25％的先前值。</li></ul>",1),bo={id:"_2-3-6系统角色",tabindex:"-1"},ho=n("a",{class:"header-anchor",href:"#_2-3-6系统角色","aria-hidden":"true"},"#",-1),fo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors",target:"_blank",rel:"noopener noreferrer"},_o=n("p",null,[s("总共有十一（11）个内置的System Actor，但是并不是所有的Actor都与VM交互。每个演员都由"),n("em",null,"代码ID"),s("（或CID）"),n("em",null,"标识"),s("。")],-1),go=n("p",null,"VM处理需要两个系统参与者：",-1),yo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.initactor",target:"_blank",rel:"noopener noreferrer"},wo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.cronactor",target:"_blank",rel:"noopener noreferrer"},xo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.accountactor",target:"_blank",rel:"noopener noreferrer"},Co={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.rewardactor",target:"_blank",rel:"noopener noreferrer"},So=n("p",null,"不直接与VM交互的其余七（7）个内置系统角色是：",-1),Fo=n("code",null,"StorageMarketActor",-1),qo={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/market/market_actor.go",target:"_blank",rel:"noopener noreferrer"},Po=n("code",null,"StorageMinerActor",-1),Ao={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/miner/miner_actor.go",target:"_blank",rel:"noopener noreferrer"},Bo={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/miner/miner_actor.go",target:"_blank",rel:"noopener noreferrer"},Eo=n("code",null,"MultisigActor",-1),To={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/multisig/multisig_actor.go",target:"_blank",rel:"noopener noreferrer"},Io=n("code",null,"PaymentChannelActor",-1),Ro={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/paych/paych_actor.go",target:"_blank",rel:"noopener noreferrer"},Mo=n("code",null,"StoragePowerActor",-1),Do={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/power/power_actor.go",target:"_blank",rel:"noopener noreferrer"},Go=n("code",null,"VerifiedRegistryActor",-1),Vo={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/verifreg/verified_registry_actor.go",target:"_blank",rel:"noopener noreferrer"},Lo=n("code",null,"SystemActor",-1),No={href:"https://github.com/filecoin-project/specs-actors/blob/master/actors/builtin/system/system_actor.go",target:"_blank",rel:"noopener noreferrer"},jo={id:"_2-3-6-1cronactor",tabindex:"-1"},Ho=n("a",{class:"header-anchor",href:"#_2-3-6-1cronactor","aria-hidden":"true"},"#",-1),Oo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.cronactor",target:"_blank",rel:"noopener noreferrer"},Uo=n("p",null,[s("内置在创世状态中，"),n("code",null,"CronActor"),s("的分派表调用"),n("code",null,"StoragePowerActor"),s("和"),n("code",null,"StorageMarketActor"),s("，以维护内部状态并处理延迟的事件。在网络升级后，它原则上可以调用其他参与者。")],-1),zo={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},Wo=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> cron

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/abi&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/cbor&quot;</span>
 cron0 <span class="token string">&quot;github.com/filecoin-project/specs-actors/actors/builtin/cron&quot;</span>
 <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/builtin&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/runtime&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// The cron actor is a built-in singleton that sends messages to other registered actors at the end of each epoch.</span>
<span class="token keyword">type</span> Actor <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  builtin<span class="token punctuation">.</span>MethodConstructor<span class="token punctuation">:</span> a<span class="token punctuation">.</span>Constructor<span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>EpochTick<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid <span class="token punctuation">{</span>
 <span class="token keyword">return</span> builtin<span class="token punctuation">.</span>CronActorCodeID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">IsSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cbor<span class="token punctuation">.</span>Er <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>State<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> runtime<span class="token punctuation">.</span>VMActor <span class="token operator">=</span> Actor<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//type ConstructorParams struct {</span>
<span class="token comment">// Entries []Entry</span>
<span class="token comment">//}</span>
<span class="token keyword">type</span> ConstructorParams <span class="token operator">=</span> cron0<span class="token punctuation">.</span>ConstructorParams

<span class="token keyword">type</span> EntryParam <span class="token operator">=</span> cron0<span class="token punctuation">.</span>Entry

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> params <span class="token operator">*</span>ConstructorParams<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>
 entries <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Entry<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>Entries<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> i<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> params<span class="token punctuation">.</span>Entries <span class="token punctuation">{</span>
  entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Entry</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// Identical</span>
 <span class="token punctuation">}</span>
 rt<span class="token punctuation">.</span><span class="token function">StateCreate</span><span class="token punctuation">(</span><span class="token function">ConstructState</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Invoked by the system after all other messages in the epoch have been processed.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">EpochTick</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>

 <span class="token keyword">var</span> st State
 rt<span class="token punctuation">.</span><span class="token function">StateReadonly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> st<span class="token punctuation">.</span>Entries <span class="token punctuation">{</span>
  <span class="token boolean">_</span> <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Receiver<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>MethodNum<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> abi<span class="token punctuation">.</span><span class="token function">NewTokenAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>builtin<span class="token punctuation">.</span>Discard<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// Any error and return value are ignored.</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Zo={id:"_2-3-6-2初始化演员",tabindex:"-1"},Ko=n("a",{class:"header-anchor",href:"#_2-3-6-2初始化演员","aria-hidden":"true"},"#",-1),Qo={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.initactor",target:"_blank",rel:"noopener noreferrer"},Jo=n("p",null,[s("将"),n("code",null,"InitActor"),s("有可能创造新的角色，例如，那些进入系统的电源。它维护着一个表，用于将公共密钥和临时参与者地址解析为其规范的ID地址。无效的CID不应提交给状态树。")],-1),Xo=n("p",null,"请注意，在进行链重组时，规范ID地址不会保留。演员地址或公钥在链重组后仍然有效。",-1),Yo={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},$o=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> init

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 addr <span class="token string">&quot;github.com/filecoin-project/go-address&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/abi&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/cbor&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/exitcode&quot;</span>
 init0 <span class="token string">&quot;github.com/filecoin-project/specs-actors/actors/builtin/init&quot;</span>
 cid <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/builtin&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/runtime&quot;</span>
 autil <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/util&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/util/adt&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// The init actor uniquely has the power to create new actors.</span>
<span class="token comment">// It maintains a table resolving pubkey and temporary actor addresses to the canonical ID-addresses.</span>
<span class="token keyword">type</span> Actor <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  builtin<span class="token punctuation">.</span>MethodConstructor<span class="token punctuation">:</span> a<span class="token punctuation">.</span>Constructor<span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>Exec<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid <span class="token punctuation">{</span>
 <span class="token keyword">return</span> builtin<span class="token punctuation">.</span>InitActorCodeID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">IsSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cbor<span class="token punctuation">.</span>Er <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>State<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> runtime<span class="token punctuation">.</span>VMActor <span class="token operator">=</span> Actor<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//type ConstructorParams struct {</span>
<span class="token comment">// NetworkName string</span>
<span class="token comment">//}</span>
<span class="token keyword">type</span> ConstructorParams <span class="token operator">=</span> init0<span class="token punctuation">.</span>ConstructorParams

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> params <span class="token operator">*</span>ConstructorParams<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>
 emptyMap<span class="token punctuation">,</span> err <span class="token operator">:=</span> adt<span class="token punctuation">.</span><span class="token function">MakeEmptyMap</span><span class="token punctuation">(</span>adt<span class="token punctuation">.</span><span class="token function">AsStore</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 builtin<span class="token punctuation">.</span><span class="token function">RequireNoErr</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> err<span class="token punctuation">,</span> exitcode<span class="token punctuation">.</span>ErrIllegalState<span class="token punctuation">,</span> <span class="token string">&quot;failed to construct state&quot;</span><span class="token punctuation">)</span>

 st <span class="token operator">:=</span> <span class="token function">ConstructState</span><span class="token punctuation">(</span>emptyMap<span class="token punctuation">,</span> params<span class="token punctuation">.</span>NetworkName<span class="token punctuation">)</span>
 rt<span class="token punctuation">.</span><span class="token function">StateCreate</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">//type ExecParams struct {</span>
<span class="token comment">// CodeCID           cid.Cid \`checked:&quot;true&quot;\` // invalid CIDs won&#39;t get committed to the state tree</span>
<span class="token comment">// ConstructorParams []byte</span>
<span class="token comment">//}</span>
<span class="token keyword">type</span> ExecParams <span class="token operator">=</span> init0<span class="token punctuation">.</span>ExecParams

<span class="token comment">//type ExecReturn struct {</span>
<span class="token comment">// IDAddress     addr.Address // The canonical ID-based address for the actor.</span>
<span class="token comment">// RobustAddress addr.Address // A more expensive but re-org-safe address for the newly created actor.</span>
<span class="token comment">//}</span>
<span class="token keyword">type</span> ExecReturn <span class="token operator">=</span> init0<span class="token punctuation">.</span>ExecReturn

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> params <span class="token operator">*</span>ExecParams<span class="token punctuation">)</span> <span class="token operator">*</span>ExecReturn <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerAcceptAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 callerCodeCID<span class="token punctuation">,</span> ok <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">GetActorCodeCID</span><span class="token punctuation">(</span>rt<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 autil<span class="token punctuation">.</span><span class="token function">AssertMsg</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> <span class="token string">&quot;no code for actor at %s&quot;</span><span class="token punctuation">,</span> rt<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">canExec</span><span class="token punctuation">(</span>callerCodeCID<span class="token punctuation">,</span> params<span class="token punctuation">.</span>CodeCID<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrForbidden<span class="token punctuation">,</span> <span class="token string">&quot;caller type %v cannot exec actor type %v&quot;</span><span class="token punctuation">,</span> callerCodeCID<span class="token punctuation">,</span> params<span class="token punctuation">.</span>CodeCID<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// Compute a re-org-stable address.</span>
 <span class="token comment">// This address exists for use by messages coming from outside the system, in order to</span>
 <span class="token comment">// stably address the newly created actor even if a chain re-org causes it to end up with</span>
 <span class="token comment">// a different ID.</span>
 uniqueAddress <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">NewActorAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token comment">// Allocate an ID for this actor.</span>
 <span class="token comment">// Store mapping of pubkey or actor address to actor ID</span>
 <span class="token keyword">var</span> st State
 <span class="token keyword">var</span> idAddr addr<span class="token punctuation">.</span>Address
 rt<span class="token punctuation">.</span><span class="token function">StateTransaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> err <span class="token builtin">error</span>
  idAddr<span class="token punctuation">,</span> err <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">MapAddressToNewID</span><span class="token punctuation">(</span>adt<span class="token punctuation">.</span><span class="token function">AsStore</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span> uniqueAddress<span class="token punctuation">)</span>
  builtin<span class="token punctuation">.</span><span class="token function">RequireNoErr</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> err<span class="token punctuation">,</span> exitcode<span class="token punctuation">.</span>ErrIllegalState<span class="token punctuation">,</span> <span class="token string">&quot;failed to allocate ID address&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 <span class="token comment">// Create an empty actor.</span>
 rt<span class="token punctuation">.</span><span class="token function">CreateActor</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>CodeCID<span class="token punctuation">,</span> idAddr<span class="token punctuation">)</span>

 <span class="token comment">// Invoke constructor.</span>
 code <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>idAddr<span class="token punctuation">,</span> builtin<span class="token punctuation">.</span>MethodConstructor<span class="token punctuation">,</span> builtin<span class="token punctuation">.</span><span class="token function">CBORBytes</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>ConstructorParams<span class="token punctuation">)</span><span class="token punctuation">,</span> rt<span class="token punctuation">.</span><span class="token function">ValueReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>builtin<span class="token punctuation">.</span>Discard<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 builtin<span class="token punctuation">.</span><span class="token function">RequireSuccess</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token string">&quot;constructor failed&quot;</span><span class="token punctuation">)</span>

 <span class="token keyword">return</span> <span class="token operator">&amp;</span>ExecReturn<span class="token punctuation">{</span>IDAddress<span class="token punctuation">:</span> idAddr<span class="token punctuation">,</span> RobustAddress<span class="token punctuation">:</span> uniqueAddress<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">canExec</span><span class="token punctuation">(</span>callerCodeID cid<span class="token punctuation">.</span>Cid<span class="token punctuation">,</span> execCodeID cid<span class="token punctuation">.</span>Cid<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 <span class="token keyword">switch</span> execCodeID <span class="token punctuation">{</span>
 <span class="token keyword">case</span> builtin<span class="token punctuation">.</span>StorageMinerActorCodeID<span class="token punctuation">:</span>
  <span class="token keyword">if</span> callerCodeID <span class="token operator">==</span> builtin<span class="token punctuation">.</span>StoragePowerActorCodeID <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
 <span class="token keyword">case</span> builtin<span class="token punctuation">.</span>PaymentChannelActorCodeID<span class="token punctuation">,</span> builtin<span class="token punctuation">.</span>MultisigActorCodeID<span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
 <span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),np={id:"_2-3-6-3奖励演员",tabindex:"-1"},sp=n("a",{class:"header-anchor",href:"#_2-3-6-3奖励演员","aria-hidden":"true"},"#",-1),ap={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.rewardactor",target:"_blank",rel:"noopener noreferrer"},ep=n("p",null,[s("的"),n("code",null,"RewardActor"),s("就是unminted Filecoin令牌将被保留。演员直接将奖励分配给矿工演员，他们被锁定以归属。当前纪元的奖励值在纪元末通过cron tick更新。")],-1),tp={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},op=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> reward

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/abi&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/big&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/cbor&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/exitcode&quot;</span>
 rtt <span class="token string">&quot;github.com/filecoin-project/go-state-types/rt&quot;</span>
 reward0 <span class="token string">&quot;github.com/filecoin-project/specs-actors/actors/builtin/reward&quot;</span>
 <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/builtin&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/runtime&quot;</span>
 <span class="token punctuation">.</span> <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/util&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/util/smoothing&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// PenaltyMultiplier is the factor miner penaltys are scaled up by</span>
<span class="token keyword">const</span> PenaltyMultiplier <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">type</span> Actor <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  builtin<span class="token punctuation">.</span>MethodConstructor<span class="token punctuation">:</span> a<span class="token punctuation">.</span>Constructor<span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>AwardBlockReward<span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>ThisEpochReward<span class="token punctuation">,</span>
  <span class="token number">4</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>UpdateNetworkKPI<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid <span class="token punctuation">{</span>
 <span class="token keyword">return</span> builtin<span class="token punctuation">.</span>RewardActorCodeID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">IsSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cbor<span class="token punctuation">.</span>Er <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>State<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> runtime<span class="token punctuation">.</span>VMActor <span class="token operator">=</span> Actor<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> currRealizedPower <span class="token operator">*</span>abi<span class="token punctuation">.</span>StoragePower<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>

 <span class="token keyword">if</span> currRealizedPower <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;argument should not be nil&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// linter does not understand abort exiting</span>
 <span class="token punctuation">}</span>
 st <span class="token operator">:=</span> <span class="token function">ConstructState</span><span class="token punctuation">(</span><span class="token operator">*</span>currRealizedPower<span class="token punctuation">)</span>
 rt<span class="token punctuation">.</span><span class="token function">StateCreate</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">//type AwardBlockRewardParams struct {</span>
<span class="token comment">// Miner     address.Address</span>
<span class="token comment">// Penalty   abi.TokenAmount // penalty for including bad messages in a block, &gt;= 0</span>
<span class="token comment">// GasReward abi.TokenAmount // gas reward from all gas fees in a block, &gt;= 0</span>
<span class="token comment">// WinCount  int64           // number of reward units won, &gt; 0</span>
<span class="token comment">//}</span>
<span class="token keyword">type</span> AwardBlockRewardParams <span class="token operator">=</span> reward0<span class="token punctuation">.</span>AwardBlockRewardParams

<span class="token comment">// Awards a reward to a block producer.</span>
<span class="token comment">// This method is called only by the system actor, implicitly, as the last message in the evaluation of a block.</span>
<span class="token comment">// The system actor thus computes the parameters and attached value.</span>
<span class="token comment">//</span>
<span class="token comment">// The reward includes two components:</span>
<span class="token comment">// - the epoch block reward, computed and paid from the reward actor&#39;s balance,</span>
<span class="token comment">// - the block gas reward, expected to be transferred to the reward actor with this invocation.</span>
<span class="token comment">//</span>
<span class="token comment">// The reward is reduced before the residual is credited to the block producer, by:</span>
<span class="token comment">// - a penalty amount, provided as a parameter, which is burnt,</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">AwardBlockReward</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> params <span class="token operator">*</span>AwardBlockRewardParams<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>
 priorBalance <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">CurrentBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> params<span class="token punctuation">.</span>Penalty<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;negative penalty %v&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>Penalty<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> params<span class="token punctuation">.</span>GasReward<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;negative gas reward %v&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>GasReward<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> priorBalance<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>GasReward<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalState<span class="token punctuation">,</span> <span class="token string">&quot;actor current balance %v insufficient to pay gas reward %v&quot;</span><span class="token punctuation">,</span>
   priorBalance<span class="token punctuation">,</span> params<span class="token punctuation">.</span>GasReward<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> params<span class="token punctuation">.</span>WinCount <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;invalid win count %d&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>WinCount<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 minerAddr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">ResolveAddress</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>Miner<span class="token punctuation">)</span>
 <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrNotFound<span class="token punctuation">,</span> <span class="token string">&quot;failed to resolve given owner address&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// The miner penalty is scaled up by a factor of PenaltyMultiplier</span>
 penalty <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>PenaltyMultiplier<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>Penalty<span class="token punctuation">)</span>
 totalReward <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> st State
 rt<span class="token punctuation">.</span><span class="token function">StateTransaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  blockReward <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>ThisEpochReward<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>WinCount<span class="token punctuation">)</span><span class="token punctuation">)</span>
  blockReward <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Div</span><span class="token punctuation">(</span>blockReward<span class="token punctuation">,</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>ExpectedLeadersPerEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span>
  totalReward <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>blockReward<span class="token punctuation">,</span> params<span class="token punctuation">.</span>GasReward<span class="token punctuation">)</span>
  currBalance <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">CurrentBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> totalReward<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>currBalance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   rt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>rtt<span class="token punctuation">.</span>WARN<span class="token punctuation">,</span> <span class="token string">&quot;reward actor balance %d below totalReward expected %d, paying out rest of balance&quot;</span><span class="token punctuation">,</span> currBalance<span class="token punctuation">,</span> totalReward<span class="token punctuation">)</span>
   totalReward <span class="token operator">=</span> currBalance

   blockReward <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>totalReward<span class="token punctuation">,</span> params<span class="token punctuation">.</span>GasReward<span class="token punctuation">)</span>
   <span class="token comment">// Since we have already asserted the balance is greater than gas reward blockReward is &gt;= 0</span>
   <span class="token function">AssertMsg</span><span class="token punctuation">(</span>blockReward<span class="token punctuation">.</span><span class="token function">GreaterThanEqual</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;programming error, block reward is %v below zero&quot;</span><span class="token punctuation">,</span> blockReward<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  st<span class="token punctuation">.</span>TotalStoragePowerReward <span class="token operator">=</span> big<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>TotalStoragePowerReward<span class="token punctuation">,</span> blockReward<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 <span class="token function">AssertMsg</span><span class="token punctuation">(</span>totalReward<span class="token punctuation">.</span><span class="token function">LessThanEqual</span><span class="token punctuation">(</span>priorBalance<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;reward %v exceeds balance %v&quot;</span><span class="token punctuation">,</span> totalReward<span class="token punctuation">,</span> priorBalance<span class="token punctuation">)</span>

 <span class="token comment">// if this fails, we can assume the miner is responsible and avoid failing here.</span>
 rewardParams <span class="token operator">:=</span> builtin<span class="token punctuation">.</span>ApplyRewardParams<span class="token punctuation">{</span>
  Reward<span class="token punctuation">:</span>  totalReward<span class="token punctuation">,</span>
  Penalty<span class="token punctuation">:</span> penalty<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
 code <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>minerAddr<span class="token punctuation">,</span> builtin<span class="token punctuation">.</span>MethodsMiner<span class="token punctuation">.</span>ApplyRewards<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rewardParams<span class="token punctuation">,</span> totalReward<span class="token punctuation">,</span> <span class="token operator">&amp;</span>builtin<span class="token punctuation">.</span>Discard<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> <span class="token operator">!</span>code<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>rtt<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span> <span class="token string">&quot;failed to send ApplyRewards call to the miner actor with funds: %v, code: %v&quot;</span><span class="token punctuation">,</span> totalReward<span class="token punctuation">,</span> code<span class="token punctuation">)</span>
  code <span class="token operator">:=</span> rt<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>BurntFundsActorAddr<span class="token punctuation">,</span> builtin<span class="token punctuation">.</span>MethodSend<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> totalReward<span class="token punctuation">,</span> <span class="token operator">&amp;</span>builtin<span class="token punctuation">.</span>Discard<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>code<span class="token punctuation">.</span><span class="token function">IsSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   rt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>rtt<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span> <span class="token string">&quot;failed to send unsent reward to the burnt funds actor, code: %v&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Changed since v0:</span>
<span class="token comment">// - removed ThisEpochReward (unsmoothed)</span>
<span class="token keyword">type</span> ThisEpochRewardReturn <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 ThisEpochRewardSmoothed smoothing<span class="token punctuation">.</span>FilterEstimate
 ThisEpochBaselinePower  abi<span class="token punctuation">.</span>StoragePower
<span class="token punctuation">}</span>

<span class="token comment">// The award value used for the current epoch, updated at the end of an epoch</span>
<span class="token comment">// through cron tick.  In the case previous epochs were null blocks this</span>
<span class="token comment">// is the reward value as calculated at the last non-null epoch.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">ThisEpochReward</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue<span class="token punctuation">)</span> <span class="token operator">*</span>ThisEpochRewardReturn <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerAcceptAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token keyword">var</span> st State
 rt<span class="token punctuation">.</span><span class="token function">StateReadonly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>ThisEpochRewardReturn<span class="token punctuation">{</span>
  ThisEpochRewardSmoothed<span class="token punctuation">:</span> st<span class="token punctuation">.</span>ThisEpochRewardSmoothed<span class="token punctuation">,</span>
  ThisEpochBaselinePower<span class="token punctuation">:</span>  st<span class="token punctuation">.</span>ThisEpochBaselinePower<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Called at the end of each epoch by the power actor (in turn by its cron hook).</span>
<span class="token comment">// This is only invoked for non-empty tipsets, but catches up any number of null</span>
<span class="token comment">// epochs to compute the next epoch reward.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">UpdateNetworkKPI</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> currRealizedPower <span class="token operator">*</span>abi<span class="token punctuation">.</span>StoragePower<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>StoragePowerActorAddr<span class="token punctuation">)</span>
 <span class="token keyword">if</span> currRealizedPower <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;arugment should not be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">var</span> st State
 rt<span class="token punctuation">.</span><span class="token function">StateTransaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  prev <span class="token operator">:=</span> st<span class="token punctuation">.</span>Epoch
  <span class="token comment">// if there were null runs catch up the computation until</span>
  <span class="token comment">// st.Epoch == rt.CurrEpoch()</span>
  <span class="token keyword">for</span> st<span class="token punctuation">.</span>Epoch <span class="token operator">&lt;</span> rt<span class="token punctuation">.</span><span class="token function">CurrEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Update to next epoch to process null rounds</span>
   st<span class="token punctuation">.</span><span class="token function">updateToNextEpoch</span><span class="token punctuation">(</span><span class="token operator">*</span>currRealizedPower<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  st<span class="token punctuation">.</span><span class="token function">updateToNextEpochWithReward</span><span class="token punctuation">(</span><span class="token operator">*</span>currRealizedPower<span class="token punctuation">)</span>
  <span class="token comment">// only update smoothed estimates after updating reward and epoch</span>
  st<span class="token punctuation">.</span><span class="token function">updateSmoothedEstimates</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>Epoch <span class="token operator">-</span> prev<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pp={id:"_2-3-6-4accountactor",tabindex:"-1"},ip=n("a",{class:"header-anchor",href:"#_2-3-6-4accountactor","aria-hidden":"true"},"#",-1),cp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.accountactor",target:"_blank",rel:"noopener noreferrer"},lp=n("p",null,[s("该"),n("code",null,"AccountActor"),s("负责用户帐户。帐户参与者不是由创建的"),n("code",null,"InitActor"),s("，但系统会调用其构造函数。通过向公共密钥样式的地址发送消息来创建帐户参与者。地址必须为"),n("code",null,"BLS"),s("或"),n("code",null,"SECP"),s("，否则应该存在退出错误。帐户参与者正在使用新的参与者地址更新状态树。")],-1),up={href:"https://spec.filecoin.io/#example-",target:"_blank",rel:"noopener noreferrer"},rp=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> account

<span class="token keyword">import</span> <span class="token punctuation">(</span>
 addr <span class="token string">&quot;github.com/filecoin-project/go-address&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/abi&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/cbor&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/go-state-types/exitcode&quot;</span>
 <span class="token string">&quot;github.com/ipfs/go-cid&quot;</span>

 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/builtin&quot;</span>
 <span class="token string">&quot;github.com/filecoin-project/specs-actors/v2/actors/runtime&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Actor <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  <span class="token number">1</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>Constructor<span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">:</span> a<span class="token punctuation">.</span>PubkeyAddress<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cid<span class="token punctuation">.</span>Cid <span class="token punctuation">{</span>
 <span class="token keyword">return</span> builtin<span class="token punctuation">.</span>AccountActorCodeID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> cbor<span class="token punctuation">.</span>Er <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>State<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> runtime<span class="token punctuation">.</span>VMActor <span class="token operator">=</span> Actor<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> State <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Address addr<span class="token punctuation">.</span>Address
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Constructor</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> address <span class="token operator">*</span>addr<span class="token punctuation">.</span>Address<span class="token punctuation">)</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue <span class="token punctuation">{</span>
 <span class="token comment">// Account actors are created implicitly by sending a message to a pubkey-style address.</span>
 <span class="token comment">// This constructor is not invoked by the InitActor, but by the system.</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerIs</span><span class="token punctuation">(</span>builtin<span class="token punctuation">.</span>SystemActorAddr<span class="token punctuation">)</span>
 <span class="token keyword">switch</span> address<span class="token punctuation">.</span><span class="token function">Protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">case</span> addr<span class="token punctuation">.</span>SECP256K1<span class="token punctuation">:</span>
 <span class="token keyword">case</span> addr<span class="token punctuation">.</span>BLS<span class="token punctuation">:</span>
  <span class="token keyword">break</span> <span class="token comment">// ok</span>
 <span class="token keyword">default</span><span class="token punctuation">:</span>
  rt<span class="token punctuation">.</span><span class="token function">Abortf</span><span class="token punctuation">(</span>exitcode<span class="token punctuation">.</span>ErrIllegalArgument<span class="token punctuation">,</span> <span class="token string">&quot;address must use BLS or SECP protocol, got %v&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">.</span><span class="token function">Protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 st <span class="token operator">:=</span> State<span class="token punctuation">{</span>Address<span class="token punctuation">:</span> <span class="token operator">*</span>address<span class="token punctuation">}</span>
 rt<span class="token punctuation">.</span><span class="token function">StateCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fetches the pubkey-type address from this actor.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">PubkeyAddress</span><span class="token punctuation">(</span>rt runtime<span class="token punctuation">.</span>Runtime<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">*</span>abi<span class="token punctuation">.</span>EmptyValue<span class="token punctuation">)</span> <span class="token operator">*</span>addr<span class="token punctuation">.</span>Address <span class="token punctuation">{</span>
 rt<span class="token punctuation">.</span><span class="token function">ValidateImmediateCallerAcceptAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> st State
 rt<span class="token punctuation">.</span><span class="token function">StateReadonly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token operator">&amp;</span>st<span class="token punctuation">.</span>Address
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),dp={id:"_2-3-7vm解释器-消息调用-外部vm",tabindex:"-1"},kp=n("a",{class:"header-anchor",href:"#_2-3-7vm解释器-消息调用-外部vm","aria-hidden":"true"},"#",-1),vp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},mp=n("p",null,"VM解释器根据提示集在其父状态上的提示集协调消息的执行，从而产生新状态和一系列消息回执。此新状态的CID和收据集合的CID包含在后续纪元的块中，这些纪元必须同意这些CID才能形成新的提示集。",-1),bp=n("p",null,"每个状态更改都由消息的执行来驱动。提示集中所有块中的消息必须执行才能产生下一个状态。来自第一个块的所有消息均在技巧集中的第二个和后续块的消息之前执行。对于每个块，首先执行BLS聚合的消息，然后执行SECP签名的消息。",-1),hp={id:"_2-3-7-1隐式消息",tabindex:"-1"},fp=n("a",{class:"header-anchor",href:"#_2-3-7-1隐式消息","aria-hidden":"true"},"#",-1),_p={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter.implicit-messages",target:"_blank",rel:"noopener noreferrer"},gp=n("p",null,"除了显式包含在每个块中的消息之外，隐含消息还会在每个时期对状态进行一些更改。隐式消息不在节点之间传输，而是由解释器在评估时构造的。",-1),yp=n("p",null,"对于提示集中的每个块，隐式消息：",-1),wp=n("ul",null,[n("li",null,"调用区块生产者的矿工演员来处理（已验证的）选举PoSt提交，作为区块中的第一条消息；"),n("li",null,"调用奖励参与者将区块奖励支付给矿工的所有者帐户，作为区块中的最终消息；")],-1),xp=n("p",null,"对于每个提示集，一个隐式消息：",-1),Cp=n("ul",null,[n("li",null,"调用cron actor来处理自动支票和付款，作为提示集中的最后一条消息。")],-1),Sp=n("p",null,[s("所有隐式消息的构造"),n("code",null,"From"),s("地址都是杰出的系统帐户参与者。他们将汽油价格指定为零，但必须包含在计算中。为了计算新状态，它们必须成功（退出代码为零）。隐式邮件的收据不包括在收据列表中；只有明确的消息才有明确的回执。")],-1),Fp={id:"_2-3-7-2煤气费",tabindex:"-1"},qp=n("a",{class:"header-anchor",href:"#_2-3-7-2煤气费","aria-hidden":"true"},"#",-1),Pp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter.gas-payments",target:"_blank",rel:"noopener noreferrer"},Ap=n("p",null,"在大多数情况下，消息的发送者向产生包含该消息的块的矿工支付执行该消息所需的汽油费。",-1),Bp=n("p",null,"执行该消息后，每次执行该消息所产生的汽油费将立即支付给矿工所有者帐户。所获得的集体奖励或汽油费没有任何负担：两者都可以立即花费。",-1),Ep={id:"_2-3-7-3邮件重复",tabindex:"-1"},Tp=n("a",{class:"header-anchor",href:"#_2-3-7-3邮件重复","aria-hidden":"true"},"#",-1),Ip={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter.duplicate-messages",target:"_blank",rel:"noopener noreferrer"},Rp=t("<p>由于不同的矿工在同一时期产生区块，因此单个提示集中的多个区块可能包含相同的消息（由相同的CID标识）。发生这种情况时，仅在第一次按提示集的规范顺序遇到该消息时才对其进行处理。消息的后续实例将被忽略，不会导致任何状态突变，产生收据或向区块生产者支付费用。</p><p>因此，总结了提示集的执行顺序：</p><ul><li>为第一块支付奖励</li><li>处理第一块的选举职位</li><li>第一个块的消息（SECP之前的BLS）</li><li>支付第二块奖励</li><li>处理第二个区块的选举职位</li><li>第二个块的消息（SECP之前的BLS，跳过任何已经遇到的消息）</li><li><code>[... subsequent blocks ...]</code></li><li>定时刻度</li></ul>",3),Mp={id:"_2-3-7-4消息有效性和失败",tabindex:"-1"},Dp=n("a",{class:"header-anchor",href:"#_2-3-7-4消息有效性和失败","aria-hidden":"true"},"#",-1),Gp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter.message-validity-and-failure",target:"_blank",rel:"noopener noreferrer"},Vp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.message.message-syntax-validation",target:"_blank",rel:"noopener noreferrer"},Lp=t("<p>如果消息由于可以合理地归因于矿工的原因而失败，包括在父状态中永远不可能成功的消息，或者由于发件人缺乏资金来支付最大消息成本，则矿工将通过烧钱来支付罚款煤气费（而不是发送方向大宗矿工支付的费用）。</p><p>消息失败导致的唯一状态更改是：</p><ul><li>发送方的增量<code>CallSeqNum</code>，并从发送方向包含消息的区块矿主支付汽油费；要么</li><li>罚款等于失败消息的汽油费，由矿工烧掉（发件人未<code>CallSeqNum</code>更改）。</li></ul><p>如果处于紧接的先前状态，则消息执行将失败：</p><ul><li>该<code>From</code>演员不存在于该州（受到矿工处罚），</li><li>该<code>From</code>演员是不是帐号演员（的矿工处罚），</li><li>该<code>CallSeqNum</code>消息不匹配<code>CallSeqNum</code>的的<code>From</code>演员（的矿工处罚），</li><li>的<code>From</code>演员不具有足够的平衡，以覆盖消息的总和<code>Value</code>加上最大气体成本，<code>GasLimit * GasPrice</code>（矿工处罚），</li><li>该参与者不在<code>To</code>状态中，并且该<code>To</code>地址不是pubkey样式的地址，</li><li>该<code>To</code>actor存在（或作为帐户隐式创建），但是没有对应于非零的方法<code>MethodNum</code>，</li><li>反序列化<code>Params</code>不是长度匹配数组<code>To</code>actor的<code>MethodNum</code>方法的数组，</li><li>反序列化<code>Params</code>对于<code>To</code>actor的<code>MethodNum</code>方法指定的类型无效，</li><li>被调用的方法消耗的气体多于<code>GasLimit</code>允许的量，</li><li>调用的方法以非零代码（通过<code>Runtime.Abort()</code>）退出，或者</li><li>由于上述任何原因，接收方发送的任何内部消息都会失败。</li></ul><p>请注意，如果<code>To</code>参与者不在状态中并且该地址是有效<code>H(pubkey)</code>地址，则它将被创建为帐户参与者。</p>",6),Np={id:"_2-4区块链",tabindex:"-1"},jp=n("a",{class:"header-anchor",href:"#_2-4区块链","aria-hidden":"true"},"#",-1),Hp={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain",target:"_blank",rel:"noopener noreferrer"},Op=n("p",null,"Filecoin区块链是一种分布式虚拟机，可以达成共识，处理消息，进行存储帐户并维护Filecoin协议中的安全性。它是链接Filecoin系统中各种参与者的主要界面。",-1),Up=n("p",null,"Filecoin区块链系统包括：",-1),zp={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.message_pool",target:"_blank",rel:"noopener noreferrer"},Wp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm",target:"_blank",rel:"noopener noreferrer"},Zp={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.state_tree",target:"_blank",rel:"noopener noreferrer"},Kp={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync",target:"_blank",rel:"noopener noreferrer"},Qp={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus",target:"_blank",rel:"noopener noreferrer"},Jp={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_mining",target:"_blank",rel:"noopener noreferrer"},Xp=n("p",null,"区块链系统还包括：",-1),Yp={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.chain_manager",target:"_blank",rel:"noopener noreferrer"},$p={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer",target:"_blank",rel:"noopener noreferrer"},ni={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus",target:"_blank",rel:"noopener noreferrer"},si=n("em",null,"功率表",-1),ai=n("em",null,"表",-1),ei={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_mining",target:"_blank",rel:"noopener noreferrer"},ti=n("em",null,"部门承诺",-1),oi=n("em",null,"时空证明为",-1),pi={id:"_2-4-1积木",tabindex:"-1"},ii=n("a",{class:"header-anchor",href:"#_2-4-1积木","aria-hidden":"true"},"#",-1),ci={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct",target:"_blank",rel:"noopener noreferrer"},li=n("p",null,"区块是Filecoin区块链的主要单元，大多数其他区块链也是如此。阻止消息与提示集直接链接，提示集是阻止消息的组，本节稍后将对此进行详细介绍。在下文中，我们讨论Block消息的主要结构以及Filecoin区块链中验证Block消息的过程。",-1),ui={id:"_2-4-1-1块",tabindex:"-1"},ri=n("a",{class:"header-anchor",href:"#_2-4-1-1块","aria-hidden":"true"},"#",-1),di={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block",target:"_blank",rel:"noopener noreferrer"},ki=n("p",null,"区块是Filecoin区块链的主要单元。",-1),vi=n("p",null,[s("Filecoin区块链中的Block结构包括：i）Block Header，ii）Block内的消息列表，以及iii）Signed消息。这在"),n("code",null,"FullBlock"),s("抽象内部表示。该消息指示要应用的必需的一组更改，以达到链的确定性状态。")],-1),mi=n("p",null,[s("该块的Lotus实现具有以下内容"),n("code",null,"struct"),s("：")],-1),bi={href:"https://spec.filecoin.io/#example-fullblock",target:"_blank",rel:"noopener noreferrer"},hi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> FullBlock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Header        <span class="token operator">*</span>BlockHeader
 BlsMessages   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Message
 SecpkMessages <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>SignedMessage
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong> 块在功能上与Filecoin协议中的块头相同。虽然块标题包含指向完整系统状态，消息和消息回执的Merkle链接，但可以将块视为该信息的完整集合（不仅是Merkle根，还包括状态树的完整数据，消息树，收据树等）。由于完整块的大小很大，因此Filecoin区块链由块头而不是完整块组成。我们经常使用这些术语，<code>block</code>并且<code>block header</code>可以互换使用。</p></blockquote>`,2),fi=n("code",null,"BlockHeader",-1),_i=n("code",null,"FullBlock",-1),gi=n("code",null,"BlockHeader",-1),yi={href:"https://spec.filecoin.io/#section-algorithms.pos.post",target:"_blank",rel:"noopener noreferrer"},wi=n("p",null,[s("块标头的Lotus实现具有以下"),n("code",null,"struct"),s("：")],-1),xi={href:"https://spec.filecoin.io/#example-blockheader",target:"_blank",rel:"noopener noreferrer"},Ci=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> BlockHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Miner address<span class="token punctuation">.</span>Address <span class="token comment">// 0</span>

 Ticket <span class="token operator">*</span>Ticket <span class="token comment">// 1</span>

 ElectionProof <span class="token operator">*</span>ElectionProof <span class="token comment">// 2</span>

 BeaconEntries <span class="token punctuation">[</span><span class="token punctuation">]</span>BeaconEntry <span class="token comment">// 3</span>

 WinPoStProof <span class="token punctuation">[</span><span class="token punctuation">]</span>proof2<span class="token punctuation">.</span>PoStProof <span class="token comment">// 4</span>

 Parents <span class="token punctuation">[</span><span class="token punctuation">]</span>cid<span class="token punctuation">.</span>Cid <span class="token comment">// 5</span>

 ParentWeight BigInt <span class="token comment">// 6</span>

 Height abi<span class="token punctuation">.</span>ChainEpoch <span class="token comment">// 7</span>

 ParentStateRoot cid<span class="token punctuation">.</span>Cid <span class="token comment">// 8</span>

 ParentMessageReceipts cid<span class="token punctuation">.</span>Cid <span class="token comment">// 8</span>

 Messages cid<span class="token punctuation">.</span>Cid <span class="token comment">// 10</span>

 BLSAggregate <span class="token operator">*</span>crypto<span class="token punctuation">.</span>Signature <span class="token comment">// 11</span>

 Timestamp <span class="token builtin">uint64</span> <span class="token comment">// 12</span>

 BlockSig <span class="token operator">*</span>crypto<span class="token punctuation">.</span>Signature <span class="token comment">// 13</span>

 ForkSignaling <span class="token builtin">uint64</span> <span class="token comment">// 14</span>

 <span class="token comment">// ParentBaseFee is the base fee after executing parent tipset</span>
 ParentBaseFee abi<span class="token punctuation">.</span>TokenAmount <span class="token comment">// 15</span>

 <span class="token comment">// internal</span>
 validated <span class="token builtin">bool</span> <span class="token comment">// true if the signature has been validated</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Si={href:"https://spec.filecoin.io/#example-ticket",target:"_blank",rel:"noopener noreferrer"},Fi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Ticket <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 VRFProof <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),qi={href:"https://spec.filecoin.io/#example-electionproof",target:"_blank",rel:"noopener noreferrer"},Pi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ElectionProof <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 WinCount <span class="token builtin">int64</span>
 VRFProof <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ai={href:"https://spec.filecoin.io/#example-beaconentry",target:"_blank",rel:"noopener noreferrer"},Bi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> BeaconEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Round <span class="token builtin">uint64</span>
 Data  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ei=n("code",null,"BlockHeader",-1),Ti={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync",target:"_blank",rel:"noopener noreferrer"},Ii=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">IsTicketWinner</span><span class="token punctuation">(</span>vrfTicket <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> mypow BigInt<span class="token punctuation">,</span> totpow BigInt<span class="token punctuation">)</span> <span class="token builtin">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该<code>Message</code>结构必须包括源（<code>From</code>）和目标（<code>To</code>）地址，a<code>Nonce</code>和<code>GasPrice</code>。</p><p>消息的Lotus实现具有以下结构：</p>`,3),Ri={href:"https://spec.filecoin.io/#example-message",target:"_blank",rel:"noopener noreferrer"},Mi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Message <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 Version <span class="token builtin">uint64</span>

 To   address<span class="token punctuation">.</span>Address
 From address<span class="token punctuation">.</span>Address

 Nonce <span class="token builtin">uint64</span>

 Value abi<span class="token punctuation">.</span>TokenAmount

 GasLimit   <span class="token builtin">int64</span>
 GasFeeCap  abi<span class="token punctuation">.</span>TokenAmount
 GasPremium abi<span class="token punctuation">.</span>TokenAmount

 Method abi<span class="token punctuation">.</span>MethodNum
 Params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Di={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync",target:"_blank",rel:"noopener noreferrer"},Gi={href:"https://spec.filecoin.io/#example-validforblockinclusion",target:"_blank",rel:"noopener noreferrer"},Vi=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Message<span class="token punctuation">)</span> <span class="token function">ValidForBlockInclusion</span><span class="token punctuation">(</span>minGas <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Version <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Version&#39; unsupported&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>To <span class="token operator">==</span> address<span class="token punctuation">.</span>Undef <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;To&#39; address cannot be empty&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>From <span class="token operator">==</span> address<span class="token punctuation">.</span>Undef <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;From&#39; address cannot be empty&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>TotalFilecoinInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;Value&#39; field cannot be greater than total filecoin supply&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span>Int <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasPremium&#39; cannot be nil&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasPremium&#39; field cannot be negative&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasPremium<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>GasFeeCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasFeeCap&#39; less than &#39;GasPremium&#39;&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasLimit <span class="token operator">&gt;</span> build<span class="token punctuation">.</span>BlockGasLimit <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasLimit&#39; field cannot be greater than a block&#39;s gas limit&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// since prices might vary with time, this is technically semantic validation</span>
 <span class="token keyword">if</span> m<span class="token punctuation">.</span>GasLimit <span class="token operator">&lt;</span> minGas <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;GasLimit&#39; field cannot be less than the cost of storing a message on chain %d &lt; %d&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>GasLimit<span class="token punctuation">,</span> minGas<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Li={id:"_2-4-1-1-1块语法验证",tabindex:"-1"},Ni=n("a",{class:"header-anchor",href:"#_2-4-1-1-1块语法验证","aria-hidden":"true"},"#",-1),ji={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block.block-syntax-validation",target:"_blank",rel:"noopener noreferrer"},Hi=t(`<p>语法验证是指应在<em>不</em>参考外部信息（例如父状态树）的<em>情况下</em>对块及其消息执行的验证。这种验证类型有时称为<em>静态验证</em>。</p><p>无效的块不得作为父对象传输或引用。</p><p>语法上有效的块头必须解码为与以下定义匹配的字段，必须是有效的CBOR PubSub<code>BlockMsg</code>消息，并且必须具有：</p><ul><li><p>在1和<code>5*ec.ExpectedLeaders</code> <code>Parents</code>CID之间，如果<code>Epoch</code>大于零（否则为空<code>Parents</code>），</p></li><li><p>一个非负<code>ParentWeight</code>，</p></li><li><p>少于或等于<code>BlockMessageLimit</code>消息数，</p></li><li><p>封装在<code>MsgMeta</code>结构中的聚合消息CID，序列化为<code>Messages</code>块头中的CID，</p></li><li><p>一个<code>Miner</code>是ID地址的地址。<code>Address</code>块头中的Miner应该存在，并与当前链状态下的公共密钥地址相对应。</p></li><li><p><code>BlockSig</code>属于矿工检索到的公钥地址的块签名（）</p></li><li><p>一个非负<code>Epoch</code>，</p></li><li><p>一个积极的<code>Timestamp</code>，</p></li><li><p>一个<code>Ticket</code>非空<code>VRFResult</code>，</p></li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ElectionPoStOutput
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包含：</p><ul><li>一个<code>Candidates</code>介于1和<code>EC.ExpectedLeaders</code>值之间（含）的数组，</li><li>一个非空<code>PoStRandomness</code>字段，</li><li>一个非空<code>Proof</code>字段，</li></ul></li><li><p>一个非空<code>ForkSignal</code>字段。</p></li></ul><p>句法有效的完整块必须具有：</p><ul><li>所有引用的消息在语法上均有效，</li><li>所有引用的父母收据在语法上均有效，</li><li>块头和包含的消息的序列化大小之和不大于<code>block.BlockMaxSize</code>，</li><li>所有显式消息的气体限制总和不大于<code>block.BlockGasLimit</code>。</li></ul><p>请注意，块签名的验证需要从父提示集状态访问矿工的地址和公钥，因此签名验证是语义验证的一部分。同样，消息签名验证要求查找与<code>From</code>处于块的父状态的每个消息的帐户执行者相关联的公钥。</p>`,7),Oi={id:"_2-4-1-1-2阻止语义验证",tabindex:"-1"},Ui=n("a",{class:"header-anchor",href:"#_2-4-1-1-2阻止语义验证","aria-hidden":"true"},"#",-1),zi={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block.block-semantic-validation",target:"_blank",rel:"noopener noreferrer"},Wi=n("p",null,"语义验证是指需要引用块头和消息本身之外的信息的验证。语义验证与构建块的父提示集和状态有关。",-1),Zi=n("p",null,[s("为了进行语义验证，"),n("code",null,"FullBlock"),s("必须从接收到的块头中提取其Filecoin消息进行组装。可以从网络中检索阻止消息CID，并将其解码为有效的CBOR "),n("code",null,"Message"),s("/ "),n("code",null,"SignedMessage"),s("。")],-1),Ki=n("p",null,[s("在Lotus实现中，模块的语义验证由"),n("code",null,"Syncer"),s("模块执行：")],-1),Qi={href:"https://spec.filecoin.io/#example-validateblock",target:"_blank",rel:"noopener noreferrer"},Ji=t(`<p>ValidateBlock应该与spec.validation.md中的“语义验证”匹配</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>syncer <span class="token operator">*</span>Syncer<span class="token punctuation">)</span> <span class="token function">ValidateBlock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> b <span class="token operator">*</span>types<span class="token punctuation">.</span>FullBlock<span class="token punctuation">,</span> useCache <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// b.Cid() could panic for empty blocks that are used in tests.</span>
  <span class="token keyword">if</span> rerr <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rerr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   err <span class="token operator">=</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validate block panic: %w&quot;</span><span class="token punctuation">,</span> rerr<span class="token punctuation">)</span>
   <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token keyword">if</span> useCache <span class="token punctuation">{</span>
  isValidated<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">IsBlockValidated</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;check block validation cache %s: %w&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> isValidated <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 validationStart <span class="token operator">:=</span> build<span class="token punctuation">.</span>Clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  stats<span class="token punctuation">.</span><span class="token function">Record</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>BlockValidationDurationMilliseconds<span class="token punctuation">.</span><span class="token function">M</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInMilliseconds</span><span class="token punctuation">(</span>validationStart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  log<span class="token punctuation">.</span><span class="token function">Infow</span><span class="token punctuation">(</span><span class="token string">&quot;block validation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;took&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>validationStart<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;height&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>Timestamp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 ctx<span class="token punctuation">,</span> span <span class="token operator">:=</span> trace<span class="token punctuation">.</span><span class="token function">StartSpan</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;validateBlock&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">defer</span> span<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">blockSanityChecks</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Header<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;incoming header failed basic sanity checks: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 h <span class="token operator">:=</span> b<span class="token punctuation">.</span>Header

 baseTs<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">LoadTipSet</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">NewTipSetKey</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Parents<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;load parent tipset failed (%s): %w&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Parents<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 lbts<span class="token punctuation">,</span> lbst<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmgr<span class="token punctuation">.</span><span class="token function">GetLookbackTipSetForRound</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">,</span> baseTs<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Height<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to get lookback tipset for block: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 prevBeacon<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">GetLatestBeaconEntry</span><span class="token punctuation">(</span>baseTs<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to get latest beacon entry: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// fast checks first</span>
 nulls <span class="token operator">:=</span> h<span class="token punctuation">.</span>Height <span class="token operator">-</span> <span class="token punctuation">(</span>baseTs<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> tgtTs <span class="token operator">:=</span> baseTs<span class="token punctuation">.</span><span class="token function">MinTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> build<span class="token punctuation">.</span>BlockDelaySecs<span class="token operator">*</span><span class="token function">uint64</span><span class="token punctuation">(</span>nulls<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> h<span class="token punctuation">.</span>Timestamp <span class="token operator">!=</span> tgtTs <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;block has wrong timestamp: %d != %d&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Timestamp<span class="token punctuation">,</span> tgtTs<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 now <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span>Clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">if</span> h<span class="token punctuation">.</span>Timestamp <span class="token operator">&gt;</span> now<span class="token operator">+</span>build<span class="token punctuation">.</span>AllowableClockDriftSecs <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;block was from the future (now=%d, blk=%d): %w&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Timestamp<span class="token punctuation">,</span> ErrTemporal<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> h<span class="token punctuation">.</span>Timestamp <span class="token operator">&gt;</span> now <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Got block from the future, but within threshold&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Timestamp<span class="token punctuation">,</span> build<span class="token punctuation">.</span>Clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 msgsCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span><span class="token function">checkBlockMessages</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">,</span> baseTs<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;block had invalid messages: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 minerCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span><span class="token function">minerIsValid</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">,</span> baseTs<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;minerIsValid failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 baseFeeCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  baseFee<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">ComputeBaseFee</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> baseTs<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;computing base fee: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> types<span class="token punctuation">.</span><span class="token function">BigCmp</span><span class="token punctuation">(</span>baseFee<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ParentBaseFee<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;base fee doesn&#39;t match: %s (header) != %s (computed)&quot;</span><span class="token punctuation">,</span>
    b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ParentBaseFee<span class="token punctuation">,</span> baseFee<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 pweight<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">Weight</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> baseTs<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting parent weight: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> types<span class="token punctuation">.</span><span class="token function">BigCmp</span><span class="token punctuation">(</span>pweight<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ParentWeight<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parrent weight different: %s (header) != %s (computed)&quot;</span><span class="token punctuation">,</span>
   b<span class="token punctuation">.</span>Header<span class="token punctuation">.</span>ParentWeight<span class="token punctuation">,</span> pweight<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 stateRootCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  stateroot<span class="token punctuation">,</span> precp<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">.</span><span class="token function">TipSetState</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> baseTs<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;get tipsetstate(%d, %s) failed: %w&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Parents<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> stateroot <span class="token operator">!=</span> h<span class="token punctuation">.</span>ParentStateRoot <span class="token punctuation">{</span>
   msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">MessagesForTipset</span><span class="token punctuation">(</span>baseTs<span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;failed to load messages for tipset during tipset state mismatch error: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;Messages for tipset with mismatching state:&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>
     mm <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">VMMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     log<span class="token punctuation">.</span><span class="token function">Warnf</span><span class="token punctuation">(</span><span class="token string">&quot;Message[%d]: from=%s to=%s method=%d params=%x&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> mm<span class="token punctuation">.</span>From<span class="token punctuation">,</span> mm<span class="token punctuation">.</span>To<span class="token punctuation">,</span> mm<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> mm<span class="token punctuation">.</span>Params<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parent state root did not match computed state (%s != %s)&quot;</span><span class="token punctuation">,</span> stateroot<span class="token punctuation">,</span> h<span class="token punctuation">.</span>ParentStateRoot<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> precp <span class="token operator">!=</span> h<span class="token punctuation">.</span>ParentMessageReceipts <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parent receipts root did not match computed value (%s != %s)&quot;</span><span class="token punctuation">,</span> precp<span class="token punctuation">,</span> h<span class="token punctuation">.</span>ParentMessageReceipts<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 <span class="token comment">// Stuff that needs worker address</span>
 waddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmgr<span class="token punctuation">.</span><span class="token function">GetMinerWorkerRaw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">,</span> lbst<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">)</span>
 <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;GetMinerWorkerRaw failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 winnerCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> h<span class="token punctuation">.</span>ElectionProof<span class="token punctuation">.</span>WinCount <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;block is not claiming to be a winner&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  eligible<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmgr<span class="token punctuation">.</span><span class="token function">MinerEligibleToMine</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">,</span> baseTs<span class="token punctuation">,</span> lbts<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;determining if miner has min power failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>eligible <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;block&#39;s miner is ineligible to mine&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  rBeacon <span class="token operator">:=</span> <span class="token operator">*</span>prevBeacon
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   rBeacon <span class="token operator">=</span> h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  buf <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">.</span><span class="token function">MarshalCBOR</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to marshal miner address to cbor: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  vrfBase<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">DrawRandomness</span><span class="token punctuation">(</span>rBeacon<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>DomainSeparationTag_ElectionProofProduction<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;could not draw randomness: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">VerifyElectionPoStVRF</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> waddr<span class="token punctuation">,</span> vrfBase<span class="token punctuation">,</span> h<span class="token punctuation">.</span>ElectionProof<span class="token punctuation">.</span>VRFProof<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validating block election proof failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  slashed<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmgr<span class="token punctuation">.</span><span class="token function">GetMinerSlashed</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">,</span> baseTs<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to check if block miner was slashed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> slashed <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;received block was from slashed or invalid miner&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  mpow<span class="token punctuation">,</span> tpow<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> stmgr<span class="token punctuation">.</span><span class="token function">GetPowerRaw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> syncer<span class="token punctuation">.</span>sm<span class="token punctuation">,</span> lbst<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed getting power: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  j <span class="token operator">:=</span> h<span class="token punctuation">.</span>ElectionProof<span class="token punctuation">.</span><span class="token function">ComputeWinCount</span><span class="token punctuation">(</span>mpow<span class="token punctuation">.</span>QualityAdjPower<span class="token punctuation">,</span> tpow<span class="token punctuation">.</span>QualityAdjPower<span class="token punctuation">)</span>
  <span class="token keyword">if</span> h<span class="token punctuation">.</span>ElectionProof<span class="token punctuation">.</span>WinCount <span class="token operator">!=</span> j <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;miner claims wrong number of wins: miner: %d, computed: %d&quot;</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>ElectionProof<span class="token punctuation">.</span>WinCount<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 blockSigCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> sigs<span class="token punctuation">.</span><span class="token function">CheckBlockSignature</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> h<span class="token punctuation">,</span> waddr<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;check block signature failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 beaconValuesCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;LOTUS_IGNORE_DRAND&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;_yes_&quot;</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> beacon<span class="token punctuation">.</span><span class="token function">ValidateBlockValues</span><span class="token punctuation">(</span>syncer<span class="token punctuation">.</span>beacon<span class="token punctuation">,</span> h<span class="token punctuation">,</span> baseTs<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>prevBeacon<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to validate blocks random beacon values: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 tktsCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  buf <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> h<span class="token punctuation">.</span>Miner<span class="token punctuation">.</span><span class="token function">MarshalCBOR</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to marshal miner address to cbor: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> h<span class="token punctuation">.</span>Height <span class="token operator">&gt;</span> build<span class="token punctuation">.</span>UpgradeSmokeHeight <span class="token punctuation">{</span>
   buf<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>baseTs<span class="token punctuation">.</span><span class="token function">MinTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>VRFProof<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  beaconBase <span class="token operator">:=</span> <span class="token operator">*</span>prevBeacon
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   beaconBase <span class="token operator">=</span> h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  vrfBase<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">DrawRandomness</span><span class="token punctuation">(</span>beaconBase<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> crypto<span class="token punctuation">.</span>DomainSeparationTag_TicketProduction<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Height<span class="token operator">-</span>build<span class="token punctuation">.</span>TicketRandomnessLookback<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to compute vrf base for ticket: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  err <span class="token operator">=</span> <span class="token function">VerifyElectionPoStVRF</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> waddr<span class="token punctuation">,</span> vrfBase<span class="token punctuation">,</span> h<span class="token punctuation">.</span>Ticket<span class="token punctuation">.</span>VRFProof<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;validating block tickets failed: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 wproofCheck <span class="token operator">:=</span> async<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span><span class="token function">VerifyWinningPoStProof</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token operator">*</span>prevBeacon<span class="token punctuation">,</span> lbst<span class="token punctuation">,</span> waddr<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;invalid election post: %w&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>

 await <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>async<span class="token punctuation">.</span>ErrorFuture<span class="token punctuation">{</span>
  minerCheck<span class="token punctuation">,</span>
  tktsCheck<span class="token punctuation">,</span>
  blockSigCheck<span class="token punctuation">,</span>
  beaconValuesCheck<span class="token punctuation">,</span>
  wproofCheck<span class="token punctuation">,</span>
  winnerCheck<span class="token punctuation">,</span>
  msgsCheck<span class="token punctuation">,</span>
  baseFeeCheck<span class="token punctuation">,</span>
  stateRootCheck<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">var</span> merr <span class="token builtin">error</span>
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fut <span class="token operator">:=</span> <span class="token keyword">range</span> await <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> fut<span class="token punctuation">.</span><span class="token function">AwaitContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   merr <span class="token operator">=</span> multierror<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>merr<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">if</span> merr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  mulErr <span class="token operator">:=</span> merr<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>multierror<span class="token punctuation">.</span>Error<span class="token punctuation">)</span>
  mulErr<span class="token punctuation">.</span>ErrorFormat <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>es <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;1 error occurred:\\n\\t* %+v\\n\\n&quot;</span><span class="token punctuation">,</span> es<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   points <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">for</span> i<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token keyword">range</span> es <span class="token punctuation">{</span>
    points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;* %+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>
    <span class="token string">&quot;%d errors occurred:\\n\\t%s\\n\\n&quot;</span><span class="token punctuation">,</span>
    <span class="token function">len</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token string">&quot;\\n\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> mulErr
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> useCache <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> syncer<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">MarkBlockAsValidated</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;caching block validation %s: %w&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>邮件是通过检索的<code>Syncer</code>。遵循以下两个步骤<code>Syncer</code>：1-<code>FullTipSet</code>用先前收到的单个块组装一个填充块。该数据块<code>ParentWeight</code>大于最重的提示集（第一个数据块）中的数据块。2-从收到的块中检索所有提示集，直到我们的链。验证扩展到这些提示集中的每个块。验证应确保：-信标整体按其轮次排序。-提示集<code>Parents</code>CID与通过BlockSync获取的父提示集匹配。</p><p>语义上有效的块必须满足以下所有要求。</p><p><strong><code>Parents</code>-有关</strong></p>`,5),Xi=n("li",null,[n("code",null,"Parents"),s("按其标题的字典顺序列出"),n("code",null,"Ticket"),s("。")],-1),Yi=n("code",null,"ParentStateRoot",-1),$i={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.tipset",target:"_blank",rel:"noopener noreferrer"},nc=n("li",null,[n("code",null,"ParentState"),s(" 将通过执行父提示集的消息（由VM解释器定义）产生的状态树与该提示集的父状态相匹配。")],-1),sc=n("li",null,[n("code",null,"ParentMessageReceipts"),s("标识父提示集执行产生的收据列表，并为父提示集的每条唯一消息提供一张收据。换句话说，块的"),n("code",null,"ParentMessageReceipts"),s("CID与从父提示集计算的收据CID匹配。")],-1),ac=n("li",null,[n("code",null,"ParentWeight"),s(" 匹配链的权重，直到并包括父提示集。")],-1),ec=t(`<p><strong>与时间有关</strong></p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Epoch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大于其</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Parents
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>，并且</p><ul><li><p>将来不会根据节点当前时间的本地时钟读数，</p><ul><li>在适当的时期之前，不应拒绝具有未来时期的模块，但不应对其进行评估（验证或包含在提示集中）</li></ul></li><li><p>不过去比软终结更远通过SPC定义的</p><p>终局性</p><p>，</p><ul><li>该规则仅在接收到新的八卦块（即从当前链头）接收时才适用，而不是在首次同步到链时。</li></ul></li></ul></li><li><p>在</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Timestamp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包括以秒为单位的是：</p><ul><li>不得大于当前时间加上 <code>ΑllowableClockDriftSecs</code></li><li>不得小于前一个块的<code>Timestamp</code>加号<code>BlockDelay</code>（包括空块）</li><li>具有创世块的时间戳，网络的锁定时间和锁定的所隐含的精确值<code>Epoch</code>。</li></ul></li></ul><p><strong><code>Miner</code>-有关</strong></p><ul><li><p>的<code>Miner</code>是在父tipset状态存储功率表活性。矿工的地址已注册在<code>Claims</code>Power Actor的HAMT中</p></li><li><p>对于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TipSetState
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要验证的每个提示集，都应包含。</p><ul><li>提示集中的每个区块都应属于不同的矿工。</li></ul></li><li><p>与消息的<code>From</code>地址关联的Actor存在，是帐户actor，其Nonce与消息Nonce匹配。</p></li><li><p>包括有效的证据，证明该矿工证明可以访问其面临挑战的部门的密封版本。为了实现这一目标：</p><ul><li>使用<code>WinningPoSt</code>域分隔标签为当前时期绘制随机性。</li><li>根据绘制的随机性，获取此矿工在此时期面临挑战的扇区列表。</li></ul></li><li><p>矿工不被削减<code>StoragePowerActor</code>。</p></li></ul><p><strong><code>Beacon</code>- ＆<code>Ticket</code>-相关</strong></p><ul><li><p>有效期</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BeaconEntries
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应包括：</p><ul><li>检查中的每一个<code>BeaconEntries</code>都是消息的签名：<code>previousSignature || round</code>使用DRAND的公钥签名。</li><li>包括从<code>MaxBeaconRoundForEpoch</code>低到高<code>prevEntry</code>（从上一个技巧集开始）之间的所有条目。</li></ul></li><li><p>一个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Ticket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来自父tipset的块头最小票获得，</p><ul><li><code>Ticket.VRFResult</code>由<code>Miner</code>演员的工人帐户公钥有效签署，</li></ul></li><li><p><code>ElectionProof Ticket</code>通过使用矿工的密钥检查BLS签名来正确计算得出。该<code>ElectionProof</code>票应该是中奖票。</p></li></ul><p><strong>消息和签名相关</strong></p><ul><li><p><code>secp256k1</code>邮件已通过其发送方（<code>From</code>）工作者帐户密钥正确签名，</p></li><li><p><code>BLSAggregate</code>包括一个签名，该签名使用该块的发送参与者的密钥来签名该块引用的所有BLS消息的CID数组。</p></li><li><p><code>Signature</code>包含来自块的<code>Miner</code>参与者的工作人员帐户公共密钥的块头的有效字段。</p></li><li><p>对于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ValidForBlockInclusion()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下保持的每条消息：</p><ul><li>消息字段<code>Version</code>，<code>To</code>，<code>From</code>，<code>Value</code>，<code>GasPrice</code>，和<code>GasLimit</code>正确定义。</li><li>消息<code>GasLimit</code>低于消息的最低气体成本（来自链高度和消息长度）。</li></ul></li><li><p>对于其中的每个消息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ApplyMessage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（即在执行消息之前），以下保持：</p><ul><li><p>基本气体和价值检查在</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>checkMessage()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：</p><ul><li>消息<code>GasLimit</code>大于零。</li><li>消息<code>GasPrice</code>和<code>Value</code>已设置。</li></ul></li><li><p>消息的存储气体成本低于消息的<code>GasLimit</code>。</p></li><li><p>消息<code>Nonce</code>与从消息<code>From</code>地址中检索到的Actor中的随机数匹配。</p></li><li><p>消息的最大用气成本（从其<code>GasLimit</code>，<code>GasPrice</code>和派生<code>Value</code>）低于从消息<code>From</code>地址检索的Actor的余额。</p></li><li><p>消息的传输<code>Value</code>处于从消息<code>From</code>地址中检索到的Actor的余额之下。</p></li></ul></li></ul><p>除了验证签名之外，没有对块中包含的消息进行语义验证的方法。如果块中包含的所有消息在语法上均有效，则可以执行它们并产生收据。</p><p>链同步系统可以分阶段执行语法和语义验证，以最大程度地减少不必要的资源消耗。</p><p>如果以上所有测试均成功，则将该块标记为已验证。最终，无效块不得进一步传播或验证为父节点。</p>`,11),tc={id:"_2-4-1-2小费",tabindex:"-1"},oc=n("a",{class:"header-anchor",href:"#_2-4-1-2小费","aria-hidden":"true"},"#",-1),pc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.tipset",target:"_blank",rel:"noopener noreferrer"},ic={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},cc=t("<p>每个块都引用一个父提示集，并验证<em>该提示集的state</em>，同时提出要包含在当前时代的消息。除非将该块合并到提示集中，否则无法知道新块的消息所应用的状态。因此，孤立地从单个块中执行消息是没有意义的：只有执行了该块的技巧集中的所有消息后，才知道新的状态树。</p><p>一个有效的提示集包含一个非空的块集合，这些块具有不同的矿工，并且全部指定相同：</p><ul><li><code>Epoch</code></li><li><code>Parents</code></li><li><code>ParentWeight</code></li><li><code>StateRoot</code></li><li><code>ReceiptsRoot</code></li></ul><p>提示集中的各个块按每个块票证中字节的字典顺序进行规范排序，从而与该块本身的CID字节断开联系。</p>",4),lc={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.chain-selection",target:"_blank",rel:"noopener noreferrer"},uc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.message_pool",target:"_blank",rel:"noopener noreferrer"},rc=n("p",null,"Lotus实现中的主要Tipset结构包括以下内容：",-1),dc={href:"https://spec.filecoin.io/#example-tipset",target:"_blank",rel:"noopener noreferrer"},kc=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> TipSet <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 cids   <span class="token punctuation">[</span><span class="token punctuation">]</span>cid<span class="token punctuation">.</span>Cid
 blks   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BlockHeader
 height abi<span class="token punctuation">.</span>ChainEpoch
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tipset的语义验证包括以下检查。</p>`,2),vc={href:"https://spec.filecoin.io/#example-newtipset",target:"_blank",rel:"noopener noreferrer"},mc=t(`<p>检查：</p><ul><li>提示集由至少一个块组成。（由于每个提示集的可变块数由随机性决定，因此我们不施加上限。）</li><li>所有块都具有相同的高度。</li><li>所有块都具有相同的父代（它们具有相同的数量和匹配的CID）。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewTipSet</span><span class="token punctuation">(</span>blks <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BlockHeader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>TipSet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>blks<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;NewTipSet called with zero length array of blocks&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>blks<span class="token punctuation">,</span> <span class="token function">tipsetSortFunc</span><span class="token punctuation">(</span>blks<span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token keyword">var</span> ts TipSet
 ts<span class="token punctuation">.</span>cids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cid<span class="token punctuation">.</span>Cid<span class="token punctuation">{</span>blks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
 ts<span class="token punctuation">.</span>blks <span class="token operator">=</span> blks
 <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> blks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> b<span class="token punctuation">.</span>Height <span class="token operator">!=</span> blks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Height <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cannot create tipset with mismatching heights&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>blks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Parents<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Parents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cannot create tipset with mismatching number of parents&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> i<span class="token punctuation">,</span> cid <span class="token operator">:=</span> <span class="token keyword">range</span> b<span class="token punctuation">.</span>Parents <span class="token punctuation">{</span>
   <span class="token keyword">if</span> cid <span class="token operator">!=</span> blks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;cannot create tipset with mismatching parents&quot;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  ts<span class="token punctuation">.</span>cids <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>cids<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Cid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token punctuation">}</span>
 ts<span class="token punctuation">.</span>height <span class="token operator">=</span> blks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Height

 <span class="token keyword">return</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),bc={id:"_2-4-1-3连锁店经理",tabindex:"-1"},hc=n("a",{class:"header-anchor",href:"#_2-4-1-3连锁店经理","aria-hidden":"true"},"#",-1),fc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.chain_manager",target:"_blank",rel:"noopener noreferrer"},_c=n("p",null,[s("所述"),n("em",null,"链经理"),s("是在blockchain系统中的中心组件。它跟踪并更新给定节点接收到的竞争子链，以选择适当的区块链头：它在系统中知道的最重子链的最新块。")],-1),gc=n("p",null,[s("这样做，"),n("em",null,"链管理器"),s("是中央子系统，它处理Filecoin节点中许多其他系统的簿记工作，并公开了供那些系统使用的便捷方法，从而使系统能够从链中抽样随机性，或查看哪个块已被占用。最近完成。")],-1),yc={id:"_2-4-1-3-1延伸链",tabindex:"-1"},wc=n("a",{class:"header-anchor",href:"#_2-4-1-3-1延伸链","aria-hidden":"true"},"#",-1),xc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.chain_manager.chain-extension",target:"_blank",rel:"noopener noreferrer"},Cc={id:"_2-4-1-3-1-1接收块接收",tabindex:"-1"},Sc=n("a",{class:"header-anchor",href:"#_2-4-1-3-1-1接收块接收","aria-hidden":"true"},"#",-1),Fc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.chain_manager.incoming-block-reception",target:"_blank",rel:"noopener noreferrer"},qc=n("p",null,"对于每个传入的块，即使未将传入的块添加到当前最重的提示集中，链管理器也应将其添加到它正在跟踪的适当子链中，或独立地对其进行跟踪，直到：",-1),Pc=n("ul",null,[n("li",null,"它能够通过接收该子链中的另一个块来添加到当前最重的子链中，或者"),n("li",null,"它可以丢弃它，因为该块是在最终确定之前开采的。")],-1),Ac=n("p",null,"重要的是要注意，在最终确定之前，给定的子链可能会被替换为在给定回合中开采的另一个较重的子链。为了快速适应这种情况，链管理者必须维护和更新所有考虑到最终的子链。",-1),Bc={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.chain-selection",target:"_blank",rel:"noopener noreferrer"},Ec=n("p",null,[n("strong",null,"注释/建议：")],-1),Tc=n("ol",null,[n("li",null,"为了简化某些验证检查，应该按高度和父集对块进行索引。这样，可以快速查询具有给定高度和普通父母的几组积木。"),n("li",null,"在这些集中计算和缓存块的结果聚合状态可能也很有用，当检查有多个父级的块从哪个状态根开始时，这样可以节省额外的状态计算。"),n("li",null,"建议将块保留在本地数据存储中，无论此时是否将其理解为最佳技巧-这是为了避免将来不得不重新提取相同的块。")],-1),Ic={id:"_2-4-1-3-1-2chaintipsmanager",tabindex:"-1"},Rc=n("a",{class:"header-anchor",href:"#_2-4-1-3-1-2chaintipsmanager","aria-hidden":"true"},"#",-1),Mc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.chain_manager.chaintipsmanager",target:"_blank",rel:"noopener noreferrer"},Dc=t(`<p>链技巧管理器是Filecoin共识的子组件，负责跟踪Filecoin区块链的所有实时技巧，并跟踪当前的“最佳”技巧集。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Returns the ticket that is at round &#39;r&#39; in the chain behind &#39;head&#39;</span>
<span class="token keyword">func</span> <span class="token function">TicketFromRound</span><span class="token punctuation">(</span>head Tipset<span class="token punctuation">,</span> r Round<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Returns the tipset that contains round r (Note: multiple rounds&#39; worth of tickets may exist within a single block due to losing tickets being added to the eventually successfully generated block)</span>
<span class="token keyword">func</span> <span class="token function">TipsetFromRound</span><span class="token punctuation">(</span>head Tipset<span class="token punctuation">,</span> r Round<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// GetBestTipset returns the best known tipset. If the &#39;best&#39; tipset hasn&#39;t changed, then this</span>
<span class="token comment">// will return the previous best tipset.</span>
<span class="token keyword">func</span> <span class="token function">GetBestTipset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Adds the losing ticket to the chaintips manager so that blocks can be mined on top of it</span>
<span class="token keyword">func</span> <span class="token function">AddLosingTicket</span><span class="token punctuation">(</span>parent Tipset<span class="token punctuation">,</span> t Ticket<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Gc={id:"_2-4-1-4制片人",tabindex:"-1"},Vc=n("a",{class:"header-anchor",href:"#_2-4-1-4制片人","aria-hidden":"true"},"#",-1),Lc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer",target:"_blank",rel:"noopener noreferrer"},Nc={id:"_2-4-1-4-1采矿块",tabindex:"-1"},jc=n("a",{class:"header-anchor",href:"#_2-4-1-4-1采矿块","aria-hidden":"true"},"#",-1),Hc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer.mining-blocks",target:"_blank",rel:"noopener noreferrer"},Oc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.minimum-miner-size",target:"_blank",rel:"noopener noreferrer"},Uc=n("p",null,"为了做到这一点，矿工必须进行连锁验证，并跟踪收到的最新区块。矿工的新区块将基于前一个时期的父母。",-1),zc={id:"_2-4-1-4-1-1块创建",tabindex:"-1"},Wc=n("a",{class:"header-anchor",href:"#_2-4-1-4-1-1块创建","aria-hidden":"true"},"#",-1),Zc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer.block-creation",target:"_blank",rel:"noopener noreferrer"},Kc=t("<p>为一个时期生成一个块<code>H</code>需要等待该时期的信标输入并使用它来运行<code>GenerateElectionProof</code>。如果<code>WinCount</code>≥1（即，当矿工当选），相同的信标条目用于运行<code>WinningPoSt</code>。有了<code>ElectionProof</code>票证（的输出<code>GenerateElectionProof</code>）和<code>WinningPoSt</code>证明，矿工可以生产一个新的区块。</p>",1),Qc={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},Jc={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block",target:"_blank",rel:"noopener noreferrer"},Xc=n("p",null,"要创建一个区块，合格的矿工必须计算一些字段：",-1),Yc=n("li",null,[n("p",null,[n("code",null,"Parents"),s(" -父提示集块的CID。")])],-1),$c=n("code",null,"ParentWeight",-1),nl={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.chain-selection",target:"_blank",rel:"noopener noreferrer"},sl=n("code",null,"ParentState",-1),al={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter",target:"_blank",rel:"noopener noreferrer"},el=t("<li><p><code>ParentMessageReceipts</code>-AMT根目录的CID，其中包含计算时产生的收据<code>ParentState</code>。</p></li><li><p><code>Epoch</code>-块的纪元，从该<code>Parents</code>纪元和生成该块所花费的纪元数得出。</p></li><li><p><code>Timestamp</code> -创建块时生成的Unix时间戳（以秒为单位）。</p></li>",3),tl=n("code",null,"BeaconEntries",-1),ol={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.beacon-entries",target:"_blank",rel:"noopener noreferrer"},pl=n("code",null,"Ticket",-1),il={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.randomness-ticket-generation",target:"_blank",rel:"noopener noreferrer"},cl=t(`<li><p><code>Miner</code> -区块生产者的矿工演员地址。</p></li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Messages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TxMeta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包含建议包含在新块中的消息的对象的CID ：</p><ul><li>从内存池中选择一组消息以包括在块中，以满足块大小和气体限制</li><li>将邮件分为BLS签名邮件和secpk签名邮件</li><li><code>TxMeta.BLSMessages</code>：包含裸笔<code>UnsignedMessage</code>的AMT根目录的CID</li><li><code>TxMeta.SECPMessages</code>：一个AMT的根的CID包括<code>SignedMessage</code>小号</li></ul></li><li><p><code>BeaconEntries</code>：从中导出随机性的信标条目列表</p></li><li><p><code>BLSAggregate</code> -使用BLS签名的块中所有消息的聚集签名。</p></li><li><p><code>Signature</code> -在区块标题的序列化表示形式（带有空签名）上具有矿工的工人帐户私钥的签名（还必须与票证签名匹配）。</p></li><li><p><code>ForkSignaling</code>-uint64标志用作信令分叉的一部分。默认情况下应设置为0。</p></li>`,6),ll=n("p",null,"注意，要生成有效块，无需评估要包含在块中的消息。矿工可能仍希望通过投机方式评估消息，以便进行优化，以包括将成功执行并支付最多汽油的消息。",-1),ul=n("p",null,"产生积木时不评估积木奖励。在以下纪元的提示集中包含该区块时，将对其进行支付。",-1),rl=n("p",null,"区块的签名确保了区块在传播后的完整性，因为与许多PoW区块链不同，发现中奖票证与区块生成无关。",-1),dl={id:"_2-4-1-4-1-2块广播",tabindex:"-1"},kl=n("a",{class:"header-anchor",href:"#_2-4-1-4-1-2块广播","aria-hidden":"true"},"#",-1),vl={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer.block-broadcast",target:"_blank",rel:"noopener noreferrer"},ml={href:"https://spec.filecoin.io/#section-algorithms.gossip_sub",target:"_blank",rel:"noopener noreferrer"},bl=n("code",null,"/fil/blocks",-1),hl=n("p",null,"矿工应在产生有效块后立即输出其有效块，否则冒着其他矿工冒着在EPOCH_CUTOFF之后接收该块且不将其包括在当前时期中的风险。",-1),fl={id:"_2-4-1-4-2块奖励",tabindex:"-1"},_l=n("a",{class:"header-anchor",href:"#_2-4-1-4-2块奖励","aria-hidden":"true"},"#",-1),gl={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block_producer.block-rewards",target:"_blank",rel:"noopener noreferrer"},yl={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.sysactors.rewardactor",target:"_blank",rel:"noopener noreferrer"},wl={href:"https://spec.filecoin.io/#section-systems.filecoin_token",target:"_blank",rel:"noopener noreferrer"},xl={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.miner_collaterals",target:"_blank",rel:"noopener noreferrer"},Cl={id:"_2-4-信息池",tabindex:"-1"},Sl=n("a",{class:"header-anchor",href:"#_2-4-信息池","aria-hidden":"true"},"#",-1),Fl={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.message_pool",target:"_blank",rel:"noopener noreferrer"},ql=n("p",null,[s("消息池，或者"),n("code",null,"mpool"),s("或者"),n("code",null,"mempool"),s("是Filecoin协议中的消息池。它充当Filecoin节点与用于链下消息传播的其他节点的对等网络之间的接口。节点使用消息池来维护它们要传输到Filecoin VM并添加到链中的一组消息（即，添加用于“链上”执行）。")],-1),Pl=n("p",null,"为了使消息最终出现在区块链中，它首先必须位于消息池中。实际上，至少在Filecoin的Lotus实现中，没有中央消息池存储在某处。而是，消息池是一种抽象，并实现为网络中每个节点保留的消息列表。因此，当节点将新消息放入消息池时，该消息将使用libp2p的pubsub协议GossipSub传播到网络的其余部分。节点需要订阅相应的pubsub主题才能接收消息。",-1),Al=n("p",null,[s("使用GossipSub进行消息传播不会立即发生，因此，在不同节点上的消息池可以同步之前存在一些滞后。实际上，在给消息池添加连续的消息流以及传播消息的延迟的情况下，消息池永远不会在网络中的所有节点之间同步。这不是系统的缺点，如不是短信池也"),n("em",null,"需要"),s("通过网络进行同步。")],-1),Bl=n("p",null,"消息池应具有定义的最大大小，以避免DoS攻击，在DoS攻击中，节点被垃圾邮件吞噬并耗尽内存。消息池的建议大小为5000条消息。",-1),El={id:"_2-4-2-1讯息传播",tabindex:"-1"},Tl=n("a",{class:"header-anchor",href:"#_2-4-2-1讯息传播","aria-hidden":"true"},"#",-1),Il={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.message_pool.message_syncer",target:"_blank",rel:"noopener noreferrer"},Rl={href:"https://github.com/libp2p/specs/tree/master/pubsub/gossipsub",target:"_blank",rel:"noopener noreferrer"},Ml={href:"https://github.com/libp2p/specs/tree/master/pubsub/gossipsub",target:"_blank",rel:"noopener noreferrer"},Dl=n("code",null,"/fil/msgs/",-1),Gl=n("em",null,"主题",-1),Vl={href:"https://spec.filecoin.io/#section-systems.filecoin_vm.message",target:"_blank",rel:"noopener noreferrer"},Ll=n("code",null,"/fil/msgs/",-1),Nl=t("<p>有两个与消息和块相关的主要pubsub主题：i）<code>/fil/msgs/</code>携带消息的主题，以及ii）<code>/fil/blocks/</code>携带块的主题。该<code>/fil/msgs/</code>主题链接到<code>mpool</code>。流程如下：</p><ol><li>当客户想要在Filecoin网络中发送消息时，他们会将消息发布到<code>/fil/msgs/</code>主题。</li><li>该消息使用GossipSub传播到网络中的所有其他节点，并最终出现在<code>mpool</code>所有矿工中。</li><li>根据加密货币经济规则，某些矿工最终会从中<code>mpool</code>（与其他消息一起）挑选消息并将其包含在一个块中。</li><li>矿工在<code>/fil/blocks/</code>pubsub主题中发布新挖掘的块，并且该块传播到网络中的所有节点（包括发布此块中包含的消息的节点）。</li></ol><p>节点必须检查传入消息是否有效，即它们是否具有有效签名。如果该消息无效，则应将其丢弃并且不得转发。</p>",3),jl=n("em",null,"分数",-1),Hl={href:"https://github.com/libp2p/specs/tree/master/pubsub/gossipsub",target:"_blank",rel:"noopener noreferrer"},Ol=n("p",null,"笔记：",-1),Ul=n("ul",null,[n("li",null,[s("*资金检查：*重要的是要注意，"),n("code",null,"mpool"),s("逻辑不是检查邮件发行者帐户中是否有足够的资金。矿工在将消息包含在块中之前会对此进行检查。")]),n("li",null,[s("*消息排序：*消息按照"),n("code",null,"mpool"),s("到达矿工时遵循的加密经济规则，按矿工的顺序进行排序，以便矿工组成下一个区块。")])],-1),zl={id:"_2-4-2-2讯息储存",tabindex:"-1"},Wl=n("a",{class:"header-anchor",href:"#_2-4-2-2讯息储存","aria-hidden":"true"},"#",-1),Zl={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.message_pool.message_storage",target:"_blank",rel:"noopener noreferrer"},Kl=n("p",null,"如前所述，没有包含消息的中央池。相反，每个节点必须已为传入消息分配了内存。",-1),Ql={id:"_2-4-3链同步",tabindex:"-1"},Jl=n("a",{class:"header-anchor",href:"#_2-4-3链同步","aria-hidden":"true"},"#",-1),Xl={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync",target:"_blank",rel:"noopener noreferrer"},Yl=t("<p>区块链同步（“ sync”）是区块链系统的关键部分。它处理块和消息的检索和传播，因此负责分布式状态复制。因此，此过程对安全性至关重要-状态复制问题可能对区块链的运行产生严重影响。</p><p>当节点首次加入网络时，它会发现对等节点（通过上面讨论的对等节点发现），并加入<code>/fil/blocks</code>和<code>/fil/msgs</code>GossipSub主题。它侦听其他节点正在传播的新块。它选择一个块作为，<code>BestTargetHead</code>并开始同步从到此高度的区块链<code>TrustedCheckpoint</code>，默认情况下为<code>GenesisBlock</code>or <code>GenesisCheckpoint</code>。为了挑选<code>BestTargetHead</code>同伴，他们比较身高和体重的组合-这些值越高，区块出现在主链上的机会就越高。如果两个块的高度相同，则对等方应选择权重较高的一个。一旦对等方选择，<code>BestTargetHead</code>它将使用BlockSync协议来获取块并达到当前高度。从那一点开始<code>CHAIN_FOLLOW</code> 模式，它使用GossipSub接收新的块，或者，如果听到有关它尚未通过GossipSub接收的块的消息，则使用Bitswap。</p>",2),$l={id:"_2-4-3-chainsync概述",tabindex:"-1"},nu=n("a",{class:"header-anchor",href:"#_2-4-3-chainsync概述","aria-hidden":"true"},"#",-1),su={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.chainsync-overview",target:"_blank",rel:"noopener noreferrer"},au=t("<p><code>ChainSync</code>是Filecoin用来同步其区块链的协议。它特定于Filecoin在状态表示和共识规则中的选择，但是足够通用，可以服务于其他区块链。<code>ChainSync</code>是一组较小的协议，它们处理同步过程的不同部分。</p><p>在以下情况下，通常需要链同步：</p><ol><li>当节点首次加入网络并且需要在验证或扩展链之前达到当前状态时。</li><li>当节点由于短暂断开而失去同步时。</li><li>在正常操作期间，以跟上最新消息和块。</li></ol><p>在这三种情况下，使用三种主要协议来实现同步。</p><ul><li><code>GossipSub</code>是用于传播消息和块的libp2p pubsub协议。当节点需要与正在产生和传播的新块保持同步时，它主要用于以上第三步。</li><li><code>BlockSync</code> 用于同步链的特定部分，即从特定高度到特定高度。</li><li><code>hello</code>协议，当两个对等方首次“见面”时（即，他们第一次相互连接）使用。根据协议，他们交换链头。</li></ul><p>另外，<code>Bitswap</code>当节点同步（“追赶”）但GossipSub无法将某些块传递到节点时，用于请求和接收块。最后，<code>GraphSync</code>可以用来获取区块链的一部分作为的更有效版本<code>Bitswap</code>。</p><p>Filecoin节点是libp2p节点，因此可以运行多种其他协议。与Filecoin中的其他任何内容一样，节点可以选择使用其他协议来获得结果。也就是说，节点必须实现<code>ChainSync</code>本规范中所述的版本，才能被视为Filecoin的实现。</p>",7),eu={id:"_2-4-3-2术语和概念",tabindex:"-1"},tu=n("a",{class:"header-anchor",href:"#_2-4-3-2术语和概念","aria-hidden":"true"},"#",-1),ou={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.terms-and-concepts",target:"_blank",rel:"noopener noreferrer"},pu=t("<ul><li><code>LastCheckpoint``ChainSync</code>意识到的最后一个严格的面向社会共识的检查点。这个共识检查点定义了最小的终结性和最小的历史基础。 <code>ChainSync</code>接受<code>LastCheckpoint</code>并建立信念，永不背离其历史。</li><li><code>TargetHeads``BlockCIDs</code>代表块生产边缘的块的列表。这些是最新和最好的<code>ChainSync</code>知识。它们是“目标”头，因为 <code>ChainSync</code>将尝试与其同步。该列表按“成为最佳连锁店的可能性”排序。在这一点上，只需通过即可实现<code>ChainWeight</code>。</li><li><code>BestTargetHead``BlockCID</code>尝试与之同步的最佳链头。这是<code>TargetHeads</code></li></ul>",1),iu={id:"_2-4-3-3chainsync状态机",tabindex:"-1"},cu=n("a",{class:"header-anchor",href:"#_2-4-3-3chainsync状态机","aria-hidden":"true"},"#",-1),lu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.chainsync-state-machine",target:"_blank",rel:"noopener noreferrer"},uu=t('<p>在较高级别上，请<code>ChainSync</code>执行以下操作：</p><ul><li>第1部分：验证内部状态（<code>INIT</code>以下状态） <ul><li>应该验证数据结构并验证本地链</li><li>资源昂贵的验证可能会被跳过，节点自行承担风险</li></ul></li><li>第2部分：引导至网络（<code>BOOTSTRAP</code>） <ul><li>步骤1.引导到网络，并获得一组“足够安全”的对等体（下面有更多详细信息）</li><li>步骤2.引导至<code>GossipSub</code>渠道</li></ul></li><li>第3部分：同步受信任的检查点状态（<code>SYNC_CHECKPOINT</code>） <ul><li>步骤1.以<code>TrustedCheckpoint</code>（默认为<code>GenesisCheckpoint</code>）开头。本<code>TrustedCheckpoint</code>不应该在软件进行验证，它应该由运营商进行验证。</li><li>第2步。获取它所指向的块，以及该块的父母</li><li>第3步。 <code>StateTree</code></li></ul></li><li>第4部分：追上链（<code>CHAIN_CATCHUP</code>） <ul><li>步骤1.保持一组<code>TargetHeads</code>（<code>BlockCIDs</code>），并选择<code>BestTargetHead</code>从它</li><li>步骤2.与最新观察到的头部同步，验证朝向它们的块（请求中间点）</li><li>步骤3.随着验证的进行，<code>TargetHeads</code>并且<code>BestTargetHead</code>可能会改变，因为生产边缘的新块将到达，并且某些目标头或通往它们的路径可能无法验证。</li><li>第4步。当节点“赶上”时完成<code>BestTargetHead</code>（检索所有状态，链接到本地链，验证所有块等）。</li></ul></li><li>第5部分：保持同步，并参与块传播（<code>CHAIN_FOLLOW</code>） <ul><li>步骤1.如果安全条件发生变化，请返回至第4部分（<code>CHAIN_CATCHUP</code>）</li><li>步骤2.接收，验证和传播收到的信息 <code>Blocks</code></li><li>第3步。现在更加确定拥有最佳链，最终确定“提示”并推进链状态。</li></ul></li></ul><p><code>ChainSync</code>使用以下<em>概念性</em>状态机。由于这是一个<em>概念性的</em>状态机，因此实现可能会偏离精确实现这些状态或严格划分它们的状态。实现可能会模糊状态之间的界线。如果是这样，实现必须确保更改后的协议的安全性。</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn7v5rtlrlj31aw0petbh.jpg" alt="image-20210201111716710" loading="lazy"></p>',4),ru={id:"_2-4-3-4同行发现",tabindex:"-1"},du=n("a",{class:"header-anchor",href:"#_2-4-3-4同行发现","aria-hidden":"true"},"#",-1),ku={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.peer-discovery",target:"_blank",rel:"noopener noreferrer"},vu=n("p",null,"对等发现是整个体系结构的关键部分。错误地操作可能会对协议的操作造成严重后果。当加入网络时，新节点最初连接的一组对等点可能会完全支配该节点对其他对等点的了解，因此，将主导该节点所拥有的网络状态。",-1),mu=n("p",null,"对等发现可以通过任意外部手段来驱动，并被推到ChainSync所涉及协议（即GossipSub，Bitswap，BlockSync）的核心功能之外。这允许进行正交的，由应用程序驱动的开发，并且无需外部依赖来实现协议。但是，GossipSub协议支持：i）对等交换，以及ii）显式对等协议。",-1),bu={id:"_2-4-3-4-1同行交流",tabindex:"-1"},hu=n("a",{class:"header-anchor",href:"#_2-4-3-4-1同行交流","aria-hidden":"true"},"#",-1),fu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.peer-exchange",target:"_blank",rel:"noopener noreferrer"},_u=n("p",null,"Peer Exchange允许应用程序从一组已知的对等方进行引导，而无需外部对等方发现机制。此过程可以通过引导节点或其他普通对等节点来实现。**引导节点必须由系统操作员维护，并且必须正确配置。**它们必须稳定并且独立于协议构造（例如GossipSub网格构造）运行，也就是说，引导节点不维护与网格的连接。",-1),gu={href:"https://github.com/libp2p/specs/tree/master/pubsub/gossipsub",target:"_blank",rel:"noopener noreferrer"},yu={id:"_2-4-3-4-2明确的对等协议",tabindex:"-1"},wu=n("a",{class:"header-anchor",href:"#_2-4-3-4-2明确的对等协议","aria-hidden":"true"},"#",-1),xu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.explicit-peering-agreements",target:"_blank",rel:"noopener noreferrer"},Cu=n("p",null,"使用明确的对等协议，运营商必须指定加入节点时节点应连接到的对等方列表。该协议必须具有可用于指定这些选项的选项。对于每个显式对等方，路由器必须建立并维持双向（对等）连接。",-1),Su={id:"_2-4-3渐进块验证",tabindex:"-1"},Fu=n("a",{class:"header-anchor",href:"#_2-4-3渐进块验证","aria-hidden":"true"},"#",-1),qu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.chainsync.progressive-block-validation",target:"_blank",rel:"noopener noreferrer"},Pu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.struct.block",target:"_blank",rel:"noopener noreferrer"},Au=n("li",null,"验证计算量很大，并且是严重的DOS攻击媒介。",-1),Bu=n("li",null,"安全的实现必须仔细安排验证时间，并在不完全验证块的情况下将修剪块的工作减至最少。",-1),Eu=n("li",null,[n("code",null,"ChainSync"),s("应该保留未验证块的缓存（最好按属于链的可能性排序），并在传递未验证块"),n("code",null,"FinalityTipset"),s("或"),n("code",null,"ChainSync"),s("承受大量资源时删除未验证块。")],-1),Tu=n("li",null,"这些阶段可以部分地用于候选链中的许多块，以便在实际进行昂贵的验证工作之前很长时间就清除掉坏块。",-1),Iu=n("strong",null,"块验证的渐进阶段",-1),Ru=n("li",null,[n("strong",null,"BV0-语法"),s("：序列化，键入，值范围。")],-1),Mu=n("li",null,[n("strong",null,"BV1-合理的共识"),s("：合理的矿工，重量和历时值（例如来自的链状状态"),n("code",null,"b.ChainEpoch - consensus.LookbackParameter"),s("）。")],-1),Du=n("li",null,[n("strong",null,"BV2-块签名")],-1),Gu=n("strong",null,"BV3-信标条目",-1),Vu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.validating-beacon-entries-on-block-reception",target:"_blank",rel:"noopener noreferrer"},Lu=t("<li><strong>BV4-ElectionProof</strong>：生成了有效的选举证明。</li><li><strong>BV5-WinningPoSt</strong>：生成正确的PoSt。</li><li><strong>BV6-链血统和终结性</strong>：验证区块链是否回到终结链，而不是终结性。</li><li><strong>BV7-消息签名</strong>：</li><li><strong>BV8-状态树</strong>：父提示消息执行将产生声明的状态树根和收据。</li>",5),Nu={id:"_2-4-储能共识",tabindex:"-1"},ju=n("a",{class:"header-anchor",href:"#_2-4-储能共识","aria-hidden":"true"},"#",-1),Hu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus",target:"_blank",rel:"noopener noreferrer"},Ou={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.the-power-table",target:"_blank",rel:"noopener noreferrer"},Uu={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus",target:"_blank",rel:"noopener noreferrer"},zu=n("p",null,"简而言之，SPC子系统提供以下服务：",-1),Wu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.the-power-table",target:"_blank",rel:"noopener noreferrer"},Zu={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus",target:"_blank",rel:"noopener noreferrer"},Ku={href:"https://spec.filecoin.io/#section-libraries.drand",target:"_blank",rel:"noopener noreferrer"},Qu={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.tickets",target:"_blank",rel:"noopener noreferrer"},Ju={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.secret-leader-election",target:"_blank",rel:"noopener noreferrer"},Xu={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.chain-selection",target:"_blank",rel:"noopener noreferrer"},Yu={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.finality-in-ec",target:"_blank",rel:"noopener noreferrer"},$u={id:"_2-4-4-1区分存储矿工和块矿工",tabindex:"-1"},nr=n("a",{class:"header-anchor",href:"#_2-4-4-1区分存储矿工和块矿工","aria-hidden":"true"},"#",-1),sr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.distinguishing-between-storage-miners-and-block-miners",target:"_blank",rel:"noopener noreferrer"},ar=n("p",null,"在Filecoin网络中有两种获取Filecoin令牌的方法：",-1),er={href:"https://spec.filecoin.io/#section-systems.filecoin_markets.storage_market",target:"_blank",rel:"noopener noreferrer"},tr={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_mining",target:"_blank",rel:"noopener noreferrer"},or={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.secret-leader-election",target:"_blank",rel:"noopener noreferrer"},pr={href:"https://spec.filecoin.io/#section-algorithms.pos.porep",target:"_blank",rel:"noopener noreferrer"},ir={href:"https://spec.filecoin.io/#section-algorithms.pos.post",target:"_blank",rel:"noopener noreferrer"},cr={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_mining.storage_miner_actor",target:"_blank",rel:"noopener noreferrer"},lr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor",target:"_blank",rel:"noopener noreferrer"},ur={id:"_2-4-4-2上电",tabindex:"-1"},rr=n("a",{class:"header-anchor",href:"#_2-4-4-2上电","aria-hidden":"true"},"#",-1),dr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.on-power",target:"_blank",rel:"noopener noreferrer"},kr=t("<p>质量调整后的功率作为其<em><strong>扇区质量*<strong>的静态函数分配给每个扇区，其中包括：i）<strong>扇区时空</strong>，它是扇区大小和承诺的存储持续时间的乘积，ii）<strong>交易权重</strong>，该权</strong>重</strong>转换由交易达成共识的权力，iii）<strong>交易质量乘数</strong>，该</em><em>乘数</em>*取决于行业内完成的交易类型（即CC，常规交易或已验证的客户交易），最后，iv）<strong>部门质量乘数</strong>，即交易质量乘数乘以该行业中每种类型的交易所占用的时空量来加权。</p><p>该<strong>部门的质量</strong>是映射大小，持续时间和活跃交易的部门其一生的时间去对权力和报酬分配碰撞时类型的措施。</p>",2),vr=n("em",null,"承诺容量（CC）",-1),mr=n("em",null,"常规交易",-1),br=n("em",null,"验证客户",-1),hr={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.sector",target:"_blank",rel:"noopener noreferrer"},fr={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.sector.sector_quality",target:"_blank",rel:"noopener noreferrer"},_r={href:"https://spec.filecoin.io/#section-algorithms.verified_clients",target:"_blank",rel:"noopener noreferrer"},gr={href:"https://spec.filecoin.io/#section-algorithms.cryptoecon",target:"_blank",rel:"noopener noreferrer"},yr=n("strong",null,"质量调整后的权力",-1),wr={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.secret-leader-election",target:"_blank",rel:"noopener noreferrer"},xr=n("p",null,"更准确地说，我们具有以下定义：",-1),Cr=n("ul",null,[n("li",null,[n("em",null,"原始字节功率"),s("：扇区大小，以字节为单位。")]),n("li",null,[n("em",null,"质量调整后的功率"),s("：网络上存储的数据的共识功率，等于原始字节功率乘以扇区质量乘数。")])],-1),Sr={id:"_2-4-4-3信标条目",tabindex:"-1"},Fr=n("a",{class:"header-anchor",href:"#_2-4-4-3信标条目","aria-hidden":"true"},"#",-1),qr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.beacon-entries",target:"_blank",rel:"noopener noreferrer"},Pr={href:"https://spec.filecoin.io/#section-libraries.drand",target:"_blank",rel:"noopener noreferrer"},Ar={href:"https://spec.filecoin.io/#section-algorithms.crypto.randomness",target:"_blank",rel:"noopener noreferrer"},Br=n("p",null,"反过来，这些随机种子由以下人员使用：",-1),Er={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.sector.sealing",target:"_blank",rel:"noopener noreferrer"},Tr={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.storage_proving.poster",target:"_blank",rel:"noopener noreferrer"},Ir={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.secret-leader-election",target:"_blank",rel:"noopener noreferrer"},Rr=n("p",null,"该随机性可以通过根据其安全性要求使用它们的各个协议从各种Filecoin链纪元中得出。",-1),Mr=n("p",null,[s("重要的是要注意，给定的Filecoin网络和给定的drand网络不必具有相同的循环时间，即Filecoin生成的块可能比drand生成的随机性更快或更慢。例如，如果drand信标产生的随机性是Filecoin产生块的两倍，那么我们可能期望在Filecoin时代产生两个随机值，反之，如果Filecoin网络的速度是drand的两倍，则我们可能期望一个随机值每隔一个Filecoin时代。因此，取决于两个网络的配置，某些Filecoin块可能包含多个或不包含drand条目。此外，必须确保中断期间对drand网络进行的新的随机性条目的任何呼叫都应被阻止，如"),n("code",null,"drand.Public()"),s(" 下面的电话。在所有情况下，Filecoin块都必须包括自"),n("code",null,"BeaconEntries"),s("块头字段中的最后一个纪元以来生成的所有drand beacon输出。给定Filecoin纪元的任何随机性使用都应使用Filecoin块中包含的最后一个有效drand条目。如下所示。")],-1),Dr={id:"_2-4-4-3-1获取vm的drand随机性",tabindex:"-1"},Gr=n("a",{class:"header-anchor",href:"#_2-4-4-3-1获取vm的drand随机性","aria-hidden":"true"},"#",-1),Vr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.get-drand-randomness-for-vm",target:"_blank",rel:"noopener noreferrer"},Lr=n("p",null,"对于诸如PoRep创建，证明验证之类的操作，或者需要Filecoin VM随机性的任何操作，应该有一种方法可以从链中正确提取drand条目。请注意，如果drand较慢，则该回合可能跨越多个filecoin时期。最低的时期号块将包含请求的信标条目。同样，如果在应插入信标的位置存在零轮，我们需要在链上进行迭代以找到将条目插入到的位置。具体而言，下一个非空块必须包含定义所请求的drand条目。",-1),Nr={id:"_2-4-4-3-2从drand网络获取随机性",tabindex:"-1"},jr=n("a",{class:"header-anchor",href:"#_2-4-4-3-2从drand网络获取随机性","aria-hidden":"true"},"#",-1),Hr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.fetch-randomness-from-drand-network",target:"_blank",rel:"noopener noreferrer"},Or=n("p",null,"进行挖掘时，矿工可以从drand网络中获取条目，以将其包括在新块中。",-1),Ur={href:"https://spec.filecoin.io/#example-drandbeacon",target:"_blank",rel:"noopener noreferrer"},zr=t(`<p>DrandBeacon将Lotus与drand网络相连，以便以与Filecoin轮次/纪元一致的方式向系统提供随机性。</p><p>我们通过其公共HTTP端点连接到drand对等方。对等点在drandServers变量中枚举。</p><p>Drand链的根信任是从build.DrandChain配置的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> DrandBeacon <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 client dclient<span class="token punctuation">.</span>Client

 pubkey kyber<span class="token punctuation">.</span>Point

 <span class="token comment">// seconds</span>
 interval time<span class="token punctuation">.</span>Duration

 drandGenTime <span class="token builtin">uint64</span>
 filGenTime   <span class="token builtin">uint64</span>
 filRoundTime <span class="token builtin">uint64</span>

 cacheLk    sync<span class="token punctuation">.</span>Mutex
 localCache <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>BeaconEntry
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Wr={href:"https://spec.filecoin.io/#example-beaconentriesforblock",target:"_blank",rel:"noopener noreferrer"},Zr=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">BeaconEntriesForBlock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> bSchedule Schedule<span class="token punctuation">,</span> epoch abi<span class="token punctuation">.</span>ChainEpoch<span class="token punctuation">,</span> parentEpoch abi<span class="token punctuation">.</span>ChainEpoch<span class="token punctuation">,</span> prev types<span class="token punctuation">.</span>BeaconEntry<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>BeaconEntry<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token punctuation">{</span>
  parentBeacon <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>parentEpoch<span class="token punctuation">)</span>
  currBeacon <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
  <span class="token keyword">if</span> parentBeacon <span class="token operator">!=</span> currBeacon <span class="token punctuation">{</span>
   <span class="token comment">// Fork logic</span>
   round <span class="token operator">:=</span> currBeacon<span class="token punctuation">.</span><span class="token function">MaxBeaconRoundForEpoch</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
   out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>BeaconEntry<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
   rch <span class="token operator">:=</span> currBeacon<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> round<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
   res <span class="token operator">:=</span> <span class="token operator">&lt;-</span>rch
   <span class="token keyword">if</span> res<span class="token punctuation">.</span>Err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting entry %d returned error: %w&quot;</span><span class="token punctuation">,</span> round<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>Entry
   rch <span class="token operator">=</span> currBeacon<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> round<span class="token punctuation">)</span>
   res <span class="token operator">=</span> <span class="token operator">&lt;-</span>rch
   <span class="token keyword">if</span> res<span class="token punctuation">.</span>Err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting entry %d returned error: %w&quot;</span><span class="token punctuation">,</span> round<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>Entry
   <span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 beacon <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>

 start <span class="token operator">:=</span> build<span class="token punctuation">.</span>Clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

 maxRound <span class="token operator">:=</span> beacon<span class="token punctuation">.</span><span class="token function">MaxBeaconRoundForEpoch</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>
 <span class="token keyword">if</span> maxRound <span class="token operator">==</span> prev<span class="token punctuation">.</span>Round <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// TODO: this is a sketchy way to handle the genesis block not having a beacon entry</span>
 <span class="token keyword">if</span> prev<span class="token punctuation">.</span>Round <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  prev<span class="token punctuation">.</span>Round <span class="token operator">=</span> maxRound <span class="token operator">-</span> <span class="token number">1</span>
 <span class="token punctuation">}</span>

 cur <span class="token operator">:=</span> maxRound
 <span class="token keyword">var</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>BeaconEntry
 <span class="token keyword">for</span> cur <span class="token operator">&gt;</span> prev<span class="token punctuation">.</span>Round <span class="token punctuation">{</span>
  rch <span class="token operator">:=</span> beacon<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>
  <span class="token keyword">select</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> resp <span class="token operator">:=</span> <span class="token operator">&lt;-</span>rch<span class="token punctuation">:</span>
   <span class="token keyword">if</span> resp<span class="token punctuation">.</span>Err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;beacon entry request returned error: %w&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>

   out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>
   cur <span class="token operator">=</span> resp<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span>Round <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;context timed out waiting on beacon entry to come back for epoch %d: %w&quot;</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 log<span class="token punctuation">.</span><span class="token function">Debugw</span><span class="token punctuation">(</span><span class="token string">&quot;fetching beacon entries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;took&quot;</span><span class="token punctuation">,</span> build<span class="token punctuation">.</span>Clock<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;numEntries&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token function">reverse</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
 <span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Kr={href:"https://spec.filecoin.io/#example-maxbeaconroundforepoch",target:"_blank",rel:"noopener noreferrer"},Qr=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DrandBeacon<span class="token punctuation">)</span> <span class="token function">MaxBeaconRoundForEpoch</span><span class="token punctuation">(</span>filEpoch abi<span class="token punctuation">.</span>ChainEpoch<span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span>
 <span class="token comment">// TODO: sometimes the genesis time for filecoin is zero and this goes negative</span>
 latestTs <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>filEpoch<span class="token punctuation">)</span> <span class="token operator">*</span> db<span class="token punctuation">.</span>filRoundTime<span class="token punctuation">)</span> <span class="token operator">+</span> db<span class="token punctuation">.</span>filGenTime<span class="token punctuation">)</span> <span class="token operator">-</span> db<span class="token punctuation">.</span>filRoundTime
 dround <span class="token operator">:=</span> <span class="token punctuation">(</span>latestTs <span class="token operator">-</span> db<span class="token punctuation">.</span>drandGenTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">uint64</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>interval<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token keyword">return</span> dround
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Jr={id:"_2-4-4-3-3在块接收时验证信标条目",tabindex:"-1"},Xr=n("a",{class:"header-anchor",href:"#_2-4-4-3-3在块接收时验证信标条目","aria-hidden":"true"},"#",-1),Yr={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.validating-beacon-entries-on-block-reception",target:"_blank",rel:"noopener noreferrer"},$r=n("p",null,"Filecoin链将包含从Filecoin起源到当前区块的整个信标输出。",-1),nd={href:"https://spec.filecoin.io/#section-libraries.drand",target:"_blank",rel:"noopener noreferrer"},sd={href:"https://github.com/drand/drand/blob/763e9a252cf59060c675ced0562e8eba506971c1/chain/beacon.go#L76",target:"_blank",rel:"noopener noreferrer"},ad=n("code",null,"Verify",-1),ed={href:"https://spec.filecoin.io/#example-validateblockvalues",target:"_blank",rel:"noopener noreferrer"},td=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ValidateBlockValues</span><span class="token punctuation">(</span>bSchedule Schedule<span class="token punctuation">,</span> h <span class="token operator">*</span>types<span class="token punctuation">.</span>BlockHeader<span class="token punctuation">,</span> parentEpoch abi<span class="token punctuation">.</span>ChainEpoch<span class="token punctuation">,</span>
 prevEntry types<span class="token punctuation">.</span>BeaconEntry<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
 <span class="token punctuation">{</span>
  parentBeacon <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>parentEpoch<span class="token punctuation">)</span>
  currBeacon <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Height<span class="token punctuation">)</span>
  <span class="token keyword">if</span> parentBeacon <span class="token operator">!=</span> currBeacon <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expected two beacon entries at beacon fork, got %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   err <span class="token operator">:=</span> currBeacon<span class="token punctuation">.</span><span class="token function">VerifyEntry</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;beacon at fork point invalid: (%v, %v): %w&quot;</span><span class="token punctuation">,</span>
     h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// TODO: fork logic</span>
 b <span class="token operator">:=</span> bSchedule<span class="token punctuation">.</span><span class="token function">BeaconForEpoch</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Height<span class="token punctuation">)</span>
 maxRound <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">MaxBeaconRoundForEpoch</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Height<span class="token punctuation">)</span>
 <span class="token keyword">if</span> maxRound <span class="token operator">==</span> prevEntry<span class="token punctuation">.</span>Round <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expected not to have any beacon entries in this block, got %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expected to have beacon entries in this block, but didn&#39;t find any&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 last <span class="token operator">:=</span> h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>BeaconEntries<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
 <span class="token keyword">if</span> last<span class="token punctuation">.</span>Round <span class="token operator">!=</span> maxRound <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;expected final beacon entry in block to be at round %d, got %d&quot;</span><span class="token punctuation">,</span> maxRound<span class="token punctuation">,</span> last<span class="token punctuation">.</span>Round<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">for</span> i<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> h<span class="token punctuation">.</span>BeaconEntries <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">VerifyEntry</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> prevEntry<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> xerrors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;beacon entry %d (%d - %x (%d)) was invalid: %w&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Round<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  prevEntry <span class="token operator">=</span> e
 <span class="token punctuation">}</span>

 <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),od={id:"_2-4-4-4门票",tabindex:"-1"},pd=n("a",{class:"header-anchor",href:"#_2-4-4-4门票","aria-hidden":"true"},"#",-1),id={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.tickets",target:"_blank",rel:"noopener noreferrer"},cd=n("p",null,"Filecoin块标题还包含一个从其时代的信标条目生成的“票”。对于等重的货叉，票证用于在“货叉选择规则”中打破平局。",-1),ld=n("p",null,"每当在Filecoin中比较票证时，比较就是票证的VRF摘要的字节。",-1),ud={id:"_2-4-4-4-1随机票生成",tabindex:"-1"},rd=n("a",{class:"header-anchor",href:"#_2-4-4-4-1随机票生成","aria-hidden":"true"},"#",-1),dd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.randomness-ticket-generation",target:"_blank",rel:"noopener noreferrer"},kd=t(`<p>在Filecoin时代<code>n</code>，将使用相应的信标条目生成新的票证<code>n</code>。</p><p>矿工通过可验证随机函数（VRF）运行信标条目以获取新的唯一票证。信标条目前面带有票证域分隔标签，并与矿工参与者地址相连（以确保使用相同工作人员密钥的矿工获得不同的票证）。</p><p>生成给定纪元n的票证：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>randSeed = GetRandomnessFromBeacon(n)
newTicketRandomness = VRF_miner(H(TicketProdDST || index || Serialization(randSeed, minerActorAddress)))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),vd={href:"https://spec.filecoin.io/#section-algorithms.crypto.vrf",target:"_blank",rel:"noopener noreferrer"},md={id:"_2-4-4-4-2票证验证",tabindex:"-1"},bd=n("a",{class:"header-anchor",href:"#_2-4-4-4-2票证验证","aria-hidden":"true"},"#",-1),hd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.ticket-validation",target:"_blank",rel:"noopener noreferrer"},fd=n("p",null,"每个票证应从VRF链中的前一个票证生成，并进行相应的验证。",-1),_d={id:"_2-4-4-5最小矿工规模",tabindex:"-1"},gd=n("a",{class:"header-anchor",href:"#_2-4-4-5最小矿工规模","aria-hidden":"true"},"#",-1),yd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.minimum-miner-size",target:"_blank",rel:"noopener noreferrer"},wd=t("<p>为了确保存储电源共识，系统定义了参与共识所需的最小矿机大小。</p><p>具体而言，矿工必须至少<code>MIN_MINER_SIZE_STOR</code>具有电量（即当前在存储交易中使用的存储电源）才能参与领导者选举。如果没有矿工拥有<code>MIN_MINER_SIZE_STOR</code>或拥有更多权力，则至少具有与矿工顶部最小<code>MIN_MINER_SIZE_TARG</code>的矿工（按存储功率排序）的功率相同的矿工将能够参加领导人选举。以简单的英语<code>MIN_MINER_SIZE_TARG = 3</code>为例，这意味着具有至少与第三大矿商相同权力的矿工将有资格参加共识。</p><p>小于此值的矿工无法在网络中进行区块挖掘并获得区块奖励。即使他们的权力不会被算作领导人选举的票数，他们的权力仍将计入整个网络（原始或要求的）存储能力中。但是，<strong>重要的是要注意，此类矿工仍然会遭受其权力的过失并因此受到惩罚</strong>。</p><p>因此，要引导网络，起源块必须包括矿工（可能只是CommittedCapacity扇区）来启动网络。</p><p>该<code>MIN_MINER_SIZE_TARG</code>条件将不会在任何矿工拥有的<code>MIN_MINER_SIZE_STOR</code>权力都超过的网络中使用。尽管如此，它的定义是为了确保小型网络中的活动（例如，接近起源或在掉电之后）。</p>",5),xd={id:"_2-4-4-6储能演员",tabindex:"-1"},Cd=n("a",{class:"header-anchor",href:"#_2-4-4-6储能演员","aria-hidden":"true"},"#",-1),Sd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor",target:"_blank",rel:"noopener noreferrer"},Fd={id:"_2-4-4-6-1storagepoweractorstate-实作",tabindex:"-1"},qd=n("a",{class:"header-anchor",href:"#_2-4-4-6-1storagepoweractorstate-实作","aria-hidden":"true"},"#",-1),Pd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.storagepoweractorstate-implementation",target:"_blank",rel:"noopener noreferrer"},Ad=n("code",null,"StoragePowerActorState",-1),Bd={href:"https://spec.filecoin.io/#example-state",target:"_blank",rel:"noopener noreferrer"},Ed=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> State <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 TotalRawBytePower abi<span class="token punctuation">.</span>StoragePower
 <span class="token comment">// TotalBytesCommitted includes claims from miners below min power threshold</span>
 TotalBytesCommitted  abi<span class="token punctuation">.</span>StoragePower
 TotalQualityAdjPower abi<span class="token punctuation">.</span>StoragePower
 <span class="token comment">// TotalQABytesCommitted includes claims from miners below min power threshold</span>
 TotalQABytesCommitted abi<span class="token punctuation">.</span>StoragePower
 TotalPledgeCollateral abi<span class="token punctuation">.</span>TokenAmount

 <span class="token comment">// These fields are set once per epoch in the previous cron tick and used</span>
 <span class="token comment">// for consistent values across a single epoch&#39;s state transition.</span>
 ThisEpochRawBytePower     abi<span class="token punctuation">.</span>StoragePower
 ThisEpochQualityAdjPower  abi<span class="token punctuation">.</span>StoragePower
 ThisEpochPledgeCollateral abi<span class="token punctuation">.</span>TokenAmount
 ThisEpochQAPowerSmoothed  smoothing<span class="token punctuation">.</span>FilterEstimate

 MinerCount <span class="token builtin">int64</span>
 <span class="token comment">// Number of miners having proven the minimum consensus power.</span>
 MinerAboveMinPowerCount <span class="token builtin">int64</span>

 <span class="token comment">// A queue of events to be triggered by cron, indexed by epoch.</span>
 CronEventQueue cid<span class="token punctuation">.</span>Cid <span class="token comment">// Multimap, (HAMT[ChainEpoch]AMT[CronEvent])</span>

 <span class="token comment">// First epoch in which a cron task may be stored.</span>
 <span class="token comment">// Cron will iterate every epoch between this and the current epoch inclusively to find tasks to execute.</span>
 FirstCronEpoch abi<span class="token punctuation">.</span>ChainEpoch

 <span class="token comment">// Claimed power for each miner.</span>
 Claims cid<span class="token punctuation">.</span>Cid <span class="token comment">// Map, HAMT[address]Claim</span>

 ProofValidationBatch <span class="token operator">*</span>cid<span class="token punctuation">.</span>Cid <span class="token comment">// Multimap, (HAMT[Address]AMT[SealVerifyInfo])</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Td={id:"_2-4-4-6-2storagepoweractor-实作",tabindex:"-1"},Id=n("a",{class:"header-anchor",href:"#_2-4-4-6-2storagepoweractor-实作","aria-hidden":"true"},"#",-1),Rd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.storagepoweractor-implementation",target:"_blank",rel:"noopener noreferrer"},Md=n("code",null,"StoragePowerActor",-1),Dd={href:"https://spec.filecoin.io/#example-exports",target:"_blank",rel:"noopener noreferrer"},Gd=t(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>a Actor<span class="token punctuation">)</span> <span class="token function">Exports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
  builtin<span class="token punctuation">.</span>MethodConstructor<span class="token punctuation">:</span> a<span class="token punctuation">.</span>Constructor<span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>CreateMiner<span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>UpdateClaimedPower<span class="token punctuation">,</span>
  <span class="token number">4</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>EnrollCronEvent<span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>OnEpochTickEnd<span class="token punctuation">,</span>
  <span class="token number">6</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>UpdatePledgeTotal<span class="token punctuation">,</span>
  <span class="token number">7</span><span class="token punctuation">:</span>                         <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token comment">// deprecated</span>
  <span class="token number">8</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>SubmitPoRepForBulkVerify<span class="token punctuation">,</span>
  <span class="token number">9</span><span class="token punctuation">:</span>                         a<span class="token punctuation">.</span>CurrentTotalPower<span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vd={href:"https://spec.filecoin.io/#example-minerconstructorparams",target:"_blank",rel:"noopener noreferrer"},Ld=t(`<p>此处定义了存储矿工参与者的构造函数参数，以便高级参与者可以将它们发送给初始化参与者以实例化矿工。从v0开始更改：</p><ul><li>添加了ControlAddrs</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MinerConstructorParams <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 OwnerAddr     addr<span class="token punctuation">.</span>Address
 WorkerAddr    addr<span class="token punctuation">.</span>Address
 ControlAddrs  <span class="token punctuation">[</span><span class="token punctuation">]</span>addr<span class="token punctuation">.</span>Address
 SealProofType abi<span class="token punctuation">.</span>RegisteredSealProof
 PeerId        abi<span class="token punctuation">.</span>PeerID
 Multiaddrs    <span class="token punctuation">[</span><span class="token punctuation">]</span>abi<span class="token punctuation">.</span>Multiaddrs
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Nd={id:"_2-4-4-6-3功率表",tabindex:"-1"},jd=n("a",{class:"header-anchor",href:"#_2-4-4-6-3功率表","aria-hidden":"true"},"#",-1),Hd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.the-power-table",target:"_blank",rel:"noopener noreferrer"},Od=t(`<p>给定矿工通过EC的领导者选举产生的区块部分（因此他们获得的区块奖励）与他们<code>Quality-Adjusted Power Fraction</code>的时间成正比。也就是说，质量调整后的功率代表网络上总质量调整后的功率的1％的矿工应按预期开采1％的区块。</p><p>SPC提供了一个功率表抽象，可随时间跟踪矿工功率（即矿工存储相对于网络存储）。针对新的部门承诺（增加矿工功率），失败的PoSt（减少矿工功率）或其他存储和共识故障，更新了功率表。</p><p>部门ProveCommit是第一次向网络证明功率，因此，成功的部门ProveCommit会首先添加功率。当宣布一个扇区已恢复时，也会添加电源。矿工有望在其贡献力量的所有领域进行证明。</p><p>当扇区到期，声明或检测到扇区有故障或通过矿工调用终止时，功率会降低。矿工还可以通过延长部门的寿命<code>ExtendSectorExpiration</code>。</p><p>功率表中的Miner生命周期应大致如下：</p><ul><li><p><code>MinerRegistration</code>：存储挖掘子系统将一个具有关联工作人员公用密钥和地址的新矿工及其关联的扇区大小（在每个工作人员中只有一个）注册到了功率表中。</p></li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UpdatePower
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：这些功率增量和减量由各种存储参与者调用（因此必须由网络上的每个完整节点进行验证）。特别：</p><ul><li>功率增加为 <code>SectorProveCommit</code></li><li>丢失WindowPoSt（<code>DetectedFault</code>）后，分区的功效会立即降低。</li><li>当特定扇区通过“声明的故障”或“跳过的故障”进入故障状态时，其功率将减小。</li><li>PoSt宣布并证明恢复后，将增加特定部门的力量。</li><li>通过矿工发票到期或终止某个特定部门的电源后，该电源将被删除。</li></ul></li></ul><p>总而言之，只有处于活动状态的扇区才能控制电源。在上添加扇区后，该扇区将变为活动状态<code>ProveCommit</code>。进入故障状态后，电源立即减小。确认已声明恢复后，电源即会恢复。通过矿工调用终止或终止某个扇区的电源后，该电源将被删除。</p>`,7),Ud={id:"_2-4-4-6-4质押抵押品",tabindex:"-1"},zd=n("a",{class:"header-anchor",href:"#_2-4-4-6-4质押抵押品","aria-hidden":"true"},"#",-1),Wd={href:"https://spec.filecoin.io/#section-systems.filecoin_blockchain.storage_power_consensus.storage_power_actor.pledge-collateral",target:"_blank",rel:"noopener noreferrer"},Zd=n("p",null,"质押抵押品因影响存储电源共识的任何故障而被削减，其中包括：",-1),Kd={href:"https://spec.filecoin.io/#section-algorithms.expected_consensus.consensus-faults",target:"_blank",rel:"noopener noreferrer"},Qd=n("code",null,"StoragePowerActor",-1),Jd={href:"https://spec.filecoin.io/#section-systems.filecoin_markets.onchain_storage_market.faults.storage-faults",target:"_blank",rel:"noopener noreferrer"},Xd=n("code",null,"CronActor",-1),Yd={href:"https://spec.filecoin.io/#section-systems.filecoin_markets.onchain_storage_market.faults.storage-faults",target:"_blank",rel:"noopener noreferrer"},$d={href:"https://spec.filecoin.io/#section-systems.filecoin_mining.miner_collaterals",target:"_blank",rel:"noopener noreferrer"};function nk(sk,ak){const a=c("ExternalLinkIcon");return p(),i("div",null,[n("blockquote",null,[n("p",null,[s("翻译自："),n("a",u,[s("https://spec.filecoin.io/#section-systems.filecoin_vm.interpreter"),e(a)])])]),r,n("h2",d,[k,s(" 2.1 "),n("a",v,[s("Filecoin节点"),e(a)])]),m,b,h,n("h3",f,[_,s(" 2.1.1"),n("a",g,[s("节点类型"),e(a)])]),y,n("h4",w,[x,s(" 2.1.1.1"),n("a",C,[s("节点接口"),e(a)])]),n("p",null,[s("可以在"),n("a",S,[s("此处"),e(a)]),s("找到Node接口的Lotus实现 。")]),n("h4",F,[q,s(" 2.1.1.2"),n("a",P,[s("链验证器节点"),e(a)])]),A,n("p",null,[s("可以在"),n("a",B,[s("这里"),e(a)]),s("找到Chain Verifier Node的Lotus实现 。")]),n("h4",E,[T,s(" 2.1.1.3"),n("a",I,[s("客户端节点"),e(a)])]),R,n("p",null,[s("客户端节点的Lotus实现可以在"),n("a",M,[s("这里"),e(a)]),s("找到 。")]),n("h4",D,[G,s(" 2.1.1.4"),n("a",V,[s("存储矿工节点"),e(a)])]),L,n("p",null,[s("可以在"),n("a",N,[s("此处"),e(a)]),s("找到Storage Miner Node的Lotus实现 。")]),n("h4",j,[H,s(" 2.1.1.5"),n("a",O,[s("检索矿工节点"),e(a)])]),U,n("h4",z,[W,s(" 2.1.1.6"),n("a",Z,[s("中继节点"),e(a)])]),K,n("h4",Q,[J,s(" 2.1.1.7"),n("a",X,[s("节点配置"),e(a)])]),n("p",null,[s("可以在"),n("a",Y,[s("此处"),e(a)]),s("找到Filecoin Node配置值的Lotus实现 。")]),n("h3",$,[nn,s(" 2.1.2"),n("a",sn,[s("节点存储库"),e(a)])]),an,en,tn,n("p",null,[s("FileStore存储库的Lotus实现可以在"),n("a",on,[s("这里"),e(a)]),s("找到 。")]),n("h4",pn,[cn,s(" 2.1.2.1"),n("a",ln,[s("密钥库"),e(a)])]),un,rn,dn,n("ul",null,[kn,n("li",null,[vn,s("是与存储矿工参与者地址关联的公共密钥。可由矿工选择和更改。辅助密钥对用于签名块，也可以用于签名其他消息。鉴于它是"),n("a",mn,[s("可验证随机函数的"),e(a)]),s("一部分，它必须是BLS密钥对 。")])]),bn,n("p",null,[s("在"),n("a",hn,[s("Storage Miner Actor中"),e(a)]),s("指定了更改链上工作程序密钥对（即与存储矿工actor关联的工作人员Key）的过程 。请注意，这是一个两步过程。首先，矿工通过向链发送消息来进行更改。然后，矿工在随机回溯时间之后确认密钥更改。最后，在额外的随机回溯时间之后，矿工将开始使用新密钥对块进行签名。存在此延迟是为了防止自适应密钥选择攻击。")]),fn,n("h4",_n,[gn,s(" 2.1.2.2"),n("a",yn,[s("IPLD商店"),e(a)])]),wn,xn,Cn,Sn,n("p",null,[s("有关IPLD的更多详细信息，请参见其 "),n("a",Fn,[s("规范"),e(a)]),s("。")]),n("h5",qn,[Pn,s(" 2.1.2.2.1"),n("a",An,[s("数据模型"),e(a)])]),n("p",null,[s("IPLD的核心是定义用于表示数据的 "),n("a",Bn,[s("数据模型"),e(a)]),s("。数据模型旨在通过各种编程语言进行实际实现，同时保持对内容寻址数据的可用性以及与该数据交互的各种通用工具。")]),n("p",null,[s("数据模型包括一系列标准基本类型（或“种类”），例如布尔，整数，字符串，空值和字节数组，以及两种递归类型：列表和映射。由于IPLD是为内容寻址数据而设计的，因此IPLD在其数据模型中还包含“链接”原语。实际上，链接使用 "),n("a",En,[s("CID"),e(a)]),s("规范。IPLD数据被组织为“块”，其中一个块由原始编码数据及其内容地址或CID表示。每个内容可寻址的数据块都可以表示为一个块，并且块可以一起形成一个相干图或 "),n("a",Tn,[s("Merkle DAG"),e(a)]),s("。")]),n("p",null,[s("应用程序通过数据模型与IPLD交互，而IPLD通过一组编解码器处理编组和解组。IPLD编解码器可能支持完整的数据模型或部分数据模型。支持完整数据模型的两个编解码器是 "),n("a",In,[s("DAG-CBOR"),e(a)]),s("和 "),n("a",Rn,[s("DAG-JSON"),e(a)]),s("。这些编解码器分别基于CBOR和JSON序列化格式，但包括允许它们封装IPLD数据模型（包括其链接类型）的规范化以及可在任何数据集及其各自的内容地址（或哈希摘要）。这些规则包括在对地图进行编码时对键的特定顺序进行规定，或者在存储时对整数类型进行大小调整。")]),n("h5",Mn,[Dn,s(" 2.1.2.2.2 "),n("a",Gn,[s("Filecoin中的IPLD"),e(a)])]),Vn,Ln,Nn,n("h6",jn,[Hn,s(" 2.1.2.2.2.1"),n("a",On,[s("IpldStores"),e(a)])]),Un,n("ul",null,[zn,n("li",null,[s("一种"),Wn,s("存储来自给定"),Zn,s("区块链的有效负载状态，或者存储由"),n("a",Kn,[s("Filecoin VM"),e(a)]),s("应用于给定状态的给定链中所有块消息的 "),n("a",Qn,[s("结果"),e(a)]),s("。")])]),n("p",null,[s("的"),Jn,s("是通过从他们的同辈节点中的引导阶段下载 "),n("a",Xn,[s("链同步"),e(a)]),s("，并且由节点此后被存储。每次接收到新的块时，或者节点同步到新的最佳链时，它都会更新。")]),n("p",null,[s("的"),Yn,s("是通过在给定的所有块消息的执行计算"),$n,s("，并且由节点此后被存储。"),n("a",ns,[s("VM解释器会"),e(a)]),s("使用每个新传入块的处理对其进行更新 ，并相应地由在"),n("a",ss,[s("块标题"),e(a)]),s(),as,s("字段中在其上方生成的新块进行引用 。")]),es,ts,n("p",null,[s("libp2p的完整规范可以在"),n("a",os,[s("https://github.com/libp2p/specs中"),e(a)]),s("找到 。这是Filecoin使用的libp2p协议的列表。")]),n("ul",null,[n("li",null,[ps,s(" Graphsync是一种用于在对等点之间同步图的协议。它用于在Filecoin节点之间引用，寻址，请求和传输区块链和用户数据。所述 "),n("a",is,[s("GraphSync的草案规范"),e(a)]),s("提供的概念，接口和由GraphSync使用的网络消息的更多细节。协议ID没有Filecoin特定的修改。")]),n("li",null,[s("**Gossipsub：**使用基于Gossip的pubsub协议（缩写为*GossipSub），*通过Filecoin网络传播块头和消息。与传统的pubsub协议一样，节点订阅主题并接收在这些主题上发布的消息。当节点从其订阅的主题接收消息时，它们将运行验证过程，并且i）将消息传递给应用程序； ii）将消息进一步转发给他们知道已订阅同一主题的节点。此外，FileCoin中使用的GossipSub v1.1版本通过安全机制进行了增强，该机制使协议可以抵御安全攻击。该 "),n("a",cs,[s("GossipSub规格"),e(a)]),s("提供有关其设计和实现的所有协议详细信息，以及协议参数的特定设置。尚未对协议ID进行filecoin的特定修改。但是话题标识必须是形式"),ls,s("和"),us]),n("li",null,[rs,s(" Kademlia DHT是一个分布式哈希表，在特定节点的最大查找数上具有对数范围。在Filecoin网络中，Kademlia DHT主要用于对等发现和对等路由。特别是，当一个节点想要在Filecoin网络中存储数据时，它们会获得一个矿工列表及其节点信息。该节点信息（除其他外）包括矿工的PeerID。为了连接到矿工并交换数据，想要在网络中存储数据的节点必须找到矿工的多地址，他们通过查询DHT来实现。所述 "),n("a",ds,[s("libp2p喀DHT规范"),e(a)]),s("提供了DHT结构的实现细节。对于Filecoin网络，协议ID的格式必须为"),ks,s("。")]),vs,ms]),n("h3",bs,[hs,s(" 2.1.4"),n("a",fs,[s("时钟"),e(a)])]),_s,gs,n("h4",ys,[ws,s(" 2.1.4.1"),n("a",xs,[s("时钟用途"),e(a)])]),Cs,n("ul",null,[n("li",null,[s("通过同步节点来验证传入块是否在给定时间戳的适当纪元内被挖掘（请参见 "),n("a",Ss,[s("块验证"),e(a)]),s("）。这是可能的，因为系统时钟始终将时间映射到唯一的纪元号，该纪元号完全由创世块中的开始时间确定。")]),Fs,n("li",null,[s("通过允许节点在下一轮尝试领导者选举（如果在当前轮中没有人产生阻碍的情况下）来挖掘节点，以保持协议的活跃性（请参阅 "),n("a",qs,[s("存储电源共识"),e(a)]),s("）。")])]),Ps,n("ol",null,[n("li",null,[s("相对于其他节点具有足够低的偏移量，以使从其他节点的角度来看，不会在被认为是未来纪元的纪元中开采区块（这些区块直到根据"),n("a",As,[s("验证规则"),e(a)]),s("的正确纪元/时间才被 "),n("a",Bs,[s("验证"),e(a)]),s("）。")]),Es]),Ts,n("h4",Is,[Rs,s(" 2.1.4.2"),n("a",Ms,[s("时钟要求"),e(a)])]),Ds,n("p",null,[s("预计计算机级晶体的偏差为 "),n("a",Gs,[s("1ppm"),e(a)]),s("（即每秒1微秒，或每周0.6秒）。因此，为了遵守上述要求：")]),n("ul",null,[n("li",null,[s("节点应运行NTP守护程序（例如timesyncd，ntpd，chronyd），以使其时钟与一个或多个可靠的外部引用保持同步。 "),n("ul",null,[n("li",null,[s("我们建议以下来源： "),n("ul",null,[n("li",null,[Vs,s("（ "),n("a",Ls,[s("详细"),e(a)]),s("）")]),n("li",null,[Ns,s("（ "),n("a",js,[s("详细"),e(a)]),s("）")]),n("li",null,[Hs,s("（ "),n("a",Os,[s("详细"),e(a)]),s("）")]),n("li",null,[Us,s("（ "),n("a",zs,[s("详细"),e(a)]),s("）")])])])])]),Ws]),Zs,n("h2",Ks,[Qs,s(" 2.2"),n("a",Js,[s("文件和数据"),e(a)])]),Xs,n("h3",Ys,[$s,s(" 2.2.1"),n("a",na,[s("文件"),e(a)])]),n("p",null,[n("a",sa,[s("例："),e(a)])]),aa,n("h4",ea,[ta,s(" 2.2.1.1"),n("a",oa,[s("FileStore-文件的本地存储"),e(a)])]),pa,n("p",null,[n("a",ia,[s("例："),e(a)])]),ca,n("h5",la,[ua,s(" 2.2.1.1.1"),n("a",ra,[s("变化的用户需求"),e(a)])]),da,n("h5",ka,[va,s(" 2.2.1.1.2"),n("a",ma,[s("实施实例"),e(a)])]),ba,n("h3",ha,[fa,s(" 2.2.2"),n("a",_a,[s("文件币片"),e(a)])]),ga,n("h4",ya,[wa,s(" 2.2.2.1"),n("a",xa,[s("数据表示"),e(a)])]),Ca,Sa,Fa,n("ol",null,[qa,n("li",null,[s("为了制作"),Pa,s("，IPLD DAG被序列化为 "),n("a",Aa,[s("“ Content-Addressable aRchive”（。car）"),e(a)]),s("文件，该文件为原始字节格式。CAR文件是一个不透明的数据块，可打包在一起并传输IPLD节点。该"),Ba,s("是CAR'ed和未CAR'ed结构之间常见。当稍后在存储客户端和存储提供者之间传输数据时，这将在稍后的数据检索期间有所帮助。")]),Ea]),Ta,n("h4",Ia,[Ra,s(" 2.2.2.2"),n("a",Ma,[s("件商店"),e(a)])]),n("p",null,[s("该"),Da,s("模块允许从本地存储中存储和检索碎片。零配件商店的主要目标是帮助 "),n("a",Ga,[s("存储"),e(a)]),s("和 "),n("a",Va,[s("检索市场"),e(a)]),s("模块查找密封数据在部门内部的位置。存储市场写入数据，而检索市场读取数据，以便发送给检索客户。")]),n("p",null,[s("在"),n("a",La,[s("此处"),e(a)]),s("可以找到PieceStore模块的实现 。")]),n("h3",Na,[ja,s(" 2.2.3"),n("a",Ha,[s("Filecoin中的数据传输"),e(a)])]),Oa,Ua,za,n("h4",Wa,[Za,s(" 2.2.3.1"),n("a",Ka,[s("模组"),e(a)])]),Qa,Ja,n("h4",Xa,[Ya,s(" 2.2.3.2"),n("a",$a,[s("术语"),e(a)])]),n("ul",null,[ne,n("li",null,[se,s("：传输程序使用的默认基础传输协议。完整的graphsync规范可在"),n("a",ae,[s("此处"),e(a)]),s("找到")])]),n("h4",ee,[te,s(" 2.2.3.3"),n("a",oe,[s("请求阶段"),e(a)])]),pe,ie,n("p",null,[s("请注意，“协商”和“转移”阶段可以发生在单独的往返行程中，也可能在相同的往返行程中发生，其中请求方通过发送请求隐式地同意，而响应方可以同意并立即发送或接收数据。该过程是在一次还是多次往返中进行，部分取决于请求是推式请求（存储交易）还是拉取请求（检索交易），以及数据传输协商过程是否能够执行回到底层的运输机制上。在使用GraphSync作为传输机制的情况下，可以使用"),n("a",ce,[s("GraphSync的内置可扩展性"),e(a)]),s("将数据传输请求作为对GraphSync协议 "),n("a",le,[s("的扩展"),e(a)]),s("。因此，拉取请求仅需要一次往返。但是，由于Graphsync是不直接支持"),ue,s("类型请求的请求/响应协议，因此在Push情况下，协商是通过数据传输自身的libp2p协议在单独的请求中进行的"),re,s("。其他未来的运输机制可能会同时处理“推”和“推”，也可能不会一次处理。接收到数据传输请求后，数据传输模块会对凭证进行解码，并将其交付给请求验证器。在存储交易中，请求验证程序检查所包含的交易是否是收件人之前已经同意的交易。对于检索交易，请求包括有关检索交易本身的建议。只要请求验证者接受交易建议，所有操作都将作为一次往返立即完成。")]),de,n("h4",ke,[ve,s(" 2.2.3.6"),n("a",me,[s("协议"),e(a)])]),be,he,n("h4",fe,[_e,s(" 2.2.3.7"),n("a",ge,[s("数据结构"),e(a)])]),n("p",null,[n("a",ye,[s("示例：数据传输类型"),e(a)])]),we,n("p",null,[n("a",xe,[s("示例：数据传输状态"),e(a)])]),Ce,n("p",null,[n("a",Se,[s("示例：数据传输管理器"),e(a)])]),Fe,n("h3",qe,[Pe,s(" 2.2.4"),n("a",Ae,[s("数据格式和序列化"),e(a)])]),Be,n("p",null,[s("在"),n("a",Ee,[s("此处了解有关CBOR使用情况"),e(a)]),s("和 "),n("a",Te,[s("Filecoin中的"),e(a)]),n("a",Ie,[s("int类型的"),e(a)]),s("更多设计注意 "),n("a",Re,[s("事项"),e(a)]),s("。")]),n("h4",Me,[De,s(" 2.2.4.1"),n("a",Ge,[s("资料格式"),e(a)])]),Ve,n("p",null,[s("您还可以在Filecoin协议中阅读有关"),n("a",Le,[s("数据格式的"),e(a)]),s("更多 "),n("a",Ne,[s("信息，作为随机性生成"),e(a)]),s("的一部分。")]),n("h4",je,[He,s(" 2.2.4.2"),n("a",Oe,[s("序列化"),e(a)])]),Ue,n("p",null,[s("Filecoin中的所有数据结构都是 "),n("a",ze,[s("CBOR"),e(a)]),s("元组编码的。也就是说，在Filecoin系统中使用的任何数据结构（本规范中的结构）都应按声明顺序序列化为CBOR数组，并带有与数据结构字段相对应的项。")]),n("p",null,[s("你可以找到在CBOR主要数据类型的编码结构 "),n("a",We,[s("在这里"),e(a)]),s("。")]),Ze,n("h2",Ke,[Qe,s(" 2.3"),n("a",Je,[s("虚拟机"),e(a)])]),Xe,Ye,$e,n("h3",nt,[st,s(" 2.3.1"),n("a",at,[s("VM Actor接口"),e(a)])]),et,n("p",null,[n("a",tt,[s("例："),e(a)])]),ot,n("h3",pt,[it,s(" 2.3.2"),n("a",ct,[s("状态树"),e(a)])]),lt,n("p",null,[n("a",ut,[s("示例：StateTree"),e(a)])]),rt,n("h3",dt,[kt,s(" 2.3.3"),n("a",vt,[s("VM消息-Actor方法调用"),e(a)])]),mt,bt,ht,ft,n("h4",_t,[gt,s(" 2.3.3.1"),n("a",yt,[s("消息语法验证"),e(a)])]),wt,n("h4",xt,[Ct,s(" 2.3.3.2"),n("a",St,[s("消息语义验证"),e(a)])]),Ft,n("p",null,[n("a",qt,[s("例："),e(a)])]),Pt,n("h3",At,[Bt,s(" 2.3.4"),n("a",Et,[s("VM运行时环境（在VM内部）"),e(a)])]),n("h4",Tt,[It,s(" 2.3.4.1"),n("a",Rt,[s("收据"),e(a)])]),Mt,n("h4",Dt,[Gt,s(" 2.3.4.2"),n("a",Vt,[Lt,s(" 演员界面"),e(a)])]),n("p",null,[s("演员接口的实现可以在"),n("a",Nt,[s("这里"),e(a)]),s("找到")]),n("h4",jt,[Ht,s(" 2.3.4.3"),n("a",Ot,[Ut,s(" 虚拟机实施"),e(a)])]),n("p",null,[s("Filecoin虚拟机运行时的Lotus实现可在"),n("a",zt,[s("此处"),e(a)]),s("找到")]),n("h4",Wt,[Zt,s(" 2.3.4.4"),n("a",Kt,[s("退出码"),e(a)])]),n("p",null,[s("有一些由不同参与者共享的常见运行时退出代码。它们的定义可以在"),n("a",Qt,[s("这里"),e(a)]),s("找到 。")]),n("h3",Jt,[Xt,s(" 2.3.5"),n("a",Yt,[s("煤气费"),e(a)])]),n("h4",$t,[no,s(" 2.3.5.1"),n("a",so,[s("概要"),e(a)])]),ao,n("h4",eo,[to,s(" 2.3.5.2"),n("a",oo,[s("参量"),e(a)])]),po,n("p",null,[n("a",io,[s("示例：ComputeGasOverestimationBurn"),e(a)])]),co,n("p",null,[n("a",lo,[s("示例：ComputeNextBaseFee"),e(a)])]),uo,n("h4",ro,[ko,s(" 2.3.5.3"),n("a",vo,[s("注释与含义"),e(a)])]),mo,n("h3",bo,[ho,s(" 2.3.6"),n("a",fo,[s("系统角色"),e(a)])]),_o,go,n("ul",null,[n("li",null,[s("在 "),n("a",yo,[s("InitActor"),e(a)]),s("，初始化新的参与者和记录网络名称，")]),n("li",null,[s("在 "),n("a",wo,[s("CronActor"),e(a)]),s("，，在每个时间段运行关键功能的调度演员。还有两个与VM交互的参与者：")]),n("li",null,[s("负责用户帐户（非单一帐户）的 "),n("a",xo,[s("AccountActor"),e(a)]),s("，以及")]),n("li",null,[s("该 "),n("a",Co,[s("RewardActor"),e(a)]),s("块奖励和令牌归属（单）。")])]),So,n("ul",null,[n("li",null,[Fo,s("：负责管理存储和检索交易[ "),n("a",qo,[s("Market Actor Repo"),e(a)]),s(" ]")]),n("li",null,[Po,s("：负责处理采矿业务并收集证据的"),n("a",Ao,[s("演员"),e(a)]),s("[ "),n("a",Bo,[s("Storage Miner Actor Repo"),e(a)]),s(" ]")]),n("li",null,[Eo,s("（或Multi-Signature Wallet Actor）：负责处理涉及Filecoin钱包的操作[ "),n("a",To,[s("Multisig Actor Repo"),e(a)]),s(" ]")]),n("li",null,[Io,s("：负责建立和结算与支付渠道有关的资金[ "),n("a",Ro,[s("Paych Actor Repo"),e(a)]),s(" ]")]),n("li",null,[Mo,s("：负责跟踪每个存储矿工分配的存储功率[ "),n("a",Do,[s("Storage Power Actor"),e(a)]),s(" ]")]),n("li",null,[Go,s("：负责管理已验证的客户[ "),n("a",Vo,[s("Verifreg Actor Repo"),e(a)]),s(" ]")]),n("li",null,[Lo,s("：普通系统演员[ "),n("a",No,[s("System Actor Repo"),e(a)]),s(" ]")])]),n("h4",jo,[Ho,s(" 2.3.6.1"),n("a",Oo,[s("CronActor"),e(a)])]),Uo,n("p",null,[n("a",zo,[s("例："),e(a)])]),Wo,n("h4",Zo,[Ko,s(" 2.3.6.2"),n("a",Qo,[s("初始化演员"),e(a)])]),Jo,Xo,n("p",null,[n("a",Yo,[s("例："),e(a)])]),$o,n("h4",np,[sp,s(" 2.3.6.3"),n("a",ap,[s("奖励演员"),e(a)])]),ep,n("p",null,[n("a",tp,[s("例："),e(a)])]),op,n("h4",pp,[ip,s(" 2.3.6.4"),n("a",cp,[s("AccountActor"),e(a)])]),lp,n("p",null,[n("a",up,[s("例："),e(a)])]),rp,n("h3",dp,[kp,s(" 2.3.7"),n("a",vp,[s("VM解释器-消息调用（外部VM）"),e(a)])]),mp,bp,n("h4",hp,[fp,s(" 2.3.7.1"),n("a",_p,[s("隐式消息"),e(a)])]),gp,yp,wp,xp,Cp,Sp,n("h4",Fp,[qp,s(" 2.3.7.2"),n("a",Pp,[s("煤气费"),e(a)])]),Ap,Bp,n("h4",Ep,[Tp,s(" 2.3.7.3"),n("a",Ip,[s("邮件重复"),e(a)])]),Rp,n("h4",Mp,[Dp,s(" 2.3.7.4"),n("a",Gp,[s("消息有效性和失败"),e(a)])]),n("p",null,[s("有效块中的每个消息都可以被处理并产生收据（请注意，块有效性表示所有消息在语法上均有效–请参阅 "),n("a",Vp,[s("消息语法"),e(a)]),s("–并正确签名）。但是，执行成功与否取决于消息所应用的状态。如果消息执行失败，则相应的收据将携带非零的退出代码。")]),Lp,n("h2",Np,[jp,s(" 2.4"),n("a",Hp,[s("区块链"),e(a)])]),Op,Up,n("ul",null,[n("li",null,[s("一个 "),n("a",zp,[s("消息池"),e(a)]),s("子系统节点使用跟踪和消息传播矿工已经宣布他们要在blockchain包括。")]),n("li",null,[s("用于解释和执行消息以更新系统状态的 "),n("a",Wp,[s("虚拟"),e(a)]),s("机子系统。")]),n("li",null,[s("一 "),n("a",Zp,[s("国树"),e(a)]),s("，其管理的创建和状态的树木（系统状态）从给定的子链确定性VM产生的维护子系统。")]),n("li",null,[s("甲 "),n("a",Kp,[s("链同步（ChainSync）"),e(a)]),s(" susbystem验证消息块该轨道和传播，保持套候选链在其上可以矿工和矿上的传入块运行语法验证。")]),n("li",null,[s("一个 "),n("a",Qp,[s("存储功率共识"),e(a)]),s("子系统，该子系统跟踪给定链的存储状态（即 "),n("a",Jp,[s("Storage Subystem"),e(a)]),s("），并帮助区块链系统选择要扩展的子链并将其包括在子链中。")])]),Xp,n("ul",null,[n("li",null,[s("一个 "),n("a",Yp,[s("链经理"),e(a)]),s("，它保持给定链的状态，提供设施等blockchain子系统将在顺序查询有关最新的链路状态来运行，并确保进入块纳入链之前在语义验证。")]),n("li",null,[s("阿 "),n("a",$p,[s("块生产者"),e(a)]),s("被称为在一个成功的领导人选举的事件，以产生一个新的块，将其转发到所述同步装置为传播之前扩展当前最重链。")])]),n("p",null,[s("从高层次来看，Filecoin区块链通过连续几轮的领导人选举而增长，在选举中，许多矿工被选举产生一个区块，将其纳入链中将为他们赢得区块奖励。Filecoin的区块链依靠存储能力运行。也就是说，矿工通过其共识算法来确定要开采的子链取决于该子链的存储量。在高层，“ "),n("a",ni,[s("存储功率共识”"),e(a)]),s("子系统维护一个"),si,s("，该"),ai,s("跟踪"),n("a",ei,[s("存储矿工参与者"),e(a)]),s("通过"),ti,s("和"),oi,s("网络贡献的存储量 。")]),n("h3",pi,[ii,s(" 2.4.1"),n("a",ci,[s("积木"),e(a)])]),li,n("h4",ui,[ri,s(" 2.4.1.1"),n("a",di,[s("块"),e(a)])]),ki,vi,mi,n("p",null,[n("a",bi,[s("示例：FullBlock"),e(a)])]),hi,n("p",null,[s("A"),fi,s("是块的规范表示。BlockHeader在矿工节点之间传播。从blockcheader消息中，矿工拥有所有必需的信息，以应用关联"),_i,s("的状态并更新链。为了做到这一点，"),gi,s("下面显示了需要包含的最少信息项集，其中包括：矿工的地址，票证， "),n("a",yi,[s("时空证明"),e(a)]),s("，此块所在的父母的CID从IPLD DAG以及消息自身的CID演变而来。")]),wi,n("p",null,[n("a",xi,[s("示例：BlockHeader"),e(a)])]),Ci,n("p",null,[n("a",Si,[s("示例：票证"),e(a)])]),Fi,n("p",null,[n("a",qi,[s("示例：ElectionProof"),e(a)])]),Pi,n("p",null,[n("a",Ai,[s("示例：BeaconEntry"),e(a)])]),Bi,n("p",null,[s("该"),Ei,s("结构必须引用当前回合的TicketWinner，以确保将正确的获胜者传递给 "),n("a",Ti,[s("ChainSync"),e(a)]),s("。")]),Ii,n("p",null,[n("a",Ri,[s("示例：消息"),e(a)])]),Mi,n("p",null,[s("在将消息传递到"),n("a",Di,[s("链同步逻辑"),e(a)]),s("之前，还将对其进行验证 ：")]),n("p",null,[n("a",Gi,[s("示例：ValidForBlockInclusion"),e(a)])]),Vi,n("h5",Li,[Ni,s(" 2.4.1.1.1"),n("a",ji,[s("块语法验证"),e(a)])]),Hi,n("h5",Oi,[Ui,s(" 2.4.1.1.2"),n("a",zi,[s("阻止语义验证"),e(a)])]),Wi,Zi,Ki,n("p",null,[n("a",Qi,[s("示例：ValidateBlock"),e(a)])]),Ji,n("ul",null,[Xi,n("li",null,[Yi,s("块的CID与从父"),n("a",$i,[s("Tipset"),e(a)]),s("计算的状态CID匹配 。")]),nc,sc,ac]),ec,n("h4",tc,[oc,s(" 2.4.1.2"),n("a",pc,[s("小费"),e(a)])]),n("p",null,[s("预期共识在每个时期概率选举出多个领导者，这意味着Filecoin链在每个时期可能包含零个或多个区块（每个选举的矿工一个）。来自同一时期的块被组装到提示集中。所述 "),n("a",ic,[s("VM解释器"),e(a)]),s("通过在tipset执行的所有消息（包括在多于一个的块相同消息的重复数据删除之后）修改Filecoin状态树。")]),cc,n("p",null,[s("由于网络传播延迟，在时间段N + 1中的矿工可能会从其父提示集中忽略在时间段N处挖掘的有效块。这不会使新生成的块无效，但是会降低其权重和成为EC"),n("a",lc,[s("链选择"),e(a)]),s("功能定义的协议中规范链一部分的机会 。")]),n("p",null,[s("块生产者应该协调他们如何选择要包含在块中的消息，以避免重复，从而从消息费用中最大化他们的预期收益（请参阅 "),n("a",uc,[s("消息池"),e(a)]),s("）。")]),rc,n("p",null,[n("a",dc,[s("示例：TipSet"),e(a)])]),kc,n("p",null,[n("a",vc,[s("示例：NewTipSet"),e(a)])]),mc,n("h4",bc,[hc,s(" 2.4.1.3"),n("a",fc,[s("连锁店经理"),e(a)])]),_c,gc,n("h5",yc,[wc,s(" 2.4.1.3.1"),n("a",xc,[s("延伸链"),e(a)])]),n("h6",Cc,[Sc,s(" 2.4.1.3.1.1"),n("a",Fc,[s("接收块接收"),e(a)])]),qc,Pc,Ac,n("p",null,[s("链选择是Filecoin区块链工作方式的关键组成部分。简而言之，每个链都有相关的权重，这些权重说明了在其上开采的块数以及它们跟踪的功率（存储）。“选择"),n("a",Bc,[s("链”"),e(a)]),s("部分提供了有关选择工作原理的全部详细信息 。")]),Ec,Tc,n("h6",Ic,[Rc,s(" 2.4.1.3.1.2"),n("a",Mc,[s("ChainTipsManager"),e(a)])]),Dc,n("h4",Gc,[Vc,s(" 2.4.1.4"),n("a",Lc,[s("制片人"),e(a)])]),n("h5",Nc,[jc,s(" 2.4.1.4.1"),n("a",Hc,[s("采矿块"),e(a)])]),n("p",null,[s("如果已证明拥有满足"),n("a",Oc,[s("最小矿工规模"),e(a)]),s("阈值要求的储量，则向储能演员注册的矿工可以开始生成和检查选举票 。")]),Uc,n("h6",zc,[Wc,s(" 2.4.1.4.1.1"),n("a",Zc,[s("块创建"),e(a)])]),Kc,n("p",null,[s("见 "),n("a",Qc,[s("VM解释"),e(a)]),s("为母体tipset评价的细节，并 "),n("a",Jc,[s("阻止"),e(a)]),s("对有效块标头值的约束。")]),Xc,n("ul",null,[Yc,n("li",null,[n("p",null,[$c,s("-父链的权重（请参阅“ "),n("a",nl,[s("链选择”"),e(a)]),s("）。")])]),n("li",null,[n("p",null,[sl,s("-来自父提示集状态评估的状态根的CID（请参阅 "),n("a",al,[s("VM Interpreter"),e(a)]),s("）。")])]),el,n("li",null,[n("p",null,[tl,s("-从最后一个块开始生成的一组drand条目（请参阅 "),n("a",ol,[s("Beacon Entries"),e(a)]),s("）。")])]),n("li",null,[n("p",null,[pl,s("-从上一个纪元生成的新票证（请参见 "),n("a",il,[s("票证生成"),e(a)]),s("）。")])]),cl]),ll,ul,rl,n("h6",dl,[kl,s(" 2.4.1.4.1.2"),n("a",vl,[s("块广播"),e(a)])]),n("p",null,[s("合格的矿工使用"),n("a",ml,[s("GossipSub"),e(a)]),s(),bl,s("主题将完成的区块传播到网络 ，并且假设一切都正确完成，则网络将接受它，其他矿工将在其之上进行挖掘，从而获得矿工的奖励。")]),hl,n("h5",fl,[_l,s(" 2.4.1.4.2"),n("a",gl,[s("块奖励"),e(a)])]),n("p",null,[s("集体奖励由"),n("a",yl,[s("奖励演员"),e(a)]),s("处理 。在"),n("a",wl,[s("Filecoin令牌"),e(a)]),s("部分讨论了 有关区块奖励的更多详细信息，在"),n("a",xl,[s("矿工抵押品"),e(a)]),s("部分讨论了有关区块奖励抵押的详细信息 。")]),n("h3",Cl,[Sl,s(" 2.4."),n("a",Fl,[s("信息池"),e(a)])]),ql,Pl,Al,Bl,n("h4",El,[Tl,s(" 2.4.2.1"),n("a",Il,[s("讯息传播"),e(a)])]),n("p",null,[s("消息池必须与libp2p pubsub "),n("a",Rl,[s("GossipSub"),e(a)]),s("协议接口 。这是因为消息通过"),n("a",Ml,[s("GossipSub"),e(a)]),s("传播了 相应的"),Dl,s(),Gl,s("。参与网络的任何节点都会在相应的主题中宣布每个 "),n("a",Vl,[s("消息"),e(a)]),Ll,s("。")]),Nl,n("p",null,[s("GossipSub协议的更新的强化版本包括多种缓解攻击的策略。例如，当节点收到无效消息时，它将负"),jl,s("分配给发送方对等方。对等分数不与其他节点共享，而是由其与之交互的所有其他对等点在每个对等点本地保存。如果对等方的得分下降到阈值以下，则将其从评分对等方的网格中排除。我们将在GossipSub部分中讨论有关这些设置的更多详细信息。完整的细节可以在"),n("a",Hl,[s("GossipSub规范中"),e(a)]),s("找到 。")]),Ol,Ul,n("h4",zl,[Wl,s(" 2.4.2.2"),n("a",Zl,[s("讯息储存"),e(a)])]),Kl,n("h3",Ql,[Jl,s(" 2.4.3"),n("a",Xl,[s("链同步"),e(a)])]),Yl,n("h4",$l,[nu,s(" 2.4.3."),n("a",su,[s("ChainSync概述"),e(a)])]),au,n("h4",eu,[tu,s(" 2.4.3.2"),n("a",ou,[s("术语和概念"),e(a)])]),pu,n("h4",iu,[cu,s(" 2.4.3.3"),n("a",lu,[s("ChainSync状态机"),e(a)])]),uu,n("h4",ru,[du,s(" 2.4.3.4"),n("a",ku,[s("同行发现"),e(a)])]),vu,mu,n("h5",bu,[hu,s(" 2.4.3.4.1"),n("a",fu,[s("同行交流"),e(a)])]),_u,n("p",null,[s("有关Peer Exchange的更多详细信息，请参考 "),n("a",gu,[s("GossipSub规范"),e(a)]),s("。")]),n("h5",yu,[wu,s(" 2.4.3.4.2"),n("a",xu,[s("明确的对等协议"),e(a)])]),Cu,n("h4",Su,[Fu,s(" 2.4.3"),n("a",qu,[s("渐进块验证"),e(a)])]),n("ul",null,[n("li",null,[s("为了使资源支出最小化，可以逐步进行"),n("a",Pu,[s("区块"),e(a)]),s("验证。")]),Au,Bu,Eu,Tu,n("li",null,[Iu,n("ul",null,[Ru,Mu,Du,n("li",null,[Gu,s("：有效的随机信标条目已插入到块中（请参阅 "),n("a",Vu,[s("信标条目验证"),e(a)]),s("）。")]),Lu])])]),n("h3",Nu,[ju,s(" 2.4."),n("a",Hu,[s("储能共识"),e(a)])]),n("p",null,[s("存储电源共识（SPC）子系统是使Filecoin节点能够就系统状态达成一致的主要接口。《存储功率共识》在其“"),n("a",Ou,[s("功率表”"),e(a)]),s("中考虑了各个存储矿工在给定链中超过共识的有效功率 。它还运行“ "),n("a",Uu,[s("预期共识”"),e(a)]),s("（Filecoin使用的基础共识算法），使存储矿工可以进行领导者选举并生成更新Filecoin系统状态的新块。")]),zu,n("ul",null,[n("li",null,[s("访问每个子链的 "),n("a",Wu,[s("功率表"),e(a)]),s("，说明各个存储矿工的功率和链上的总功率。")]),n("li",null,[s("访问 各个存储矿工的"),n("a",Zu,[s("预期共识"),e(a)]),s("，从而实现： "),n("ul",null,[n("li",null,[s("根据协议的其余部分，访问"),n("a",Ku,[s("drand"),e(a)]),s("提供的 可验证的随机性 "),n("a",Qu,[s("票证"),e(a)]),s("。")]),n("li",null,[s("进行 "),n("a",Ju,[s("领导人选举"),e(a)]),s("产生新的障碍。")]),n("li",null,[s("使用EC的加权功能跨子链运行 "),n("a",Xu,[s("链选择"),e(a)]),s("。")]),n("li",null,[s("标识 "),n("a",Yu,[s("最近完成的提示集"),e(a)]),s("，供所有协议参与者使用。")])])])]),n("h4",$u,[nr,s(" 2.4.4.1"),n("a",sr,[s("区分存储矿工和块矿工"),e(a)])]),ar,n("ul",null,[n("li",null,[s("通过作为存储提供者参加 "),n("a",er,[s("存储市场"),e(a)]),s("并由客户支付文件存储交易的费用。")]),n("li",null,[s("通过挖掘新的区块，扩展区块链，保护Filecoin共识机制以及运行智能合约以执行状态更新来作为 "),n("a",tr,[s("Storage Miner"),e(a)]),s("。")])]),n("p",null,[s("有两种类型的“矿工”（存储矿工和块矿工）可以区分。 Filecoin的"),n("a",or,[s("领导者选举"),e(a)]),s("取决于矿工的存储能力。因此，虽然所有区块矿工都将是存储矿工，但不一定相反。")]),n("p",null,[s("但是，鉴于Filecoin的“有用的工作量证明”是通过文件存储（ "),n("a",pr,[s("PoRep"),e(a)]),s("和 "),n("a",ir,[s("PoSt"),e(a)]),s("）实现的，存储矿工参与领导者选举的开销很少。这样的 "),n("a",cr,[s("Storage Miner Actor"),e(a)]),s("仅需要向"),n("a",lr,[s("Storage Power Actor"),e(a)]),s("注册 即可参与“预期共识”和矿区。")]),n("h4",ur,[rr,s(" 2.4.4.2"),n("a",dr,[s("上电"),e(a)])]),kr,n("p",null,[s("一个部门的质量取决于对该部门内部数据进行的交易。通常有三种类型的交易："),vr,s("（实际上没有任何交易，而矿工在该部门内部存储任意数据），"),mr,s("（矿工和客户就市场价格达成一致）以及在"),br,s("的交易，这给更多的权力部门。我们请读者阅读“ "),n("a",hr,[s("扇区"),e(a)]),s("和 "),n("a",fr,[s("扇区质量”"),e(a)]),s("部分，以获取有关扇区类型和扇区质量的详细信息，“ "),n("a",_r,[s("已验证的客户”"),e(a)]),s("部分可获得有关已验证的客户是什么的更多详细信息，以及 "),n("a",gr,[s("CryptoEconomics"),e(a)]),s(" 部分，以获取交易权重和质量乘数上的特定参数值。")]),n("p",null,[yr,s("是指矿工在“"),n("a",wr,[s("秘密领导人选举”中"),e(a)]),s("所获得的票数，其 定义是随着矿工对网络的承诺存储量线性增加。")]),xr,Cr,n("h4",Sr,[Fr,s(" 2.4.4.3"),n("a",qr,[s("信标条目"),e(a)])]),n("p",null,[s("Filecoin协议使用"),n("a",Pr,[s("drand"),e(a)]),s("信标产生的 随机性来播种可在链中使用的无偏随机性种子（请参阅 "),n("a",Ar,[s("随机性"),e(a)]),s("）。")]),Br,n("ul",null,[n("li",null,[s("该 "),n("a",Er,[s("sector_sealer"),e(a)]),s("为SealSeeds结合部门承诺给定的子链。")]),n("li",null,[s("该 "),n("a",Tr,[s("post_generator"),e(a)]),s("为PoStChallenges证明部门继续致力于为给定块的。")]),n("li",null,[s("Storage Power子系统作为“"),n("a",Ir,[s("秘密领导者”选举中的"),e(a)]),s("随机性， 用于确定选择矿工采矿新区块的频率。")])]),Rr,Mr,n("h5",Dr,[Gr,s(" 2.4.4.3.1"),n("a",Vr,[s("获取VM的drand随机性"),e(a)])]),Lr,n("h5",Nr,[jr,s(" 2.4.4.3.2"),n("a",Hr,[s("从drand网络获取随机性"),e(a)])]),Or,n("p",null,[n("a",Ur,[s("示例：DrandBeacon"),e(a)])]),zr,n("p",null,[n("a",Wr,[s("示例：BeaconEntriesForBlock"),e(a)])]),Zr,n("p",null,[n("a",Kr,[s("示例：MaxBeaconRoundForEpoch"),e(a)])]),Qr,n("h5",Jr,[Xr,s(" 2.4.4.3.3"),n("a",Yr,[s("在块接收时验证信标条目"),e(a)])]),$r,n("p",null,[s("考虑到它们在领导者选举和Filecoin中其他关键协议中的作用，必须为每个区块验证区块的信标条目。有关详细信息，请参见 "),n("a",nd,[s("drand"),e(a)]),s("。可以通过使用drand的"),n("a",sd,[ad,e(a)]),s("端点，确保每个信标条目都是链中前一个条目的有效签名来完成此操作 ：")]),n("p",null,[n("a",ed,[s("示例：ValidateBlockValues"),e(a)])]),td,n("h4",od,[pd,s(" 2.4.4.4"),n("a",id,[s("门票"),e(a)])]),cd,ld,n("h5",ud,[rd,s(" 2.4.4.4.1"),n("a",dd,[s("随机票生成"),e(a)])]),kd,n("p",null,[n("a",vd,[s("可验证的随机函数"),e(a)]),s("用于票证生成。")]),n("h5",md,[bd,s(" 2.4.4.4.2"),n("a",hd,[s("票证验证"),e(a)])]),fd,n("h4",_d,[gd,s(" 2.4.4.5"),n("a",yd,[s("最小矿工规模"),e(a)])]),wd,n("h4",xd,[Cd,s(" 2.4.4.6"),n("a",Sd,[s("储能演员"),e(a)])]),n("h5",Fd,[qd,s(" 2.4.4.6.1"),n("a",Pd,[Ad,s(" 实作"),e(a)])]),n("p",null,[n("a",Bd,[s("示例：状态"),e(a)])]),Ed,n("h5",Td,[Id,s(" 2.4.4.6.2"),n("a",Rd,[Md,s(" 实作"),e(a)])]),n("p",null,[n("a",Dd,[s("示例：出口"),e(a)])]),Gd,n("p",null,[n("a",Vd,[s("示例：MinerConstructorParams"),e(a)])]),Ld,n("h5",Nd,[jd,s(" 2.4.4.6.3"),n("a",Hd,[s("功率表"),e(a)])]),Od,n("h5",Ud,[zd,s(" 2.4.4.6.4"),n("a",Wd,[s("质押抵押品"),e(a)])]),Zd,n("ul",null,[n("li",null,[s("尤其是预期的共识错误（请参阅“ "),n("a",Kd,[s("共识错误”"),e(a)]),s("），砍杀者会将这些错误报告给，"),Qd,s("以换取奖励。")]),n("li",null,[s("影响共识功率的故障，更一般而言，尤其是未承诺的功率故障（即， "),n("a",Jd,[s("存储故障"),e(a)]),s("），将由"),Xd,s("自动报告，或者当矿工终止扇区的时间早于承诺的持续时间时，将报告这些"),n("a",Yd,[s("故障"),e(a)]),s("。")])]),n("p",null,[s("有关质押抵押品的更详细讨论，请参阅 "),n("a",$d,[s("矿工抵押品部分"),e(a)]),s("。")])])}const ok=o(l,[["render",nk],["__file","FileCoin_technical_documentation.html.vue"]]);export{ok as default};
