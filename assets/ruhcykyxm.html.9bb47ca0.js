import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as r,a as e,b as i,d as s,e as n,r as o}from"./app.7145ec97.js";const d={},c=n('<p>目录</p><ul><li><a href="#%E4%B8%80%E6%A6%82%E8%BF%B0">一、概述</a></li><li><a href="#%E4%BA%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">二、为什么要参与开源项目</a></li><li><a href="#%E4%B8%89%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E4%BB%8B%E7%BB%8D%E5%A6%82%E4%BD%95-pr">三、为什么我想介绍如何 PR</a></li><li><a href="#%E5%9B%9B%E6%88%91%E6%83%B3%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%80%8E%E4%B9%88%E5%BC%80%E5%A7%8B">四、我想参与开源项目，怎么开始？</a></li><li><a href="#41%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E5%90%88%E9%80%82%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">4.1、寻找一个合适的开源项目</a></li><li><a href="#42%E5%AF%BB%E6%89%BE%E8%B4%A1%E7%8C%AE%E7%82%B9">4.2、寻找贡献点</a></li><li><a href="#%E4%BA%94%E6%88%91%E8%A6%81%E6%8F%90%E4%BA%A4-pr%E6%80%8E%E4%B9%88%E4%B8%8A%E6%89%8B">五、我要提交 PR，怎么上手？</a></li><li><a href="#51%E7%AC%AC%E4%B8%80%E6%AD%A5fork-%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93">5.1、第一步：Fork 项目仓库</a></li><li><a href="#52%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%85%8B%E9%9A%86%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0">5.2、第二步：克隆项目仓库到本地</a></li><li><a href="#53%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81">5.3、第三步：更新本地分支代码</a></li><li><a href="#54%E7%AC%AC%E5%9B%9B%E6%AD%A5%E5%86%99%E4%BB%A3%E7%A0%81">5.4、第四步：写代码</a></li><li><a href="#55%E7%AC%AC%E4%BA%94%E6%AD%A5commit-%E5%92%8C-push">5.5、第五步：Commit 和 Push</a></li><li><a href="#56%E7%AC%AC%E5%85%AD%E6%AD%A5%E5%BC%80%E4%B8%80%E4%B8%AA-pr">5.6、第六步：开一个 PR</a></li><li><a href="#57%E7%AC%AC%E4%B8%83%E6%AD%A5pr-%E5%90%88%E5%85%A5">5.7、第七步：PR 合入</a></li><li><a href="#%E5%85%AD%E6%88%91%E6%8F%90%E4%BA%A4%E4%BA%86%E4%B8%80%E4%B8%AA-pr%E7%84%B6%E5%90%8E%E9%81%87%E5%88%B0%E4%BA%86%E9%97%AE%E9%A2%98-abcdefg">六、我提交了一个 PR，然后遇到了问题 A,B,C,D,E,F,G,...😭</a></li><li><a href="#61reviewers-%E6%8F%90%E4%BA%86%E4%B8%80%E4%BA%9B%E4%BF%AE%E6%94%B9%E6%84%8F%E8%A7%81%E6%88%91%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0-pr">6.1、Reviewers 提了一些修改意见，我如何更新 PR？</a></li><li><a href="#62commits-%E5%A4%AA%E5%A4%9A%E6%88%96%E8%80%85%E8%AE%B0%E5%BD%95%E6%B7%B7%E4%B9%B1%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6-commits">6.2、Commits 太多或者记录混乱，如何合并 Commits？</a></li><li><a href="#621git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F%E5%90%88%E5%B9%B6-commits">6.2.1、Git 命令行方式合并 Commits</a></li><li><a href="#622-ide-%E9%87%8C%E5%90%88%E5%B9%B6-commits">6.2.2 IDE 里合并 Commits</a></li><li><a href="#63pr-%E4%BA%A7%E7%94%9F%E4%BA%86%E5%86%B2%E7%AA%81%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3">6.3、PR 产生了冲突，如何解决？</a></li><li><a href="#631%E5%9C%A8%E7%BA%BF%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">6.3.1、在线解决冲突</a></li><li><a href="#632%E6%9C%AC%E5%9C%B0%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">6.3.2、本地解决冲突</a></li><li><a href="#64ci-%E6%A3%80%E6%9F%A5%E4%B8%8D%E8%BF%87commit-message-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E4%BF%AE%E5%A4%8D">6.4、CI 检查不过：commit message 相关问题如何修复？</a></li><li><a href="#65ci-%E6%A3%80%E6%9F%A5%E4%B8%8D%E8%BF%87dcosign-%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E4%BF%AE%E5%A4%8D">6.5、CI 检查不过：DCO(sign) 问题如何修复？</a></li><li><a href="#%E4%B8%83%E6%9C%80%E5%90%8E">七、最后</a></li></ul><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><p><strong>今天我准备和你详细介绍如何开始参与开源项目，帮助你在 GitHub 上完成第一个 PR 的合入</strong>。</p><p>当然，除了正常的 PR 合入流程之外，我还准备详细介绍一下如果一个 PR 提交后遇到了冲突、需要追加 commits、需要合并 commits 等等相对复杂问题该如何解决。</p><p>总的来说，本文计划分为4个部分：</p><ol><li>谈谈为什么要参与开源项目以及我为什么要介绍如何 PR</li><li>谈谈怎么开始参与开源项目，也就是如何寻找合适的开源项目、如何寻找贡献点</li><li>介绍怎么上手 PR 流程，即从 fork 到 push 全流程</li><li>介绍提交了 PR 之后遇到各种常见问题如何解决</li></ol><p>Ok, let&#39;s get started!</p><h2 id="二、为什么要参与开源项目" tabindex="-1"><a class="header-anchor" href="#二、为什么要参与开源项目" aria-hidden="true">#</a> 二、为什么要参与开源项目</h2><p>本文我不打算长篇大论“为什么要参与开源”，详细介绍参与开源项目的收获，我想仅从“提升编码能力”角度谈一谈“为什么要参与开源项目”。</p><p>在面试的时候我有个习惯，如果候选人在自己的简历里说到自己熟悉某一门语言，我就会习惯性问他一个问题：</p><p><strong>你有没有阅读过某个开源项目的源码？或者更进一步，有没有参与过某个开源社区，或者说给开源项目提过 PR</strong>？</p><p>如果答案是肯定的，比如候选人说自己读过部分 Kubernetes 模块的源码，再进一步我确认他真的读过并且读懂了或者说真的提交过 bugfix/feature 类型的 PR，那我就不再问编程语言层面的问题了，因为我相信能看懂一个成熟的开源项目部分模块源码或者能够提交 bugfix/feature 类型的 PR 已经说明了一切。</p><p>我自己在学习 Golang 的时候，大致分为两个阶段：</p><ol><li>学习基础语法，开始写项目，直到能够熟练完成各种业务功能的开发；</li><li>看了一些开源项目的源码，深感受益颇多，编码水平再上一个台阶。</li></ol><p>差不多也就是在看 Kubernetes 项目源码的时候，我深刻认识到一般的企业内部项目和汇集全世界最优秀的程序员智慧结晶的开源项目之间的巨大差距，也意识到学习优秀开源项目源码对于一个程序员编码水平提升的重要性（当然，你可以说 Google 内部也存在非开源的非常优秀的代码，这毫无疑问，但是我想今天我们没有必要讨论特例）。</p><p>认真阅读开源项目源码，你总会发现一些小瑕疵，这时候提一个 PR(Pull Request)，让你的代码合入开源项目，运行在“世界每一个角落”，那是多么有趣的事情！而成功合入第一个 PR 往往就像打开潘多拉魔盒一样，你会进入到另外一个世界，开始接触到开源社区，感受开源的魅力！</p><h2 id="三、为什么我想介绍如何-pr" tabindex="-1"><a class="header-anchor" href="#三、为什么我想介绍如何-pr" aria-hidden="true">#</a> 三、为什么我想介绍如何 PR</h2><p>我司开源了2个项目，分别是：</p>',19),m={href:"https://github.com/devstream-io/devstream",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[e("img",{src:"https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226021-228965712.png",alt:"CNCF Project DevStream",loading:"lazy"})],-1),u={start:"2"},p={href:"https://github.com/apache/incubator-devlake",target:"_blank",rel:"noopener noreferrer"},h=n('<p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100225973-1547592173.png" alt="Apache DevLake" loading="lazy"></p><p>DevStream 项目和 DevLake 项目隔三差五就会有新贡献者提交 PR 过来，但是多数贡献者在提交第一个 PR 时往往会遇到一个或多个问题，比如产生冲突、commits 记录过多或者混乱、commit 没有签名、commit message 不规范、各种 ci 流程检查报错等等。</p><p>在看到新贡献者提交 PR 时，我们自然是非常开心且热情地对他表示欢迎并且告知如何修复各种问题，但是随着贡献者的增多，我们的开源社区几乎每天都需要回答一个问题：“<strong>如何正确地提交一个 PR</strong>”。可能此时你会开始怀疑我们是不是没有提供相应的文档？其实不然，我们有详细的文档，但是人总是有惰性的，多数的新贡献者并没有足够的意愿去仔细看翻看文档然后再提交 PR，甚至很多新贡献者由于刚开始接触开源项目，对于项目结构和文档组织结构比较陌生，甚至不会想到有这些文档的存在，总之各种各样的理由让多数的新贡献者会选择“<strong>先提了 PR再说</strong>”。</p><p>那么今天我想尝试彻底讲明白“如何正确地提交一个 PR”，尝试细说 GitHub 上的 PR 全过程，以及这里面可能会遇到的各种困难和解决办法。<strong>一方面希望对第一次参与开源项目的新人有所帮助，另一方面希望能够进一步降低 DevStream 社区和 DevLake 社区的参与门槛</strong>。</p><h2 id="四、我想参与开源项目-怎么开始" tabindex="-1"><a class="header-anchor" href="#四、我想参与开源项目-怎么开始" aria-hidden="true">#</a> 四、我想参与开源项目，怎么开始？</h2><p>不管你为什么决定开始参与开源项目，不管出发点是出于学习、兴趣、成就感等等，还是为了让某个自己需要的特性合入某个开源项目，总之今天你下定决心，要给某个开源项目提交一个 PR 了，好，我们开始吧！</p><h3 id="_4-1、寻找一个合适的开源项目" tabindex="-1"><a class="header-anchor" href="#_4-1、寻找一个合适的开源项目" aria-hidden="true">#</a> 4.1、寻找一个合适的开源项目</h3><p>如果你已经决定参与某个开源社区了，那么请直接跳过本小节。</p><p>如果你就只是想开始参与开源，暂时还不知道该参与哪个社区，那么我有几个小建议：</p><ol><li><strong>不要从特别成熟的项目开始</strong>。比如现在去参与 Kubernetes 社区，一方面由于贡献者太多，很难抢到一个入门级的 issue 来开始第一个 PR；另外一方面也由于贡献者太多，你的声音会被淹没，社区维护者并不在意多你一个或者少你一个（当然可能没有人会承认，但是你不得不信），如果你提个 PR 都遇到了各种问题还不能自己独立解决，那么很可能你的 PR 会直接超时关闭，没有人在意你是不是有一个好的参与体验；</li><li><strong>不要从特别小的项目开始</strong>。这就不需要我解释了吧？很早期的开源项目可能面临着非常多的问题，比如代码不规范、协作流程不规范、重构频繁且不是 issue 驱动的，让外部参与者无所适从……</li><li><strong>选择知名开源软件基金会的孵化项目</strong>，这类项目一方面不是特别成熟，所以对新贡献者友好；另一方面也不会特别不成熟，不至于给人很差的参与体验，比如 <strong>Apache 基金会、Linux 基金会、CNCF 等</strong>。</li></ol><p>比如可以从这些地方寻找自己感兴趣的开源项目：</p>',11),v={href:"https://www.cncf.io/sandbox-projects/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cncf.io/projects/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://projects.apache.org/projects.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cncf.io/projects/devstream/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://projects.apache.org/project.html?incubator-devlake",target:"_blank",rel:"noopener noreferrer"},_=e("h3",{id:"_4-2、寻找贡献点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-2、寻找贡献点","aria-hidden":"true"},"#"),i(" 4.2、寻找贡献点")],-1),A={href:"https://github.com/devstream-io/devstream/issues",target:"_blank",rel:"noopener noreferrer"},R=n('<p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226117-350735931.png" alt="DevStream Issues" loading="lazy"></p><p>在 Issues 里我们一般可以找到一个“good first issue”标签标记的 issues，点击这个标签可以进一步直接筛选出所有的 good first issues，这是社区专门留给新贡献者的相对简单的入门级 issues：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226118-2015160519.png" alt="DevStream Good First Issues" loading="lazy"></p><p>没错，从这里开始，浏览一下这些 good first issues，看下有没有你感兴趣的而且还没被分配的 issue，然后在下面留言，等待项目管理员分配任务后就可以开始编码了，就像这样：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226119-1945823002.png" alt="Claim an Issue in DevStream" loading="lazy"></p><p>如图所示，如果一个 issue 还没有被认领，这时候你上去留个言，等待管理员会将这个任务分配给你，接着你就可以开始开发了。</p><h2 id="五、我要提交-pr-怎么上手" tabindex="-1"><a class="header-anchor" href="#五、我要提交-pr-怎么上手" aria-hidden="true">#</a> 五、我要提交 PR，怎么上手？</h2>',7),x={href:"http://CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,[e("img",{src:"https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100225973-371924002.png",alt:"DevStream Contributing",loading:"lazy"})],-1),P={href:"https://github.com/devstream-io/devstream/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/devstream-io/devstream/blob/main/docs/development/development-workflow.md",target:"_blank",rel:"noopener noreferrer"},k=n(`<h3 id="_5-1、第一步-fork-项目仓库" tabindex="-1"><a class="header-anchor" href="#_5-1、第一步-fork-项目仓库" aria-hidden="true">#</a> 5.1、第一步：Fork 项目仓库</h3><p>GitHub 上的项目都有一个 Fork 按钮，我们需要先将开源项目 fork 到自己的账号下，以 DevStream 为例：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226050-322033380.png" alt="Fork DevStream" loading="lazy"></p><p>点一下 Fork 按钮，然后回到自己账号下，可以找到 fork 到的项目了：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226014-1620627643.png" alt="DevStream Fork" loading="lazy"></p><p>这个项目在你自己的账号下，也就意味着你有任意修改的权限了。我们后面要做的事情，就是将代码变更提到自己 fork 出来的代码库里，然后再通过 Pull Request 的方式将 commits 合入上游项目。</p><h3 id="_5-2、第二步-克隆项目仓库到本地" tabindex="-1"><a class="header-anchor" href="#_5-2、第二步-克隆项目仓库到本地" aria-hidden="true">#</a> 5.2、第二步：克隆项目仓库到本地</h3><p>对于任意一个开源项目，流程几乎都是一样的。我直接写了一些命令，大家可以复制粘贴直接执行。当然，命令里的一些变量还是需要根据你自己的实际需求修改，比如对于 DevStream 项目，我们可以先这样配置几个环境变量：</p><ul><li>环境变量</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>export WORKING_PATH=&quot;~/gocode&quot;
export USER=&quot;daniel-hutao&quot;
export PROJECT=&quot;devstream&quot;
export ORG=&quot;devstream-io&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理对于 DevLake，这里的命令就变成了这样：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>export WORKING_PATH=&quot;~/gocode&quot;
export USER=&quot;daniel-hutao&quot;
export PROJECT=&quot;incubator-devlake&quot;
export ORG=&quot;apache&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记得 USER 改成你的 GitHub 用户名，WORKING_PATH 当然也可以灵活配置，你想把代码放到哪里，就写对应路径。</p><p>接着就是几行通用的命令来完成 clone 等操作了：</p><ul><li>clone 等</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>mkdir -p \${WORKING_PATH}
cd \${WORKING_PATH}
# You can also use the url: git@github.com:\${USER}/\${PROJECT}.git
# if your ssh configuration is proper
git clone https://github.com/\${USER}/\${PROJECT}.git
cd \${PROJECT}

git remote add upstream https://github.com/\${ORG}/\${PROJECT}.git
# Never push to upstream locally
git remote set-url --push upstream no_push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你配置好了 ssh 方式来 clone 代码，当然，git clone 命令用的 url 可以改成<code>git@github.com:\${USER}/\${PROJECT}.git</code>。</p><p>完成这一步后，我们在本地看到的 remote 信息应该是这样的：</p><ul><li>git remote -v</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>origin	git@github.com:daniel-hutao/devstream.git (fetch)
origin	git@github.com:daniel-hutao/devstream.git (push)
upstream	https://github.com/devstream-io/devstream (fetch)
upstream	no_push (push)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住啰，你本地的代码变更永远只提交到 origin，然后通过 origin 提交 Pull Request 到 upstream。</p><h3 id="_5-3、第三步-更新本地分支代码" tabindex="-1"><a class="header-anchor" href="#_5-3、第三步-更新本地分支代码" aria-hidden="true">#</a> 5.3、第三步：更新本地分支代码</h3><p>如果你刚刚完成 fork 和 clone 操作，那么你本地的代码肯定是新的。但是“刚刚”只存在一次，接着每一次准备开始写代码之前，你都需要确认本地分支的代码是新的，因为基于老代码开发你会陷入无限的冲突困境之中。</p><ul><li>更新本地 main 分支代码：</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git fetch upstream
git checkout main
git rebase upstream/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我不建议你直接在 main 分支写代码，虽然你的第一个 PR 从 main 提交完全没有问题，但是如果你需要同时提交2个 PR 呢？总之鼓励新增一个 feat-xxx 或者 fix-xxx 等更可读的分支来完成开发工作。</p><ul><li>创建分支</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git checkout -b feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，我们就得到了一个和上游 main 分支代码一样的特性分支 feat-xxx 了，接着可以开始愉快地写代码啦！</p><h3 id="_5-4、第四步-写代码" tabindex="-1"><a class="header-anchor" href="#_5-4、第四步-写代码" aria-hidden="true">#</a> 5.4、第四步：写代码</h3><p>没啥好说的，写就是了，写！</p><h3 id="_5-5、第五步-commit-和-push" tabindex="-1"><a class="header-anchor" href="#_5-5、第五步-commit-和-push" aria-hidden="true">#</a> 5.5、第五步：Commit 和 Push</h3><ul><li>通用的流程：</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git add &lt;file&gt;
git commit -s -m &quot;some description here&quot;
git push origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，这里大家需要理解这几个命令和参数的含义，灵活调整。比如你也可以用<code>git add --all</code>完成 add 步骤，在 push 的时候也可以加<code>-f</code>参数，用来强制覆盖远程分支（假如已经存在，但是 commits 记录不合你意）。但是请记得<code>git commit</code>的<code>-s</code>参数一定要加哦！</p><p>如果你习惯用 IDE 来 commit，当然也没有任何问题，像这样：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226012-371359624.png" alt="DevStream Commit with Goland" loading="lazy"></p>`,37),y={href:"https://github.com/devstream-io/devstream/blob/main/docs/development/commit-messages.md",target:"_blank",rel:"noopener noreferrer"},q=n(`<div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>&lt;type&gt;[optional scope]: &lt;description&gt;

[optional body]

[optional footer(s)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举几个例子：</p><ul><li>feat: some description here</li><li>docs: some description here</li><li>fix: some description here</li><li>fix(core): some description here</li><li>chore: some description here</li><li>...</li></ul><p>commit 和 push 两个步骤可以在 IDE 里一步到位，也可以分开，我习惯分开操作，给自己多一些余地。另外，我更习惯命令行操作：</p><ul><li>git push origin feat-1</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>Counting objects: 80, done.
Delta compression using up to 10 threads.
Compressing objects: 100% (74/74), done.
Writing objects: 100% (80/80), 13.78 KiB | 4.59 MiB/s, done.
Total 80 (delta 55), reused 0 (delta 0)
remote: Resolving deltas: 100% (55/55), completed with 31 local objects.
remote: 
remote: Create a pull request for &#39;feat-1&#39; on GitHub by visiting:
remote:      https://github.com/daniel-hutao/devstream/pull/new/feat-1
remote: 
To github.com:daniel-hutao/devstream.git
 * [new branch]      feat-1 -&gt; feat-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，本地 commits 就推送到远程了。</p><h3 id="_5-6、第六步-开一个-pr" tabindex="-1"><a class="header-anchor" href="#_5-6、第六步-开一个-pr" aria-hidden="true">#</a> 5.6、第六步：开一个 PR</h3><p>在完成 push 操作后，我们打开 GitHub，可以看到一个黄色的提示框，告诉我们可以开一个 Pull Request 了：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226052-319748721.png" alt="Compare &amp; pull request" loading="lazy"></p><p>如果你没有看到这个框，也可以直接切换到 feat-1 分支，然后点击下方的“Contribute”按钮来开启一个 PR，或者直接点 Issues 边上的 Pull requests 进入对应页面。</p><ul><li>Pull Request 格式默认是这样的：</li></ul><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226009-1563663903.png" alt="DevStream Pull Request" loading="lazy"></p><p>这里我们需要填写一个合适的标题（默认和 commit message 一样），然后按照模板填写 PR 描述。PR 模板其实在每个开源项目里都不太一样，我们需要仔细阅读上面的内容，避免犯低级错误。</p><p>比如 DevStream 的模板里目前分为4个部分：</p>`,15),w=e("li",null,[e("strong",null,"Pre-Checklist"),i("：这里列了3个前置检查项，提醒 PR 提交者要先阅读 Contributing 文档，然后代码要有完善的注释或者文档，尽可能添加测试用例等；")],-1),S=e("li",null,[e("strong",null,"Description"),i("：这里填写的是 PR 的描述信息，也就是介绍你的 PR 内容的，你可以在这里描述这个 PR 解决了什么问题等；")],-1),F=e("strong",null,"Related Issues",-1),T={href:"https://github.com/devstream-io/devstream/issues/796%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%BF%99%E4%B8%AA",target:"_blank",rel:"noopener noreferrer"},I=e("strong",null,"close #796",-1),z=e("li",null,[e("strong",null,"New Behavior"),i("：代码修改后绝大多数情况下是需要进行测试的，这时候我们可以在这里粘贴测试结果截图，这样 reviewers 就能够知道你的代码已经通过测试，功能符合预期，这样可以减少 review 工作量，快速合入。")],-1),G=e("p",null,"这个模板并不复杂，我们直接对着填写就行。",-1),O=e("ul",null,[e("li",null,"比如：")],-1),H=e("p",null,[e("img",{src:"https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226013-1749348094.png",alt:"DevStream Pull Request Template",loading:"lazy"})],-1),N={href:"https://github.com/devstream-io/devstream/pull/655",target:"_blank",rel:"noopener noreferrer"},j=n(`<p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226105-2124939362.png" alt="DevStream Pull Request 655" loading="lazy"></p><p>这是上个月我提的一个 PR，基本和模板格式一致。除了模板的内容，可能你已经注意到这里多了一个 Test 小节，没错，模板不是死的，模板只是为了降低沟通成本，你完全可以适当调整，只要结果是“往更清晰的方向走”的。我这里通过 Test 部分添加了本地详细测试结果记录，告诉 reviewers 我已经在本地充分测试了，请放心合入。</p><p>提交了 PR 之后，我们就可以在 PR 列表里找到自己的 PR 了，这时候还需要注意 ci 检查是不是全部能够通过，假如失败了，需要及时修复。以 DevStream 为例，ci 检查项大致如下：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226166-28142608.png" alt="DevStream CI Checks" loading="lazy"></p><h3 id="_5-7、第七步-pr-合入" tabindex="-1"><a class="header-anchor" href="#_5-7、第七步-pr-合入" aria-hidden="true">#</a> 5.7、第七步：PR 合入</h3><p>如果你的 PR 很完美，毫无争议，那么过不了太长时间，项目管理员会直接合入你的 PR，那么你这个 PR 的生命周期也就到此结束了。</p><p>但是，没错，这里有个“但是”，但是往往第一次 PR 不会那么顺利，我们接下来就详细介绍一下可能经常遇到的一些问题和对应的解决办法。</p><h2 id="六、我提交了一个-pr-然后遇到了问题-a-b-c-d-e-f-g-😭" tabindex="-1"><a class="header-anchor" href="#六、我提交了一个-pr-然后遇到了问题-a-b-c-d-e-f-g-😭" aria-hidden="true">#</a> 六、我提交了一个 PR，然后遇到了问题 A,B,C,D,E,F,G,...😭</h2><p>多数情况下，提交一个 PR 后是不会被马上合入的，reviewers 可能会提出各种修改意见，或者我们的 PR 本身存在一些规范性问题，或者 ci 检查就直接报错了，怎么解决呢？继续往下看吧。</p><h3 id="_6-1、reviewers-提了一些修改意见-我如何更新-pr" tabindex="-1"><a class="header-anchor" href="#_6-1、reviewers-提了一些修改意见-我如何更新-pr" aria-hidden="true">#</a> 6.1、Reviewers 提了一些修改意见，我如何更新 PR？</h3><p>很多时候，我们提交了一个 PR 后，还需要继续追加 commit，比如提交后发现代码还有点问题，想再改改，或者 reviewers 提了一些修改意见，我们需要更新代码。</p><p>一般我们遵守一个约定：在 review 开始之前，更新代码尽量不引入新的 commits 记录，也就是能合并就合并，保证 commits 记录清晰且有意义；在 review 开始之后，针对 reviewers 的修改意见所产生的新 commit，可以不向前合并，这样能够让二次 review 工作更有针对性。</p><p>不过不同社区要求不一样，可能有的开源项目会要求一个 PR 里只能包含一个 commit，大家根据实际场景灵活判断即可。</p><p>说回如何更新 PR，我们只需要在本地继续修改代码，然后通过和第一个 commit 一样的步骤，执行这几个命令：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git add &lt;file&gt;
git commit -s -m &quot;some description here&quot;
git push origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候别看 push 的是 origin 的 feat-xxx 分支，其实 GitHub 会帮你把新增的 commits 全部追加到一个未合入 PR 里去。没错，你只管不断 push，PR 会自动更新。</p><p>至于如何合并 commits，我们下一小节具体介绍。</p><h3 id="_6-2、commits-太多或者记录混乱-如何合并-commits" tabindex="-1"><a class="header-anchor" href="#_6-2、commits-太多或者记录混乱-如何合并-commits" aria-hidden="true">#</a> 6.2、Commits 太多或者记录混乱，如何合并 Commits？</h3><p>很多情况下我们需要去合并 commits，比如你的第一个 commit 里改了100行代码，然后发现少改了1行，这时候又提交了一个 commit，那么第二个 commit 就太“没意思”了，我们需要合并一下。</p><h4 id="_6-2-1、git-命令行方式合并-commits" tabindex="-1"><a class="header-anchor" href="#_6-2-1、git-命令行方式合并-commits" aria-hidden="true">#</a> 6.2.1、Git 命令行方式合并 Commits</h4><p>比如我这里有2个同名的 commits，第二个 commit 其实只改了一个标点：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226017-1710519800.png" alt="Commits to be Merged" loading="lazy"></p><p>这时候我们可以通过 rebase 命令来完成2个 commits 的合并：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git rebase -i HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行这个命令会进入一个编辑页面，默认是 vim 编辑模式，内容大致如下：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>pick 3114c0f docs: just for test
pick 9b7d63b docs: just for test

# Rebase d640931..9b7d63b onto d640931 (2 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要把第二个 pick 改成 s，然后保存退出(vim 的 wq 命令)：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>pick 3114c0f docs: just for test
s 9b7d63b docs: just for test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着会进入第二个编辑页面：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code># This is a combination of 2 commits.
# This is the 1st commit message:

docs: just for test

Signed-off-by: Daniel Hu &lt;tao.hu@merico.dev&gt;

# This is the commit message #2:

docs: just for test

Signed-off-by: Daniel Hu &lt;tao.hu@merico.dev&gt;

# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
# ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是用来编辑合并后的 commit message 的，我们直接删掉多余部分，只保留这样几行：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>docs: just for test

Signed-off-by: Daniel Hu &lt;tao.hu@merico.dev&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着同样是 vim 的保存退出操作，这时候可以看到日志：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>[detached HEAD 80f5e57] docs: just for test
 Date: Wed Jul 6 10:28:37 2022 +0800
 1 file changed, 2 insertions(+)
Successfully rebased and updated refs/heads/feat-1.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候可以通过<code>git log</code>命令查看下 commits 记录是不是符合预期：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226131-594390858.png" alt="Rebased" loading="lazy"></p><p>好，我们在本地确认 commits 已经完成合并，这时候就可以继续推送到远程，让 PR 也更新掉：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git push -f origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里需要有一个<code>-f</code>参数来强制更新，合并了 commits 本质也是一种冲突，需要冲掉远程旧的 commits 记录。</p><h4 id="_6-2-2-ide-里合并-commits" tabindex="-1"><a class="header-anchor" href="#_6-2-2-ide-里合并-commits" aria-hidden="true">#</a> 6.2.2 IDE 里合并 Commits</h4><p>图形化方式当然也可以实现 Commits 的合并。</p><ul><li>截图走起</li></ul><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226324-474206642.png" alt="Squash with Goland" loading="lazy"></p><ol><li>点击右下角的 Git</li><li>选择想要合并的 commits</li><li>右键，然后点击 Squash Commits，记得嘴里默念一句：走你！</li></ol><p>接着就可以看到这个页面了：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226130-1021994265.png" alt="Squash with Goland" loading="lazy"></p><p>这是图形化方式修改 commit message 的页面，行吧，改成你喜欢的样子，然后点击右下角的 OK 按钮，事情就算结束了。</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226050-1087149627.png" alt="Squash with Goland" loading="lazy"></p><p>看，2个 commits，它们“融合”了，变成了一个“改头换面”的新 commit 了。</p><h3 id="_6-3、pr-产生了冲突-如何解决" tabindex="-1"><a class="header-anchor" href="#_6-3、pr-产生了冲突-如何解决" aria-hidden="true">#</a> 6.3、PR 产生了冲突，如何解决？</h3><p>冲突可以在线解决，也可能本地解决，我们逐个来看。</p><h4 id="_6-3-1、在线解决冲突" tabindex="-1"><a class="header-anchor" href="#_6-3-1、在线解决冲突" aria-hidden="true">#</a> 6.3.1、在线解决冲突</h4><p>我们要尽可能避免冲突，养成每次写代码前更新本地代码的习惯。不过，冲突不可能完全避免，有时候你的 PR 被阻塞了几天，可能别人改了同一行代码，还抢先被合入了，这时候你的 PR 就出现冲突了，类似这样（同样，此刻我不能真的去上游项目构造冲突，所以下面用于演示的冲突在我在自己的 repo 里）：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226336-1445711635.png" alt="Conflict Happened" loading="lazy"></p><p>每次看到这个页面都会让人觉得心头一紧。我们点击“Resolve conflicts”按钮，就可以看到具体冲突的内容了：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226344-223384765.png" alt="Conflict File" loading="lazy"></p><p>可以看到具体冲突的行了，接下来要做的就是解决冲突。我们需要删掉所有的 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 和 <code>=======</code> 标记，只保留最终想要的内容，如下：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226094-1916960377.png" alt="Conflict Resolved" loading="lazy"></p><p>接着点击右上角的“Mark as Resolved”：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226130-1612516829.png" alt="Mark as resolved" loading="lazy"></p><p>最后点击“Commit merge”：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226023-519429988.png" alt="Commit Merge" loading="lazy"></p><p>这样就完成冲突解决了，可以看到产生了一个新的 commit：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226132-1009679237.png" alt="Conflict Resolved" loading="lazy"></p><p>到这里，冲突就解决掉了。</p><h4 id="_6-3-2、本地解决冲突" tabindex="-1"><a class="header-anchor" href="#_6-3-2、本地解决冲突" aria-hidden="true">#</a> 6.3.2、本地解决冲突</h4><p>更多时候，我们需要在本地解决冲突，尤其是冲突太多，太复杂的时候。</p><p>同样，我们构造一个冲突，这次尝试在本地解决冲突。</p><ul><li>先在线看一下冲突的内容：</li></ul><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226331-539616690.png" alt="Conflict Happened" loading="lazy"></p><ul><li>接着我们在本地执行：</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code># 先切回到 main 分支
git checkout main
# 拉取上游代码（实际场景肯定是和上游冲突，我们这里的演示环境其实是 origin）
git fetch upstream
# 更新本地 main（这里也可以用 rebase，但是 reset 不管有没有冲突总是会成功）
git reset --hard upstream/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，本地 main 分支就和远程(或者上游) main 分支代码完全一致了，然后我们要做的是将 main 分支的代码合入自己的特性分支，同时解决冲突。</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git checkout feat-1
git rebase main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这时候会看到这样的日志：</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>First, rewinding head to replay your work on top of it...
Applying: docs: conflict test 1
Using index info to reconstruct a base tree...
M       README.md
Falling back to patching base and 3-way merge...
Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
error: Failed to merge in the changes.
Patch failed at 0001 docs: conflict test 1
The copy of the patch that failed is found in: .git/rebase-apply/patch

Resolve all conflicts manually, mark them as resolved with
&quot;git add/rm &lt;conflicted_files&gt;&quot;, then run &quot;git rebase --continue&quot;.
You can instead skip this commit: run &quot;git rebase --skip&quot;.
To abort and get back to the state before &quot;git rebase&quot;, run &quot;git rebase --abort&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,76),L={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},M=n(`<p>代码里同样只保留最终内容，然后继续 git 命令走起来：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226040-1811067113.png" alt="Conflict Resolved" loading="lazy"></p><p>可能此时你并不放心，那就通过<code>git log</code>命令看一下 commits 历史记录吧：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226132-1133655673.png" alt="Commits History" loading="lazy"></p><p>这里的“conflict test 2”是我提交到 main 分支的记录，可以看到这个时间比“conflict test 1”还要晚了一些，但是它先合入了。我们在 rebase 操作后，这个记录在前，我们特性分支的“conflict test 1”在后，看起来很和谐，我们继续将这个变更推送到远程，这个命令已经出现很多次了：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git push -f origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候我们再回到 GitHub 看 PR 的话，可以发现冲突已经解决了，并且没有产生多余的 commit 记录，也就是说这个 PR 的 commit 记录非常干净，好似冲突从来没有出现过：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226173-1973188152.png" alt="请添加图片描述" loading="lazy"></p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226174-1987185087.png" alt="Clear Commits Record" loading="lazy"></p><p>至于什么时候可以在线解决冲突，什么时候适合本地解决冲突，就看大家如何看待“<strong>需不需要保留解决冲突的记录</strong>”了，不同社区的理解不一样，可能特别成熟的开源社区会希望使用本地解决冲突方式，因为在线解决冲突产生的这条 merge 记录其实“没营养”。至于 DevStream 社区和 DevLake 社区，我们推荐使用后一种，但是不做强制要求。</p><h3 id="_6-4、ci-检查不过-commit-message-相关问题如何修复" tabindex="-1"><a class="header-anchor" href="#_6-4、ci-检查不过-commit-message-相关问题如何修复" aria-hidden="true">#</a> 6.4、CI 检查不过：commit message 相关问题如何修复？</h3><p>前面我们提到过 commit message 的规范，但是第一次提交 PR 的时候还是很容易出错，比如<code>feat: xxx</code>其实能通过 ci 检查，但是<code>feat: Xxx</code>就不行了。假设现在我们不小心提交了一个 PR，但是里面 commit 的 message 不规范，这时候怎么修改呢？</p><ul><li>太简单了，直接执行：</li></ul><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git commit --amend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令执行后就能进入编辑页面，随意更新 commit message 了。改完之后，继续 push：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git push -f origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就能更新 PR 里的 commit message 了。</p><h3 id="_6-5、ci-检查不过-dco-sign-问题如何修复" tabindex="-1"><a class="header-anchor" href="#_6-5、ci-检查不过-dco-sign-问题如何修复" aria-hidden="true">#</a> 6.5、CI 检查不过：DCO(sign) 问题如何修复？</h3><p>相当多的开源项目会要求所有合入的 commits 都包含一行类似这样的记录：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>Daniel Hu &lt;tao.hu@merico.dev&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以 commit message 看起来会像这样：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>feat: some description here
    
Signed-off-by: Daniel Hu &lt;tao.hu@merico.dev&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行信息相当于是对应 commit 的作者签名。要添加这样一行签名当然很简单，我们直接在<code>git commit</code>命令后面加一个<code>-s</code>参数就可以了，比如<code>git commit -s -m &quot;some description here&quot;</code>提交的 commit 就会带上你的签名。</p>`,23),U={href:"https://wiki.linuxfoundation.org/dco",target:"_blank",rel:"noopener noreferrer"},W=n(`<p>同样先构造一个没有加签名的 commit：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226041-1739896335.png" alt="请添加图片描述" loading="lazy"></p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226183-1264896787.png" alt="Commit Without Sign" loading="lazy"></p><p>我不能直接推到 DevStream 项目代码库里演示如何让 DCO 报错，但是如果提 PR，看到的效果是这样的：</p><p><img src="https://img2022.cnblogs.com/blog/998740/202207/998740-20220707100226259-636363990.png" alt="Commit With DCO Error" loading="lazy"></p><p>我们看下如何解决：</p><ul><li>git commit --amend -s</li></ul><p>这样一个简单的命令，就能直接在最近一个 commit 里加上 Signed-off-by 信息。执行这行命令后会直接进入 commit message 编辑页面，默认如下图：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>docs: dco test

Signed-off-by: Daniel Hu &lt;tao.hu@merico.dev&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们可以同时修改 commit message，如果不需要，那就直接保存退出好了，签名信息是会自动加上的。</p><p>完成签名后呢？当然是来一个强制 push 了：</p><div class="language-language-sh line-numbers-mode" data-ext="language-sh"><pre class="language-language-sh"><code>git push -f origin feat-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，你 PR 中的 DCO 报错就自然修复了。</p><h2 id="七、最后" tabindex="-1"><a class="header-anchor" href="#七、最后" aria-hidden="true">#</a> 七、最后</h2><p>一个不小心这篇文章写的有点长了。行，打完收工！</p>`,15),$={href:"https://www.danielhu.cn",target:"_blank",rel:"noopener noreferrer"},K=e("strong",null,"胡说云原生",-1),J={href:"https://github.com/devstream-io",target:"_blank",rel:"noopener noreferrer"},V={href:"https://blog.devstream.io",target:"_blank",rel:"noopener noreferrer"},Y=e("p",null,[e("img",{src:"https://img2022.cnblogs.com/blog/998740/202207/998740-20220708215826771-456239763.jpg",alt:"",loading:"lazy"})],-1),X={href:"https://www.cnblogs.com/daniel-hutao/p/open-a-pr-in-github.html",target:"_blank",rel:"noopener noreferrer"};function Q(Z,ee){const a=o("ExternalLinkIcon");return t(),r("div",null,[c,e("ol",null,[e("li",null,[e("a",m,[i("CNCF Project DevStream"),s(a)])])]),g,e("ol",u,[e("li",null,[e("a",p,[i("Apache DevLake"),s(a)])])]),h,e("ul",null,[e("li",null,[e("a",v,[i("CNCF 沙箱项目"),s(a)])]),e("li",null,[e("a",b,[i("CNCF 孵化项目(列表包括毕业项目)"),s(a)])]),e("li",null,[e("a",E,[i("Apache 项目(孵化期项目名字中带 Incubating)"),s(a)])])]),e("p",null,[i("当然，你也可以直接选择从 CNCF 沙箱项目 "),e("a",f,[i("DevStream"),s(a)]),i(" 或者 Apache 孵化项目 "),e("a",B,[i("Apache DevLake"),s(a)]),i("，以此敲开开源世界的大门。")]),_,e("p",null,[i("开源项目的参与方式很多，最典型的方式是提交一个特性开发或者 bug 修复相关的 PR，但是其实文档完善、测试用例完善、bug 反馈等等也都是非常有价值的贡献。不过本文还是从需要提 PR 的贡献点开始上手，以 DevStream 项目为例（其他项目也一样），在项目 GitHub 代码库首页都会有一个 "),e("a",A,[i("Issues 入口"),s(a)]),i("，这里会记录项目目前已知的 bug、proposal(可以理解成新需求)、计划补充的文档、亟需完善的 UT 等等，如下图：")]),R,e("p",null,[i("一般开源项目代码库根目录都会有一个 "),e("a",x,[i("CONTRIBUTING.md"),s(a)]),i(" 或者其他类似名字的文档来介绍如何开始贡献，像这样：")]),C,e("p",null,[i("在 "),e("a",P,[i("DevStream 的 Contributing"),s(a)]),i(" 文档里我们放了一个 "),e("a",D,[i("Development Workflow"),s(a)]),i("，其实就是 PR 工作流的介绍，不过今天，我要更详细地聊聊 PR 工作流。")]),k,e("p",null,[i("这里要注意 commit message 的规范，可能每个开源项目的要求不尽相同，比如 DevStream 的"),e("a",y,[i("规范"),s(a)]),i("是类似这样的格式：")]),q,e("ol",null,[w,S,e("li",null,[F,i("：记得吗？我们在开始写代码之前其实是需要认领 issue 的，这里要填写的也就是对应 issue 的 id，假如你领的 issue 链接是 "),e("a",T,[i("https://github.com/devstream-io/devstream/issues/796，并且这个"),s(a)]),i(" issue 通过你这个 PR 的修改后就完成了，可以关闭了，这时候可以在 Related Issues 下面写“"),I,i("”；")]),z]),G,O,H,e("p",null,[i("然后点击右下角“Create pull request”就完成了一个 PR 的创建了。不过我这里不能去点这个按钮，我用来演示的修改内容没有意义，不能合入上游代码库。不过我还是想给你看下 PR 创建出来后的效果，我们以 "),e("a",N,[i("pr655"),s(a)]),i(" 为例吧：")]),j,e("p",null,[i("我们需要解决冲突，直接打开 "),e("a",L,[i("README.md"),s(a)]),i("，找到冲突的地方，直接修改。这里的改法和上一小节介绍的在线解决冲突没有任何区别，我就不赘述了。")]),M,e("p",null,[i("但是如果如果你第一次提交的 PR 里忘记了在 commits 中添加 Signed-off-by 呢？这时候，如果对应开源项目配置了 "),e("a",U,[i("DCO 检查"),s(a)]),i("，那么你的 PR 就会在 ci 检查中被“揪出来”没有正确签名。")]),W,e("ul",null,[e("li",null,[i("欢迎到"),e("a",$,[i("我的个人网站"),s(a)]),i("或者微信公众号“"),K,i("”浏览更多我的文章；")]),e("li",null,[i("欢迎关注"),e("a",J,[i("DevStream 社区"),s(a)]),i("，和我一起玩开源；")]),e("li",null,[i("欢迎到"),e("a",V,[i("DevStream 官方博客"),s(a)]),i("浏览更多 DevStream 团队发布的文章。")])]),Y,e("blockquote",null,[e("p",null,[i("转载链接："),e("a",X,[i("https://www.cnblogs.com/daniel-hutao/p/open-a-pr-in-github.html"),s(a)]),i("，整理：musk")])])])}const se=l(d,[["render",Q],["__file","ruhcykyxm.html.vue"]]);export{se as default};
