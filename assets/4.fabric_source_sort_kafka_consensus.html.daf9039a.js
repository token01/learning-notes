import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as p,a as n,b as s,d as o,e as c,r as i}from"./app.1ee57811.js";const l={},u=c(`<blockquote><p>浅谈hyperledger fabric源码|kafka共识排序</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzuqmak04j30zk0m8weu.jpg" alt="d1e794177969e09552b173b7d6eaea19" loading="lazy"></p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Orderer共识组件提供HandleChain()方法创建通道绑定的共识组件链对象（<code>consensus.Chain</code>接口），包括<code>Solo</code>（<code>solo.chain</code>类型）、<code>Kafka</code>（<code>kafka.chainImpl</code>类型）等类型，属于通道共识组件的重要实现模块，并设置到链支持对象的<code>cs.Chain</code>字段。共识组件链对象提供Orderer共识排序服务，负责关联通道上交易排序、打包出块、提交账本、通道管理等工作，目前采用<code>Golang</code>通道或<code>Kafka</code>集群作为共识排序后端，<strong>接收来自<code>Broadcast</code>服务过滤转发的交易消息</strong>并进行排序。</p><h2 id="kafka共识排序服务" tabindex="-1"><a class="header-anchor" href="#kafka共识排序服务" aria-hidden="true">#</a> kafka共识排序服务</h2><h3 id="orderer服务集群" tabindex="-1"><a class="header-anchor" href="#orderer服务集群" aria-hidden="true">#</a> orderer服务集群</h3><p><code>Orderer</code>节点采用<code>Sarama</code>开源的<code>Kafka</code>第三方库构建<code>Kafka</code>共识组件，可以同时接受处理多个客户端发送的交易消息请求，能够有效提高<code>Orderer</code>节点处理交易消息的并发能力。同时，可利用<code>Kafka</code>集群在<strong>单一分区内</strong>按序收集相同主题消息（<strong>消息序号唯一</strong>）的功能，来保证交易消息具有确定性的顺序（以消息序号排序），从而实现对交易排序达成全局共识的目的。</p><p><code>Kafka</code>生产者按照主题（<code>Topic</code>）生产消息并进行发布，<code>Kafka</code>服务器集群自动对消息主题进行分类。同一个主题的消息都会被收集到一个或多个分区文件中，按照<code>FIFO</code>的顺序追加到文件尾部，并且每个消息在分区中都会有一个<code>OFFSET</code>位置偏移量作为该消息的唯一标识ID。目前，<code>Hyperledger Fabric</code>基于<code>Kafka</code>集群为<strong>每个通道</strong>创建绑定了一个主题（即链ID，<code>chainID</code>），并且只设置一个分区（分区号为0）。Kafka消费者管理多个分区消费者并订阅指定分区的主题消息，包括主题（即<code>chainID</code>）、分区号（目前只有1个分区号为0的分区）、起始偏移量（开始订阅的消息位置<code>offset</code>）等。</p><p>Hyperledger Fabric采用<code>Kafka</code>集群对单个或多个<code>Orderer</code>排序节点提交的交易消息进行排序。此时，<code>Orderer</code>排序节点同时充当<code>Kafka</code>集群的消息生产者（分区）和消费者，发布消息与订阅消息到Kafka集群上的同一个主题分区，即先将<code>Peer</code>节点提交的交易消息转发给Kafka服务端，同时，从指定主题的<code>Kafka</code>分区上按顺序获取排序后的交易消息并自动过滤重启的交易消息。这期间可能会存在网络时延造成获取消息时间的差异。如果不考虑丢包造成消息丢失的情况，则所有<code>Orderer</code>节点获取消息的顺序与数量应该是确定的和一致的。同时，采用相同的Kafka共识组件链对象与出块规则等，以保证所有Orderer节点都可以创建与更新相同配置的通道，并切割生成相同的批量交易集合出块，再“同步”构造出相同的区块数据，从而基于<code>Kafka</code>集群达成全局共识，以保证区块数据的全局一致性。</p><h3 id="启动共识组件链对象" tabindex="-1"><a class="header-anchor" href="#启动共识组件链对象" aria-hidden="true">#</a> 启动共识组件链对象</h3><p>启动入口：</p><blockquote><p>orderer/consensus/kafka/chain.go/Start()</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>chain <span class="token operator">*</span>chainImpl<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token function">startThread</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">startThread</span><span class="token punctuation">(</span>chain <span class="token operator">*</span>chainImpl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token comment">//创建kafka生产者</span>
	chain<span class="token punctuation">.</span>producer<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">setupProducerForChannel</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">retryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>haltChan<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">SharedConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">KafkaBrokers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">brokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">// Kafka生产者发送CONNECT消息建立连接</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">sendConnectMessage</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">retryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>haltChan<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>producer<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span><span class="token string">&quot;[channel: %s] Cannot post CONNECT message = %s&quot;</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
	<span class="token comment">//创建Kafka消费者</span>
	chain<span class="token punctuation">.</span>parentConsumer<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">setupParentConsumerForChannel</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">retryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>haltChan<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">SharedConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">KafkaBrokers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">brokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token comment">//创建Kafka分区消费者</span>
	chain<span class="token punctuation">.</span>channelConsumer<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">setupChannelConsumerForChannel</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>consenter<span class="token punctuation">.</span><span class="token function">retryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span>haltChan<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>parentConsumer<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>lastOffsetPersisted<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token function">close</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>startChan<span class="token punctuation">)</span> <span class="token comment">// 已经启动共识组件链对象，不阻塞Broadcast</span>
	chain<span class="token punctuation">.</span>errorChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 创建errorChan通道，不阻塞Deliver服务处理句柄</span>
	<span class="token operator">...</span>
	chain<span class="token punctuation">.</span><span class="token function">processMessagesToBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建消息处理循环，循环处理订阅分区上接收到的消息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>startThread</code>函数首先创建<code>kafka</code>生产者，发布消息到指定主题（即通道ID）和分区号的通道分区（chain.channel）上。</p><p>然后发送<code>CONNECT</code>消息建立连接，该消息指定了主题<code>Topic</code>字段为链ID、<code>Key</code>字段为分区号0、<code>Value</code>字段为<code>CONNECT</code>类型消息负载等。订阅该主题的<code>Kafka</code>（分区）消费者会接收到该消息。</p><p>接着创建指定<code>Kafka</code>分区和<code>Broker</code>服务器配置的<code>Kafka</code>消费者对象，并设置从指定主题（链ID）和分区号（0）的<code>Kafka</code>分区上获取消息。</p><p>最后，调用<code>processMessagesToBlocks()</code>方法创建消息处理循环，负责处理从<code>Kafka</code>集群中接收到的订阅消息。</p><h3 id="处理消息" tabindex="-1"><a class="header-anchor" href="#处理消息" aria-hidden="true">#</a> 处理消息</h3><p><code>processMessagesToBlocks</code>接收到正常的<code>Kafka</code>分区消费者消息会根据<code>kafka</code>的消息类型进行处理，包括以下几种类型：</p><ul><li>Kafka- Message_Regular</li><li>KafkaMessage_TimeToCut</li><li>KafkaMessage_Connect</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>chain <span class="token operator">*</span>chainImpl<span class="token punctuation">)</span> <span class="token function">processMessagesToBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token comment">// 消息处理循环</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		<span class="token keyword">case</span> in<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>chain<span class="token punctuation">.</span>channelConsumer<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//接收到正常的Kafka分区消费者消息</span>
			<span class="token operator">...</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>chain<span class="token punctuation">.</span>errorChan<span class="token punctuation">:</span> <span class="token comment">// If this channel was closed...  // 如果该通道已经关闭，则重新创建该通道</span>
				<span class="token operator">...</span>
			<span class="token keyword">switch</span> msg<span class="token punctuation">.</span>Type<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//分析Kafka消息类型</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>KafkaMessage_Connect<span class="token punctuation">:</span> <span class="token comment">//Kafka连接消息  由于错误而重新恢复Kafka消费者分区订阅流程</span>
				<span class="token boolean">_</span> <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">processConnect</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//处理CONNECT连接消息， 不做任何事情</span>
				counts<span class="token punctuation">[</span>indexProcessConnectPass<span class="token punctuation">]</span><span class="token operator">++</span>         <span class="token comment">// 成功处理消息计数增1</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>KafkaMessage_TimeToCut<span class="token punctuation">:</span> <span class="token comment">// Kafka定时切割生成区块消息</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">processTimeToCut</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetTimeToCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					logger<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">&quot;[channel: %s] %s&quot;</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
					logger<span class="token punctuation">.</span><span class="token function">Criticalf</span><span class="token punctuation">(</span><span class="token string">&quot;[channel: %s] Consenter for channel exiting&quot;</span><span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">ChainID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					counts<span class="token punctuation">[</span>indexProcessTimeToCutError<span class="token punctuation">]</span><span class="token operator">++</span>
					<span class="token keyword">return</span> counts<span class="token punctuation">,</span> err <span class="token comment">// TODO Revisit whether we should indeed stop processing the chain at this point</span>
				<span class="token punctuation">}</span>
				counts<span class="token punctuation">[</span>indexProcessTimeToCutPass<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token comment">// 成功处理消息计数增1</span>
			<span class="token keyword">case</span> <span class="token operator">*</span>ab<span class="token punctuation">.</span>KafkaMessage_Regular<span class="token punctuation">:</span> <span class="token comment">// Kafka常规消息</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">processRegular</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">GetRegular</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 处理Kafka常 规消息</span>
					<span class="token operator">...</span>
					counts<span class="token punctuation">[</span>indexProcessRegularError<span class="token punctuation">]</span><span class="token operator">++</span>
        <span class="token punctuation">}</span><span class="token operator">...</span>
      <span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>chain<span class="token punctuation">.</span>timer<span class="token punctuation">:</span> <span class="token comment">// 超时定时器</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">sendTimeToCut</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>producer<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>channel<span class="token punctuation">,</span> chain<span class="token punctuation">.</span>lastCutBlockNumber<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>chain<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">//发送TimeToCut类型消息，请求打包出块</span>
			<span class="token operator">...</span>
				counts<span class="token punctuation">[</span>indexSendTimeToCutError<span class="token punctuation">]</span><span class="token operator">++</span>
			<span class="token punctuation">}</span> <span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①：KafkaMessage_Connect类型消息</p><p><code>Kafka</code>连接消息用于测试连通<code>Kafka</code>分区消费者的工作状态，用于验证<code>Kafka</code>共识组件的正常工作状态与排除故障，并调用<code>chain.processConnect(chain.ChainID())</code>方法处理该消息。</p><p>②：KafkaMessage_TimeToCut类型消息</p><p><code>processMessagesToBlocks</code>()方法可调用<code>chain.processTimeToCut()</code>方法处理<code>TIMETOCUT</code>类型消息。如果消息中的区块号<code>ttcNumber</code>不是当前<code>Orderer</code>节点当前通道账本中下一个打包出块的区块号（最新区块号<code>lastCutBlockNumber</code>+1），则直接丢弃不处理。否则，调用<code>BlockCutter().Cut()</code>方法，切割当前该通道上待处理的缓存交易消息列表为批量交易集合<code>batch（[]*cb.Envelope）</code>，再调用<code>CreateNextBlock(batch)</code>方法构造新区块并提交账本。最后，调用<code>WriteBlock(block，metadata)</code>方法，更新区块元数据并提交账本，同时更新Kafka共识组件链对象的最新区块号<code>lastCutBlockNumber</code>增1。</p><p>事实上，<code>Orderer</code>服务集群节点独立打包出块的时间点通常不是完全同步的，同时还可能会重复接收其他Orderer节点提交的TIMETOCUT类型消息（重复区块号）。此时，<code>Orderer</code>节点以接收到的第一个<code>TIMETOCUT</code>类型消息为准，打包出块并提交到账本，再更新当前通道的最新区块号<code>lastCutBlockNumber</code>。这样，<code>processTimeToCut</code>()方法就能利用最新的<code>lastCutBlockNumber</code>过滤掉其他重复的<code>TIMETOCUT</code>类型消息，以保证所有<code>Orderer</code>节点上账本区块文件的数据同步，实际上是将原先的时间同步机制转换为消息同步机制。</p><p>③：KafkaMessage_Regular类型消息</p><p>包括通道配置交易消息（KafkaMessageRegular_CONFIG类型）和普通交易消息（KafkaMessageRegular_NORMAL类型）。 详细的分析将会在<code>processRegular</code>方法中体现。</p><h2 id="处理配置交易消息" tabindex="-1"><a class="header-anchor" href="#处理配置交易消息" aria-hidden="true">#</a> 处理配置交易消息</h2><p>我们先大概的看一下ProcessRegular中关于处理配置交易消息的代码部分,因为这部分相当的长，必须先看个概览：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>chain <span class="token operator">*</span>chainImpl<span class="token punctuation">)</span> <span class="token function">processRegular</span><span class="token punctuation">(</span>regularMessage <span class="token operator">*</span>ab<span class="token punctuation">.</span>KafkaMessageRegular<span class="token punctuation">,</span> receivedOffset <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  commitConfigMsg <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>message <span class="token operator">*</span>cb<span class="token punctuation">.</span>Envelope<span class="token punctuation">,</span> newOffset <span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  seq <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">Sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前通道的最新配置序号</span>
  <span class="token operator">...</span>
  <span class="token keyword">switch</span> regularMessage<span class="token punctuation">.</span>Class <span class="token punctuation">{</span>
	<span class="token keyword">case</span> ab<span class="token punctuation">.</span>KafkaMessageRegular_UNKNOWN<span class="token punctuation">:</span> <span class="token comment">// 未知消息类型</span>
	<span class="token operator">...</span>
	<span class="token keyword">case</span> ab<span class="token punctuation">.</span>KafkaMessageRegular_NORMAL<span class="token punctuation">:</span> <span class="token comment">// 普通交易消息类型</span>
		<span class="token operator">...</span>
	<span class="token keyword">case</span> ab<span class="token punctuation">.</span>KafkaMessageRegular_CONFIG<span class="token punctuation">:</span> <span class="token comment">// 通道配置交易消息</span>
	<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们直接跳转到<code>case ab.KafkaMessageRegular_CONFIG</code>进行分析：</p><p>①：如果regularMessage.OriginalOffset 不为 0</p><p>说明这是重新过滤验证和排序的通道配置交易消息。</p><p>1.1 过滤重复提交的消息</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>OriginalOffset <span class="token operator">&lt;=</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.2 确认是否是最近重新验证且重新排序的配置交易消息，并且通道配置序号是最新的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>OriginalOffset <span class="token operator">==</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset <span class="token operator">&amp;&amp;</span>regularMessage<span class="token punctuation">.</span>ConfigSeq <span class="token operator">==</span> seq <span class="token punctuation">{</span>
  <span class="token comment">// 因此，关闭通道并解除Broadcast服务处理句柄阻塞等待，通知重新接收消息进行处理</span>
  <span class="token function">close</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span>doneReprocessingMsgInFlight<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.3 主动更新本通道的最近重新提交排序的配置交易消息初始偏移量lastResubmitted</p><p>存在其他<code>Orderer</code>节点重新提交了配置消息，但是本地<code>Orderer</code>节点没有重新提交该消息。因此这里需要更新本通道的最近重新提交排序的配置交易消息初始偏移量lastResubmitted。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset <span class="token operator">&lt;</span> regularMessage<span class="token punctuation">.</span>OriginalOffset <span class="token punctuation">{</span>
				chain<span class="token punctuation">.</span>lastResubmittedConfigOffset <span class="token operator">=</span> regularMessage<span class="token punctuation">.</span>OriginalOffset
			<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②：regularMessage.OriginalOffset为 0</p><p>说明是第一次提交通道配置交易消息，而不是重新验证和重新排序的。</p><p>2.1 如果消息中的配置序号regularMessage.ConfigSeq小于当前通道的最新配置序号seq</p><p>则说明已经更新了通道配置（配置序号较高），然后再处理当前配置交易消息（配置序号较低）。将会调用<code>ProcessConfigMsg</code>重新过滤和处理该消息。</p><p>接着通过<code>configure</code>重新提交该配置消息进行排序，重置消息初始偏移量。然后再更新最近重新提交消息的偏移量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>ConfigSeq <span class="token operator">&lt;</span> seq <span class="token punctuation">{</span>
  <span class="token operator">...</span>
	configEnv<span class="token punctuation">,</span> configSeq<span class="token punctuation">,</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">ProcessConfigMsg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>configEnv<span class="token punctuation">,</span> configSeq<span class="token punctuation">,</span> receivedOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  
  <span class="token comment">// 阻塞接收消息处理，更新最近重新提交消息的偏移量</span>
  chain<span class="token punctuation">.</span>lastResubmittedConfigOffset <span class="token operator">=</span> receivedOffset 
  <span class="token comment">//创建通道阻塞Broadcast服务接收处理消息</span>
  chain<span class="token punctuation">.</span>doneReprocessingMsgInFlight <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③：提交配置交易消息执行通道管理操作</p><p>经过上面的①和②过滤掉不符合条件的情况，接下来就提交配置交易消息执行通道管理操作，核心函数：<code>commitConfigMsg(env, offset)</code></p><p>3.1 将当前缓存交易消息切割成批量交易集合</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>batch <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">BlockCutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.2 创建新区块block</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>block <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">CreateNextBlock</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.3 构造Kafka元数据</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>metadata <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">MarshalOrPanic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ab<span class="token punctuation">.</span>KafkaMetadata<span class="token punctuation">{</span> <span class="token comment">//构造Kafka元数据</span>
				LastOffsetPersisted<span class="token punctuation">:</span>         receivedOffset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 偏移量减1</span>
				LastOriginalOffsetProcessed<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed<span class="token punctuation">,</span>
				LastResubmittedConfigOffset<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.4 写入区块</p><p>通过区块写组件提交新区块到账本，更新当前通道的最新区块号chain.lastCutBlockNumber增1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chain<span class="token punctuation">.</span><span class="token function">WriteBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span>
chain<span class="token punctuation">.</span>lastCutBlockNumber<span class="token operator">++</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着更新本链的lastOriginal- OffsetProcessed为newOffset参数，然后做和上面差不多的事情：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token operator">=</span> newOffset
		block <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">CreateNextBlock</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>cb<span class="token punctuation">.</span>Envelope<span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 构造新区块</span>
		metadata <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">MarshalOrPanic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ab<span class="token punctuation">.</span>KafkaMetadata<span class="token punctuation">{</span>     <span class="token comment">// 构造Kafka元数据</span>
			LastOffsetPersisted<span class="token punctuation">:</span>         receivedOffset<span class="token punctuation">,</span>
			LastOriginalOffsetProcessed<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed<span class="token punctuation">,</span>
			LastResubmittedConfigOffset<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		chain<span class="token punctuation">.</span><span class="token function">WriteConfigBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span> <span class="token comment">// 写入配置区块</span>
		chain<span class="token punctuation">.</span>lastCutBlockNumber<span class="token operator">++</span>              <span class="token comment">// 最新区块号增1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不管是上面的<code>WriteBlock</code>还是<code>WriteConfigBlock</code>底层都是调用的<code>commitBlock</code>，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>bw <span class="token operator">*</span>BlockWriter<span class="token punctuation">)</span> <span class="token function">commitBlock</span><span class="token punctuation">(</span>encodedMetadataValue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span> <span class="token comment">// 添加块签名</span>
	bw<span class="token punctuation">.</span><span class="token function">addBlockSignature</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span>lastBlock<span class="token punctuation">)</span>
  <span class="token comment">// 添加最新的配置签名</span>
	bw<span class="token punctuation">.</span><span class="token function">addLastConfigSignature</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span>lastBlock<span class="token punctuation">)</span>
	<span class="token comment">// 写入新块</span>
	err <span class="token operator">:=</span> bw<span class="token punctuation">.</span>support<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span>lastBlock<span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来再讨论kafka共识组件如何处理普通交易消息的。</p><h2 id="处理普通交易消息" tabindex="-1"><a class="header-anchor" href="#处理普通交易消息" aria-hidden="true">#</a> 处理普通交易消息</h2><p>还是先回到 <code>processRegular</code>方法，关于处理普通消息的方法大概如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>chain <span class="token operator">*</span>chainImpl<span class="token punctuation">)</span> <span class="token function">processRegular</span><span class="token punctuation">(</span>regularMessage <span class="token operator">*</span>ab<span class="token punctuation">.</span>KafkaMessageRegular<span class="token punctuation">,</span> receivedOffset <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token keyword">case</span> ab<span class="token punctuation">.</span>KafkaMessageRegular_NORMAL<span class="token punctuation">:</span> <span class="token comment">// 普通交易消息类型</span>
		<span class="token comment">// 如果OriginalOffset不是0，则说明该消息是重新验证且重新提交排序的</span>
		<span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>OriginalOffset <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token operator">...</span>
			<span class="token comment">// 如果消息偏移量不大于lastOriginalOffsetProcessed最近已处理消息的偏移量，</span>
			<span class="token comment">// 则说明已经处理过该消息，此时应丢弃返回，防止重复处理其他Orderer提交的相同偏移 量的普通交易消息</span>
			<span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>OriginalOffset <span class="token operator">&lt;=</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token punctuation">{</span>
				<span class="token operator">...</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// // 检查通道的配置序号是否更新</span>
		<span class="token keyword">if</span> regularMessage<span class="token punctuation">.</span>ConfigSeq <span class="token operator">&lt;</span> seq <span class="token punctuation">{</span>
			<span class="token operator">...</span>
			<span class="token comment">//// 消息的配置序号低，需要重新验证过滤消息</span>
			configSeq<span class="token punctuation">,</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">ProcessNormalMsg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span>
			<span class="token operator">...</span>
			<span class="token comment">//重新提交普通交易消息</span>
      <span class="token keyword">if</span> err <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> configSeq<span class="token punctuation">,</span> receivedOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
				<span class="token operator">...</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// advance lastOriginalOffsetProcessed iff message is re-validated and re-ordered</span>
		<span class="token comment">//当且仅当消息重新验证和重新排序时，才需要修正lastOriginalOffsetProcessed偏移量</span>
		offset <span class="token operator">:=</span> regularMessage<span class="token punctuation">.</span>OriginalOffset
		<span class="token keyword">if</span> offset <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			offset <span class="token operator">=</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed
		<span class="token punctuation">}</span>
		<span class="token comment">// 提交处理普通交易消息，offset为最近处理的普通交易消息偏移量</span>
		<span class="token function">commitNormalMsg</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理普通交易消息的流程与处理配置交易消息的流程基本类似，主要看最后的<code>commitNormalMsg(env, offset)</code>，我们来继续分析：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>commitNormalMsg <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>message <span class="token operator">*</span>cb<span class="token punctuation">.</span>Envelope<span class="token punctuation">,</span> newOffset <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//// 添加所接收的消息到缓存交易消息列表，并切割成批量交易集合列表batches</span>
		batches<span class="token punctuation">,</span> pending <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">BlockCutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Ordered</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
		<span class="token operator">...</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>batches<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果不存在批量交易集合，则启动定时器周期性地发送切割出块消息n</span>
			chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token operator">=</span> newOffset
			<span class="token keyword">if</span> chain<span class="token punctuation">.</span>timer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				chain<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">SharedConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token operator">...</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		chain<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>
		offset <span class="token operator">:=</span> receivedOffset <span class="token comment">// 设置当前消息偏移量</span>
		<span class="token keyword">if</span> pending <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>batches<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			offset<span class="token operator">--</span> <span class="token comment">// 计算第1个批量交易消息的偏移量是offset减1</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 只有1个批量交易集合构成1个区块</span>
			<span class="token comment">//// 设置第1个批量交易集合的消息偏移量为newOffset</span>
			chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token operator">=</span> newOffset
		<span class="token punctuation">}</span>
		<span class="token comment">//// 构造并提交第1个区块</span>
		block <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">CreateNextBlock</span><span class="token punctuation">(</span>batches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		metadata <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">MarshalOrPanic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ab<span class="token punctuation">.</span>KafkaMetadata<span class="token punctuation">{</span>
			LastOffsetPersisted<span class="token punctuation">:</span>         offset<span class="token punctuation">,</span>
			LastOriginalOffsetProcessed<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed<span class="token punctuation">,</span>
			LastResubmittedConfigOffset<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		chain<span class="token punctuation">.</span><span class="token function">WriteBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span> <span class="token comment">// 更新区块元数据，并提交区块到账本</span>
		chain<span class="token punctuation">.</span>lastCutBlockNumber<span class="token operator">++</span> <span class="token comment">// 更新当前通道上最近出块的区块号增1</span>
	<span class="token operator">...</span>
		<span class="token comment">// Commit the second block if exists</span>
		<span class="token comment">//// 检查第2个批量交易集合，构造并提交第2个区块</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>batches<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			chain<span class="token punctuation">.</span>lastOriginalOffsetProcessed <span class="token operator">=</span> newOffset
			offset<span class="token operator">++</span> <span class="token comment">// 设置第2个批量交易集合的消息偏移量offset加1</span>

			block <span class="token operator">:=</span> chain<span class="token punctuation">.</span><span class="token function">CreateNextBlock</span><span class="token punctuation">(</span>batches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			metadata <span class="token operator">:=</span> utils<span class="token punctuation">.</span><span class="token function">MarshalOrPanic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ab<span class="token punctuation">.</span>KafkaMetadata<span class="token punctuation">{</span>
				LastOffsetPersisted<span class="token punctuation">:</span>         offset<span class="token punctuation">,</span>
				LastOriginalOffsetProcessed<span class="token punctuation">:</span> newOffset<span class="token punctuation">,</span>
				LastResubmittedConfigOffset<span class="token punctuation">:</span> chain<span class="token punctuation">.</span>lastResubmittedConfigOffset<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			chain<span class="token punctuation">.</span><span class="token function">WriteBlock</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span>
			chain<span class="token punctuation">.</span>lastCutBlockNumber<span class="token operator">++</span>
			<span class="token operator">...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先将新的普通交易消息添加到当前的缓存交易列表，并切割成批量交易集合列表batches ,但最多只能包含2个批量交易集合，并且第2个批量交易集合最多包含1个交易。最终也是调用的<code>WriteBlock</code>写入到账本。</p><p>到此为止整个<code>processRegular</code>()方法处理消息结束。</p><h2 id="总结及参考" tabindex="-1"><a class="header-anchor" href="#总结及参考" aria-hidden="true">#</a> 总结及参考</h2><p>kafka共识排序的逻辑其实是比较简单的，大概的流程如下 ：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0u9hflmfj318e0u0wj5.jpg" alt="image-20210126092717144" loading="lazy"></p>`,74),r={href:"https://github.com/blockchainGuide/",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"微信公众号：区块链技术栈",-1);function d(m,v){const a=i("ExternalLinkIcon");return e(),p("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("https://github.com/blockchainGuide/"),o(a)]),s(" (文章图片代码资料在里面)")]),k])])}const g=t(l,[["render",d],["__file","4.fabric_source_sort_kafka_consensus.html.vue"]]);export{g as default};
