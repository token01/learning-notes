import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,d as p,f as t,r as l}from"./app.093d1351.js";const i={},u=t(`<h1 id="java-io-\u6E90\u7801-inputstream" tabindex="-1"><a class="header-anchor" href="#java-io-\u6E90\u7801-inputstream" aria-hidden="true">#</a> Java IO - \u6E90\u7801: InputStream</h1><blockquote><p>\u672C\u6587\u4E3B\u8981\u4ECE<strong>JDK 11 \u6E90\u7801</strong>\u89D2\u5EA6\u5206\u6790InputStream\u3002</p></blockquote><h2 id="_1-inputstream-\u7C7B\u5B9E\u73B0\u5173\u7CFB" tabindex="-1"><a class="header-anchor" href="#_1-inputstream-\u7C7B\u5B9E\u73B0\u5173\u7CFB" aria-hidden="true">#</a> 1. InputStream \u7C7B\u5B9E\u73B0\u5173\u7CFB</h2><blockquote><p>InputStream\u662F\u8F93\u5165\u5B57\u8282\u6D41\uFF0C\u5177\u4F53\u7684\u5B9E\u73B0\u7C7B\u5C42\u6B21\u7ED3\u6784\u5982\u4E0B\uFF1A</p></blockquote><p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/image-20220830204238728.png" alt="image-20220830204238728"></p><h2 id="_2-inputstream-\u62BD\u8C61\u7C7B" tabindex="-1"><a class="header-anchor" href="#_2-inputstream-\u62BD\u8C61\u7C7B" aria-hidden="true">#</a> 2. InputStream \u62BD\u8C61\u7C7B</h2><p>InputStream \u7C7B\u91CD\u8981\u65B9\u6CD5\u8BBE\u8BA1\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u8BFB\u53D6\u4E0B\u4E00\u4E2A\u5B57\u8282\uFF0C\u5982\u679C\u6CA1\u6709\u5219\u8FD4\u56DE-1</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// \u5C06\u8BFB\u53D6\u5230\u7684\u6570\u636E\u653E\u5728 byte \u6570\u7EC4\u4E2D\uFF0C\u8BE5\u65B9\u6CD5\u5B9E\u9645\u4E0A\u8C03\u7528read(byte b[], int off, int len)\u65B9\u6CD5</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 

<span class="token comment">// \u4ECE\u7B2C off \u4F4D\u7F6E\u8BFB\u53D6&lt;b&gt;\u6700\u591A(\u5B9E\u9645\u53EF\u80FD\u5C0F\u4E8E)&lt;/b&gt; len \u957F\u5EA6\u5B57\u8282\u7684\u6570\u636E\u653E\u5230 byte \u6570\u7EC4\u4E2D\uFF0C\u6D41\u662F\u4EE5 -1 \u6765\u5224\u65AD\u662F\u5426\u8BFB\u53D6\u7ED3\u675F\u7684; \u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u6B62\uFF0C\u76F4\u5230\u8F93\u5165\u6570\u636E\u53EF\u7528\u3001\u68C0\u6D4B\u5230stream\u7ED3\u5C3E\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> 

<span class="token comment">// JDK9\u65B0\u589E\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u6240\u6709\u5269\u4F59\u5B57\u8282\uFF0C\u8C03\u7528readNBytes(Integer.MAX_VALUE)\u65B9\u6CD5</span>
<span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// JDK11\u66F4\u65B0\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u5269\u4F59\u5B57\u8282\u7684\u6307\u5B9A\u4E0A\u9650\u5927\u5C0F\u7684\u5B57\u8282\u5185\u5BB9\uFF1B\u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u585E\uFF0C\u76F4\u5230\u8BFB\u53D6\u4E86\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u3001\u68C0\u6D4B\u5230\u6D41\u7ED3\u675F\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002\u6B64\u65B9\u6CD5\u4E0D\u4F1A\u5173\u95ED\u8F93\u5165\u6D41\u3002</span>
<span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>

<span class="token comment">// JDK9\u65B0\u589E\uFF1A\u4ECE\u8F93\u5165\u6D41\u8BFB\u53D6\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u5E76\u4FDD\u5B58\u5728byte\u6570\u7EC4\u4E2D\uFF1B \u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u585E\uFF0C\u76F4\u5230\u8BFB\u53D6\u4E86\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u3001\u68C0\u6D4B\u5230\u6D41\u7ED3\u675F\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002\u6B64\u65B9\u6CD5\u4E0D\u4F1A\u5173\u95ED\u8F93\u5165\u6D41\u3002</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>

<span class="token comment">// \u8DF3\u8FC7\u6307\u5B9A\u4E2A\u6570\u7684\u5B57\u8282\u4E0D\u8BFB\u53D6</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> 

<span class="token comment">// \u8FD4\u56DE\u53EF\u8BFB\u7684\u5B57\u8282\u6570\u91CF</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// \u8BFB\u53D6\u5B8C\uFF0C\u5173\u95ED\u6D41\uFF0C\u91CA\u653E\u8D44\u6E90</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// \u6807\u8BB0\u8BFB\u53D6\u4F4D\u7F6E\uFF0C\u4E0B\u6B21\u8FD8\u53EF\u4EE5\u4ECE\u8FD9\u91CC\u5F00\u59CB\u8BFB\u53D6\uFF0C\u4F7F\u7528\u524D\u8981\u770B\u5F53\u524D\u6D41\u662F\u5426\u652F\u6301\uFF0C\u53EF\u4EE5\u4F7F\u7528 markSupport() \u65B9\u6CD5\u5224\u65AD</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> 

<span class="token comment">// \u91CD\u7F6E\u8BFB\u53D6\u4F4D\u7F6E\u4E3A\u4E0A\u6B21 mark \u6807\u8BB0\u7684\u4F4D\u7F6E</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// \u5224\u65AD\u5F53\u524D\u6D41\u662F\u5426\u652F\u6301\u6807\u8BB0\u6D41\uFF0C\u548C\u4E0A\u9762\u4E24\u4E2A\u65B9\u6CD5\u914D\u5957\u4F7F\u7528</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">// JDK9\u65B0\u589E\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u5168\u90E8\u5B57\u8282\u5E76\u5199\u5165\u5230\u6307\u5B9A\u7684 OutputStream \u4E2D</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u6E90\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_2-\u6E90\u7801\u5B9E\u73B0" aria-hidden="true">#</a> 2. \u6E90\u7801\u5B9E\u73B0</h2><blockquote><p>\u68B3\u7406\u90E8\u5206InputStream\u53CA\u5176\u5B9E\u73B0\u7C7B\u7684\u6E90\u7801\u5206\u6790\u3002</p></blockquote><h3 id="_2-1-inputstream" tabindex="-1"><a class="header-anchor" href="#_2-1-inputstream" aria-hidden="true">#</a> 2.1 InputStream</h3><p>InputStream\u62BD\u8C61\u7C7B\u6E90\u7801\u5982\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// \u5F53\u4F7F\u7528skip\u65B9\u6CD5\u65F6\uFF0C\u6700\u5927\u7684buffer size\u5927\u5C0F</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_SKIP_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>

    <span class="token comment">// \u9ED8\u8BA4\u7684buffer size</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>

    <span class="token comment">// JDK11\u4E2D\u589E\u52A0\u4E86\u4E00\u4E2AnullInputStream\uFF0C\u5373\u7A7A\u6A21\u5F0F\u5B9E\u73B0\uFF0C\u4EE5\u4FBF\u53EF\u4EE5\u76F4\u63A5\u8C03\u7528\u800C\u4E0D\u7528\u5224\u7A7A\uFF08\u53EF\u4EE5\u770B\u5982\u4E0B\u7684\u8865\u5145\u8BF4\u660E\uFF09</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InputStream</span> <span class="token function">nullInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> closed<span class="token punctuation">;</span>

            <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Stream closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> available <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">checkFromIndexSize</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
                <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">checkFromIndexSize</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;len &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
                closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u8BFB\u53D6\u4E0B\u4E00\u4E2A\u5B57\u8282\u7684\u6570\u636E\uFF0C\u5982\u679C\u6CA1\u6709\u5219\u8FD4\u56DE-1</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5C06\u8BFB\u53D6\u5230\u7684\u6570\u636E\u653E\u5728 byte \u6570\u7EC4\u4E2D\uFF0C\u8BE5\u65B9\u6CD5\u5B9E\u9645\u4E0A\u8C03\u7528read(byte b[], int off, int len)\u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u4ECE\u7B2C off \u4F4D\u7F6E\u8BFB\u53D6&lt;b&gt;\u6700\u591A(\u5B9E\u9645\u53EF\u80FD\u5C0F\u4E8E)&lt;/b&gt; len \u957F\u5EA6\u5B57\u8282\u7684\u6570\u636E\u653E\u5230 byte \u6570\u7EC4\u4E2D\uFF0C\u6D41\u662F\u4EE5 -1 \u6765\u5224\u65AD\u662F\u5426\u8BFB\u53D6\u7ED3\u675F\u7684; \u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u6B62\uFF0C\u76F4\u5230\u8F93\u5165\u6570\u636E\u53EF\u7528\u3001\u68C0\u6D4B\u5230stream\u7ED3\u5C3E\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u68C0\u67E5\u8FB9\u754C</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">checkFromIndexSize</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u8BFB\u53D6\u4E0B\u4E00\u4E2A\u5B57\u8282</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u8BFB\u5230stream\u672B\u5C3E\uFF0C\u5219\u8FD4\u56DE\u8BFB\u53D6\u7684\u5B57\u8282\u6570\u91CF\u4E3A-1</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        b<span class="token punctuation">[</span>off<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>

        <span class="token comment">// i\u7528\u6765\u8BB0\u5F55\u53D6\u4E86\u591A\u5C11\u4E2A\u5B57\u8282</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5FAA\u73AF\u8BFB\u53D6</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u8BFB\u5230stream\u672B\u5C3E\uFF0C\u5219break</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                b<span class="token punctuation">[</span>off <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u8FD4\u56DE\u8BFB\u53D6\u5230\u7684\u5B57\u8282\u4E2A\u6570</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5206\u914D\u7684\u6700\u5927\u6570\u7EC4\u5927\u5C0F\u3002</span>
    <span class="token comment">// \u7531\u4E8E\u4E00\u4E9BVM\u5728\u6570\u7EC4\u4E2D\u4FDD\u7559\u4E00\u4E9B\u5934\u5B57\uFF0C\u6240\u4EE5\u5C1D\u8BD5\u5206\u914D\u8F83\u5927\u7684\u9635\u5217\u53EF\u80FD\u4F1A\u5BFC\u81F4OutOfMemoryError\uFF08\u8BF7\u6C42\u7684\u9635\u5217\u5927\u5C0F\u8D85\u8FC7VM\u9650\u5236\uFF09</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token comment">// JDK9\u65B0\u589E\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u6240\u6709\u5269\u4F59\u5B57\u8282\uFF0C\u8C03\u7528readNBytes(Integer.MAX_VALUE)\u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// JDK11\u66F4\u65B0\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u5269\u4F59\u5B57\u8282\u7684\u6307\u5B9A\u4E0A\u9650\u5927\u5C0F\u7684\u5B57\u8282\u5185\u5BB9\uFF1B\u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u585E\uFF0C\u76F4\u5230\u8BFB\u53D6\u4E86\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u3001\u68C0\u6D4B\u5230\u6D41\u7ED3\u675F\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002\u6B64\u65B9\u6CD5\u4E0D\u4F1A\u5173\u95ED\u8F93\u5165\u6D41\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8FB9\u754C\u68C0\u67E5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;len &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> bufs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u7F13\u5B58\u6BCF\u6B21\u8BFB\u53D6\u5230\u7684\u5185\u5BB9\u653E\u5230bufs\uFF0C\u6700\u540E\u7EC4\u88C5\u6210result</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// \u6700\u540E\u8BFB\u53D6\u5230\u7684\u5185\u5BB9</span>
        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> remaining <span class="token operator">=</span> len<span class="token punctuation">;</span> <span class="token comment">// \u5269\u4F59\u5B57\u8282\u957F\u5EA6</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>remaining<span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token comment">// \u8BFB\u53D6\u5230\u7ED3\u675F\u4E3A\u6B62\uFF0C\u8BFB\u53D6\u5927\u5C0Fn\u53EF\u80FD\u5927\u4E8E\u6216\u5C0F\u4E8E\u7F13\u51B2\u533A\u5927\u5C0F</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> nread<span class="token punctuation">,</span>
                    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length <span class="token operator">-</span> nread<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nread <span class="token operator">+=</span> n<span class="token punctuation">;</span> 
                remaining <span class="token operator">-=</span> n<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">MAX_BUFFER_SIZE</span> <span class="token operator">-</span> total <span class="token operator">&lt;</span> nread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token string">&quot;Required array size too large&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                total <span class="token operator">+=</span> nread<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result <span class="token operator">=</span> buf<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        bufs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        bufs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    bufs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u5982\u679C\u8BFB\u4E0D\u5230\u5185\u5BB9\uFF08\u8FD4\u56DE-1\uFF09\u6216\u8005\u6CA1\u6709\u5269\u4F59\u7684\u5B57\u8282\uFF0C\u5219\u8DF3\u51FA\u5FAA\u73AF</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> remaining <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result<span class="token punctuation">.</span>length <span class="token operator">==</span> total <span class="token operator">?</span>
                result <span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u7EC4\u88C5\u6700\u540E\u7684result</span>
        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        remaining <span class="token operator">=</span> total<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">:</span> bufs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            offset <span class="token operator">+=</span> count<span class="token punctuation">;</span>
            remaining <span class="token operator">-=</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// JDK9\u65B0\u589E\uFF1A\u4ECE\u8F93\u5165\u6D41\u8BFB\u53D6\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u5E76\u4FDD\u5B58\u5728byte\u6570\u7EC4\u4E2D\uFF1B \u6B64\u65B9\u6CD5\u4F1A\u4E00\u76F4\u963B\u585E\uFF0C\u76F4\u5230\u8BFB\u53D6\u4E86\u8BF7\u6C42\u7684\u5B57\u8282\u6570\u3001\u68C0\u6D4B\u5230\u6D41\u7ED3\u675F\u6216\u5F15\u53D1\u5F02\u5E38\u4E3A\u6B62\u3002\u6B64\u65B9\u6CD5\u4E0D\u4F1A\u5173\u95ED\u8F93\u5165\u6D41\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readNBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">checkFromIndexSize</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> len<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off <span class="token operator">+</span> n<span class="token punctuation">,</span> len <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            n <span class="token operator">+=</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8DF3\u8FC7\u6307\u5B9A\u4E2A\u6570\u7684\u5B57\u8282\u4E0D\u8BFB\u53D6</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> remaining <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">int</span> nr<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token constant">MAX_SKIP_BUFFER_SIZE</span><span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skipBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>remaining <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nr <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>skipBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            remaining <span class="token operator">-=</span> nr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> n <span class="token operator">-</span> remaining<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8FD4\u56DE\u53EF\u8BFB\u7684\u5B57\u8282\u6570\u91CF</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8BFB\u53D6\u5B8C\uFF0C\u5173\u95ED\u6D41\uFF0C\u91CA\u653E\u8D44\u6E90</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// \u6807\u8BB0\u8BFB\u53D6\u4F4D\u7F6E\uFF0C\u4E0B\u6B21\u8FD8\u53EF\u4EE5\u4ECE\u8FD9\u91CC\u5F00\u59CB\u8BFB\u53D6\uFF0C\u4F7F\u7528\u524D\u8981\u770B\u5F53\u524D\u6D41\u662F\u5426\u652F\u6301\uFF0C\u53EF\u4EE5\u4F7F\u7528 markSupport() \u65B9\u6CD5\u5224\u65AD</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// \u91CD\u7F6E\u8BFB\u53D6\u4F4D\u7F6E\u4E3A\u4E0A\u6B21 mark \u6807\u8BB0\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;mark/reset not supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5224\u65AD\u5F53\u524D\u6D41\u662F\u5426\u652F\u6301\u6807\u8BB0\u6D41\uFF0C\u548C\u4E0A\u9762\u4E24\u4E2A\u65B9\u6CD5\u914D\u5957\u4F7F\u7528\u3002\u9ED8\u8BA4\u662Ffalse\uFF0C\u7531\u5B50\u7C7B\u65B9\u6CD5\u91CD\u5199</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// JDK9\u65B0\u589E\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u5168\u90E8\u5B57\u8282\u5E76\u5199\u5165\u5230\u6307\u5B9A\u7684 OutputStream \u4E2D</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot;out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> transferred <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> read<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>
            transferred <span class="token operator">+=</span> read<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> transferred<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u603B\u7ED3\u4E0BJDK9\u7684\u66F4\u65B0\u70B9</p></blockquote><p>\u7C7B java.io.InputStream \u4E2D\u589E\u52A0\u4E86\u65B0\u7684\u65B9\u6CD5\u6765\u8BFB\u53D6\u548C\u590D\u5236 InputStream \u4E2D\u5305\u542B\u7684\u6570\u636E\u3002</p><ul><li><code>readAllBytes</code>\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u6240\u6709\u5269\u4F59\u5B57\u8282\u3002</li><li><code>readNBytes</code>\uFF1A \u4ECE InputStream \u4E2D\u8BFB\u53D6\u6307\u5B9A\u6570\u91CF\u7684\u5B57\u8282\u5230\u6570\u7EC4\u4E2D\u3002</li><li><code>transferTo</code>\uFF1A\u8BFB\u53D6 InputStream \u4E2D\u7684\u5168\u90E8\u5B57\u8282\u5E76\u5199\u5165\u5230\u6307\u5B9A\u7684 OutputStream \u4E2D \u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInputStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">InputStream</span> inputStream<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CONTENT</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inputStream <span class="token operator">=</span>
            <span class="token class-name">TestInputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputStream<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">CONTENT</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadNBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inputStream<span class="token punctuation">.</span><span class="token function">readNBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTransferTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteArrayOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>inputStream<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">CONTENT</span><span class="token punctuation">,</span> outputStream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>read(byte[], int, int)</code> \u548C <code>readNBytes(byte[], int, int)</code>\u770B\u4F3C\u662F\u5B9E\u73B0\u7684\u76F8\u540C\u529F\u80FD\uFF0C\u4E3A\u4F55\u4F1A\u8BBE\u8BA1readNBytes\u65B9\u6CD5\u5462</strong>\uFF1F</li></ul>`,18),k={href:"https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance",target:"_blank",rel:"noopener noreferrer"},r=t(`<ol><li>read(byte[], int, int)\u662F\u5C1D\u8BD5\u8BFB\u5230\u6700\u591Alen\u4E2Abytes\uFF0C\u4F46\u662F<strong>\u8BFB\u53D6\u5230\u7684\u5185\u5BB9\u957F\u5EA6\u53EF\u80FD\u662F\u5C0F\u4E8Elen</strong>\u7684\u3002</li><li>readNBytes(byte[], int, int) \u4F1A\u4E00\u76F4\uFF08while\u5FAA\u73AF\uFF09\u67E5\u627E\u76F4\u5230stream\u5C3E\u4E3A\u6B62</li></ol><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A\u5982\u679C\u6587\u672C\u5185\u5BB9\u662F<code>12345&lt;end&gt;</code>, read(s,0,10)\u662F\u5141\u8BB8\u8FD4\u56DE<code>123</code>\u7684, \u800CreadNbytes(s,0,10)\u4F1A\u4E00\u76F4\uFF08while\u5FAA\u73AF\uFF09\u67E5\u627E\u76F4\u5230stream\u5C3E\u4E3A\u6B62\uFF0C\u5E76\u8FD4\u56DE<code>12345</code>.</p><blockquote><p>\u8865\u5145\u4E0BJDK11\u4E3A\u4EC0\u4E48\u4F1A\u589E\u52A0nullInputStream\u65B9\u6CD5\u7684\u8BBE\u8BA1\uFF1F\u5373\u7A7A\u5BF9\u8C61\u6A21\u5F0F</p></blockquote><ul><li><strong>\u7A7A\u5BF9\u8C61\u6A21\u5F0F</strong></li></ul><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyParser</span> <span class="token keyword">implements</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Action</span> <span class="token constant">NO_ACTION</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* do nothing */</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">findAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> userInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token comment">/* we can&#39;t find any actions */</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token constant">NO_ACTION</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E\u4FBF<strong>\u53EF\u4EE5\u59CB\u7EC8\u53EF\u4EE5\u8FD9\u4E48\u8C03\u7528\uFF0C\u800C\u4E0D\u7528\u518D\u5224\u65AD\u7A7A\u4E86</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ParserFactory</span><span class="token punctuation">.</span><span class="token function">getParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAction</span><span class="token punctuation">(</span>someInput<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-filterinputstream" tabindex="-1"><a class="header-anchor" href="#_2-2-filterinputstream" aria-hidden="true">#</a> 2.2 FilterInputStream</h3><p>FilterInputStream \u6E90\u7801\u5982\u4E0B</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// \u88AB\u88C5\u9970\u7684inputStream</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">InputStream</span> in<span class="token punctuation">;</span>
    
    <span class="token comment">// \u6784\u9020\u51FD\u6570\uFF0C\u6CE8\u5165\u88AB\u88C5\u9970\u7684inputStream</span>
    <span class="token keyword">protected</span> <span class="token class-name">FilterInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u672C\u8D28\u662F\u8C03\u7528\u88AB\u88C5\u9970\u7684inputStream\u7684\u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        in<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span>readlimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        in<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u4E3A\u4EC0\u4E48\u88AB\u88C5\u9970\u7684inputStream\u662Fvolatile\u7C7B\u578B\u7684</strong>\uFF1F</p>`,12),d={href:"https://pdai.tech/md/java/thread/java-thread-x-key-volatile.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="_2-3-bytearrayinputstream" tabindex="-1"><a class="header-anchor" href="#_2-3-bytearrayinputstream" aria-hidden="true">#</a> 2.3 ByteArrayInputStream</h3><p>ByteArrayInputStream\u6E90\u7801\u5982\u4E0B</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteArrayInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// \u5185\u90E8\u4FDD\u5B58\u7684byte \u6570\u7EC4</span>
    <span class="token keyword">protected</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u8BFB\u53D6\u4E0B\u4E00\u4E2A\u5B57\u8282\u7684\u6570\u7EC4\u4E0B\u6807\uFF0Cbyte[pos]\u5C31\u662Fread\u83B7\u53D6\u7684\u4E0B\u4E2A\u5B57\u8282</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span>
    
    <span class="token comment">// mark\u7684\u6570\u7EC4\u4E0B\u6807\u4F4D\u7F6E</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u4FDD\u5B58\u7684\u6709\u6548byte\u7684\u4E2A\u6570</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token comment">// \u6784\u9020\u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>buf <span class="token operator">=</span> buf<span class="token punctuation">;</span>              
        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    
    <span class="token comment">// \u6784\u9020\u65B9\u6CD5\uFF0C\u5E26offset\u7684</span>
     <span class="token keyword">public</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                
        <span class="token keyword">this</span><span class="token punctuation">.</span>buf <span class="token operator">=</span> buf<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> offset<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> length<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mark <span class="token operator">=</span> offset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u4ECE\u6D41\u4E2D\u8BFB\u53D6\u4E0B\u4E00\u4E2A\u5B57\u8282\uFF0C\u6CA1\u6709\u8BFB\u53D6\u5230\u8FD4\u56DE -1</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u4ECE\u7B2C off \u4F4D\u7F6E\u8BFB\u53D6&lt;b&gt;\u6700\u591A(\u5B9E\u9645\u53EF\u80FD\u5C0F\u4E8E)&lt;/b&gt; len \u957F\u5EA6\u5B57\u8282\u7684\u6570\u636E\u653E\u5230 byte \u6570\u7EC4\u4E2D\uFF0C\u6D41\u662F\u4EE5 -1 \u6765\u5224\u65AD\u662F\u5426\u8BFB\u53D6\u7ED3\u675F\u7684</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8FB9\u754C\u68C0\u67E5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> avail <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> avail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            len <span class="token operator">=</span> avail<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u4ECEbuf\u62F7\u8D1D\u5230byte \u6570\u7EC4b\u4E2D</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pos <span class="token operator">+=</span> len<span class="token punctuation">;</span>
        <span class="token keyword">return</span> len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8DF3\u8FC7\u6307\u5B9A\u4E2A\u6570\u7684\u5B57\u8282\u4E0D\u8BFB\u53D6</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> k <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            k <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        pos <span class="token operator">+=</span> k<span class="token punctuation">;</span>
        <span class="token keyword">return</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8FD8\u6709\u7A0D\u7A0Dbyte\u5728buffer\u4E2D\u672A\u8BFB\u53D6\uFF0C\u5373\u603B\u7684count \u51CF\u53BB \u5F53\u524Dbyte\u4F4D\u7F6E</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u652F\u6301mark\u6240\u4EE5\u8FD4\u56DEtrue</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  

    <span class="token comment">// \u5728\u6D41\u4E2D\u5F53\u524D\u4F4D\u7F6Emark, readAheadLimit\u53C2\u6570\u672A\u4F7F\u7528    </span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readAheadLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            
        mark <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u91CD\u7F6E\u6D41\uFF0C\u5373\u56DE\u5230mark\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pos <span class="token operator">=</span> mark<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5173\u95EDByteArrayInputStream\u4E0D\u4F1A\u4EA7\u751F\u4EFB\u4F55\u52A8\u4F5C</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> 

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-bufferedinputstream" tabindex="-1"><a class="header-anchor" href="#_2-4-bufferedinputstream" aria-hidden="true">#</a> 2.4 BufferedInputStream</h3><p>BufferedInputStream\u6E90\u7801\u5982\u4E0B</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u9ED8\u8BA4\u7684buffer\u5927\u5C0F</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5206\u914D\u7684\u6700\u5927\u6570\u7EC4\u5927\u5C0F\u3002</span>
    <span class="token comment">// \u7531\u4E8E\u4E00\u4E9BVM\u5728\u6570\u7EC4\u4E2D\u4FDD\u7559\u4E00\u4E9B\u5934\u5B57\uFF0C\u6240\u4EE5\u5C1D\u8BD5\u5206\u914D\u8F83\u5927\u7684\u9635\u5217\u53EF\u80FD\u4F1A\u5BFC\u81F4OutOfMemoryError\uFF08\u8BF7\u6C42\u7684\u9635\u5217\u5927\u5C0F\u8D85\u8FC7VM\u9650\u5236\uFF09</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5185\u90E8\u4FDD\u5B58\u5728byte \u6570\u7EC4\u4E2D</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5173\u95ED\u6D41\u7684\u65B9\u6CD5\u53EF\u80FD\u662F\u5F02\u6B65\u7684\uFF0C\u6240\u4EE5\u4F7F\u7528\u539F\u5B50AtomicReferenceFieldUpdater\u63D0\u4F9BCAS\u65E0\u9501\u65B9\u5F0F\uFF08\u53EF\u4EE5\u89E3\u51B3CAS\u7684ABA\u95EE\u9898\uFF09\u6765\u4FDD\u8BC1</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token operator">&lt;</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> bufUpdater <span class="token operator">=</span>
        <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;buf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u6709\u6548byte\u7684\u5927\u5C0F</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token comment">// \u5F53\u524D\u4F4D\u7F6E</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span>

    <span class="token comment">// \u6700\u540E\u4E00\u6B21\uFF0C\u8C03\u7528mark\u65B9\u6CD5\uFF0C\u6807\u8BB0\u7684\u4F4D\u7F6E</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> markpos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * \u8BE5\u53D8\u91CF\u60DF\u4E00\u5165\u53E3\u5C31\u662Fmark(int readLimit)\uFF0C\u597D\u6BD4\u8C03\u7528\u65B9\u6CD5mark(1024)\uFF0C\u90A3\u4E48\u540E\u9762\u8BFB\u53D6\u7684\u6570\u636E\u82E5\u662F
     * \u8D85\u8FC7\u4E861024\u5B57\u8282\uFF0C\u90A3\u4E48\u8FD9\u6B21mark\u5C31\u4E3A\u65E0\u6548\u6807\u8BB0\uFF0C\u5B50\u7C7B\u80FD\u591F\u9009\u62E9\u629B\u5F03\u8BE5mark\u6807\u8BB0\uFF0C\u4ECE\u5934\u5F00\u59CB\u3002\u4E0D\u8FC7\u5177\u4F53\u5B9E\u73B0
     * \u8DDF\u5177\u4F53\u7684\u5B50\u7C7B\u6709\u5173\uFF0C\u5728BufferedInputStream\u4E2D\uFF0C\u4F1A\u629B\u5F03mark\u6807\u8BB0\uFF0C\u4ECE\u65B0\u5C06markpos\u8D4B\u503C\u4E3A-1
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> marklimit<span class="token punctuation">;</span>

    <span class="token comment">// \u83B7\u53D6\u88AB\u88C5\u9970\u7684stream</span>
    <span class="token keyword">private</span> <span class="token class-name">InputStream</span> <span class="token function">getInIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> in<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Stream closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> input<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u83B7\u53D6\u5B9E\u9645\u5185\u90E8\u7684buffer\u6570\u7EC4</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> buf<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Stream closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6784\u9020\u51FD\u6570\uFF0Cbuffer\u662F8kb</span>
    <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6784\u9020\u51FD\u6570\uFF0C\u6307\u5B9Abuffer\u5927\u5C0F</span>
    <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Buffer size &lt;= 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * \u7528\u66F4\u591A\u7684\u6570\u636E\u586B\u5145\u7F13\u51B2\u533A,\u8003\u8651\u5230shuffling\u548C\u5176\u4ED6\u5904\u7406\u6807\u8BB0\u7684\u6280\u5DE7\uFF0C
     * \u5047\u8BBE\u5B83\u662F\u7531\u540C\u6B65\u65B9\u6CD5\u8C03\u7528\u7684\u3002\u8BE5\u65B9\u6CD5\u8FD8\u5047\u8BBE\u6240\u6709\u6570\u636E\u5DF2\u7ECF\u88AB\u8BFB\u5165\uFF0C\u56E0\u6B64pos &gt;count\u3002
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    	<span class="token comment">// \u5F97\u5230\u5185\u90E8\u7F13\u51B2\u533Abuffer</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6CA1\u6709mark\u7684\u60C5\u51B5\u4E0B\uFF0C pos\u4E3A0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>markpos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">/* no mark: throw away the buffer */</span>
        <span class="token comment">// pos &gt;= buffer.length  buffer\u5DF2\u7ECF\u88AB\u8BFB\u53D6\u5B8C\u4E86 </span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">/* no room left in buffer */</span>
        	<span class="token comment">// markpos &gt; 0  \u6709\u6807\u8BB0\uFF0C\u6807\u8BB0\u5904\u5728\u7F13\u5B58\u4E2D\u95F4</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>markpos <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* can throw away early part of the buffer */</span>
            	<span class="token comment">// \u628Abuffer\u4E2D\uFF0Cmarkpos\u5230pos\u7684\u90E8\u5206\u79FB\u52A8\u52300-sz\u5904\uFF0Cpos\u8BBE\u7F6E\u4E3Asz\uFF0Cmarkpos\u4E3A0</span>
                <span class="token keyword">int</span> sz <span class="token operator">=</span> pos <span class="token operator">-</span> markpos<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> markpos<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                pos <span class="token operator">=</span> sz<span class="token punctuation">;</span>
                markpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token comment">// markpos\u5DF2\u7ECF\u4E3A0\u4E86\uFF0Cmarklimit\u6BD4buffer.length\u5C0F\uFF0C\u518D\u8BFB\u53D6buffer\u5DF2\u7ECF\u6CA1\u6709\u5730\u65B9\u4E86</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> marklimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            	<span class="token comment">// \u6E05\u7A7A\u7F13\u5B58\uFF0C\u6E05\u7A7A\u6807\u8BB0\uFF0Cmarkpos\u4E3A-1\uFF0Cpos\u4E3A0</span>
                markpos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">/* buffer got too big, invalidate mark */</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">/* drop buffer contents */</span>
                <span class="token comment">// markpos\u5DF2\u7ECF\u4E3A0\u4E86\uFF0Cmarklimit\u6BD4buffer.length\u5927\uFF0C\u800Cbuffer.length\u5DF2\u7ECF\u6700\u5927\u4E86\uFF0C\u4E0D\u80FD\u6269\u5BB9</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token constant">MAX_BUFFER_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token string">&quot;Required array size too large&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token comment">// markpos\u5DF2\u7ECF\u4E3A0\u4E86\uFF0Cmarklimit\u6BD4buffer.length\u5927</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">/* grow buffer */</span>
            	<span class="token comment">// \u5EFA\u7ACB\u4E00\u4E2A\u957F\u5EA6\u4E3Amin(2*pos,marklimit,MAX_BUFFER_SIZE),\u7684\u7F13\u5B58\u6570\u7EC4\uFF0C\u7136\u540E\u628A\u539F\u67650-pos\u79FB\u52A8\u5230\u65B0\u6570\u7EC4\u76840-pos\u5904</span>
                <span class="token keyword">int</span> nsz <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> <span class="token constant">MAX_BUFFER_SIZE</span> <span class="token operator">-</span> pos<span class="token punctuation">)</span> <span class="token operator">?</span>
                        pos <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token constant">MAX_BUFFER_SIZE</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nsz <span class="token operator">&gt;</span> marklimit<span class="token punctuation">)</span>
                    nsz <span class="token operator">=</span> marklimit<span class="token punctuation">;</span>
                <span class="token keyword">byte</span> nbuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>nsz<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u7528bufUpdater\u66FF\u6362buffer</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bufUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> nbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Can&#39;t replace buf if there was an async close.</span>
                    <span class="token comment">// Note: This would need to be changed if fill()</span>
                    <span class="token comment">// is ever made accessible to multiple threads.</span>
                    <span class="token comment">// But for now, the only way CAS can fail is via close.</span>
                    <span class="token comment">// assert buf == null;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Stream closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                buffer <span class="token operator">=</span> nbuf<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token comment">// \u5F53\u524D\u8BFB\u53D6\u4E0A\u9650count\u4E3Apos</span>
        count <span class="token operator">=</span> pos<span class="token punctuation">;</span>
        <span class="token comment">// \u4ECE\u5185\u90E8\u7684\u8F93\u5165\u6D41\uFF0C\u8BFB\u53D6pos\u5230buffer.length\u90E8\u5206\uFF0C\u8BFB\u53D6\u7684\u5B57\u8282\u6570\u52A0\u5230count</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">getInIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length <span class="token operator">-</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            count <span class="token operator">=</span> n <span class="token operator">+</span> pos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8BFB\u53D6byte</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BF4\u660E\u5F53\u524Dbuf[]\u6570\u7EC4\u5927\u5C0F\u4E0D\u591F\u4E86\uFF0C\u987B\u8981fill()</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8BF4\u660E\u6CA1\u6709\u8BFB\u53D6\u5230\u4EFB\u4F55\u6570\u636E</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Read characters into a portion of an array, reading from the underlying
     * stream at most once if necessary.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">read1</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> avail <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5F53\u5199\u5165\u6307\u5B9A\u6570\u7EC4b\u7684\u957F\u5EA6\u5927\u5C0F\u8D85\u8FC7BufferedInputStream\u4E2D\u6838\u5FC3\u7F13\u5B58\u6570\u7EC4buf[]\u7684\u5927\u5C0F\u800C\u4E14 markpos &lt; 0\uFF0C\u90A3\u4E48\u5C31\u76F4\u63A5\u4ECE\u6570\u636E\u6D41\u4E2D\u8BFB\u53D6\u6570\u636E\u7ED9b\u6570\u7EC4\uFF0C\u800C\u4E0D\u7ECF\u8FC7buf[]\u7F13\u5B58\u6570\u7EC4\uFF0C\u907F\u514Dbuf[]\u6570\u7EC4\u6025\u5267\u589E\u5927</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;=</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> markpos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">getInIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            avail <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">?</span> avail <span class="token operator">:</span> len<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pos <span class="token operator">+=</span> cnt<span class="token punctuation">;</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8BFB\u53D6\u5230byte\u6570\u7EC4b\u4E2D</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
    <span class="token punctuation">{</span>
        <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Check for closed stream</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>off <span class="token operator">|</span> len <span class="token operator">|</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> nread <span class="token operator">=</span> <span class="token function">read1</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off <span class="token operator">+</span> n<span class="token punctuation">,</span> len <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> nread <span class="token operator">:</span> n<span class="token punctuation">;</span>
            n <span class="token operator">+=</span> nread<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> len<span class="token punctuation">)</span>
                <span class="token keyword">return</span> n<span class="token punctuation">;</span>
            <span class="token comment">// if not closed but no bytes available, return</span>
            <span class="token class-name">InputStream</span> input <span class="token operator">=</span> in<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8DF3\u8FC7n\u4E2A</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Check for closed stream</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> avail <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If no mark position set then don&#39;t keep in buffer</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>markpos <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">getInIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Fill in buffer to save bytes for reset</span>
            <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            avail <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> skipped <span class="token operator">=</span> <span class="token punctuation">(</span>avail <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> avail <span class="token operator">:</span> n<span class="token punctuation">;</span>
        pos <span class="token operator">+=</span> skipped<span class="token punctuation">;</span>
        <span class="token keyword">return</span> skipped<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// buf[]\u6570\u7EC4\u5269\u4F59\u5B57\u8282\u6570+\u8F93\u5165\u6D41\u4E2D\u5269\u4F59\u5B57\u8282\u6570</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> count <span class="token operator">-</span> pos<span class="token punctuation">;</span>
        <span class="token keyword">int</span> avail <span class="token operator">=</span> <span class="token function">getInIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> avail<span class="token punctuation">)</span>
                    <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>
                    <span class="token operator">:</span> n <span class="token operator">+</span> avail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    
    <span class="token comment">// \u6807\u8BB0\u4F4D\u7F6E\uFF0Cmarklimit\u53EA\u6709\u5728\u8FD9\u91CC\u624D\u53EF\u4EE5\u88AB\u8D4B\u503C\uFF0Creadlimit\u8868\u793Amark()\u65B9\u6CD5\u6267\u884C\u540E\uFF0C\u6700\u591A\u53EF\u4EE5\u4ECE\u6D41\u4E2D\u8BFB\u53D6\u7684\u6570\u636E</span>
    <span class="token comment">// \u82E5\u662F\u8D85\u8FC7\u8BE5\u5B57\u8282\u5927\u5C0F\uFF0C\u90A3\u4E48\u5728fill()\u7684\u65F6\u5019\uFF0C\u5C31\u4F1A\u8BA4\u4E3A\u6B64mark()\u6807\u8BB0\u65E0\u6548\uFF0C\u4ECE\u65B0\u5C06 markpos = -1\uFF0Cpos = 0</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token keyword">int</span> readlimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        marklimit <span class="token operator">=</span> readlimit<span class="token punctuation">;</span>
        markpos <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u91CD\u7F6E\u4F4D\u7F6E</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5982\u679C\u5DF2\u7ECFclose, \u5219\u76F4\u63A5\u62A5\u9519</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>markpos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Resetting to invalid mark&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pos <span class="token operator">=</span> markpos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u652F\u6301mark, \u6240\u4EE5\u8FD4\u56DEtrue</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">markSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u901A\u8FC7AtomicReferenceFieldUpdater\u7684CAS\u65E0\u9501\u65B9\u5F0Fclose</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>buffer <span class="token operator">=</span> buf<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">InputStream</span> input <span class="token operator">=</span> in<span class="token punctuation">;</span>
                in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// Else retry in case a new buf was CASed in fill()</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AtomicReferenceFieldUpdater\u5177\u4F53\u53EF\u4EE5\u53C2\u8003\uFF1A<a href="">JUC\u539F\u5B50\u7C7B: CAS, Unsafe\u548C\u539F\u5B50\u7C7B\u8BE6\u89E3</a></p><h2 id="\u53C2\u8003\u6587\u7AE0" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u6587\u7AE0" aria-hidden="true">#</a> \u53C2\u8003\u6587\u7AE0</h2>`,8),m={href:"https://pdai.tech/md/java/io/java-io-basic-code-inputstream.html",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"Java IO - \u6E90\u7801: InputStream",-1);function y(w,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("\u8FD9\u4E2A\u95EE\u9898\u53EF\u4EE5\u53C2\u770B"),n("a",k,[s("\u8FD9\u91CC"),p(a)])]),r,n("p",null,[s("\u8BF7\u53C2\u770B\uFF1A "),n("a",d,[s("\u5173\u952E\u5B57: volatile\u8BE6\u89E3"),p(a)])]),v,n("p",null,[n("a",m,[b,p(a)])])])}const I=e(i,[["render",y],["__file","java-io-basic-code-inputstream.html.vue"]]);export{I as default};
