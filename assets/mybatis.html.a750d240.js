import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as s,b as n,d as t,e as l,r as c}from"./app.c2a49a29.js";const i={},r={href:"https://mp.weixin.qq.com/s/en2RgcVx52Ql3tYGLfv3Kw",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/O_5Id2o9IP4loPazJuiHng",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>大家好，我是musk呀，面试逆袭系列继续，这节我们的主角是MyBatis，作为当前国内最流行的ORM框架，是我们这些crud选手最趁手的工具，赶紧来看看面试都会问哪些问题吧。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="_1-说说什么是mybatis" tabindex="-1"><a class="header-anchor" href="#_1-说说什么是mybatis" aria-hidden="true">#</a> 1. 说说什么是MyBatis?</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-41c60cf7-6551-4720-8735-290a083640a5.png" alt="MyBatis logo" loading="lazy"></p><p><strong>先吹一下</strong>：</p><ul><li>Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。</li><li>MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li></ul><p><strong>再说一下缺点</strong></p><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><blockquote><p><strong>ORM是什么?</strong></p></blockquote><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-ea212850-56e0-4d12-98fb-03bb40007f44.png" alt="ORM简单示意图" loading="lazy"></p><ul><li>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单来说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</li></ul><blockquote><p><strong>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</strong></p></blockquote><ul><li>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。</li><li>而Mybatis在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，被称之为半自动ORM映射工具。</li></ul><blockquote><p><strong>JDBC编程有哪些不足之处，MyBatis是如何解决的？</strong></p></blockquote><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-f8b181a3-ad40-4381-98ba-351668579bfb.png" alt="JDBC编程的不足" loading="lazy"></p><ul><li>1、数据连接创建、释放频繁造成系统资源浪费从而影响系统性能，在mybatis-config.xml中配置数据链接池，使用连接池统一管理数据库连接。</li><li>2、sql语句写在代码中造成代码不易维护，将sql语句配置在XXXXmapper.xml文件中与java代码分离。</li><li>3、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。Mybatis自动将java对象映射至sql语句。</li><li>4、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。Mybatis自动将sql执行结果映射至java对象。</li></ul><h3 id="_2-hibernate-和-mybatis-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-hibernate-和-mybatis-有什么区别" aria-hidden="true">#</a> 2. Hibernate 和 MyBatis 有什么区别？</h3><p><strong>相同点</strong></p><ul><li>都是对jdbc的封装，都是应用于持久层的框架。</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-4964e454-7c80-4768-bf0e-d0bf417353ef.gif" alt="这还用说？" loading="lazy"></p><p><strong>不同点</strong></p><p>1）映射关系</p><ul><li>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单</li><li>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂</li></ul><p>2）<strong>SQL优化和移植性</strong></p><ul><li>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。</li><li>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</li></ul><p>3）<strong>MyBatis和Hibernate的适用场景不同</strong></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-d1c707f7-0bd0-415c-b190-4757792c072b.png" alt="Mybatis vs Hibernate" loading="lazy"></p><ul><li>Hibernate 是标准的ORM框架，SQL编写量较少，但不够灵活，适合于需求相对稳定，中小型的软件项目，比如：办公自动化系统</li><li>MyBatis 是半ORM框架，需要编写较多SQL，但是比较灵活，适合于需求变化频繁，快速迭代的项目，比如：电商网站</li></ul><h3 id="_3-mybatis使用过程-生命周期" tabindex="-1"><a class="header-anchor" href="#_3-mybatis使用过程-生命周期" aria-hidden="true">#</a> 3. MyBatis使用过程？生命周期？</h3><p>MyBatis基本使用的过程大概可以分为这么几步：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-47bab2e8-5c08-4f61-9c0c-dddfe09fb2b5.png" alt="Mybatis基本使用步骤" loading="lazy"></p><ul><li>1）创建SqlSessionFactory</li></ul><p>可以从配置或者直接编码来创建SqlSessionFactory</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2）通过SqlSessionFactory创建SqlSession</li></ul><p>SqlSession（会话）可以理解为程序和数据库之间的桥梁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>3）通过sqlsession执行数据库操作</li></ul><p>可以通过 SqlSession 实例来直接执行已映射的 SQL 语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Blog</span> blog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更常用的方式是先获取Mapper(映射)，然后再执行SQL语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Blog</span> blog <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectBlog</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>4）调用session.commit()提交事务</li></ul><p>如果是更新、删除语句，我们还需要提交一下事务。</p><ul><li>5）调用session.close()关闭会话</li></ul><p>最后一定要记得关闭会话。</p><blockquote><p><strong>MyBatis生命周期？</strong></p></blockquote><p>上面提到了几个MyBatis的组件，一般说的MyBatis生命周期就是这些组件的生命周期。</p><ul><li>SqlSessionFactoryBuilder</li></ul><p>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的生命周期只存在于方法的内部。</p><ul><li>SqlSessionFactory</li></ul><p>SqlSessionFactory 是用来创建SqlSession的，相当于一个数据库连接池，每次创建SqlSessionFactory都会使用数据库资源，多次创建和销毁是对资源的浪费。所以SqlSessionFactory是应用级的生命周期，而且应该是单例的。</p><ul><li>SqlSession</li></ul><p>SqlSession相当于JDBC中的Connection，SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的生命周期是一次请求或一个方法。</p><ul><li>Mapper</li></ul><p>映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的，它的生命周期在sqlsession事务方法之内，一般会控制在方法级。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-79f75371-14c9-4ac9-9d3b-5d80b22705a1.png" alt="MyBatis主要组件生命周期" loading="lazy"></p><p>当然，万物皆可集成Spring，MyBatis通常也是和Spring集成使用，Spring可以帮助我们创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到我们的 bean 中，我们不需要关心它们的创建过程和生命周期，那就是另外的故事了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-2c55dfeb-bea1-466f-9b1e-d8c001856aa5.png" alt="这个应该会" loading="lazy"></p><h3 id="_4-在mapper中如何传递多个参数" tabindex="-1"><a class="header-anchor" href="#_4-在mapper中如何传递多个参数" aria-hidden="true">#</a> 4. 在mapper中如何传递多个参数？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-dd039a20-ae4f-4f6a-b497-01937073198b.png" alt="mapper传递多个参数方法" loading="lazy"></p><p><strong>方法1：顺序传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from user
    where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\\#{}</code>里面的数字代表传入参数的顺序。</li><li>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</li></ul><p><strong>方法2：@Param注解传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;deptId&quot;</span><span class="token punctuation">)</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from user
    where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\\#{}</code>里面的名称对应的是注解@Param括号里面修饰的名称。</li><li>这种方法在参数不多的情况还是比较直观的，（推荐使用）。</li></ul><p><strong>方法3：Map传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;java.util.Map&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from user
    where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\\#{}</code>里面的名称对应的是Map里面的key名称。</li><li>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</li></ul><p><strong>方法4：Java Bean传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.User&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from user
    where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>\\#{}</code>里面的名称对应的是User类里面的成员属性。</li><li>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。（推荐使用）。</li></ul><h3 id="_5-实体类属性名和表中字段名不一样-怎么办" tabindex="-1"><a class="header-anchor" href="#_5-实体类属性名和表中字段名不一样-怎么办" aria-hidden="true">#</a> 5. 实体类属性名和表中字段名不一样 ，怎么办?</h3><ul><li>第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getOrder&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;int&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.Order&quot;</span><span class="token operator">&gt;</span>
       select order_id id<span class="token punctuation">,</span> order_no orderno <span class="token punctuation">,</span>order_price price form orders where order_id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第2种： 通过resultMap 中的&lt;result&gt;来映射字段名和实体类属性名的一一对应的关系。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getOrder&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;int&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;orderResultMap&quot;</span><span class="token operator">&gt;</span>
  select <span class="token operator">*</span> from orders where order_id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.Order&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;orderResultMap&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span>–用id属性来映射主键字段–<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">&quot;id&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_id&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span>–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>result property <span class="token operator">=</span><span class="token string">&quot;orderno&quot;</span> column <span class="token operator">=</span><span class="token string">&quot;order_no&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">&quot;price&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_price&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>reslutMap<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-mybatis是否可以映射enum枚举类" tabindex="-1"><a class="header-anchor" href="#_6-mybatis是否可以映射enum枚举类" aria-hidden="true">#</a> 6. Mybatis是否可以映射Enum枚举类？</h3><ul><li>Mybatis当然可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</li><li>TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</li></ul><h3 id="_7-和-的区别" tabindex="-1"><a class="header-anchor" href="#_7-和-的区别" aria-hidden="true">#</a> 7. <code>#{}和\${}的区别</code>?</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-8d2d5dc1-8f92-456d-b858-7d3a7888f2eb.png" alt="" loading="lazy"></p><ul><li><code>#{}</code>是占位符，预编译处理；<code>\${}</code>是拼接符，字符串替换，没有预编译处理。</li><li>Mybatis在处理<code>#{}</code>时，<code>#{}</code>传入参数是以字符串传入，会将SQL中的<code>#{}</code>替换为?号，调用PreparedStatement的set方法来赋值。</li><li><code>#{}</code> 可以有效的防止SQL注入，提高系统安全性；<code>\${}</code> 不能防止SQL 注入</li><li><code>#{}</code> 的变量替换是在DBMS 中；<code>\${}</code> 的变量替换是在 DBMS 外</li></ul><h3 id="_8-模糊查询like语句该怎么写" tabindex="-1"><a class="header-anchor" href="#_8-模糊查询like语句该怎么写" aria-hidden="true">#</a> 8. 模糊查询like语句该怎么写?</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-e5dde8ba-7808-410b-986a-2fc15ba55e21.png" alt="concat拼接like" loading="lazy"></p><ul><li>1 ’<code>%\${question}%</code>’ 可能引起SQL注入，不推荐</li><li>2 <code>&quot;%&quot;#{question}&quot;%&quot;</code> 注意：因为<code>#{…}</code>解析成sql语句时候，会在变量外侧自动加单引号’ &#39;，所以这里 % 需要使用双引号&quot; &quot;，不能使用单引号 ’ &#39;，不然会查不到任何结果。</li><li>3 <code>CONCAT(’%’,#{question},’%’)</code> 使用CONCAT()函数，（推荐✨）</li><li>4 使用bind标签（不推荐）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;listUserLikeUsername&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.User&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>bind name<span class="token operator">=</span><span class="token string">&quot;pattern&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;&#39;%&#39; + username + &#39;%&#39;&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>select id<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password from person where username <span class="token constant">LIKE</span> #<span class="token punctuation">{</span>pattern<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-mybatis能执行一对一、一对多的关联查询吗" tabindex="-1"><a class="header-anchor" href="#_9-mybatis能执行一对一、一对多的关联查询吗" aria-hidden="true">#</a> 9. Mybatis能执行一对一、一对多的关联查询吗？</h3><p>当然可以，不止支持一对一、一对多的关联查询，还支持多对多、多对一的关联查询。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-aa1e0cc1-1a5f-4efe-9aed-3081b15c9a2a.png" alt="MyBatis级联" loading="lazy"></p><ul><li><strong>一对一&lt;association&gt;</strong></li></ul><p>比如订单和支付是一对一的关系，这种关联的实现：</p><p>实体类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderDesc<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 支付对象
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Pay</span> pay<span class="token punctuation">;</span>
    <span class="token comment">//……</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果映射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 订单resultMap <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">&quot;peopleResultMap&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;cn.fighter3.entity.Order&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">&quot;orderId&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_id&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">&quot;orderDesc&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_desc&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>一对一结果映射<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">&quot;pay&quot;</span> javaType<span class="token operator">=</span><span class="token string">&quot;cn.fighter3.entity.Pay&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">&quot;payId&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;pay_id&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;account&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;account&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询就是普通的关联查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getTeacher&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;getTeacherMap&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;int&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from order o 
     left join pay p on o<span class="token punctuation">.</span>order_id<span class="token operator">=</span>p<span class="token punctuation">.</span>order_id
    where  o<span class="token punctuation">.</span>order_id<span class="token operator">=</span>#<span class="token punctuation">{</span>orderId<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>一对多<code>&lt;collection&gt;</code></strong></li></ul><p>比如商品分类和商品，是一对多的关系。</p><ul><li>实体类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> categoryId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
    * 商品列表
    **/</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">;</span>
    <span class="token comment">//……</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果映射</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">&quot;Category&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;categoryBean&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">&quot;categoryId&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;category_id&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;categoryName&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;category_name&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一对多的关系 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> property<span class="token operator">:</span> 指的是集合属性的值<span class="token punctuation">,</span> ofType：指的是集合中元素的类型 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">&quot;products&quot;</span> ofType<span class="token operator">=</span><span class="token string">&quot;Product&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">&quot;product_id&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;productId&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;productName&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;productName&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">&quot;price&quot;</span> property<span class="token operator">=</span><span class="token string">&quot;price&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询</li></ul><p>查询就是一个普通的关联查询</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关联查询分类和产品表 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;listCategory&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;categoryBean&quot;</span><span class="token operator">&gt;</span>
    select c<span class="token punctuation">.</span>*<span class="token punctuation">,</span> p<span class="token punctuation">.</span>* from category_ c left join product_ p on c<span class="token punctuation">.</span>id <span class="token operator">=</span> p<span class="token punctuation">.</span>cid
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 那么多对一、多对多怎么实现呢？还是利用&lt;association&gt;和&lt;collection&gt;，篇幅所限，这里就不展开了。</p><h3 id="_10-mybatis是否支持延迟加载-原理" tabindex="-1"><a class="header-anchor" href="#_10-mybatis是否支持延迟加载-原理" aria-hidden="true">#</a> 10. Mybatis是否支持延迟加载？原理？</h3><ul><li>Mybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</li><li>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</li><li>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</li></ul><h3 id="_11-如何获取生成的主键" tabindex="-1"><a class="header-anchor" href="#_11-如何获取生成的主键" aria-hidden="true">#</a> 11. 如何获取生成的主键?</h3><ul><li>新增标签中添加：keyProperty=&quot; ID &quot; 即可</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;insert&quot;</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> keyProperty<span class="token operator">=</span><span class="token string">&quot;userId&quot;</span> <span class="token operator">&gt;</span>
    insert into <span class="token function">user</span><span class="token punctuation">(</span> 
    user_name<span class="token punctuation">,</span> user_password<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span> 
    <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>userName<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>userPassword<span class="token punctuation">}</span> <span class="token punctuation">,</span> #<span class="token punctuation">{</span>createTime<span class="token punctuation">,</span> jdbcType<span class="token operator">=</span> <span class="token constant">TIMESTAMP</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这时候就可以完成回填主键</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>getId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-mybatis支持动态sql吗" tabindex="-1"><a class="header-anchor" href="#_12-mybatis支持动态sql吗" aria-hidden="true">#</a> 12. MyBatis支持动态SQL吗？</h3><p>MyBatis中有一些支持动态SQL的标签，它们的原理是使用OGNL从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，以此来完成动态SQL的功能。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-f52c027d-25a5-4bd9-b5d3-1421655546a5.png" alt="MyBatis" loading="lazy"></p><ul><li>if</li></ul><p>根据条件来组成where子句</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;findActiveBlogWithTitleLike&quot;</span>
   resultType<span class="token operator">=</span><span class="token string">&quot;Blog&quot;</span><span class="token operator">&gt;</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token constant">BLOG</span>
<span class="token class-name">WHERE</span> state <span class="token operator">=</span> ‘<span class="token constant">ACTIVE</span>’
<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;title != null&quot;</span><span class="token operator">&gt;</span>
  <span class="token constant">AND</span> title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>choose (when, otherwise)</li></ul><p>这个和Java 中的 switch 语句有点像</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;findActiveBlogLike&quot;</span>
   resultType<span class="token operator">=</span><span class="token string">&quot;Blog&quot;</span><span class="token operator">&gt;</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token constant">BLOG</span> <span class="token class-name">WHERE</span> state <span class="token operator">=</span> ‘<span class="token constant">ACTIVE</span>’
<span class="token generics"><span class="token punctuation">&lt;</span>choose<span class="token punctuation">&gt;</span></span>
  <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">&quot;title != null&quot;</span><span class="token operator">&gt;</span>
    <span class="token constant">AND</span> title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>when<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">&quot;author != null and author.name != null&quot;</span><span class="token operator">&gt;</span>
    <span class="token constant">AND</span> author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>when<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>otherwise<span class="token punctuation">&gt;</span></span>
    <span class="token class-name">AND</span> featured <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>otherwise<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>choose<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>trim (where, set)</p></li><li><p>&lt;where&gt;可以用在所有的查询条件都是动态的情况</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;findActiveBlogLike&quot;</span>
   resultType<span class="token operator">=</span><span class="token string">&quot;Blog&quot;</span><span class="token operator">&gt;</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token constant">BLOG</span>
<span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">&gt;</span></span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;state != null&quot;</span><span class="token operator">&gt;</span>
       state <span class="token operator">=</span> #<span class="token punctuation">{</span>state<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;title != null&quot;</span><span class="token operator">&gt;</span>
      <span class="token constant">AND</span> title like #<span class="token punctuation">{</span>title<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;author != null and author.name != null&quot;</span><span class="token operator">&gt;</span>
      <span class="token constant">AND</span> author_name like #<span class="token punctuation">{</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&lt;set&gt; 可以用在动态更新的时候</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">&quot;updateAuthorIfNecessary&quot;</span><span class="token operator">&gt;</span>
  update <span class="token class-name">Author</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>set<span class="token punctuation">&gt;</span></span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;username != null&quot;</span><span class="token operator">&gt;</span>username<span class="token operator">=</span>#<span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;password != null&quot;</span><span class="token operator">&gt;</span>password<span class="token operator">=</span>#<span class="token punctuation">{</span>password<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;email != null&quot;</span><span class="token operator">&gt;</span>email<span class="token operator">=</span>#<span class="token punctuation">{</span>email<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;bio != null&quot;</span><span class="token operator">&gt;</span>bio<span class="token operator">=</span>#<span class="token punctuation">{</span>bio<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">&gt;</span>
  where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>foreach</p><p>看到名字就知道了，这个是用来循环的，可以对集合进行遍历</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectPostIn&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;domain.blog.Post&quot;</span><span class="token operator">&gt;</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span>
<span class="token constant">FROM</span> <span class="token constant">POST</span> <span class="token class-name">P</span>
<span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">&gt;</span></span>
  <span class="token operator">&lt;</span>foreach item<span class="token operator">=</span><span class="token string">&quot;item&quot;</span> index<span class="token operator">=</span><span class="token string">&quot;index&quot;</span> collection<span class="token operator">=</span><span class="token string">&quot;list&quot;</span>
      <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">&quot;ID in (&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span> close<span class="token operator">=</span><span class="token string">&quot;)&quot;</span> nullable<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>
        #<span class="token punctuation">{</span>item<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-mybatis如何执行批量操作" tabindex="-1"><a class="header-anchor" href="#_13-mybatis如何执行批量操作" aria-hidden="true">#</a> 13. MyBatis如何执行批量操作？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-24225f07-fbe6-40c8-a63b-a94983f9107a.png" alt="MyBatis批量操作" loading="lazy"></p><p><strong>第一种方法：使用foreach标签</strong></p><p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。</p><ul><li>item   表示集合中每一个元素进行迭代时的别名，随便起的变量名；</li><li>index   指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</li><li>open   表示该语句以什么开始，常用“(”；</li><li>separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</li><li>close   表示以什么结束，常用“)”。</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有以下3种情况：</p><ol><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</li></ol><p>看看批量保存的两种用法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">MySQL</span>下批量保存，可以foreach遍历 mysql支持<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span>语法 <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token comment">//推荐使用</span>
<span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;addEmpsBatch&quot;</span><span class="token operator">&gt;</span>
    <span class="token constant">INSERT</span> <span class="token class-name">INTO</span> <span class="token function">emp</span><span class="token punctuation">(</span>ename<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>email<span class="token punctuation">,</span>did<span class="token punctuation">)</span>
    <span class="token constant">VALUES</span>
    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">&quot;emps&quot;</span> item<span class="token operator">=</span><span class="token string">&quot;emp&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token operator">&gt;</span>
        <span class="token punctuation">(</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>eName<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这种方式需要数据库连接属性allowMutiQueries<span class="token operator">=</span><span class="token boolean">true</span>的支持
 如jdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mybatis<span class="token operator">?</span>allowMultiQueries<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  
<span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;addEmpsBatch&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">&quot;emps&quot;</span> item<span class="token operator">=</span><span class="token string">&quot;emp&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;;&quot;</span><span class="token operator">&gt;</span>                                 
        <span class="token constant">INSERT</span> <span class="token class-name">INTO</span> <span class="token function">emp</span><span class="token punctuation">(</span>ename<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>email<span class="token punctuation">,</span>did<span class="token punctuation">)</span>
        <span class="token function">VALUES</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>eName<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>emp<span class="token punctuation">.</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二种方法：使用ExecutorType.BATCH</strong></p><ul><li>Mybatis内置的ExecutorType有3种，默认为simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，在某些情况下不符合业务的需求。</li></ul><p>具体用法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//批量保存方法测试</span>
<span class="token annotation punctuation">@Test</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//可以执行批量操作的sqlSession</span>
    <span class="token class-name">SqlSession</span> openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//批量保存执行前时间</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mapper<span class="token punctuation">.</span><span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        openSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//批量保存执行后的时间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行时长&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//批量 预编译sql一次==》设置参数==》10000次==》执行1次   677</span>
        <span class="token comment">//非批量  （预编译=设置参数=执行 ）==》10000次   1121</span>

    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mapper和mapper.xml如下</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>   
    <span class="token comment">//批量保存员工</span>
    <span class="token class-name">Long</span> <span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">&quot;com.jourwon.mapper.EmployeeMapper&quot;</span>
     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>批量保存员工 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;addEmp&quot;</span><span class="token operator">&gt;</span>
        insert into <span class="token function">employee</span><span class="token punctuation">(</span>lastName<span class="token punctuation">,</span>email<span class="token punctuation">,</span>gender<span class="token punctuation">)</span>
        <span class="token function">values</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span>lastName<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>email<span class="token punctuation">}</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>gender<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-说说mybatis的一级、二级缓存" tabindex="-1"><a class="header-anchor" href="#_14-说说mybatis的一级、二级缓存" aria-hidden="true">#</a> 14. 说说Mybatis的一级、二级缓存？</h3><ol><li>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为SqlSession，各个SqlSession之间的缓存相互隔离，当 Session flush 或 close 之后，该 SqlSession 中的所有 Cache 就将清空，MyBatis默认打开一级缓存。</li></ol><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-54afb458-7dfc-4d48-9a90-4ad1a8739937.png" alt="Mybatis一级缓存" loading="lazy"></p><ol start="2"><li>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，可以在多个SqlSession之间共享，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置。</li></ol><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-8dae71da-ffd4-43f5-9ee9-258ea82d216b.png" alt="Mybatis二级缓存示意图" loading="lazy"></p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="_15-能说说mybatis的工作原理吗" tabindex="-1"><a class="header-anchor" href="#_15-能说说mybatis的工作原理吗" aria-hidden="true">#</a> 15. 能说说MyBatis的工作原理吗？</h3><p>我们已经大概知道了MyBatis的工作流程，按工作原理，可以分为两大步：<code>生成会话工厂</code>、<code>会话运行</code>。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-61ac17ef-9eee-48c0-9a2d-545e1d554b13.png" alt="MyBatis的工作流程" loading="lazy"></p><p>MyBatis是一个成熟的框架，篇幅限制，这里抓大放小，来看看它的主要工作流程。</p><blockquote><p><strong>构建会话工厂</strong></p></blockquote><p>构造会话工厂也可以分为两步：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-234a4d1b-2d44-4576-9954-26f56162750e.png" alt="构建会话工厂" loading="lazy"></p><ul><li>获取配置</li></ul><p>获取配置这一步经过了几步转化，最终由生成了一个配置类Configuration实例，这个配置类实例非常重要，主要作用包括：</p><ul><li>读取配置文件，包括基础配置文件和映射文件</li><li>初始化基础配置，比如MyBatis的别名，还有其它的一些重要的类对象，像插件、映射器、ObjectFactory等等</li><li>提供一个单例，作为会话工厂构建的重要参数</li><li>它的构建过程也会初始化一些环境变量，比如数据源</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">SqlSessionFactory</span> var5<span class="token punctuation">;</span>
      <span class="token comment">//省略异常处理</span>
          <span class="token comment">//xml配置构建器</span>
          <span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//通过转化的Configuration构建SqlSessionFactory</span>
          var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构建SqlSessionFactory</li></ul><p>SqlSessionFactory只是一个接口，构建出来的实际上是它的实现类的实例，一般我们用的都是它的实现类DefaultSqlSessionFactory，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>会话运行</strong></p></blockquote><p>会话运行是MyBatis最复杂的部分，它的运行离不开四大组件的配合：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-da477d50-209e-45b3-a003-6d63e674bd99.png" alt="MyBatis会话运行四大关键组件" loading="lazy"></p><ul><li>Executor（执行器）</li></ul><p>Executor起到了至关重要的作用，SqlSession只是一个门面，相当于客服，真正干活的是是Executor，就像是默默无闻的工程师。它提供了相应的查询和更新方法，以及事务方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Environment</span> environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//通过Configuration创建executor</span>
<span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>
var8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>StatementHandler（数据库会话器）</li></ul><p>StatementHandler，顾名思义，处理数据库会话的。我们以SimpleExecutor为例，看一下它的查询方法，先生成了一个StatementHandler实例，再拿这个handler去执行query。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span> var9<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stmt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        var9 <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> var9<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再以最常用的PreparedStatementHandler看一下它的query方法，其实在上面的<code>prepareStatement</code>已经对参数进行了预编译处理，到了这里，就直接执行sql，使用ResultHandler处理返回结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span>statement<span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ParameterHandler （参数处理器）</li></ul><p>PreparedStatementHandler里对sql进行了预编译处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里用的就是ParameterHandler，setParameters的作用就是设置预编译SQL语句的参数。</p><p>里面还会用到typeHandler类型处理器，对类型进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ParameterHandler</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> <span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>ResultSetHandler（结果处理器）</p><p>我们前面也看到了，最后的结果要通过ResultSetHandler来进行处理，handleResultSets这个方法就是用来包装结果集的。Mybatis为我们提供了一个DefaultResultSetHandler，通常都是用这个实现类去进行结果的处理的。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultSetHandler</span> <span class="token punctuation">{</span>
  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleCursorResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">handleOutputParameters</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会使用typeHandle处理类型，然后用ObjectFactory提供的规则组装对象，返回给调用者。</p><p>整体上总结一下会话运行：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-ebd0712a-1f62-4154-b391-2cb596634710.png" alt="会话运行的简单示意图" loading="lazy"></p><blockquote><p>我们最后把整个的工作流程串联起来，简单总结一下：</p></blockquote><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-dc142e94-8e7f-4ec6-a1f6-1d20669292ad.png" alt="MyBatis整体工作原理图" loading="lazy"></p><ol><li>读取 MyBatis 配置文件——mybatis-config.xml 、加载映射文件——映射文件即 SQL 映射文件，文件中配置了操作数据库的 SQL 语句。最后生成一个配置对象。</li><li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li><li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li><li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li><li>StatementHandler：数据库会话器，串联起参数映射的处理和运行结果映射的处理。</li><li>参数处理：对输入参数的类型进行处理，并预编译。</li><li>结果处理：对返回结果的类型进行处理，根据对象映射规则，返回相应的对象。</li></ol><h3 id="_16-mybatis的功能架构是什么样的" tabindex="-1"><a class="header-anchor" href="#_16-mybatis的功能架构是什么样的" aria-hidden="true">#</a> 16. MyBatis的功能架构是什么样的？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-c7b59a67-49f4-48f8-a25d-033daeea7e3e.png" alt="MyBatis功能架构" loading="lazy"></p><p>我们一般把Mybatis的功能架构分为三层：</p><ul><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li></ul><h3 id="_17-为什么mapper接口不需要实现类" tabindex="-1"><a class="header-anchor" href="#_17-为什么mapper接口不需要实现类" aria-hidden="true">#</a> 17. 为什么Mapper接口不需要实现类？</h3><p>四个字回答：<strong>动态代理</strong>，我们来看一下获取Mapper的过程：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-15e30a15-f34c-4aa4-b131-4ddc8620348e.png" alt="Mapper代理" loading="lazy"></p><ul><li>获取Mapper</li></ul><p>我们都知道定义的Mapper接口是没有实现类的，Mapper映射其实是通过<strong>动态代理</strong>实现的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>七拐八绕地进去看一下，发现获取Mapper的过程，需要先获取MapperProxyFactory——Mapper代理工厂。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MapperProxyFactory</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>knownMappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">&quot;Type &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot; is not known to the MapperRegistry.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">&quot;Error getting mapper instance. Cause: &quot;</span> <span class="token operator">+</span> var5<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MapperProxyFactory</li></ul><p>MapperProxyFactory的作用是生成MapperProxy（Mapper代理对象）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>
  ……
  <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到动态代理对接口的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。</p><ul><li>MapperProxy</li></ul><p>MapperProxy里，通常会生成一个MapperMethod对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cachedInvoker</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>var5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MapperMethod</li></ul><p>MapperMethod里的excute方法，会真正去执行sql。这里用到了命令模式，其实绕一圈，最终它还是通过SqlSession的实例去运行对象的sql。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
      <span class="token class-name">Object</span> param<span class="token punctuation">;</span>
      ……
      <span class="token keyword">case</span> <span class="token constant">SELECT</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
              result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
              result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">returnsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  result <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
         ……
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-mybatis都有哪些executor执行器" tabindex="-1"><a class="header-anchor" href="#_18-mybatis都有哪些executor执行器" aria-hidden="true">#</a> 18.Mybatis都有哪些Executor执行器？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-59340143-5155-4719-869e-304b5738b2f2.png" alt="Mybatis Executor类型" loading="lazy"></p><p>Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。</p><ul><li><strong>SimpleExecutor</strong>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li><strong>ReuseExecutor</strong>：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</li><li><strong>BatchExecutor</strong>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</li></ul><p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p><blockquote><p><strong>Mybatis中如何指定使用哪一种Executor执行器？</strong></p></blockquote><ul><li>在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如<code>SqlSession openSession(ExecutorType execType)</code>。</li><li>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。</li></ul><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><h3 id="_19-说说mybatis的插件运行原理-如何编写一个插件" tabindex="-1"><a class="header-anchor" href="#_19-说说mybatis的插件运行原理-如何编写一个插件" aria-hidden="true">#</a> 19. 说说Mybatis的插件运行原理，如何编写一个插件？</h3><blockquote><p><strong>插件的运行原理？</strong></p></blockquote><p>Mybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-00f2581b-5aae-441a-83f7-75641b3ba010.png" alt="MyBatis插件原理简图" loading="lazy"></p><p>Mybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类<code>Plugin</code>，实现了<code>InvocationHandler</code>接口。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-c487f77a-9b87-4d9b-9a49-5aa87401b5e8.png" alt="Plugin中调用插件方法" loading="lazy"></p><p>使用<code>Plugin</code>生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法。</p><blockquote><p><strong>如何编写一个插件？</strong></p></blockquote><p>我们自己编写MyBatis 插件，只需要实现拦截器接口 <code>Interceptor (org.apache.ibatis. plugin Interceptor ）</code>，在实现类中对拦截对象和方法进行处理。</p><ul><li>实现Mybatis的Interceptor接口并重写intercept()方法</li></ul><p>这里我们只是在目标对象执行目标方法的前后进行了打印；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> props<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span>
        <span class="token comment">// 如果不是它就会调用下个插件代理对象的invoke方法</span>
        <span class="token class-name">Object</span> obj<span class="token operator">=</span>invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后再给插件编写注解，确定要拦截的对象，要拦截的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>
        type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>  <span class="token comment">//确定要拦截的对象</span>
        method <span class="token operator">=</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span>        <span class="token comment">//确定要拦截的方法</span>
        args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>   <span class="token comment">//拦截方法的参数</span>
<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>
    <span class="token class-name">Properties</span> props<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span>
        <span class="token comment">// 如果不是它就会调用下个插件代理对象的invoke方法</span>
        <span class="token class-name">Object</span> obj<span class="token operator">=</span>invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最后，再MyBatis配置文件里面配置插件</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span>plugin interceptor<span class="token operator">=</span><span class="token string">&quot;xxx.MyPlugin&quot;</span><span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">&quot;dbType&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;mysql&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-mybatis是如何进行分页的-分页插件的原理是什么" tabindex="-1"><a class="header-anchor" href="#_20-mybatis是如何进行分页的-分页插件的原理是什么" aria-hidden="true">#</a> 20. MyBatis是如何进行分页的？分页插件的原理是什么？</h3><blockquote><p><strong>MyBatis是如何分页的？</strong></p></blockquote><p>MyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><blockquote><p><strong>分页插件的原理是什么？</strong></p></blockquote><ul><li>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法</li><li>在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li><li>举例：<code>select * from student</code>，拦截sql后重写为：<code>select t.* from (select * from student) t limit 0, 10</code></li></ul><p>可以看一下一个大概的MyBatis通用分页拦截器：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-0bcdca85-e127-44ff-92e0-368a3f089ec8.png" alt="Mybatis-通用分页拦截器" loading="lazy"></p><hr><p><em>没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟</em>。</p><p><strong>系列内容</strong>：</p>`,248),d={href:"https://tobebetterjavaer.com/sidebar/sanfene/javase.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://tobebetterjavaer.com/sidebar/sanfene/javathread.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://tobebetterjavaer.com/sidebar/sanfene/collection.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tobebetterjavaer.com/sidebar/sanfene/jvm.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://tobebetterjavaer.com/sidebar/sanfene/spring.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://tobebetterjavaer.com/sidebar/sanfene/redis.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://tobebetterjavaer.com/sidebar/sanfene/mybatis.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://tobebetterjavaer.com/sidebar/sanfene/mysql.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://tobebetterjavaer.com/sidebar/sanfene/os.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://tobebetterjavaer.com/sidebar/sanfene/network.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://tobebetterjavaer.com/sidebar/sanfene/rocketmq.html",target:"_blank",rel:"noopener noreferrer"},j=s("hr",null,null,-1),M={href:"https://mp.weixin.qq.com/s/en2RgcVx52Ql3tYGLfv3Kw",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s/O_5Id2o9IP4loPazJuiHng",target:"_blank",rel:"noopener noreferrer"};function _(B,E){const a=c("ExternalLinkIcon");return p(),o("div",null,[s("blockquote",null,[s("p",null,[n("图文详解 20 道MyBatis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：musk，戳"),s("a",r,[n("转载链接"),t(a)]),n("，作者：三分恶，戳"),s("a",u,[n("原文链接"),t(a)]),n("。")])]),k,s("ul",null,[s("li",null,[s("a",d,[n("面试逆袭 Java SE 篇👍"),t(a)])]),s("li",null,[s("a",m,[n("面试逆袭 Java 集合框架篇👍"),t(a)])]),s("li",null,[s("a",v,[n("面试逆袭 Java 并发编程篇👍"),t(a)])]),s("li",null,[s("a",b,[n("面试逆袭 JVM 篇👍"),t(a)])]),s("li",null,[s("a",g,[n("面试逆袭 Spring 篇👍"),t(a)])]),s("li",null,[s("a",y,[n("面试逆袭 Redis 篇👍"),t(a)])]),s("li",null,[s("a",h,[n("面试逆袭 MyBatis 篇👍"),t(a)])]),s("li",null,[s("a",q,[n("面试逆袭 MySQL 篇👍"),t(a)])]),s("li",null,[s("a",f,[n("面试逆袭操作系统篇👍"),t(a)])]),s("li",null,[s("a",S,[n("面试逆袭计算机网络篇👍"),t(a)])]),s("li",null,[s("a",w,[n("面试逆袭RocketMQ篇👍"),t(a)])])]),j,s("blockquote",null,[s("p",null,[n("图文详解 20 道MyBatis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：musk，戳"),s("a",M,[n("转载链接"),t(a)]),n("，作者：三分恶，戳"),s("a",x,[n("原文链接"),t(a)]),n("。")])])])}const P=e(i,[["render",_],["__file","mybatis.html.vue"]]);export{P as default};
