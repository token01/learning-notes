import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as t,a as n,d as p,f as o,r as c}from"./app.669b4984.js";const i={},l=o(`<h1 id="collection-arraylist-\u6E90\u7801\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#collection-arraylist-\u6E90\u7801\u89E3\u6790" aria-hidden="true">#</a> Collection - ArrayList \u6E90\u7801\u89E3\u6790</h1><h2 id="_1-\u6982\u8FF0" tabindex="-1"><a class="header-anchor" href="#_1-\u6982\u8FF0" aria-hidden="true">#</a> 1. \u6982\u8FF0</h2><p><em>ArrayList</em>\u5B9E\u73B0\u4E86<em>List</em>\u63A5\u53E3\uFF0C\u662F\u987A\u5E8F\u5BB9\u5668\uFF0C\u5373\u5143\u7D20\u5B58\u653E\u7684\u6570\u636E\u4E0E\u653E\u8FDB\u53BB\u7684\u987A\u5E8F\u76F8\u540C\uFF0C\u5141\u8BB8\u653E\u5165<code>null</code>\u5143\u7D20\uFF0C\u5E95\u5C42\u901A\u8FC7<strong>\u6570\u7EC4\u5B9E\u73B0</strong>\u3002\u9664\u8BE5\u7C7B\u672A\u5B9E\u73B0\u540C\u6B65\u5916\uFF0C\u5176\u4F59\u8DDF<em>Vector</em>\u5927\u81F4\u76F8\u540C\u3002\u6BCF\u4E2A<em>ArrayList</em>\u90FD\u6709\u4E00\u4E2A\u5BB9\u91CF(capacity)\uFF0C\u8868\u793A\u5E95\u5C42\u6570\u7EC4\u7684\u5B9E\u9645\u5927\u5C0F(\u9ED8\u8BA4capacity=10)\uFF0C\u5BB9\u5668\u5185\u5B58\u50A8\u5143\u7D20\u7684\u4E2A\u6570\u4E0D\u80FD\u591A\u4E8E\u5F53\u524D\u5BB9\u91CF\u3002\u5F53\u5411\u5BB9\u5668\u4E2D\u6DFB\u52A0\u5143\u7D20\u65F6\uFF0C\u5982\u679C\u5BB9\u91CF\u4E0D\u8DB3\uFF0C\u5BB9\u5668\u4F1A\u81EA\u52A8\u589E\u5927\u5E95\u5C42\u6570\u7EC4\u7684\u5927\u5C0F\u3002\u524D\u9762\u5DF2\u7ECF\u63D0\u8FC7\uFF0CJava\u6CDB\u578B\u53EA\u662F\u7F16\u8BD1\u5668\u63D0\u4F9B\u7684\u8BED\u6CD5\u7CD6\uFF0C\u6240\u4EE5\u8FD9\u91CC\u7684\u6570\u7EC4\u662F\u4E00\u4E2AObject\u6570\u7EC4\uFF0C\u4EE5\u4FBF\u80FD\u591F\u5BB9\u7EB3\u4EFB\u4F55\u7C7B\u578B\u7684\u5BF9\u8C61\u3002</p><p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/image-20220816193838698.png" alt="image-20220816193838698"></p><p>size(), isEmpty(), get(), set()\u65B9\u6CD5\u5747\u80FD\u5728\u5E38\u6570\u65F6\u95F4\u5185\u5B8C\u6210\uFF0Cadd()\u65B9\u6CD5\u7684\u65F6\u95F4\u5F00\u9500\u8DDF\u63D2\u5165\u4F4D\u7F6E\u6709\u5173\uFF0CaddAll()\u65B9\u6CD5\u7684\u65F6\u95F4\u5F00\u9500\u8DDF\u6DFB\u52A0\u5143\u7D20\u7684\u4E2A\u6570\u6210\u6B63\u6BD4\u3002\u5176\u4F59\u65B9\u6CD5\u5927\u90FD\u662F\u7EBF\u6027\u65F6\u95F4\u3002</p><p>\u4E3A\u8FFD\u6C42\u6548\u7387\uFF0CArrayList\u6CA1\u6709\u5B9E\u73B0\u540C\u6B65(synchronized)\uFF0C\u5982\u679C\u9700\u8981\u591A\u4E2A\u7EBF\u7A0B\u5E76\u53D1\u8BBF\u95EE\uFF0C\u7528\u6237\u53EF\u4EE5\u624B\u52A8\u540C\u6B65\uFF0C\u4E5F\u53EF\u4F7F\u7528Vector\u66FF\u4EE3\u3002</p><h2 id="_2-arraylist\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_2-arraylist\u7684\u5B9E\u73B0" aria-hidden="true">#</a> 2. ArrayList\u7684\u5B9E\u73B0</h2><h3 id="_2-1-\u5E95\u5C42\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_2-1-\u5E95\u5C42\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 2.1 \u5E95\u5C42\u6570\u636E\u7ED3\u6784</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>  	<span class="token comment">// Default initial capacity.</span>
		<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	
<span class="token doc-comment comment">/**
     * The array buffer into which the elements of the ArrayList are stored.
     * The capacity of the ArrayList is the length of this array buffer. Any
     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
     * will be expanded to DEFAULT_CAPACITY when the first element is added.
     */</span>
    <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span>

    <span class="token doc-comment comment">/**
     * The size of the ArrayList (the number of elements it contains).
     *
     * <span class="token keyword">@serial</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-\u6784\u9020\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_2-2-\u6784\u9020\u51FD\u6570" aria-hidden="true">#</a> 2.2 \u6784\u9020\u51FD\u6570</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     * Constructs an empty list with the specified initial capacity.
     *
     * <span class="token keyword">@param</span>  <span class="token parameter">initialCapacity</span>  the initial capacity of the list
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the specified initial capacity
     *         is negative
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal Capacity: &quot;</span><span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Constructs an empty list with an initial capacity of ten.
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Constructs a list containing the elements of the specified
     * collection, in the order they are returned by the collection&#39;s
     * iterator.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">c</span> the collection whose elements are to be placed into this list
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the specified collection is null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// replace with empty array.</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-\u81EA\u52A8\u6269\u5BB9" tabindex="-1"><a class="header-anchor" href="#_2-3-\u81EA\u52A8\u6269\u5BB9" aria-hidden="true">#</a> 2.3 \u81EA\u52A8\u6269\u5BB9</h3><p>\u6BCF\u5F53\u5411\u6570\u7EC4\u4E2D\u6DFB\u52A0\u5143\u7D20\u65F6\uFF0C\u90FD\u8981\u53BB\u68C0\u67E5\u6DFB\u52A0\u540E\u5143\u7D20\u7684\u4E2A\u6570\u662F\u5426\u4F1A\u8D85\u51FA\u5F53\u524D\u6570\u7EC4\u7684\u957F\u5EA6\uFF0C\u5982\u679C\u8D85\u51FA\uFF0C\u6570\u7EC4\u5C06\u4F1A\u8FDB\u884C\u6269\u5BB9\uFF0C\u4EE5\u6EE1\u8DB3\u6DFB\u52A0\u6570\u636E\u7684\u9700\u6C42\u3002\u6570\u7EC4\u6269\u5BB9\u901A\u8FC7\u4E00\u4E2A\u516C\u5F00\u7684\u65B9\u6CD5ensureCapacity(int minCapacity)\u6765\u5B9E\u73B0\u3002\u5728\u5B9E\u9645\u6DFB\u52A0\u5927\u91CF\u5143\u7D20\u524D\uFF0C\u6211\u4E5F\u53EF\u4EE5\u4F7F\u7528ensureCapacity\u6765\u624B\u52A8\u589E\u52A0ArrayList\u5B9E\u4F8B\u7684\u5BB9\u91CF\uFF0C\u4EE5\u51CF\u5C11\u9012\u589E\u5F0F\u518D\u5206\u914D\u7684\u6570\u91CF\u3002</p><p>\u6570\u7EC4\u8FDB\u884C\u6269\u5BB9\u65F6\uFF0C\u4F1A\u5C06\u8001\u6570\u7EC4\u4E2D\u7684\u5143\u7D20\u91CD\u65B0\u62F7\u8D1D\u4E00\u4EFD\u5230\u65B0\u7684\u6570\u7EC4\u4E2D\uFF0C<strong>\u6BCF\u6B21\u6570\u7EC4\u5BB9\u91CF\u7684\u589E\u957F\u5927\u7EA6\u662F\u5176\u539F\u5BB9\u91CF\u76841.5\u500D</strong>\u3002\u8FD9\u79CD\u64CD\u4F5C\u7684\u4EE3\u4EF7\u662F\u5F88\u9AD8\u7684\uFF0C\u56E0\u6B64\u5728\u5B9E\u9645\u4F7F\u7528\u65F6\uFF0C\u6211\u4EEC\u5E94\u8BE5\u5C3D\u91CF\u907F\u514D\u6570\u7EC4\u5BB9\u91CF\u7684\u6269\u5F20\u3002\u5F53\u6211\u4EEC\u53EF\u9884\u77E5\u8981\u4FDD\u5B58\u7684\u5143\u7D20\u7684\u591A\u5C11\u65F6\uFF0C\u8981\u5728\u6784\u9020ArrayList\u5B9E\u4F8B\u65F6\uFF0C\u5C31\u6307\u5B9A\u5176\u5BB9\u91CF\uFF0C\u4EE5\u907F\u514D\u6570\u7EC4\u6269\u5BB9\u7684\u53D1\u751F\u3002\u6216\u8005\u6839\u636E\u5B9E\u9645\u9700\u6C42\uFF0C\u901A\u8FC7\u8C03\u7528ensureCapacity\u65B9\u6CD5\u6765\u624B\u52A8\u589E\u52A0ArrayList\u5B9E\u4F8B\u7684\u5BB9\u91CF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Increases the capacity of this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">ArrayList</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> instance, if
     * necessary, to ensure that it can hold at least the number of elements
     * specified by the minimum capacity argument.
     *
     * <span class="token keyword">@param</span>   <span class="token parameter">minCapacity</span>   the desired minimum capacity
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> minExpand <span class="token operator">=</span> <span class="token punctuation">(</span>elementData <span class="token operator">!=</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span>
            <span class="token comment">// any size if not default element table</span>
            <span class="token operator">?</span> <span class="token number">0</span>
            <span class="token comment">// larger than default for default empty table. It&#39;s already</span>
            <span class="token comment">// supposed to be at default size.</span>
            <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> minExpand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            minCapacity <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token comment">// overflow-conscious code</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * The maximum size of array to allocate.
     * Some VMs reserve some header words in an array.
     * Attempts to allocate larger arrays may result in
     * OutOfMemoryError: Requested array size exceeds VM limit
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Increases the capacity to ensure that it can hold at least the
     * number of elements specified by the minimum capacity argument.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">minCapacity</span> the desired minimum capacity
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// overflow-conscious code</span>
        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>
        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">)</span> <span class="token operator">?</span>
            <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span>
            <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/image-20220816200234835.png" alt="image-20220816200234835"></p><h3 id="_2-4-add-addall" tabindex="-1"><a class="header-anchor" href="#_2-4-add-addall" aria-hidden="true">#</a> 2.4 add(), addAll()</h3><p>\u8DDFC++ \u7684<em>vector</em>\u4E0D\u540C\uFF0C<em>ArrayList</em>\u6CA1\u6709<code>push_back()</code>\u65B9\u6CD5\uFF0C\u5BF9\u5E94\u7684\u65B9\u6CD5\u662F<code>add(E e)</code>\uFF0C<em>ArrayList</em>\u4E5F\u6CA1\u6709<code>insert()</code>\u65B9\u6CD5\uFF0C\u5BF9\u5E94\u7684\u65B9\u6CD5\u662F<code>add(int index, E e)</code>\u3002\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u90FD\u662F\u5411\u5BB9\u5668\u4E2D\u6DFB\u52A0\u65B0\u5143\u7D20\uFF0C\u8FD9\u53EF\u80FD\u4F1A\u5BFC\u81F4<em>capacity</em>\u4E0D\u8DB3\uFF0C\u56E0\u6B64\u5728\u6DFB\u52A0\u5143\u7D20\u4E4B\u524D\uFF0C\u90FD\u9700\u8981\u8FDB\u884C\u5269\u4F59\u7A7A\u95F4\u68C0\u67E5\uFF0C\u5982\u679C\u9700\u8981\u5219\u81EA\u52A8\u6269\u5BB9\u3002\u6269\u5BB9\u64CD\u4F5C\u6700\u7EC8\u662F\u901A\u8FC7<code>grow()</code>\u65B9\u6CD5\u5B8C\u6210\u7684\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Appends the specified element to the end of this list.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> element to be appended to this list
     * <span class="token keyword">@return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> (as specified by <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Collection</span><span class="token punctuation">#</span><span class="token field">add</span></span><span class="token punctuation">}</span>)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>
        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> index at which the specified element is to be inserted
     * <span class="token keyword">@param</span> <span class="token parameter">element</span> element to be inserted
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IndexOutOfBoundsException</span></span> <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://abelsun-1256449468.cos.ap-beijing.myqcloud.com/image/image-20220816200607154.png" alt="image-20220816200607154"></p><p><code>add(int index, E e)</code>\u9700\u8981\u5148\u5BF9\u5143\u7D20\u8FDB\u884C\u79FB\u52A8\uFF0C\u7136\u540E\u5B8C\u6210\u63D2\u5165\u64CD\u4F5C\uFF0C\u4E5F\u5C31\u610F\u5473\u7740\u8BE5\u65B9\u6CD5\u6709\u7740\u7EBF\u6027\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u3002</p><p><code>addAll()</code>\u65B9\u6CD5\u80FD\u591F\u4E00\u6B21\u6DFB\u52A0\u591A\u4E2A\u5143\u7D20\uFF0C\u6839\u636E\u4F4D\u7F6E\u4E0D\u540C\u4E5F\u6709\u4E24\u4E2A\u7248\u672C\uFF0C\u4E00\u4E2A\u662F\u5728\u672B\u5C3E\u6DFB\u52A0\u7684<code>addAll(Collection&lt;? extends E&gt; c)</code>\u65B9\u6CD5\uFF0C\u4E00\u4E2A\u662F\u4ECE\u6307\u5B9A\u4F4D\u7F6E\u5F00\u59CB\u63D2\u5165\u7684<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>\u65B9\u6CD5\u3002\u8DDF<code>add()</code>\u65B9\u6CD5\u7C7B\u4F3C\uFF0C\u5728\u63D2\u5165\u4E4B\u524D\u4E5F\u9700\u8981\u8FDB\u884C\u7A7A\u95F4\u68C0\u67E5\uFF0C\u5982\u679C\u9700\u8981\u5219\u81EA\u52A8\u6269\u5BB9\uFF1B\u5982\u679C\u4ECE\u6307\u5B9A\u4F4D\u7F6E\u63D2\u5165\uFF0C\u4E5F\u4F1A\u5B58\u5728\u79FB\u52A8\u5143\u7D20\u7684\u60C5\u51B5\u3002 <code>addAll()</code>\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E0D\u4EC5\u8DDF\u63D2\u5165\u5143\u7D20\u7684\u591A\u5C11\u6709\u5173\uFF0C\u4E5F\u8DDF\u63D2\u5165\u7684\u4F4D\u7F6E\u76F8\u5173\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Appends all of the elements in the specified collection to the end of
     * this list, in the order that they are returned by the
     * specified collection&#39;s Iterator.  The behavior of this operation is
     * undefined if the specified collection is modified while the operation
     * is in progress.  (This implies that the behavior of this call is
     * undefined if the specified collection is this list, and this
     * list is nonempty.)
     *
     * <span class="token keyword">@param</span> <span class="token parameter">c</span> collection containing elements to be added to this list
     * <span class="token keyword">@return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> if this list changed as a result of the call
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the specified collection is null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>
        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Inserts all of the elements in the specified collection into this
     * list, starting at the specified position.  Shifts the element
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection&#39;s iterator.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> index at which to insert the first element from the
     *              specified collection
     * <span class="token keyword">@param</span> <span class="token parameter">c</span> collection containing elements to be added to this list
     * <span class="token keyword">@return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> if this list changed as a result of the call
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IndexOutOfBoundsException</span></span> <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the specified collection is null
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount</span>

        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>
                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>
        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-set" tabindex="-1"><a class="header-anchor" href="#_2-5-set" aria-hidden="true">#</a> 2.5 set()</h3><p>\u65E2\u7136\u5E95\u5C42\u662F\u4E00\u4E2A\u6570\u7EC4<em>ArrayList</em>\u7684<code>set()</code>\u65B9\u6CD5\u4E5F\u5C31\u53D8\u5F97\u975E\u5E38\u7B80\u5355\uFF0C\u76F4\u63A5\u5BF9\u6570\u7EC4\u7684\u6307\u5B9A\u4F4D\u7F6E\u8D4B\u503C\u5373\u53EF\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u4E0B\u6807\u8D8A\u754C\u68C0\u67E5</span>
    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token comment">//\u8D4B\u503C\u5230\u6307\u5B9A\u4F4D\u7F6E\uFF0C\u590D\u5236\u7684\u4EC5\u4EC5\u662F\u5F15\u7528</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-get" tabindex="-1"><a class="header-anchor" href="#_2-6-get" aria-hidden="true">#</a> 2.6 get()</h3><p><code>get()</code>\u65B9\u6CD5\u540C\u6837\u5F88\u7B80\u5355\uFF0C\u552F\u4E00\u8981\u6CE8\u610F\u7684\u662F\u7531\u4E8E\u5E95\u5C42\u6570\u7EC4\u662FObject[]\uFF0C\u5F97\u5230\u5143\u7D20\u540E\u9700\u8981\u8FDB\u884C\u7C7B\u578B\u8F6C\u6362\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//\u6CE8\u610F\u7C7B\u578B\u8F6C\u6362</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-remove" tabindex="-1"><a class="header-anchor" href="#_2-7-remove" aria-hidden="true">#</a> 2.7 remove()</h3><p><code>remove()</code>\u65B9\u6CD5\u4E5F\u6709\u4E24\u4E2A\u7248\u672C\uFF0C\u4E00\u4E2A\u662F<code>remove(int index)</code>\u5220\u9664\u6307\u5B9A\u4F4D\u7F6E\u7684\u5143\u7D20\uFF0C\u53E6\u4E00\u4E2A\u662F<code>remove(Object o)</code>\u5220\u9664\u7B2C\u4E00\u4E2A\u6EE1\u8DB3<code>o.equals(elementData[index])</code>\u7684\u5143\u7D20\u3002\u5220\u9664\u64CD\u4F5C\u662F<code>add()</code>\u64CD\u4F5C\u7684\u9006\u8FC7\u7A0B\uFF0C\u9700\u8981\u5C06\u5220\u9664\u70B9\u4E4B\u540E\u7684\u5143\u7D20\u5411\u524D\u79FB\u52A8\u4E00\u4E2A\u4F4D\u7F6E\u3002\u9700\u8981\u6CE8\u610F\u7684\u662F\u4E3A\u4E86\u8BA9GC\u8D77\u4F5C\u7528\uFF0C\u5FC5\u987B\u663E\u5F0F\u7684\u4E3A\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\u8D4B<code>null</code>\u503C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//\u6E05\u9664\u8BE5\u4F4D\u7F6E\u7684\u5F15\u7528\uFF0C\u8BA9GC\u8D77\u4F5C\u7528</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5173\u4E8EJava GC\u8FD9\u91CC\u9700\u8981\u7279\u522B\u8BF4\u660E\u4E00\u4E0B\uFF0C<strong>\u6709\u4E86\u5783\u573E\u6536\u96C6\u5668\u5E76\u4E0D\u610F\u5473\u7740\u4E00\u5B9A\u4E0D\u4F1A\u6709\u5185\u5B58\u6CC4\u6F0F</strong>\u3002\u5BF9\u8C61\u80FD\u5426\u88ABGC\u7684\u4F9D\u636E\u662F\u662F\u5426\u8FD8\u6709\u5F15\u7528\u6307\u5411\u5B83\uFF0C\u4E0A\u9762\u4EE3\u7801\u4E2D\u5982\u679C\u4E0D\u624B\u52A8\u8D4B<code>null</code>\u503C\uFF0C\u9664\u975E\u5BF9\u5E94\u7684\u4F4D\u7F6E\u88AB\u5176\u4ED6\u5143\u7D20\u8986\u76D6\uFF0C\u5426\u5219\u539F\u6765\u7684\u5BF9\u8C61\u5C31\u4E00\u76F4\u4E0D\u4F1A\u88AB\u56DE\u6536\u3002</p><h3 id="_2-8-trimtosize" tabindex="-1"><a class="header-anchor" href="#_2-8-trimtosize" aria-hidden="true">#</a> 2.8 trimToSize()</h3><p>ArrayList\u8FD8\u7ED9\u6211\u4EEC\u63D0\u4F9B\u4E86\u5C06\u5E95\u5C42\u6570\u7EC4\u7684\u5BB9\u91CF\u8C03\u6574\u4E3A\u5F53\u524D\u5217\u8868\u4FDD\u5B58\u7684\u5B9E\u9645\u5143\u7D20\u7684\u5927\u5C0F\u7684\u529F\u80FD\u3002\u5B83\u53EF\u4EE5\u901A\u8FC7trimToSize\u65B9\u6CD5\u6765\u5B9E\u73B0\u3002\u4EE3\u7801\u5982\u4E0B:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Trims the capacity of this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">ArrayList</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> instance to be the
     * list&#39;s current size.  An application can use this operation to minimize
     * the storage of an <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">ArrayList</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> instance.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            elementData <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token operator">?</span> <span class="token constant">EMPTY_ELEMENTDATA</span>
              <span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-indexof-lastindexof" tabindex="-1"><a class="header-anchor" href="#_2-9-indexof-lastindexof" aria-hidden="true">#</a> 2.9 indexOf(), lastIndexOf()</h3><p>\u83B7\u53D6\u5143\u7D20\u7684\u7B2C\u4E00\u6B21\u51FA\u73B0\u7684index:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the lowest index <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">i</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> such that
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token operator">?</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token operator">:</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java">o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span>,
     * or -1 if there is no such index.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u83B7\u53D6\u5143\u7D20\u7684\u6700\u540E\u4E00\u6B21\u51FA\u73B0\u7684index:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the highest index <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">i</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> such that
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token operator">?</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java"><span class="token operator">:</span></span><span class="token entity named-entity" title="\xA0">&amp;nbsp;</span><span class="token code language-java">o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span>,
     * or -1 if there is no such index.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-fail-fast\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#_2-10-fail-fast\u673A\u5236" aria-hidden="true">#</a> 2.10 Fail-Fast\u673A\u5236:</h3><p>ArrayList\u4E5F\u91C7\u7528\u4E86\u5FEB\u901F\u5931\u8D25\u7684\u673A\u5236\uFF0C\u901A\u8FC7\u8BB0\u5F55modCount\u53C2\u6570\u6765\u5B9E\u73B0\u3002\u5728\u9762\u5BF9\u5E76\u53D1\u7684\u4FEE\u6539\u65F6\uFF0C\u8FED\u4EE3\u5668\u5F88\u5FEB\u5C31\u4F1A\u5B8C\u5168\u5931\u8D25\uFF0C\u800C\u4E0D\u662F\u5192\u7740\u5728\u5C06\u6765\u67D0\u4E2A\u4E0D\u786E\u5B9A\u65F6\u95F4\u53D1\u751F\u4EFB\u610F\u4E0D\u786E\u5B9A\u884C\u4E3A\u7684\u98CE\u9669\u3002</p><h2 id="\u53C2\u8003\u6587\u7AE0" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u6587\u7AE0" aria-hidden="true">#</a> \u53C2\u8003\u6587\u7AE0</h2>`,44),u={href:"https://pdai.tech/md/java/collection/java-collection-ArrayList.html",target:"_blank",rel:"noopener noreferrer"},r=n("strong",null,"Collection - ArrayList \u6E90\u7801\u89E3\u6790",-1);function d(k,m){const s=c("ExternalLinkIcon");return e(),t("div",null,[l,n("p",null,[n("a",u,[r,p(s)])])])}const y=a(i,[["render",d],["__file","java-collection-ArrayList.html.vue"]]);export{y as default};
